/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/animation/Paragraph.js":
/*!************************************!*\
  !*** ./app/animation/Paragraph.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Paragraph)
/* harmony export */ });
/* harmony import */ var _classes_Animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Animation */ "./app/classes/Animation.js");
/* harmony import */ var _utils_splittext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/splittext */ "./app/utils/splittext.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");



class Paragraph extends _classes_Animation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    this.spans = this.element.querySelectorAll('span span');
  }
  animateIn() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      duration: 0.4,
      opacity: 1
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.spans, {
      delay: 0.5,
      duration: 1.6,
      stagger: 0.2,
      ease: 'expo.inOut',
      y: '0%',
      opacity: 1
    });
  }
  animateOut() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      opacity: 0
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.spans, {
      delay: 0.6,
      duration: 1.6,
      opacity: 0,
      ease: 'expo.inOut',
      stagger: 0.1,
      y: '100%'
    });
  }
}

/***/ }),

/***/ "./app/animation/Scale.js":
/*!********************************!*\
  !*** ./app/animation/Scale.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scale": () => (/* binding */ Scale)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Scale {
  constructor(element) {
    this.elements = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(element);
    this.init();
  }
  init() {
    this.eventListener();
  }
  scaleUp(e) {
    const element = e.currentTarget;
    element.style.transform = `scale(1)`;
  }
  scaleDown(e) {
    const element = e.currentTarget;
    element.style.transform = `scale(.8)`;
  }
  eventListener() {
    this.elements.forEach(element => {
      element.addEventListener('mousedown', this.scaleDown.bind(this));
      element.addEventListener('mouseup', this.scaleUp.bind(this));
    });
  }
}

/***/ }),

/***/ "./app/animation/Shapes.js":
/*!*********************************!*\
  !*** ./app/animation/Shapes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Shapes)
/* harmony export */ });
class Shapes {
  constructor({
    position,
    height,
    width,
    blur,
    background
  }) {
    this.top = position.top === -1 ? undefined : position.top;
    this.left = position.left === -1 ? undefined : position.left;
    this.right = position.right === -1 ? undefined : position.right;
    this.bottom = position.bottom === -1 ? undefined : position.bottom;
    this.height = height;
    this.width = width;
    this.blur = blur;
    this.background = background;
    this.windowWidth = window.innerWidth;
    this.init();
  }
  init() {
    this.createShape();
    this.onWindowResize();
    this.events();
  }
  createShape() {
    this.shapeFrame = document.createElement('DIV');
    this.shapeFrame.className = 'shapes';
    this.id = 'shapes';
    this.testBreakpoint();
    // style
    this.shapeFrame.style.borderRadius = this.height[2] + 'px';
    this.shapeFrame.style.backgroundColor = this.background;
    // this.shapeFrame.style.transition = 'all 8s'
    this.shapeFrame.style.position = 'absolute';

    // set shape position
    this.shapeFrame.style.top = this.top + 'px';
    this.shapeFrame.style.left = this.left + 'px';
    this.shapeFrame.style.right = this.right + 'px';
    this.shapeFrame.style.bottom = this.bottom + 'px';
  }
  animshapes(animationArr) {
    let index = 0;
    let animFlow = null;
    setInterval(() => {
      if (index >= animationArr.length) index = 0;
      animFlow = animationArr[index];
      this.shapeFrame.style.top = animFlow.to.top + 'px';
      this.shapeFrame.style.left = animFlow.to.left + 'px';
      this.shapeFrame.style.bottom = animFlow.to.bottom + 'px';
      this.shapeFrame.style.right = animFlow.to.right + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur}px)`;
      index++;
    }, 4000);
  }
  mountShape(parent) {
    parent.append(this.shapeFrame);
  }
  onWindowResize() {
    this.windowWidth = window.innerWidth;
    this.testBreakpoint();
  }
  testBreakpoint() {
    if (this.windowWidth >= 640 && this.windowWidth < 1024) {
      this.shapeFrame.style.height = this.height[1] + 'px';
      this.shapeFrame.style.width = this.width[1] + 'px';
    } else if (this.windowWidth >= 1024) {
      this.shapeFrame.style.height = this.height[2] + 'px';
      this.shapeFrame.style.width = this.width[2] + 'px';
    } else {
      this.shapeFrame.style.height = this.height[0] + 'px';
      this.shapeFrame.style.width = this.width[0] + 'px';
    }
  }
  events() {
    addEventListener('resize', this.onWindowResize.bind(this));
  }
}

/***/ }),

/***/ "./app/animation/Title.js":
/*!********************************!*\
  !*** ./app/animation/Title.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Title)
/* harmony export */ });
/* harmony import */ var _classes_Animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Animation */ "./app/classes/Animation.js");
/* harmony import */ var _utils_splittext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/splittext */ "./app/utils/splittext.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");



class Title extends _classes_Animation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    this.spans = this.element.querySelectorAll('span span');
  }
  animateIn() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      duration: 0.4,
      opacity: 1
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.spans, {
      delay: 0.5,
      duration: 1.6,
      stagger: 0.3,
      ease: 'expo.inOut',
      y: '0%',
      opacity: 1
    });
  }
  animateOut() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      opacity: 0
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.spans, {
      delay: 0,
      duration: 1,
      opacity: 0,
      ease: 'expo.inOut',
      stagger: 0.1,
      y: '100%'
    });
  }
}

/***/ }),

/***/ "./app/animation/canvas.js":
/*!*********************************!*\
  !*** ./app/animation/canvas.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _Shapes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shapes */ "./app/animation/Shapes.js");



class Canvas extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.isMounted = false;
    this.shapeGradient = '#00FF47';
    this.blur = 200;
    this.init();
  }
  init() {
    this.mountFrame();
    if (!this.isMounted) return;
    const shape1 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -100,
        right: -1,
        left: -100,
        bottom: -1
      },
      height: [280, 380, 480],
      width: [280, 380, 480],
      background: this.shapeGradient
    });
    const shape2 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -1,
        right: -100,
        left: -1,
        bottom: -100
      },
      height: [280, 380, 480],
      width: [280, 380, 480],
      background: this.shapeGradient
    });
    shape1.mountShape((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame'));
    shape2.mountShape((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame'));
  }
  createFrame() {
    this.frame = document.createElement('DIV');
    this.frame.className = 'frame';
    this.frame.style.position = 'fixed';
    this.frame.style.top = 0;
    this.frame.style.left = 0;
    this.frame.style.width = `${window.innerWidth}px`;
    this.frame.style.height = `${window.innerHeight}px`;
    this.frame.style.filter = `blur(${this.blur}px)`;
    this.frame.style.zIndex = '-1';
    this.frame.id = 'frame';
  }
  mountFrame() {
    this.createFrame();
    document.body.append(this.frame);
    this.eventListener();
    this.isMounted = true;
  }
  onResize(e) {
    e.preventDefault();
    this.mountedFrame = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame');
    this.mountedFrame.style.width = `${window.innerWidth}px`;
    this.mountedFrame.style.height = `${window.innerHeight}px`;
  }
  eventListener() {
    window.addEventListener('resize', this.onResize.bind(this));
  }
}

/***/ }),

/***/ "./app/classes/Animation.js":
/*!**********************************!*\
  !*** ./app/classes/Animation.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Animation)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components */ "./app/classes/Components.js");

class Animation extends _Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    this.createObserver();
  }
  createObserver() {
    this.observer = new window.IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.animateIn();
        } else {
          this.animateOut();
        }
      });
    });
    this.observer.observe(this.element);
  }
}

/***/ }),

/***/ "./app/classes/Components.js":
/*!***********************************!*\
  !*** ./app/classes/Components.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Components)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements */ "./app/classes/elements.js");


class Components extends (events__WEBPACK_IMPORTED_MODULE_0___default()) {
  constructor(componentName) {
    super();
    this.selectorChildrens = _elements__WEBPACK_IMPORTED_MODULE_1__["default"][componentName];
    this.root = this.handleElementObject(_elements__WEBPACK_IMPORTED_MODULE_1__["default"]);
    this.elements = this.getElements(this.selectorChildrens);
  }
  getElements(childrens) {
    const elements = {};
    for (const keys in childrens) {
      const value = childrens[keys];
      if (value instanceof Object) {
        elements[keys] = this.handleElementObject(value);
      } else {
        elements[keys] = [...document.querySelectorAll(value)];
        if (elements[keys].length === 0) {
          elements[keys] = null;
        } else if (elements[keys].length === 1) {
          elements[keys] = document.querySelector(value);
        }
      }
    }
    return elements;
  }
  handleElementObject(object) {
    let buildedObjects = {};
    for (const key in object) {
      const value = object[key];
      if (value instanceof Object) {
        buildedObjects[key] = this.handleElementObject(value);
      } else {
        buildedObjects[key] = [...document.querySelectorAll(value)];
        if (buildedObjects[key].length === 0) {
          buildedObjects[key] = null;
        } else if (buildedObjects[key].length === 1) {
          buildedObjects[key] = document.querySelector(value);
        }
      }
    }
    return buildedObjects;
  }
}

/***/ }),

/***/ "./app/classes/Pages.js":
/*!******************************!*\
  !*** ./app/classes/Pages.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pages)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _animation_Title__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../animation/Title */ "./app/animation/Title.js");
/* harmony import */ var _animation_Paragraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../animation/Paragraph */ "./app/animation/Paragraph.js");
/* harmony import */ var _animation_Scale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../animation/Scale */ "./app/animation/Scale.js");

//import Smoothscroll from '../utils/Smoothscroll'




//import { ResizeObserver } from 'resize-observer'

class Pages {
  constructor(elements) {
    this.element = elements;
    this.animateOut = gsap__WEBPACK_IMPORTED_MODULE_5__["default"].timeline();
    this.device = {
      mobile: /mobile/i.test(navigator.userAgent),
      tablet: !/ipad|tablet/i.test(navigator.userAgent)
    };
    this.wrapper = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper');
  }
  init() {
    this.scaleAnimation = new _animation_Scale__WEBPACK_IMPORTED_MODULE_4__.Scale("[data-animation='scale']");
    document.body.style.overflow = 'visible';
    document.body.style.position = 'relative';
    //  if (this.device.mobile && this.device.tablet) {
    //    document.body.style.overflow = 'visible'
    //    document.body.style.position = 'relative'
    //  } else {
    //    this.wrapper.onload = () => {
    //      console.log(this.wrapper.getBoundingClientRect())
    //    }
    //    this.smootscroll = new Smoothscroll(this.wrapper, {
    //      direction: 'v',
    //      smooth: 0.1,
    //    })
    //  }
  }

  create() {
    console.log((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper').getBoundingClientRect());
    // this.smootscroll.update()
  }

  createAnimation() {
    this.elements = new _Components__WEBPACK_IMPORTED_MODULE_0__["default"](this.element).elements;
    if (this.elements && this.elements.titles && this.elements.paragraphes) {
      this.elements.titles.forEach(t => {
        new _animation_Title__WEBPACK_IMPORTED_MODULE_2__["default"](t);
      });
      this.elements.paragraphes.forEach(p => {
        new _animation_Paragraph__WEBPACK_IMPORTED_MODULE_3__["default"](p);
      });
    }
  }
  show() {
    this.createAnimation();
    this.animateOut.to((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper'), {
      duration: 2,
      ease: 'power1.out',
      autoAlpha: 1,
      onComplete: () => {
        console.log('page was shown');
      }
    });
  }
  hide() {
    console.log('hidden current page');
    this.animateOut.to((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper'), {
      duration: 1,
      ease: 'power1.in',
      autoAlpha: 0,
      onComplete: () => {
        console.log('page was hide');
      }
    });
  }
}

/***/ }),

/***/ "./app/classes/elements.js":
/*!*********************************!*\
  !*** ./app/classes/elements.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  preloader: {
    element: '.preloader',
    text: '.preloader__text__item',
    container: '.preloader__text',
    loader: '.preloader__loader__bar',
    wrapper: '.preloader__text__wrapper'
  },
  navigation: {
    header: '.header',
    navList: '.menu__links__item',
    previewImg: '.menu__links__media__image',
    content: '.menu__content',
    openMenu: '.button-open',
    closeMenu: '.button-close'
  },
  player: {
    button: {
      expand: '.player__button.expand',
      close: '.player__button.close',
      play: "[data-icon='rob-play']",
      next: "[data-icon='rob-forward']",
      prev: "[data-icon='rob-backward']",
      toggler: '.player__cta'
    },
    coverContainer: '.player__cover',
    cover: '.player__cover img',
    self: '.player',
    media: '.player__media',
    artist: '.player__detail__name',
    title: '.player__detail__title',
    timer: {
      startTime: '.player__timer__times__starttime',
      endTime: '.player__timer__times__endtime',
      range: '.player__timer__progress__range',
      progress: '.player__timer__progress__bar',
      preload: '.player__timer__progress__elapse'
    },
    volume: {
      grapper: '.player__volume__grap',
      slider: '.player__volume__slider',
      container: '.player__volume__wrapper'
    }
  },
  form: {
    connect: {
      form: '.connect__form',
      button: '.connect__form .button',
      name: '.input__name',
      mail: '.input__email',
      message: '#message',
      nameAlert: '.connect__form .input__alert-name',
      emailAlert: '.connect__form .input__alert-email',
      messageAlert: '.connect__form .input__alert-message',
      alert: '.connect__form .input__alert'
    },
    modal: {
      form: '.modal__form',
      button: '.modal__submit__button',
      name: '.usersProjectsName',
      mail: '.usersProjectsEmail',
      message: '.usersProjectsIdea',
      nameAlert: '.modal__form__wrapper .input__alert-name',
      emailAlert: '.modal__form__wrapper .input__alert-email',
      messageAlert: '.modal__form__wrapper .input__alert-message',
      alert: '.modal__form__wrapper .input__alert',
      dataServiceInput: '.modal__data-services'
    },
    alert: '.alert'
  },
  slider: {
    button: {
      prev: '#rb-slider-button-prev',
      next: '#rb-slider-button-next'
    },
    wrapper: '.rb-slider-wrapper',
    items: '.rb-slider-items',
    container: '.rb-slider'
  },
  services: {
    buttons: '.services__cta'
  },
  modal: {
    self: '.modal',
    dataServiceInput: '.modal__data-services',
    button: '.modal__button button'
  },
  images: 'img',
  about: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  },
  home: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  },
  project: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  }
});

/***/ }),

/***/ "./app/components/Alert.js":
/*!*********************************!*\
  !*** ./app/components/Alert.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Alert)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Alert {
  constructor(message, type) {
    this.message = message;
    this.type = type;
    this.init();
  }
  init() {
    this.create();
    this.self = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$)('.alert');
  }
  create() {
    this.div = document.createElement('DIV');
    this.div.className = 'alert';
    if (this.type === 'success') this.div.classList.add('alert__success');else this.div.classList.add('alert__error');

    // Create alert__wrapper
    const wrapper = createElement('DIV', 'alert__wrapper');
    // content
    const content = createElement('DIV', 'alert__content');
    // icons
    const icon = createElement('SPAN', 'alert__icon');
    // Message
    const message = createElement('P', 'alert__message');
    message.innerText = this.message;
    // Close icon
    const closeIcon = createElement('SPAN', 'alert__closeIcon');
    const i = createElement('I', 'rob-close');
    closeIcon.append(i);
    closeIcon.onclick = () => {
      this.hide();
      this.destroy();
    };

    // appned child
    content.append(icon, message);
    wrapper.append(content, closeIcon);
    this.div.append(wrapper);
    document.body.prepend(this.div);
    this.self = this.div;
    this.hide();
    function createElement(tag, className) {
      const element = document.createElement(tag);
      element.className = className;
      return element;
    }
  }
  show() {
    setTimeout(() => {
      this.self.style.right = '.5rem';
    }, 1000);
  }
  hide() {
    this.self.style.right = '-100%';
    this.self.transition = 'right .6s';
  }
  destroy() {
    document.body.removeChild(this.div);
  }
}

/***/ }),

/***/ "./app/components/Navigation.js":
/*!**************************************!*\
  !*** ./app/components/Navigation.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Navigation)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");


class Navigation extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('navigation');
    this.init();
    this.eventsListener();
  }
  init() {
    const defaultSource = 'images/previews/img-1';
    this.root.navigation.previewImg.src = `${defaultSource}.png`;
    this.setActiveLinkStyles();
  }
  setActiveLinkStyles() {
    const links = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('[data-links]');
    const url = window.location.href;
    let parent;
    links.forEach(link => {
      if (link.href === url) {
        parent = link.parentNode;
        parent.classList.add('menu__links__item-active');
      }
    });
  }
  onMouseHoverLinks(e) {
    const src = e.currentTarget.getAttribute('data-snap-image');
    this.root.navigation.previewImg.src = `${src}.png`;
  }
  openMenu(e) {
    e.preventDefault();
    this.root.navigation.content.classList.add('menu__content-visible');
  }
  closeMenu(e) {
    e.preventDefault();
    this.root.navigation.content.classList.remove('menu__content-visible');
  }
  eventsListener() {
    /*this.root.navigation.navList.forEach((link) => {
      link.addEventListener('mouseover', this.onMouseHoverLinks.bind(this))
    })*/

    this.root.navigation.openMenu.addEventListener('click', this.openMenu.bind(this));
    this.root.navigation.closeMenu.addEventListener('click', this.closeMenu.bind(this));
  }
}

/***/ }),

/***/ "./app/components/Preloader.js":
/*!*************************************!*\
  !*** ./app/components/Preloader.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Preloader)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! imagesloaded */ "./node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_1__);


//import autoBind from 'auto-bind'

class Preloader extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('preloader');
    this.length = 0;
    this.startIndex = 1;
    this.size = {
      height: Number(this.elements.text[0].getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.createPreloader();
    this.addEventListener();
  }
  createPreloader() {
    if (this.root.images) {
      const imgLoad = imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(document.body);
      imgLoad.on('progress', () => {
        this.onProgress(imgLoad.images.length);
      });
      imgLoad.on('done', () => {
        //   setTimeout(() => {
        //     this.onLoad()
        //   }, 5000)
        this.onLoad();
      });
    }
  }
  animPreloaderText(e) {
    e.preventDefault();
    const length = this.elements.wrapper.children.length;

    //Give the wrapper the height of the text
    this.elements.container.style.height = `${this.size.height}px`;
    this.elements.container.style.width = `${this.size.width}px`;
    window.setInterval(() => {
      if (this.startIndex < length) {
        this.elements.wrapper.style.top = `${(-this.size.height - this.size.gap) * this.startIndex}px`;
        this.startIndex++;
      }
    }, 1000);
  }
  onProgress(length) {
    this.length += 1;
    const percent = this.length / length;
    this.elements.loader.style.width = `${Math.round(percent * 100)}%`;
  }
  onLoad() {
    this.emit('completed');
  }
  onResize(e) {
    this.size = {
      height: Number(this.elements.text[0].getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.animPreloaderText(e);
  }
  addEventListener() {
    window.addEventListener('DOMContentLoaded', this.animPreloaderText.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }
  destroy() {
    this.elements.element.parentNode.removeChild(this.elements.element);
  }
}

/***/ }),

/***/ "./app/components/Services.js":
/*!************************************!*\
  !*** ./app/components/Services.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Services)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");

class Services extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('services');
    this.init();
  }
  init() {
    this.buttons = [...this.elements.buttons];
    this.eventListener();
  }
  onClick(e) {
    e.preventDefault();
    const button = e.currentTarget;
    this.type = button.getAttribute('data-service');
    console.log(button);
    this.root.modal.dataServiceInput.value = this.type;
    this.root.modal.self.classList.add('modal-visible');
  }
  closeModal(e) {
    e.preventDefault();
    if (this.root.modal.self.classList.contains('modal-visible')) {
      this.root.modal.self.classList.remove('modal-visible');
    }
  }
  eventListener() {
    this.buttons.forEach(button => {
      button.addEventListener('click', this.onClick.bind(this));
    });
    this.root.modal.button.addEventListener('click', this.closeModal.bind(this));
  }
}

/***/ }),

/***/ "./app/components/Tabs.js":
/*!********************************!*\
  !*** ./app/components/Tabs.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Tabs {
  __defaults = {
    defaultIndex: 0
  };
  __selectors = {
    list: {
      container: '.tabs__list',
      childrens: '.tabs__items',
      buttons: '.tabs__item'
    },
    panels: {
      container: '.tabs__panels',
      childrens: '.tabs__panel'
    }
  };
  __state = {
    active: 'active',
    selected: 'selected'
  };
  __attribubes = {
    button: 'data-tabs-index',
    panel: 'data-tabs-panel',
    buttonState: 'data-tabs-index-active',
    pannelState: 'data-tabs-panel-active'
  };
  constructor({
    defaultIndex
  }) {
    this.props = Object.assign({
      defaultIndex
    }, this.__defaults);
    this.buttons = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(`${this.__selectors.list.buttons}`);
    this.panels = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(`${this.__selectors.panels.childrens}`);
    this.init();
    this.setIndex();
    this.eventsListeners();
  }
  init() {
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, true);
    this.buttons[this.props.defaultIndex].classList.add('tabs__item-style-active');
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, true);
    this.panels[this.props.defaultIndex].classList.add('tabs__panel-active');
  }
  setIndex() {
    this.buttons.forEach((button, index) => {
      button.setAttribute(this.__attribubes.button, index);
      button.setAttribute(this.__attribubes.buttonState, false);
    });
    this.panels.forEach((panel, index) => {
      panel.setAttribute(this.__attribubes.panel, index);
      panel.setAttribute(this.__attribubes.pannelState, false);
    });
  }
  onClick(e) {
    e.preventDefault();
    const target = e.currentTarget;
    const index = target.getAttribute(this.__attribubes.button);

    //unset previous active element
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, false);
    this.buttons[this.props.defaultIndex].classList.remove('tabs__item-style-active');
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, false);
    this.panels[this.props.defaultIndex].classList.remove('tabs__panel-active');
    this.props.defaultIndex = index;

    //active current  button and tabs
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, true);
    this.panels[this.props.defaultIndex].classList.add('tabs__panel-active');
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, true);
    this.buttons[this.props.defaultIndex].classList.add('tabs__item-style-active');
  }
  eventsListeners() {
    this.buttons.forEach(button => {
      button.addEventListener('click', this.onClick.bind(this));
    });
  }
}

/***/ }),

/***/ "./app/components/slider/Slider.js":
/*!*****************************************!*\
  !*** ./app/components/slider/Slider.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Slider)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Components */ "./app/classes/Components.js");

class Slider extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('slider');
    this.init();
  }
  init() {
    if (!this.elements.items) return;
    this.child = [...this.elements.items.children];
    this.index = 1;
    this.padding = 24;
    this.currentPosition = 0;
    this.treshold = 0;
    this.dragIntervall = 80;
    this.setChildWidth();
    this.setPosition();
    this.eventListener();
  }
  setChildWidth() {
    this.child.forEach(item => {
      item.style.flex = 'none';
      item.style.width = `${window.innerWidth * 0.8}px`;
    });
  }
  setPosition() {
    this.width = this.elements.items.getBoundingClientRect().width;
    this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
    this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    return this.currentPosition;
  }
  next() {
    if (this.index >= this.child.length - 1) return;
    this.index++;
    if (this.index === 2) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.currentPosition - this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }
  prev() {
    if (this.index <= 0) {
      this.index = 0;
      return;
    }
    this.index--;
    if (this.index === 0) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }
  onMouseDown(e) {
    e.preventDefault();
    this.elements.wrapper.style.cursor = 'grabbing';
    this.isDown = true;
    this.dragStart = e.x;
    this.dragStarty = e.y;
  }
  onMouseMove(e) {
    e.preventDefault();
    if (!this.isDown) return;
    this.treshold = e.x - this.dragStart;
    this.elements.items.style.transform = `translate3D(${this.currentPosition + this.treshold}px, 0, 0)`;
  }
  onMouseUp(e) {
    e.preventDefault();
    this.elements.wrapper.style.cursor = 'grab';
    if (this.treshold > 0 && this.treshold >= this.dragIntervall) {
      this.prev();
      console.log('prev');
    } else if (this.treshold < 0 && this.treshold <= -this.dragIntervall) {
      this.next();
      console.log('next');
    } else {
      this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    }
    this.isDown = false;
  }
  onWindowResize(e) {
    e.preventDefault();
    this.setChildWidth();
    this.setPosition();
  }
  eventListener() {
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
    this.elements.wrapper.addEventListener('mousedown', this.onMouseDown.bind(this));
    this.elements.wrapper.addEventListener('mouseover', this.onMouseMove.bind(this));
    this.elements.wrapper.addEventListener('mouseup', this.onMouseUp.bind(this));
    addEventListener('resize', this.onWindowResize.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/MediaManager.js":
/*!*************************************************************!*\
  !*** ./app/components/widgets/music-player/MediaManager.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MediaManager)
/* harmony export */ });
// eslint-disable-next-line no-undef
const data = __webpack_require__(/*! ../../../../datas/sounds.json */ "./datas/sounds.json");
class MediaManager {
  constructor() {
    this.data = data;
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/Timer.js":
/*!******************************************************!*\
  !*** ./app/components/widgets/music-player/Timer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Timer)
/* harmony export */ });
class Timer {
  constructor(starttime, endtime, range, progress, preloader, media) {
    this.elements = {
      starttime,
      endtime,
      range,
      preloader,
      progress
    };
    this.media = media;
    this.#init();
  }
  #init() {
    this.#addEventListener();
  }
  #isPlay() {
    console.log(this.media.currentTime);
    console.log('is start play');
  }
  #onPause() {
    console.log('Pause');
  }
  isEnded(cb) {
    cb();
  }
  #setTime() {
    this.hours = Math.floor(this.media.currentTime / 3600);
    this.minutes = Math.floor(this.media.currentTime / 60);
    this.seconds = Math.floor(this.media.currentTime - this.minutes * 60);
    this.hoursValue = this.minutesValue = this.secondsValue = 0;
    if (this.hours <= 0) {
      this.hoursValue = `0${this.hours}`;
    } else {
      this.hoursValue = this.hours;
    }
    if (this.minutes < 10) {
      this.minutesValue = `0${this.minutes}`;
    } else {
      this.minutesValue = this.minutes;
    }
    if (this.seconds < 10) {
      this.secondsValue = `0${this.seconds}`;
    } else {
      this.secondsValue = this.seconds;
    }
    this.elements.starttime.textContent = `${this.minutesValue} : ${this.secondsValue}`;
    this.#updateProgress();
  }
  #updateProgress() {
    this.elements.range.value = this.media.currentTime;
    this.ratio = this.elements.range.value / this.elements.range.max;
    this.elements.progress.style.width = `${this.ratio * 100}%`;
  }
  #setFullTime() {
    const hours = Math.floor(this.media.duration / 3600);
    const minutes = Math.floor(this.media.duration / 60);
    const seconds = Math.floor(this.media.duration - minutes * 60);
    if (hours <= 0) {
      this.elements.endtime.textContent = `${minutes} : ${seconds}`;
    } else {
      this.elements.endtime.textContent = `${hours}:${minutes}:${seconds}`;
    }
  }
  #onTimeChange() {
    this.media.currentTime = this.elements.range.value;
    this.#setTime();
  }
  #progress() {
    const duration = this.media.duration;
    if (duration > 0) {
      for (let i = 0; i < this.media.buffered.length; i++) {
        if (this.media.buffered.start(this.media.buffered.length - 1 - i) < this.media.currentTime) {
          console.log(this.media.buffered.end(this.media.buffered.length - 1 - i / duration) * 100);
          this.elements.preloader.style.width = this.media.buffered.end(this.media.buffered.length - 1 - i) / duration * 100 + '%';
          break;
        }
      }
    }
  }
  #metaDataLoaded() {
    this.#setFullTime();
    this.elements.range.max = Math.floor(this.media.duration);
    this.elements.range.addEventListener('input', this.#onTimeChange.bind(this));
    this.media.addEventListener('play', this.#isPlay.bind(this));
    this.media.addEventListener('pause', this.#onPause.bind(this));
    this.media.addEventListener('ended', this.isEnded.bind(this));
    this.media.addEventListener('timeupdate', this.#setTime.bind(this));
  }
  #addEventListener() {
    this.media.addEventListener('progress', this.#progress.bind(this));
    this.media.addEventListener('loadedmetadata', this.#metaDataLoaded.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/player.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/player.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Player)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _MediaManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MediaManager */ "./app/components/widgets/music-player/MediaManager.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Timer */ "./app/components/widgets/music-player/Timer.js");
/* harmony import */ var _volume__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./volume */ "./app/components/widgets/music-player/volume.js");




class Player extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('player');
    this.init();
  }
  init() {
    this.isExpand = false;
    this.src = this.elements.media.getAttribute('src');
    this.media = this.elements.media;
    this.length = 0;
    this.randomId = 0;
    this.sound = null;
    this.icon = this.elements.button.play.querySelector('i');
    this.mediaManager = new _MediaManager__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = this.mediaManager.data.length;
    this.randomId = Math.floor(Math.random() * this.length);
    this.componentsHandler(this.randomId);
    this.eventsListerner();
  }
  expand() {
    if (this.root.player.coverContainer.classList.contains('isExpand')) {
      this.root.player.button.expand.querySelector('span').textContent = 'Expand';
      this.root.player.coverContainer.classList.remove('isExpand');
      this.root.player.coverContainer.style.height = '0px';
    } else {
      this.root.player.coverContainer.classList.add('isExpand');
      this.root.player.button.expand.querySelector('span').textContent = 'Reduce';
      this.root.player.coverContainer.style.height = '180px';
    }
  }
  close() {
    this.elements.self.classList.add('isHidden');
    this.elements.button.toggler.style.display = 'flex';
  }
  show() {
    this.elements.self.classList.remove('isHidden');
    this.elements.button.toggler.style.display = 'none';
  }
  componentsHandler(id) {
    this.sound = this.mediaManager.data[id];
    this.media.src = this.sound.link;
    this.setComponents(this.sound);
    this.timerHandler(this.media);
  }
  setComponents(sound) {
    this.coverHandler(sound);
    this.volumeHandler(this.media);
    this.setSoundDetails(sound);
  }
  coverHandler(sound) {
    this.elements.cover.src = sound.album.cover;
  }
  setSoundDetails(sound) {
    this.elements.artist.innerText = sound.artist.name;
    this.elements.title.innerText = sound.title;
  }
  play() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.play();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
      this.media.pause();
    }
  }
  pause() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.pause();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
    }
  }
  stop() {
    this.media.pause();
    this.media.currentTime = 0;
    this.elements.button.play.setAttribute('data-icon', 'rob-play');
    this.icon.setAttribute('class', 'rob-play');
  }
  next() {
    this.randomId++;
    if (this.randomId > this.length - 1) this.randomId = 0;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }
  prev() {
    this.randomId--;
    if (this.randomId < 0) this.randomId = this.length - 1;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }
  timerHandler(media) {
    this.time = new _Timer__WEBPACK_IMPORTED_MODULE_2__["default"](this.elements.timer.startTime, this.elements.timer.endTime, this.elements.timer.range, this.elements.timer.progress, this.elements.timer.preload, media);
  }
  volumeHandler(sound) {
    this.volume = new _volume__WEBPACK_IMPORTED_MODULE_3__["default"](this.elements.volume.container, this.elements.volume.grapper, this.elements.volume.slider, sound);
  }
  eventsListerner() {
    this.elements.button.expand.addEventListener('click', this.expand.bind(this));
    this.elements.button.close.addEventListener('click', this.close.bind(this));
    // Control
    this.elements.button.play.addEventListener('click', this.play.bind(this));
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
    this.elements.button.toggler.addEventListener('click', this.show.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/volume.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/volume.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Volume)
/* harmony export */ });
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/function */ "./app/utils/function.js");

class Volume {
  constructor(container, grapper, slider, media) {
    this.container = container;
    this.grapper = grapper;
    this.containerBottom = this.container.getBoundingClientRect().bottom;
    this.containerHeight = this.container.getBoundingClientRect().height;
    this.containerTop = this.container.getBoundingClientRect().top;
    this.slider = slider;
    this.media = media;
    this.isDown = false;
    this.position = {
      start: 0,
      end: 0
    };
    this.addEventListener();
  }
  onPointerDown(e) {
    e.preventDefault();
    this.isDown = true;
    this.container.addEventListener('pointermove', this.onPointerMove.bind(this));
    this.container.addEventListener('pointerup', this.onPointerUp.bind(this));
  }
  onPointerMove(e) {
    e.preventDefault();
    if (!this.isDown && !this.isOutOfVolumeView(this.container)) return;
    this.ratio = this.containerHeight - (e.pageY - this.containerTop);
    this.slider.style.height = `${(0,_utils_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.ratio / this.containerHeight * 100, 0, 100)}%`;
    this.media.volume = (0,_utils_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.ratio / this.containerHeight, 0, 1);
  }
  onPointerUp() {
    this.isDown = false;
  }
  isOutOfVolumeView(element) {
    element.onmouseleave = () => {
      return true;
    };
  }
  addEventListener() {
    this.container.addEventListener('pointerdown', this.onPointerDown.bind(this), false);
  }
}

/***/ }),

/***/ "./app/config/forms.js":
/*!*****************************!*\
  !*** ./app/config/forms.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormHandler)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _components_Alert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Alert */ "./app/components/Alert.js");
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/function */ "./app/utils/function.js");



class FormHandler extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(type, url, method) {
    super('form');
    this.formType = type;
    this.method = method;
    this.url = `${window.location.origin}/${url}`;
    this.elements = this.elements[this.formType];
    this.val = 0;
    this.init();
  }
  init() {
    this.eventListener();
  }

  // SendToDb () {}

  async fetch(url, method, data) {
    const options = {
      method,
      mode: 'no-cors',
      body: data
    };
    const res = await fetch(url, options);
    if (res.status === 200) {
      // success
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
        this.elements.form.reset();
      });
    } else {
      // error
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
      });
    }
  }
  sendData(e) {
    e.preventDefault();
    const validNumber = this.verifyData(this.elements.mail, this.elements.name, this.elements.message);
    if (!validNumber) return;
    this.elements.alert.forEach(el => {
      el.innerText = '';
    });
    const formElements = new URLSearchParams(new FormData(this.elements.form));
    this.fetch(this.url, this.method, formElements);
  }
  verifyData(mail, name, message) {
    this.val = 0;
    // email
    if ((0,_utils_function__WEBPACK_IMPORTED_MODULE_2__.validEmail)(mail.value)) {
      this.val++;
    } else if (mail.value === '') {
      this.elements.emailAlert.innerText = 'Required*';
    } else {
      this.elements.emailAlert.innerText = 'This email is not valid';
    }

    // name
    if (name.value === '') {
      this.elements.nameAlert.innerText = 'Required*';
    } else {
      this.val++;
    }

    // message
    if (message.value === '') {
      this.elements.messageAlert.innerText = 'Required*';
    } else {
      this.val++;
    }
    return this.val === 3;
  }
  eventListener() {
    this.elements.button.addEventListener('click', this.sendData.bind(this));
  }
}

/***/ }),

/***/ "./app/pages/about/index.js":
/*!**********************************!*\
  !*** ./app/pages/about/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ About)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Pages */ "./app/classes/Pages.js");

class About extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('about');
  }
  create() {
    super.create();
  }
}

/***/ }),

/***/ "./app/pages/home/index.js":
/*!*********************************!*\
  !*** ./app/pages/home/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Home)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Pages */ "./app/classes/Pages.js");
/* harmony import */ var _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/slider/Slider */ "./app/components/slider/Slider.js");
/* harmony import */ var _components_Services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/Services */ "./app/components/Services.js");
/* harmony import */ var _config_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/forms */ "./app/config/forms.js");




class Home extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('home');
  }
  create() {
    super.create();
    new _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__["default"]();
    new _components_Services__WEBPACK_IMPORTED_MODULE_2__["default"]();
    new _config_forms__WEBPACK_IMPORTED_MODULE_3__["default"]('modal', 'projects/usersProjects', 'POST');
  }
}

/***/ }),

/***/ "./app/pages/project/index.js":
/*!************************************!*\
  !*** ./app/pages/project/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Project)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Pages */ "./app/classes/Pages.js");
/* harmony import */ var _components_Tabs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/Tabs */ "./app/components/Tabs.js");


class Project extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('project');
  }
  create() {
    this.tabs = new _components_Tabs__WEBPACK_IMPORTED_MODULE_1__["default"]({
      defaultIndex: 1
    });
    super.create();
  }
}

/***/ }),

/***/ "./app/utils/Smoothscroll.js":
/*!***********************************!*\
  !*** ./app/utils/Smoothscroll.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Smoothscroll)
/* harmony export */ });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./app/utils/function.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! normalize-wheel */ "./node_modules/normalize-wheel/index.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(normalize_wheel__WEBPACK_IMPORTED_MODULE_1__);


class Smoothscroll {
  __defaultOptions = {
    direction: 'v',
    // v: vertical or  v- : vertical bottom to top;  h: Horizontal or h- horizontal right to left
    smooth: 0.1,
    // Smooth amount -> Lerp function
    startedPoint: 0
  };
  constructor(element, opts) {
    this.element = element;
    this.__defaultOptions.startedPoint = opts.startedPoint || 0;
    this.smoothOptions = Object.assign(this.__defaultOptions, {
      ...opts
    });
    this.init();
  }
  init() {
    this.scroll = {
      current: 0,
      target: 0,
      limit: 0
    };
    this.offsetHeight = 0;
    this.dimensionHandler();
    console.log(this.scroll.limit);
    this.addListener();
  }
  dimensionHandler() {
    this.offsetHeight = this.element.getBoundingClientRect().top;
    this.scroll.limit = this.element.getBoundingClientRect().height + this.offsetHeight - window.innerHeight;
  }
  onMouseWheel(e) {
    const event = normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default()(e);
    if (this.smoothOptions.direction === 'v' || this.smoothOptions.direction === 'v-') {
      this.scroll.target += event.pixelY;
    } else if (this.smoothOptions.direction === 'h' || this.smoothOptions.direction === 'h-') {
      this.scroll.target += event.pixelX;
    }
  }
  onResize() {
    this.offsetHeight = this.element.getBoundingClientRect().top;
    this.scroll.limit = this.element.clientHeight + this.offsetHeight - window.innerHeight;
  }
  addListener() {
    window.addEventListener('wheel', this.onMouseWheel.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }
  update() {
    console.log(this.scroll.limit);
    this.scroll.target = (0,_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.scroll.target, 0, this.scroll.limit);
    this.scroll.current = (0,_function__WEBPACK_IMPORTED_MODULE_0__.lerp)(this.scroll.current, this.scroll.target, this.smoothOptions.smooth);
    if (this.scroll.current < 0.01) {
      this.scroll.current = 0;
    }
    this.translateByCase();
    window.requestAnimationFrame(this.update.bind(this));
  }
  translateByCase() {
    switch (this.smoothOptions.direction) {
      case 'v':
        this.element.style.transform = `translate3D(0, -${Math.floor(this.scroll.current)}px , 0)`;
        break;
      case 'v-':
        this.element.style.transform = `translate3D(0, ${Math.floor(this.scroll.current)}px, 0)`;
        break;
      case 'h':
        this.element.style.transform = `translateX(-${this.scroll.current}px)`;
        break;
      case 'h-':
        this.element.style.transform = `translateX(${this.scroll.current}px)`;
        break;
    }
  }
}

/***/ }),

/***/ "./app/utils/function.js":
/*!*******************************!*\
  !*** ./app/utils/function.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObserveNodeDomChange": () => (/* binding */ ObserveNodeDomChange),
/* harmony export */   "UrlExist": () => (/* binding */ UrlExist),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "lerp": () => (/* binding */ lerp),
/* harmony export */   "validEmail": () => (/* binding */ validEmail),
/* harmony export */   "validFileType": () => (/* binding */ validFileType)
/* harmony export */ });
const lerp = (start, end, amount) => {
  return (1 - amount) * start + amount * end;
};
const clamp = (value, min, max) => {
  return Math.min(Math.max(value, min), max);
};

/**
 * Vérifie si un fichier est de type PDF,  DOC et DOX c'est à dire
 * un document texte
 * @param {FILE} file - le fichier qui doit être vérifier
 * @param {string} type - le type de fichier document | image
 * @returns {Boolean} Boolean
 */
const validFileType = (file, type) => {
  const documents = ['application/pdf', 'application/doc', 'application/docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword'];
  const images = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/bmp'];
  if (type === 'documents') {
    for (let i = 0; i < documents.length; i++) {
      if (file.type === documents[i]) {
        return true;
      }
    }
    return false;
  } else if (type === 'images') {
    for (let i = 0; i < images.length; i++) {
      if (file.type === images[i]) {
        return true;
      }
    }
    return false;
  }
};

/**
 * Vérifie si une Url pointe vers une page valide
 *
 * @async
 * @param {string} url - le lien de la page
 * @returns {boolean} Boolean
 */
async function UrlExist(url) {
  const options = {
    mode: 'no-cors',
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  };
  const response = await fetch(url, options);
  return response.status !== '404';
}

/**
 * Verifie si un email est valide
 * @param email
 * @returns {boolean}
 */

function validEmail(email) {
  const regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
  if (regex.test(email)) {
    return true;
  }
}

//https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
/**
 * Observe et execuse un callback lorsque les noeuds enfants(DOM) de la cible ont été modifier
 * @param {HTMLElement} node - Le noeud DOM à observé
 * @param {Function} callback - la fonction à éxécuter lorsque le DOM de la cible à changé
 * @param {selector} selector
 */
function ObserveNodeDomChange(node, cb, selector) {
  // Select the node that will be observed for mutations
  const targetNode = document.querySelector(`.${node}`);

  // Options for the observer (which mutations to observe)
  const config = {
    childList: true,
    subtree: true
  };

  //Callback function to execute when mutations are observed
  const callback = mutationsList => {
    // Use traditional 'for loops' for IE 11
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        cb(selector);
      } else if (mutation.type === 'attributes') {
        cb(selector);
      }
    }
  };

  // Create an observer instance linked to the callback function
  const observer = new MutationObserver(callback);

  // Start observing the target node for configured mutations
  targetNode ? observer.observe(targetNode, config) : void 0;
  //observer.observe(targetNode, config);

  // Later, you can stop observing
  //observer.disconnect();
}

/***/ }),

/***/ "./app/utils/selectors.js":
/*!********************************!*\
  !*** ./app/utils/selectors.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ $),
/* harmony export */   "$All": () => (/* binding */ $All),
/* harmony export */   "$Attribute": () => (/* binding */ $Attribute)
/* harmony export */ });
/**
 * Select element in DOM HTML
 * @param {*} element - The css selector of the HTML element to target
 * @returns {HTMLElement}
 */
const $ = element => {
  return document.querySelector(`${element}`);
};

/**
 * Select elements in DOM HTML
 * @param {*} elements - The css selector of the HTML elements to target
 * @returns {NodeList}
 */
const $All = elements => {
  return [...document.querySelectorAll(`${elements}`)];
};

/**
 * Get Attribute of Element
 * @param {HTMLElement} element - HTML element
 * @param {HTMLElement} name - Name of attribute (ex : data-animation)
 * @returns {string}
 */
const $Attribute = (element, name) => {
  return element.getAttribute(name);
};

/***/ }),

/***/ "./app/utils/splittext.js":
/*!********************************!*\
  !*** ./app/utils/splittext.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This function splits text from innerHTML based on regex. Then, it wrap sparated words with <span> except <br>
 * Finally, it returns array of span
 * @param {HTML element} element
 * @param {string} split This is separator for text (regex)
 * @return {Array.<HTML element>} Array of span html element
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(element, split) {
  var words = splitText(element.innerHTML.toString(), split);
  var str = '';
  words.forEach(function (line) {
    if (line.indexOf('<br>') > -1) {
      var lines = line.split('<br>');
      lines.forEach(function (line, id) {
        str += id > 0 ? '<br>' + parseLine(line) : parseLine(line);
      });
    } else {
      str += parseLine(line);
    }
  });
  element.innerHTML = str;
  return element.querySelectorAll('span');
}

/**
 * This function split text into array including <br>
 * @params {string} txt This is text that retrieved from html element
 * @params {string} split It is separator for text (regex)
 * @return {Array.<string>} result of split using separator including <br>
 */
function splitText(txt, split) {
  var splits = txt.split('<br>');
  var arr = [];
  splits.forEach(function (item, id) {
    if (id > 0) arr.push('<br>');
    arr = arr.concat(item.split(split));
  });
  return arr;
}
/**
 * This function will wrap passed argument with <span> if passed argument is not empty, space, or <br>
 * @params {string} line It is words that are separated by seprator
 * @return {string} it is either '', ' ', <br> , or <span>line<span>
 */
function parseLine(line) {
  if (line === '' || line === ' ') {
    return line;
  } else {
    return line === '<br>' ? '<br>' : '<span>' + line + '</span>' + (line.length > 1 ? ' ' : '');
  }
}

/***/ }),

/***/ "./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/***/ (function(module) {

/**
 * EvEmitter v2.1.1
 * Lil' event emitter
 * MIT License
 */

(function (global, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }
})(typeof window != 'undefined' ? window : this, function () {
  function EvEmitter() {}
  let proto = EvEmitter.prototype;
  proto.on = function (eventName, listener) {
    if (!eventName || !listener) return this;

    // set events hash
    let events = this._events = this._events || {};
    // set listeners array
    let listeners = events[eventName] = events[eventName] || [];
    // only add once
    if (!listeners.includes(listener)) {
      listeners.push(listener);
    }
    return this;
  };
  proto.once = function (eventName, listener) {
    if (!eventName || !listener) return this;

    // add event
    this.on(eventName, listener);
    // set once flag
    // set onceEvents hash
    let onceEvents = this._onceEvents = this._onceEvents || {};
    // set onceListeners object
    let onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
    // set flag
    onceListeners[listener] = true;
    return this;
  };
  proto.off = function (eventName, listener) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this;
    let index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index, 1);
    }
    return this;
  };
  proto.emitEvent = function (eventName, args) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this;

    // copy over to avoid interference if .off() in listener
    listeners = listeners.slice(0);
    args = args || [];
    // once stuff
    let onceListeners = this._onceEvents && this._onceEvents[eventName];
    for (let listener of listeners) {
      let isOnce = onceListeners && onceListeners[listener];
      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener);
        // unset once flag
        delete onceListeners[listener];
      }
      // trigger listener
      listener.apply(this, args);
    }
    return this;
  };
  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
    return this;
  };
  return EvEmitter;
});

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/***/ }),

/***/ "./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSPlugin": () => (/* binding */ CSSPlugin),
/* harmony export */   "_createElement": () => (/* binding */ _createElement),
/* harmony export */   "_getBBox": () => (/* binding */ _getBBox),
/* harmony export */   "checkPrefix": () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/*!
 * CSSPlugin 3.11.3
 * https://greensock.com
 *
 * Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var _win,
  _doc,
  _docElement,
  _pluginInitted,
  _tempDiv,
  _tempDivStyler,
  _recentSetterPlugin,
  _reverting,
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG = 180 / Math.PI,
  _DEG2RAD = Math.PI / 180,
  _atan2 = Math.atan2,
  _bigNum = 1e8,
  _capsExp = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
  _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
  _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp = "transform",
  _transformOriginProp = _transformProp + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
    var target = this.target,
      style = target.style;
    if (property in _transformProps) {
      this.tfm = this.tfm || {};
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
      }

      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
      property = _transformProp;
    }
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].replace(_capsExp, "-$1").toLowerCase());
    }
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
      i = _reverting();
      if (i && !i.isStart && !style[_transformProp]) {
        _removeIndependentTransforms(style);
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;
    if (property in s && !preferPrefix) {
      return property;
    }
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while (i-- && !(_prefixes[i] + property in s)) {}
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore = function _initCore() {
    if (_windowExists() && window.document) {
      _win = window;
      _doc = _win.document;
      _docElement = _doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;
    _docElement.appendChild(svg);
    svg.appendChild(this);
    this.style.display = "block";
    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original

        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }
    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }
    _docElement.removeChild(svg);
    this.style.cssText = oldCSS;
    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds;
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }
    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
    if (!parent || parent === _doc || !parent.appendChild) {
      parent = _doc.body;
    }
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";
      if (horizontal && toPercent) {
        cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
        cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
        cache.width = parent[measureProperty];
      }
    }
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
  _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }

    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";
    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }
    a = [start, end];
    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    if (endValues.length) {
      while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
        while (--i > -1) {
          prop = props[i];
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
          _removeProperty(target, prop);
        }
      }
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
        if (cache) {
          cache.svg && target.removeAttribute("transform");
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;
          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
        plugin._props.push(property);
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);
  },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
      style.scale = style.rotate = style.translate = "none";
    }
    matrix = _getMatrix(target, cache.svg);
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
        scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
        scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
      a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
      a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
      a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
      a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
      isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;
    if (isString) {
      direction = endValue.split("_")[1];
      if (direction === "short") {
        change %= cap;
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
      }
    }
    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      _removeProperty(target, _transformProp);
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
        endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
        plugin._props.push(p);
      }
    }
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;
    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }
    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});
var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;
    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }
      endValue = vars[p];
      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }
      type = typeof endValue;
      specialProp = _specialProps[p];
      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }
      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }
      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;
        if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }
        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);
        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }
            inlineProps.push("visibility", 0, style.visibility);
            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }
          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }
        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }
            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);
            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);
            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);
            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }
        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;
          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else {
            (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);
            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }
        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }
    hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;
(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });
  _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Back": () => (/* binding */ Back),
/* harmony export */   "Bounce": () => (/* binding */ Bounce),
/* harmony export */   "Circ": () => (/* binding */ Circ),
/* harmony export */   "Cubic": () => (/* binding */ Cubic),
/* harmony export */   "Elastic": () => (/* binding */ Elastic),
/* harmony export */   "Expo": () => (/* binding */ Expo),
/* harmony export */   "GSCache": () => (/* binding */ GSCache),
/* harmony export */   "Linear": () => (/* binding */ Linear),
/* harmony export */   "Power0": () => (/* binding */ Power0),
/* harmony export */   "Power1": () => (/* binding */ Power1),
/* harmony export */   "Power2": () => (/* binding */ Power2),
/* harmony export */   "Power3": () => (/* binding */ Power3),
/* harmony export */   "Power4": () => (/* binding */ Power4),
/* harmony export */   "PropTween": () => (/* binding */ PropTween),
/* harmony export */   "Quad": () => (/* binding */ Quad),
/* harmony export */   "Quart": () => (/* binding */ Quart),
/* harmony export */   "Quint": () => (/* binding */ Quint),
/* harmony export */   "Sine": () => (/* binding */ Sine),
/* harmony export */   "SteppedEase": () => (/* binding */ SteppedEase),
/* harmony export */   "Strong": () => (/* binding */ Strong),
/* harmony export */   "Timeline": () => (/* binding */ Timeline),
/* harmony export */   "TimelineLite": () => (/* binding */ Timeline),
/* harmony export */   "TimelineMax": () => (/* binding */ Timeline),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "TweenLite": () => (/* binding */ Tween),
/* harmony export */   "TweenMax": () => (/* binding */ Tween),
/* harmony export */   "_checkPlugin": () => (/* binding */ _checkPlugin),
/* harmony export */   "_colorExp": () => (/* binding */ _colorExp),
/* harmony export */   "_colorStringFilter": () => (/* binding */ _colorStringFilter),
/* harmony export */   "_config": () => (/* binding */ _config),
/* harmony export */   "_forEachName": () => (/* binding */ _forEachName),
/* harmony export */   "_getCache": () => (/* binding */ _getCache),
/* harmony export */   "_getProperty": () => (/* binding */ _getProperty),
/* harmony export */   "_getSetter": () => (/* binding */ _getSetter),
/* harmony export */   "_isString": () => (/* binding */ _isString),
/* harmony export */   "_isUndefined": () => (/* binding */ _isUndefined),
/* harmony export */   "_missingPlugin": () => (/* binding */ _missingPlugin),
/* harmony export */   "_numExp": () => (/* binding */ _numExp),
/* harmony export */   "_numWithUnitExp": () => (/* binding */ _numWithUnitExp),
/* harmony export */   "_parseRelative": () => (/* binding */ _parseRelative),
/* harmony export */   "_plugins": () => (/* binding */ _plugins),
/* harmony export */   "_relExp": () => (/* binding */ _relExp),
/* harmony export */   "_removeLinkedListItem": () => (/* binding */ _removeLinkedListItem),
/* harmony export */   "_renderComplexString": () => (/* binding */ _renderComplexString),
/* harmony export */   "_replaceRandom": () => (/* binding */ _replaceRandom),
/* harmony export */   "_round": () => (/* binding */ _round),
/* harmony export */   "_roundModifier": () => (/* binding */ _roundModifier),
/* harmony export */   "_setDefaults": () => (/* binding */ _setDefaults),
/* harmony export */   "_sortPropTweensByPriority": () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   "_ticker": () => (/* binding */ _ticker),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   "distribute": () => (/* binding */ distribute),
/* harmony export */   "getUnit": () => (/* binding */ getUnit),
/* harmony export */   "gsap": () => (/* binding */ gsap),
/* harmony export */   "interpolate": () => (/* binding */ interpolate),
/* harmony export */   "mapRange": () => (/* binding */ mapRange),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "selector": () => (/* binding */ selector),
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "snap": () => (/* binding */ snap),
/* harmony export */   "splitColor": () => (/* binding */ splitColor),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "unitize": () => (/* binding */ unitize),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapYoyo": () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.11.3
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
  _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
  _suppressOverwrites,
  _reverting,
  _context,
  _bigNum = 1e8,
  _tinyNum = 1 / _bigNum,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt = Math.sqrt,
  _cos = Math.cos,
  _sin = Math.sin,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
  _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win,
  _coreInitted,
  _doc,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
  _emptyFunc = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
  _revertConfig = {
    suppressEvents: true
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
      harnessPlugin = _harnessPlugins[i];
    }
    i = targets.length;
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;
    _lazyLookup = {};
    _lazyTweens.length = 0;
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
  _passThrough = function _passThrough(p) {
    return p;
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;
    while (match && i-- && a1[i] === a2[i]) {}
    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = parent[lastProp],
      t;
    if (sortBy) {
      t = child[sortBy];
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = child._prev,
      next = child._next;
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
    return animation;
  },
  _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
  _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
      _setEnd(animation);
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }

    return animation;
  },
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || child._initted && !child._dur) {
      //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
      t = _parentToChildTotalTime(timeline.rawTime(), child);
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
  _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
    if (!tween._initted) {
      return 1;
    }
    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
      child = animation._first;
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
        child = child._next;
      }
    } else {
      child = animation._last;
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
  _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
      irVars = vars;
      parent = timeline;
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
    return ar.forEach(function (value) {
      var _accumulator;
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
    var vars = _isObject(v) ? v : {
        each: v
      },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];
        if (!wrapAt) {
          max = -_bigNum;
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
          wrapAt--;
        }
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;
      if (snapTo.values) {
        snapTo = toArray(snapTo.values);
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
  pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
    if (!func) {
      var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;
      progress === true && (mutate = 1) && (progress = null);
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }

        l--;
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;
    for (p in labels) {
      distance = labels[p] - fromTime;
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
    return label;
  },
  _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;
    if (!callback) {
      return;
    }
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
      instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
      statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };
    _wake();
    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }
      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods

      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods

      _plugins[Plugin.prop = name] = Plugin;
      if (config.targetTest) {
        _harnessPlugins.push(Plugin);
        _reservedProps[name] = 1;
      }
      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
    }

    _addGlobal(name, Plugin);
    config.register && config.register(gsap, Plugin, PropTween);
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
      a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;
    if (!colors) {
      return s;
    }
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
    return result + shell[l];
  },
  _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
    return new RegExp(s + ")", "gi");
  }(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});
            _raf = _win.requestAnimationFrame;
          }
          _id && _self.sleep();
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
          _tickerActive = 1;
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
          _self.remove(func);
        } : callback;
        _self.remove(callback);
        _listeners[prioritize ? "unshift" : "push"](func);
        _wake();
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
      lowercaseName;
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;
  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});
_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);
_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});
_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});
_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});
_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }
    var p1 = 1 / steps,
      p2 = steps + (immediateStart ? 0 : 1),
      p3 = immediateStart ? 1 : 0,
      max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];
_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;
    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }
    this._ts = 1;
    _setDuration(this, +vars.duration, 1, 1);
    this.data = vars.data;
    if (_context) {
      this._ctx = _context;
      _context.data.push(this);
    }
    _tickerActive || _ticker.wake();
  }
  var _proto = Animation.prototype;
  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }
    return this._delay;
  };
  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };
  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }
    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };
  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();
    if (!arguments.length) {
      return this._tTime;
    }
    var parent = this._dp;
    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);
      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }
        parent = parent.parent;
      }
      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }
    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }

    return this;
  };
  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
  };
  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
  };
  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;

  _proto.timeScale = function timeScale(value) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }
    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);
    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };
  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }
    if (this._ps !== value) {
      this._ps = value;
      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();
        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };
  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }
    return this._start;
  };
  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };
  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };
  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }
    var prevIsReverting = _reverting;
    _reverting = config;
    if (this._initted || this._startAt) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }
    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting = prevIsReverting;
    return this;
  };
  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();
    while (animation) {
      time = animation._start + time / (animation._ts || 1);
      animation = animation._dp;
    }
    return !this.parent && this.vars.immediateRender ? -1 : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for Recording.revert())
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }
    return this._repeat === -2 ? Infinity : this._repeat;
  };
  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;
      _onUpdateTotalDuration(this);
      return time ? this.time(time) : this;
    }
    return this._rDelay;
  };
  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }
    return this._yoyo;
  };
  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };
  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };
  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };
  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };
  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };
  _proto.resume = function resume() {
    return this.paused(false);
  };
  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }
    return this._rts < 0;
  };
  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };
  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };
  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;
    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }
      return this;
    }
    return vars[type];
  };
  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };
  _proto.kill = function kill() {
    _interrupt(this);
  };
  return Animation;
}();
_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);
  function Timeline(vars, position) {
    var _this;
    if (vars === void 0) {
      vars = {};
    }
    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }
  var _proto2 = Timeline.prototype;
  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);
    return this;
  };
  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);
    return this;
  };
  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);
    return this;
  };
  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };
  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;

  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };
  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }
      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;
      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : dur;
          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }
          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;
          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }
          this._lock = 0;
          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }
      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }

      if (!prevTime && time && !suppressEvents) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      if (time >= prevTime && totalTime >= 0) {
        child = this._first;
        while (child) {
          next = child._next;
          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;
          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      }
      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto2.add = function add(child, position) {
    var _this2 = this;
    _isNumber(position) || (position = _parsePosition(this, position, child));
    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }
      if (_isString(child)) {
        return this.addLabel(child, position);
      }
      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }
    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }
    if (tweens === void 0) {
      tweens = true;
    }
    if (timelines === void 0) {
      timelines = true;
    }
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }
    var a = [],
      child = this._first;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }
      child = child._next;
    }
    return a;
  };
  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;
    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };
  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }
    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }
    _removeLinkedListItem(this, child);
    if (child === this._recent) {
      this._recent = this._last;
    }
    return _uncache(this);
  };
  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }
    this._forcing = 1;
    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }
    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
    this._forcing = 0;
    return this;
  };
  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };
  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };
  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };
  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);
    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }
      child = child._next;
    }
  };
  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;
    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }
    return this;
  };
  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;
    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }
      child = child._next;
    }
    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};
    var tl = this,
      endTime = _parsePosition(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
    return immediateRender ? tween.render(0) : tween;
  };
  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };
  _proto2.recent = function recent() {
    return this._recent;
  };
  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };
  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };
  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };
  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }
    var child = this._first,
      labels = this.labels,
      p;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }
      child = child._next;
    }
    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }
    return _uncache(this);
  };
  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;
    while (child) {
      child.invalidate(soft);
      child = child._next;
    }
    return _Animation.prototype.invalidate.call(this, soft);
  };
  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }
    var child = this._first,
      next;
    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }
    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };
  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum,
      prev,
      start,
      parent;
    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }
    if (self._dirty) {
      parent = self.parent;
      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;
        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }
        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;
          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }
          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }
        child._end > max && child._ts && (max = child._end);
        child = prev;
      }
      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
      self._dirty = 0;
    }
    return self._tDur;
  };
  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
      _lastRenderedFrame = _ticker.frame;
    }
    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }
        child || _ticker.sleep();
      }
    }
  };
  return Timeline;
}(Animation);
_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }
    startNums = start.match(_complexStringNumExp) || [];
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
    var copy = {},
      p;
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
    return copy;
  },
  _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
          plugin.priority && (hasPriority = 1);
        }
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
      while (i--) {
        pt = lookup[i][property];
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";
          _initTween(tween, time);
          _forceAllPropTweens = 0;
          return 1;
        }
        ptCache.push(pt);
      }
    }
    i = ptCache.length;
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;
    if (!propertyAliases) {
      return vars;
    }
    copy = _merge({}, vars);
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
  _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};
_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);
  function Tween(targets, vars, position, skipInherit) {
    var _this3;
    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }
    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;
    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;
      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);
        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }
        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }
          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }
        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));
        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;
        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};
          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }
          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;
            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }
          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);
      _globalTimeline.killTweensOf(parsedTargets);
      _overwritingTween = 0;
    }
    _addToTimeline(parent, _assertThisInitialized(_this3), position);
    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);
    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }
  var _proto3 = Tween.prototype;
  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;
    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        isYoyo = this._yoyo && iteration & 1;
        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        if (time === prevTime && !force && this._initted) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }
        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }
      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }
        if (prevTime !== this._time) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
          return this;
        }
        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._tTime = tTime;
      this._time = time;
      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }
      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }
      if (time && !prevTime && !suppressEvents) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      pt = this._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }
      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto3.targets = function targets() {
    return this._targets;
  };
  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };
  _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
      return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);
    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };
  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }
    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      return this.parent ? _interrupt(this) : this;
    }
    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }
    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;
    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }
    overwrittenProps = this._op = this._op || [];
    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};
        _forEachName(vars, function (name) {
          return p[name] = 1;
        });
        vars = p;
      }
      vars = _addAliasesToVars(parsedTargets, vars);
    }
    i = parsedTargets.length;
    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];
        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }
        for (p in props) {
          pt = curLookup && curLookup[p];
          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }
            delete curLookup[p];
          }
          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }
    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };
  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };
  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };
  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };
  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };
  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };
  return Tween;
}(Animation);
_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);
    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }

    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
      next;
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;
    while (pt) {
      next = pt._next;
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
      pt = next;
    }
    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
      pt = next;
    }
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;
    if (next) {
      next._prev = this;
    }
  }
  var _proto4 = PropTween.prototype;
  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };
  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});
_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
var _media = [],
  _listeners = {},
  _emptyArray = [],
  _lastMediaTime = 0,
  _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;
        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
      _dispatch("matchMediaRevert");
      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;
      _dispatch("matchMedia");
    }
  };
var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    func && this.add(func);
  }
  var _proto5 = Context.prototype;
  _proto5.add = function add(name, func, scope) {
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }
    var self = this,
      f = function f() {
        var prev = _context,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
    self.last = f;
    return name === _isFunction ? f(self) : name ? self[name] = f : f;
  };
  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };
  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
    });
    return a;
  };
  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };
  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;
    if (revert) {
      var tweens = this.getTweens();
      this.data.forEach(function (t) {
        // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
        if (t.data === "isFlip") {
          t.revert();
          t.getChildren(true, true, false).forEach(function (tween) {
            return tweens.splice(tweens.indexOf(tween), 1);
          });
        }
      }); // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

      tweens.map(function (t) {
        return {
          g: t.globalTime(0),
          t: t
        };
      }).sort(function (a, b) {
        return b.g - a.g || -1;
      }).forEach(function (o) {
        return o.t.revert(revert);
      }); // note: all of the _startAt tweens should be reverted in reverse order that thy were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

      this.data.forEach(function (e) {
        return !(e instanceof Animation) && e.revert && e.revert(revert);
      });
      this._r.forEach(function (f) {
        return f(revert, _this4);
      });
      this.isReverted = true;
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }
    this.clear();
    if (matchMedia) {
      var i = _media.indexOf(this);
      !!~i && _media.splice(i, 1);
    }
  };
  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };
  return Context;
}();
var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
  }
  var _proto6 = MatchMedia.prototype;
  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
      cond = context.conditions = {},
      mq,
      p,
      active;
    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;
    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win.matchMedia(conditions[p]);
        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }
    active && func(context);
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;

  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };
  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };
  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough : _numericIfPossible;
    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);
    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;
        while (i--) {
          setters[i](value);
        }
      };
    }
    target = target[0] || {};
    var Plugin = _plugins[property],
      cache = _getCache(target),
      p = cache.harness && (cache.harness.aliases || {})[property] || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;
    var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });
    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };
    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }
    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
    _globalTimeline.remove(tl);
    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;
    while (child) {
      next = child._next;
      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }
      child = next;
    }
    _addToTimeline(_globalTimeline, tl, 0);
    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
        found,
        p;
      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }
      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);
        toAdd._ctx = _context;
      }
      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};
_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});
_ticker.add(Timeline.updateRoot);
_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;
    for (p in modifiers) {
      i = targets.length;
      while (i--) {
        pt = tween._ptLookup[i][p];
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
          if (_isString(vars)) {
            temp = {};
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }
          if (modifier) {
            temp = {};
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
            vars = temp;
          }
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins

var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;
    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;
    while (pt) {
      _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;
    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.11.3";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
  Power1 = _easeMap.Power1,
  Power2 = _easeMap.Power2,
  Power3 = _easeMap.Power3,
  Power4 = _easeMap.Power4,
  Linear = _easeMap.Linear,
  Quad = _easeMap.Quad,
  Cubic = _easeMap.Cubic,
  Quart = _easeMap.Quart,
  Quint = _easeMap.Quint,
  Strong = _easeMap.Strong,
  Elastic = _easeMap.Elastic,
  Back = _easeMap.Back,
  SteppedEase = _easeMap.SteppedEase,
  Bounce = _easeMap.Bounce,
  Sine = _easeMap.Sine,
  Expo = _easeMap.Expo,
  Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Back": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),
/* harmony export */   "Bounce": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),
/* harmony export */   "CSSPlugin": () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),
/* harmony export */   "Circ": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),
/* harmony export */   "Cubic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),
/* harmony export */   "Elastic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),
/* harmony export */   "Expo": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),
/* harmony export */   "Linear": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),
/* harmony export */   "Power0": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),
/* harmony export */   "Power1": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),
/* harmony export */   "Power2": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),
/* harmony export */   "Power3": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),
/* harmony export */   "Power4": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),
/* harmony export */   "Quad": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),
/* harmony export */   "Quart": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),
/* harmony export */   "Quint": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),
/* harmony export */   "Sine": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),
/* harmony export */   "SteppedEase": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),
/* harmony export */   "Strong": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),
/* harmony export */   "TimelineLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),
/* harmony export */   "TimelineMax": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),
/* harmony export */   "TweenLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),
/* harmony export */   "TweenMax": () => (/* binding */ TweenMaxWithCSS),
/* harmony export */   "default": () => (/* binding */ gsapWithCSS),
/* harmony export */   "gsap": () => (/* binding */ gsapWithCSS)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js");


var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap,
  // to protect from tree shaking
  TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/imagesloaded/imagesloaded.js":
/*!***************************************************!*\
  !*** ./node_modules/imagesloaded/imagesloaded.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * imagesLoaded v5.0.0
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function (window, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS
    module.exports = factory(window, __webpack_require__(/*! ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js"));
  } else {
    // browser global
    window.imagesLoaded = factory(window, window.EvEmitter);
  }
})(typeof window !== 'undefined' ? window : this, function factory(window, EvEmitter) {
  let $ = window.jQuery;
  let console = window.console;

  // -------------------------- helpers -------------------------- //

  // turn element or nodeList into an array
  function makeArray(obj) {
    // use object if already an array
    if (Array.isArray(obj)) return obj;
    let isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';
    // convert nodeList to array
    if (isArrayLike) return [...obj];

    // array of single index
    return [obj];
  }

  // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {[Array, Element, NodeList, String]} elem
   * @param {[Object, Function]} options - if function, use as callback
   * @param {Function} onAlways - callback function
   * @returns {ImagesLoaded}
   */
  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    }
    // use elem as selector string
    let queryElem = elem;
    if (typeof elem == 'string') {
      queryElem = document.querySelectorAll(elem);
    }
    // bail if bad element
    if (!queryElem) {
      console.error(`Bad element for imagesLoaded ${queryElem || elem}`);
      return;
    }
    this.elements = makeArray(queryElem);
    this.options = {};
    // shift arguments if no options set
    if (typeof options == 'function') {
      onAlways = options;
    } else {
      Object.assign(this.options, options);
    }
    if (onAlways) this.on('always', onAlways);
    this.getImages();
    // add jQuery Deferred object
    if ($) this.jqDeferred = new $.Deferred();

    // HACK check async to allow time to bind listeners
    setTimeout(this.check.bind(this));
  }
  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);
  ImagesLoaded.prototype.getImages = function () {
    this.images = [];

    // filter & find items if we have an item selector
    this.elements.forEach(this.addElementImages, this);
  };
  const elementNodeTypes = [1, 9, 11];

  /**
   * @param {Node} elem
   */
  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName === 'IMG') {
      this.addImage(elem);
    }
    // get background image on element
    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    }

    // find children
    // no non-element nodes, #143
    let {
      nodeType
    } = elem;
    if (!nodeType || !elementNodeTypes.includes(nodeType)) return;
    let childImgs = elem.querySelectorAll('img');
    // concat childElems to filterFound array
    for (let img of childImgs) {
      this.addImage(img);
    }

    // get child background images
    if (typeof this.options.background == 'string') {
      let children = elem.querySelectorAll(this.options.background);
      for (let child of children) {
        this.addElementBackgroundImages(child);
      }
    }
  };
  const reURL = /url\((['"])?(.*?)\1\)/gi;
  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    let style = getComputedStyle(elem);
    // Firefox returns null if in a hidden iframe https://bugzil.la/548397
    if (!style) return;

    // get url inside url("...")
    let matches = reURL.exec(style.backgroundImage);
    while (matches !== null) {
      let url = matches && matches[2];
      if (url) {
        this.addBackground(url, elem);
      }
      matches = reURL.exec(style.backgroundImage);
    }
  };

  /**
   * @param {Image} img
   */
  ImagesLoaded.prototype.addImage = function (img) {
    let loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };
  ImagesLoaded.prototype.addBackground = function (url, elem) {
    let background = new Background(url, elem);
    this.images.push(background);
  };
  ImagesLoaded.prototype.check = function () {
    this.progressedCount = 0;
    this.hasAnyBroken = false;
    // complete if no images
    if (!this.images.length) {
      this.complete();
      return;
    }

    /* eslint-disable-next-line func-style */
    let onProgress = (image, elem, message) => {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(() => {
        this.progress(image, elem, message);
      });
    };
    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };
  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    // progress event
    this.emitEvent('progress', [this, image, elem]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    }
    // check if completed
    if (this.progressedCount === this.images.length) {
      this.complete();
    }
    if (this.options.debug && console) {
      console.log(`progress: ${message}`, image, elem);
    }
  };
  ImagesLoaded.prototype.complete = function () {
    let eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);
    if (this.jqDeferred) {
      let jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  };

  // --------------------------  -------------------------- //

  function LoadingImage(img) {
    this.img = img;
  }
  LoadingImage.prototype = Object.create(EvEmitter.prototype);
  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    let isComplete = this.getIsImageComplete();
    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    }

    // If none of the checks above matched, simulate loading on detached element.
    this.proxyImage = new Image();
    // add crossOrigin attribute. #204
    if (this.img.crossOrigin) {
      this.proxyImage.crossOrigin = this.img.crossOrigin;
    }
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this);
    // bind to image as well for Firefox. #191
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.currentSrc || this.img.src;
  };
  LoadingImage.prototype.getIsImageComplete = function () {
    // check for non-zero, non-undefined naturalWidth
    // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
    return this.img.complete && this.img.naturalWidth;
  };
  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    let {
      parentNode
    } = this.img;
    // emit progress with parent <picture> or self <img>
    let elem = parentNode.nodeName === 'PICTURE' ? parentNode : this.img;
    this.emitEvent('progress', [this, elem, message]);
  };

  // ----- events ----- //

  // trigger specified handler for event type
  LoadingImage.prototype.handleEvent = function (event) {
    let method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };
  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };
  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };
  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  // -------------------------- Background -------------------------- //

  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  }

  // inherit LoadingImage prototype
  Background.prototype = Object.create(LoadingImage.prototype);
  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url;
    // check if image is already complete
    let isComplete = this.getIsImageComplete();
    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };
  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };
  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  };

  // -------------------------- jQuery -------------------------- //

  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;
    if (!jQuery) return;

    // set local variable
    $ = jQuery;
    // $().imagesLoaded()
    $.fn.imagesLoaded = function (options, onAlways) {
      let instance = new ImagesLoaded(this, options, onAlways);
      return instance.jqDeferred.promise($(this));
    };
  };
  // try making plugin
  ImagesLoaded.makeJQueryPlugin();

  // --------------------------  -------------------------- //

  return ImagesLoaded;
});

/***/ }),

/***/ "./node_modules/normalize-wheel/index.js":
/*!***********************************************!*\
  !*** ./node_modules/normalize-wheel/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./src/normalizeWheel.js */ "./node_modules/normalize-wheel/src/normalizeWheel.js");

/***/ }),

/***/ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/ExecutionEnvironment.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {
  canUseDOM: canUseDOM,
  canUseWorkers: typeof Worker !== 'undefined',
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM // For now, this is true - might change in the future.
};

module.exports = ExecutionEnvironment;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js ***!
  \******************************************************************/
/***/ ((module) => {

/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */

/**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */

var _populated = false;

// Browsers
var _ie, _firefox, _opera, _webkit, _chrome;

// Actual IE browser for compatibility mode
var _ie_real_version;

// Platforms
var _osx, _windows, _linux, _android;

// Architectures
var _win64;

// Devices
var _iphone, _ipad, _native;
var _mobile;
function _populate() {
  if (_populated) {
    return;
  }
  _populated = true;

  // To work around buggy JS libraries that can't handle multi-digit
  // version numbers, Opera 10's user agent string claims it's Opera
  // 9, then later includes a Version/X.Y field:
  //
  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);

  // Note that the IE team blog would have you believe you should be checking
  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
  // from either x64 or ia64;  so ultimately, you should just check for Win64
  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
  // Windows will send 'WOW64' instead.
  _win64 = !!/Win64/.exec(uas);
  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
    // IE compatibility mode
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    // grab the "true" ie version from the trident token if available
    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      // We do not add the regexp to the above test, because it will always
      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
      // the userAgent string.
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      // Detect OS X version.  If no version number matches, set _osx to true.
      // Version examples:  10, 10_6_1, 10.7
      // Parses version number as a float, taking only first two sets of
      // digits.  If only one set of digits is found, returns just the major
      // version number.
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}
var UserAgent_DEPRECATED = {
  /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  ie: function () {
    return _populate() || _ie;
  },
  /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
  ieCompatibilityMode: function () {
    return _populate() || _ie_real_version > _ie;
  },
  /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
  ie64: function () {
    return UserAgent_DEPRECATED.ie() && _win64;
  },
  /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  firefox: function () {
    return _populate() || _firefox;
  },
  /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  opera: function () {
    return _populate() || _opera;
  },
  /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  webkit: function () {
    return _populate() || _webkit;
  },
  /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
  safari: function () {
    return UserAgent_DEPRECATED.webkit();
  },
  /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  chrome: function () {
    return _populate() || _chrome;
  },
  /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
  windows: function () {
    return _populate() || _windows;
  },
  /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
  osx: function () {
    return _populate() || _osx;
  },
  /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
  linux: function () {
    return _populate() || _linux;
  },
  /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
  iphone: function () {
    return _populate() || _iphone;
  },
  mobile: function () {
    return _populate() || _iphone || _ipad || _android || _mobile;
  },
  nativeApp: function () {
    // webviews inside of the native apps
    return _populate() || _native;
  },
  android: function () {
    return _populate() || _android;
  },
  ipad: function () {
    return _populate() || _ipad;
  }
};
module.exports = UserAgent_DEPRECATED;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/isEventSupported.js":
/*!**************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/isEventSupported.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */



var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js");
var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }
  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);
  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }
  return isSupported;
}
module.exports = isEventSupported;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/normalizeWheel.js":
/*!************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/normalizeWheel.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */



var UserAgent_DEPRECATED = __webpack_require__(/*! ./UserAgent_DEPRECATED */ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js");
var isEventSupported = __webpack_require__(/*! ./isEventSupported */ "./node_modules/normalize-wheel/src/isEventSupported.js");

// Reasonable defaults
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;

/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */
function normalizeWheel( /*object*/event) /*object*/{
  var sX = 0,
    sY = 0,
    // spinX, spinY
    pX = 0,
    pY = 0; // pixelX, pixelY

  // Legacy
  if ('detail' in event) {
    sY = event.detail;
  }
  if ('wheelDelta' in event) {
    sY = -event.wheelDelta / 120;
  }
  if ('wheelDeltaY' in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ('wheelDeltaX' in event) {
    sX = -event.wheelDeltaX / 120;
  }

  // side scrolling on FF with DOMMouseScroll
  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ('deltaY' in event) {
    pY = event.deltaY;
  }
  if ('deltaX' in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }

  // Fall-back if spin cannot be determined
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}

/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */
normalizeWheel.getEventType = function () /*string*/{
  return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';
};
module.exports = normalizeWheel;

/***/ }),

/***/ "./datas/sounds.json":
/*!***************************!*\
  !*** ./datas/sounds.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"id":1,"title":"The Descent","link":"sound/BlueWednesdayInMyHead/The Descent.mp3","artist":{"name":"Blue Wednesday"},"album":{"id":1,"title":"In My Head","cover":"sound/BlueWednesdayInMyHead/cover.png"}},{"id":2,"title":"Aura","link":"sound/DaniSogenAWorlOfIllusion/Aura.mp3","artist":{"name":"Dani Sogen"},"album":{"id":1,"title":"A World of Illusion","cover":"sound/DaniSogenAWorlOfIllusion/cover.png"}},{"id":3,"title":"The Look","link":"sound/softyXlucidGreenOvernight/1. The Look.mp3","artist":{"name":"softy x lucid green"},"album":{"id":1,"title":"overnight","cover":"sound/softyXlucidGreenOvernight/cover.png"}},{"id":4,"title":"T-Rain","link":"sound/Niska/t-rain.mp3","artist":{"name":"Niska"},"album":{"id":1,"title":"Le monde est méchant","cover":"sound/Niska/cover.png"}},{"id":5,"title":"Carry Me","link":"sound/Tayc/carry-me.mp3","artist":{"name":"Tayc"},"album":{"id":1,"title":"Carry Me -Single","cover":"sound/Tayc/cover.png"}},{"id":6,"title":"Titanium (feat. Sia)","link":"sound/DavidGuetta/titanium.mp3","artist":{"name":"David Guetta"},"album":{"id":1,"title":"Nothing But The Beat Ultimate","cover":"sound/DavidGuetta/cover.png"}},{"id":7,"title":"Cartagine","link":"sound/EmanueleAloia/cartagine.mp3","artist":{"name":"Emanuele Aloia"},"album":{"id":1,"title":"Cartagine - Single","cover":"sound/EmanueleAloia/cover.png"}},{"id":8,"title":"On my Way","link":"sound/AlanWalker/on-my-way.mp3","artist":{"name":"Alan Walker"},"album":{"id":1,"title":"On my Way - Single","cover":"sound/AlanWalker/cover.png"}},{"id":8,"title":"Loading (ft Bad Boy Timz)","link":"sound/Olamide/loading.mp3","artist":{"name":"Olamide"},"album":{"id":1,"title":"Carpe Diem","cover":"sound/Olamide/cover.png"}}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _pages_home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pages/home */ "./app/pages/home/index.js");
/* harmony import */ var _pages_about__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/about */ "./app/pages/about/index.js");
/* harmony import */ var _components_Preloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Preloader */ "./app/components/Preloader.js");
/* harmony import */ var _components_widgets_music_player_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/widgets/music-player/player */ "./app/components/widgets/music-player/player.js");
/* harmony import */ var _components_Navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/Navigation */ "./app/components/Navigation.js");
/* harmony import */ var _config_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config/forms */ "./app/config/forms.js");
/* harmony import */ var _animation_canvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./animation/canvas */ "./app/animation/canvas.js");
/* harmony import */ var _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/Smoothscroll */ "./app/utils/Smoothscroll.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _pages_project__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pages/project */ "./app/pages/project/index.js");












class App {
  constructor() {
    this.createPreloader();
    this.initNavigation();
    this.init();
    this.getContent();
  }
  init() {
    this.player = new _components_widgets_music_player_player__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.canvas = new _animation_canvas__WEBPACK_IMPORTED_MODULE_6__["default"]();
  }
  createPreloader() {
    this.preloader = new _components_Preloader__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.preloader.once('completed', () => this.onPreloadEnd());
  }
  onPreloadEnd() {
    this.preloader.destroy();
    this.initPages();
    this.config();
    this.eventListener();
  }
  getContent() {
    this.content = document.querySelector('#content');
    this.template = this.content.getAttribute('data-template');
  }
  initPages() {
    this.pages = {
      home: new _pages_home__WEBPACK_IMPORTED_MODULE_0__["default"](),
      about: new _pages_about__WEBPACK_IMPORTED_MODULE_1__["default"](),
      project: new _pages_project__WEBPACK_IMPORTED_MODULE_9__["default"]()
    };
    this.page = this.pages[this.template];
    this.page.init();
    this.page.create();
    this.page.show();
  }
  initNavigation() {
    this.navigation = new _components_Navigation__WEBPACK_IMPORTED_MODULE_4__["default"]();
  }
  config() {
    this.formHandler = new _config_forms__WEBPACK_IMPORTED_MODULE_5__["default"]('connect', 'connect', 'POST');
  }
  observer(element) {
    const observer = new ResizeObserver(entries => {
      for (const entry of entries) {
        console.log(entry);
        new _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_7__["default"]((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_8__.$)('.wrapper'), {
          direction: 'v',
          smooth: 0.1
        });
      }
    });
    observer.observe(element);
  }
  async onChange({
    url
  }) {
    await this.page.hide();
    const res = await window.fetch(url);
    if (res.status === 200) {
      const html = await res.text();
      window.history.pushState({}, '', url);
      const div = document.createElement('div');
      div.innerHTML = html;
      const divContent = div.querySelector('.content');
      this.template = divContent.getAttribute('data-template');
      this.content.innerHTML = divContent.innerHTML;
      this.page = this.pages[this.template];
      this.page.create();
      this.page.show();
    } else {
      console.error('error: ' + res);
    }
  }
  eventListener() {
    const links = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_8__.$All)('[data-links]');
    const linksItem = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_8__.$All)('.menu__links__item');
    links.forEach(link => {
      const {
        href
      } = link;
      const linkData = href.split('#');
      const [url] = linkData;
      const parent = link.parentNode;
      link.onclick = e => {
        e.preventDefault();
        linksItem.forEach(item => {
          if (item.classList.contains('menu__links__item-active')) {
            item.classList.remove('menu__links__item-active');
          }
        });
        if (url === window.location.href) return;
        this.onChange({
          url: href
        });
        if (!parent.classList.contains('menu__links__item-active')) {
          parent.classList.add('menu__links__item-active');
        }
      };
    });
  }
}

// eslint-disable-next-line no-new
new App();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUksQ0FBQ2tNLEtBQUssQ0FBQyxHQUFHLENBQUM7TUFDaEMsTUFBTSxDQUFDcE0sR0FBRyxDQUFDLEdBQUc2NEMsUUFBUTtNQUN0QixNQUFNdmhELE1BQU0sR0FBRzZJLElBQUksQ0FBQ0MsVUFBVTtNQUU5QkQsSUFBSSxDQUFDaEIsT0FBTyxHQUFJdEssQ0FBQyxJQUFLO1FBQ3BCQSxDQUFDLENBQUMwRCxjQUFjLEVBQUU7UUFFbEJxZ0QsU0FBUyxDQUFDMWpELE9BQU8sQ0FBRXVPLElBQUksSUFBSztVQUMxQixJQUFJQSxJQUFJLENBQUM1RSxTQUFTLENBQUNnRCxRQUFRLENBQUMsMEJBQTBCLENBQUMsRUFBRTtZQUN2RDRCLElBQUksQ0FBQzVFLFNBQVMsQ0FBQzBCLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztVQUNuRDtRQUNGLENBQUMsQ0FBQztRQUVGLElBQUlQLEdBQUcsS0FBSy9KLE1BQU0sQ0FBQ2dLLFFBQVEsQ0FBQ0MsSUFBSSxFQUFFO1FBQ2xDLElBQUksQ0FBQ3E0QyxRQUFRLENBQUM7VUFBRXY0QyxHQUFHLEVBQUVFO1FBQUssQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQzVJLE1BQU0sQ0FBQ3VILFNBQVMsQ0FBQ2dELFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO1VBQzFEdkssTUFBTSxDQUFDdUgsU0FBUyxDQUFDQyxHQUFHLENBQUMsMEJBQTBCLENBQUM7UUFDbEQ7TUFDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0o7QUFDRjs7QUFFQTtBQUNBLElBQUk4NEMsR0FBRyxFQUFFLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvYW5pbWF0aW9uL1BhcmFncmFwaC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvYW5pbWF0aW9uL1NjYWxlLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9hbmltYXRpb24vU2hhcGVzLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9hbmltYXRpb24vVGl0bGUuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2FuaW1hdGlvbi9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jbGFzc2VzL0NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvUGFnZXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvQWxlcnQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9QcmVsb2FkZXIuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvU2VydmljZXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvVGFicy5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jb21wb25lbnRzL3dpZGdldHMvbXVzaWMtcGxheWVyL01lZGlhTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci9UaW1lci5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvd2lkZ2V0cy9tdXNpYy1wbGF5ZXIvdm9sdW1lLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jb25maWcvZm9ybXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL3BhZ2VzL2Fib3V0L2luZGV4LmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9wYWdlcy9ob21lL2luZGV4LmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9wYWdlcy9wcm9qZWN0L2luZGV4LmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC91dGlscy9TbW9vdGhzY3JvbGwuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL3V0aWxzL2Z1bmN0aW9uLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC91dGlscy9zZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL3V0aWxzL3NwbGl0dGV4dC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovL1BvcnRmb2xpby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmltYXRpb24gZnJvbSAnLi4vY2xhc3Nlcy9BbmltYXRpb24nXG5pbXBvcnQgc3BsaXR0ZXh0IGZyb20gJy4uL3V0aWxzL3NwbGl0dGV4dCdcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcmFncmFwaCBleHRlbmRzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICBzcGxpdHRleHQodGhpcy5lbGVtZW50LCAnPGJyPicpXG4gICAgc3BsaXR0ZXh0KHRoaXMuZWxlbWVudCwgJzxicj4nKVxuICAgIHRoaXMuc3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJylcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgICBHU0FQLnRvKHRoaXMuZWxlbWVudCwge1xuICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSlcblxuICAgIEdTQVAudG8odGhpcy5zcGFucywge1xuICAgICAgZGVsYXk6IDAuNSxcbiAgICAgIGR1cmF0aW9uOiAxLjYsXG4gICAgICBzdGFnZ2VyOiAwLjIsXG4gICAgICBlYXNlOiAnZXhwby5pbk91dCcsXG4gICAgICB5OiAnMCUnLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICB9KVxuICB9XG5cbiAgYW5pbWF0ZU91dCgpIHtcbiAgICBHU0FQLnRvKHRoaXMuZWxlbWVudCwge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICB9KVxuXG4gICAgR1NBUC5zZXQodGhpcy5zcGFucywge1xuICAgICAgZGVsYXk6IDAuNixcbiAgICAgIGR1cmF0aW9uOiAxLjYsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4xLFxuICAgICAgeTogJzEwMCUnLFxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7ICRBbGwgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5cbmV4cG9ydCBjbGFzcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnRzID0gJEFsbChlbGVtZW50KVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBzY2FsZVVwKGUpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZS5jdXJyZW50VGFyZ2V0XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoMSlgXG4gIH1cblxuICBzY2FsZURvd24oZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlLmN1cnJlbnRUYXJnZXRcbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZSguOClgXG4gIH1cblxuICBldmVudExpc3RlbmVyKCkge1xuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnNjYWxlRG93bi5iaW5kKHRoaXMpKVxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5zY2FsZVVwLmJpbmQodGhpcykpXG4gICAgfSlcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcGVzIHtcbiAgY29uc3RydWN0b3IoeyBwb3NpdGlvbiwgaGVpZ2h0LCB3aWR0aCwgYmx1ciwgYmFja2dyb3VuZCB9KSB7XG4gICAgdGhpcy50b3AgPSBwb3NpdGlvbi50b3AgPT09IC0xID8gdW5kZWZpbmVkIDogcG9zaXRpb24udG9wXG4gICAgdGhpcy5sZWZ0ID0gcG9zaXRpb24ubGVmdCA9PT0gLTEgPyB1bmRlZmluZWQgOiBwb3NpdGlvbi5sZWZ0XG4gICAgdGhpcy5yaWdodCA9IHBvc2l0aW9uLnJpZ2h0ID09PSAtMSA/IHVuZGVmaW5lZCA6IHBvc2l0aW9uLnJpZ2h0XG4gICAgdGhpcy5ib3R0b20gPSBwb3NpdGlvbi5ib3R0b20gPT09IC0xID8gdW5kZWZpbmVkIDogcG9zaXRpb24uYm90dG9tXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHRcbiAgICB0aGlzLndpZHRoID0gd2lkdGhcbiAgICB0aGlzLmJsdXIgPSBibHVyXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZFxuICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVTaGFwZSgpXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpXG4gICAgdGhpcy5ldmVudHMoKVxuICB9XG5cbiAgY3JlYXRlU2hhcGUoKSB7XG4gICAgdGhpcy5zaGFwZUZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgICB0aGlzLnNoYXBlRnJhbWUuY2xhc3NOYW1lID0gJ3NoYXBlcydcbiAgICB0aGlzLmlkID0gJ3NoYXBlcydcblxuICAgIHRoaXMudGVzdEJyZWFrcG9pbnQoKVxuICAgIC8vIHN0eWxlXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmJvcmRlclJhZGl1cyA9IHRoaXMuaGVpZ2h0WzJdICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmJhY2tncm91bmRcbiAgICAvLyB0aGlzLnNoYXBlRnJhbWUuc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgOHMnXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuXG4gICAgLy8gc2V0IHNoYXBlIHBvc2l0aW9uXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnRvcCA9IHRoaXMudG9wICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5sZWZ0ID0gdGhpcy5sZWZ0ICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5yaWdodCA9IHRoaXMucmlnaHQgKyAncHgnXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmJvdHRvbSA9IHRoaXMuYm90dG9tICsgJ3B4J1xuICB9XG5cbiAgYW5pbXNoYXBlcyhhbmltYXRpb25BcnIpIHtcbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGFuaW1GbG93ID0gbnVsbFxuXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID49IGFuaW1hdGlvbkFyci5sZW5ndGgpIGluZGV4ID0gMFxuICAgICAgYW5pbUZsb3cgPSBhbmltYXRpb25BcnJbaW5kZXhdXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUudG9wID0gYW5pbUZsb3cudG8udG9wICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmxlZnQgPSBhbmltRmxvdy50by5sZWZ0ICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmJvdHRvbSA9IGFuaW1GbG93LnRvLmJvdHRvbSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5yaWdodCA9IGFuaW1GbG93LnRvLnJpZ2h0ICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmZpbHRlciA9IGBibHVyKCR7dGhpcy5ibHVyfXB4KWBcblxuICAgICAgaW5kZXgrK1xuICAgIH0sIDQwMDApXG4gIH1cblxuICBtb3VudFNoYXBlKHBhcmVudCkge1xuICAgIHBhcmVudC5hcHBlbmQodGhpcy5zaGFwZUZyYW1lKVxuICB9XG5cbiAgb25XaW5kb3dSZXNpemUoKSB7XG4gICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgdGhpcy50ZXN0QnJlYWtwb2ludCgpXG4gIH1cblxuICB0ZXN0QnJlYWtwb2ludCgpIHtcbiAgICBpZiAodGhpcy53aW5kb3dXaWR0aCA+PSA2NDAgJiYgdGhpcy53aW5kb3dXaWR0aCA8IDEwMjQpIHtcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodFsxXSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGhbMV0gKyAncHgnXG4gICAgfSBlbHNlIGlmICh0aGlzLndpbmRvd1dpZHRoID49IDEwMjQpIHtcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodFsyXSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGhbMl0gKyAncHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodFswXSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGhbMF0gKyAncHgnXG4gICAgfVxuICB9XG5cbiAgZXZlbnRzKCkge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuLi9jbGFzc2VzL0FuaW1hdGlvbidcbmltcG9ydCBzcGxpdHRleHQgZnJvbSAnLi4vdXRpbHMvc3BsaXR0ZXh0J1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgc3BsaXR0ZXh0KHRoaXMuZWxlbWVudCwgJzxicj4nKVxuICAgIHNwbGl0dGV4dCh0aGlzLmVsZW1lbnQsICc8YnI+JylcbiAgICB0aGlzLnNwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0pXG5cbiAgICBHU0FQLnRvKHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLjUsXG4gICAgICBkdXJhdGlvbjogMS42LFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgeTogJzAlJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSlcblxuICAgIEdTQVAuc2V0KHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgZHVyYXRpb246IDEsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4xLFxuICAgICAgeTogJzEwMCUnLFxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uL2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5pbXBvcnQgU2hhcGVzIGZyb20gJy4vU2hhcGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuaXNNb3VudGVkID0gZmFsc2VcbiAgICB0aGlzLnNoYXBlR3JhZGllbnQgPSAnIzAwRkY0NydcbiAgICB0aGlzLmJsdXIgPSAyMDBcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLm1vdW50RnJhbWUoKVxuICAgIGlmICghdGhpcy5pc01vdW50ZWQpIHJldHVyblxuICAgIGNvbnN0IHNoYXBlMSA9IG5ldyBTaGFwZXMoe1xuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgdG9wOiAtMTAwLFxuICAgICAgICByaWdodDogLTEsXG4gICAgICAgIGxlZnQ6IC0xMDAsXG4gICAgICAgIGJvdHRvbTogLTEsXG4gICAgICB9LFxuXG4gICAgICBoZWlnaHQ6IFsyODAsIDM4MCwgNDgwXSxcbiAgICAgIHdpZHRoOiBbMjgwLCAzODAsIDQ4MF0sXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLnNoYXBlR3JhZGllbnQsXG4gICAgfSlcbiAgICBjb25zdCBzaGFwZTIgPSBuZXcgU2hhcGVzKHtcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHRvcDogLTEsXG4gICAgICAgIHJpZ2h0OiAtMTAwLFxuICAgICAgICBsZWZ0OiAtMSxcbiAgICAgICAgYm90dG9tOiAtMTAwLFxuICAgICAgfSxcbiAgICAgIGhlaWdodDogWzI4MCwgMzgwLCA0ODBdLFxuICAgICAgd2lkdGg6IFsyODAsIDM4MCwgNDgwXSxcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuc2hhcGVHcmFkaWVudCxcbiAgICB9KVxuICAgIHNoYXBlMS5tb3VudFNoYXBlKCQoJyNmcmFtZScpKVxuICAgIHNoYXBlMi5tb3VudFNoYXBlKCQoJyNmcmFtZScpKVxuICB9XG5cbiAgY3JlYXRlRnJhbWUoKSB7XG4gICAgdGhpcy5mcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpXG4gICAgdGhpcy5mcmFtZS5jbGFzc05hbWUgPSAnZnJhbWUnXG4gICAgdGhpcy5mcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICB0aGlzLmZyYW1lLnN0eWxlLnRvcCA9IDBcbiAgICB0aGlzLmZyYW1lLnN0eWxlLmxlZnQgPSAwXG4gICAgdGhpcy5mcmFtZS5zdHlsZS53aWR0aCA9IGAke3dpbmRvdy5pbm5lcldpZHRofXB4YFxuICAgIHRoaXMuZnJhbWUuc3R5bGUuaGVpZ2h0ID0gYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YFxuICAgIHRoaXMuZnJhbWUuc3R5bGUuZmlsdGVyID0gYGJsdXIoJHt0aGlzLmJsdXJ9cHgpYFxuICAgIHRoaXMuZnJhbWUuc3R5bGUuekluZGV4ID0gJy0xJ1xuICAgIHRoaXMuZnJhbWUuaWQgPSAnZnJhbWUnXG4gIH1cblxuICBtb3VudEZyYW1lKCkge1xuICAgIHRoaXMuY3JlYXRlRnJhbWUoKVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuZnJhbWUpXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgICB0aGlzLmlzTW91bnRlZCA9IHRydWVcbiAgfVxuXG4gIG9uUmVzaXplKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLm1vdW50ZWRGcmFtZSA9ICQoJyNmcmFtZScpXG4gICAgdGhpcy5tb3VudGVkRnJhbWUuc3R5bGUud2lkdGggPSBgJHt3aW5kb3cuaW5uZXJXaWR0aH1weGBcbiAgICB0aGlzLm1vdW50ZWRGcmFtZS5zdHlsZS5oZWlnaHQgPSBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgXG4gIH1cblxuICBldmVudExpc3RlbmVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4vQ29tcG9uZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKClcbiAgfVxuXG4gIGNyZWF0ZU9ic2VydmVyKCkge1xuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZUluKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudClcbiAgfVxufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgZWxlbWVudHMgZnJvbSAnLi9lbGVtZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50cyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvbmVudE5hbWUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zZWxlY3RvckNoaWxkcmVucyA9IGVsZW1lbnRzW2NvbXBvbmVudE5hbWVdXG4gICAgdGhpcy5yb290ID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KGVsZW1lbnRzKVxuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmdldEVsZW1lbnRzKHRoaXMuc2VsZWN0b3JDaGlsZHJlbnMpXG4gIH1cblxuICBnZXRFbGVtZW50cyhjaGlsZHJlbnMpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHt9XG4gICAgZm9yIChjb25zdCBrZXlzIGluIGNoaWxkcmVucykge1xuICAgICAgY29uc3QgdmFsdWUgPSBjaGlsZHJlbnNba2V5c11cblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIGVsZW1lbnRzW2tleXNdID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHNba2V5c10gPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSldXG4gICAgICAgIGlmIChlbGVtZW50c1trZXlzXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBlbGVtZW50c1trZXlzXSA9IG51bGxcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50c1trZXlzXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBlbGVtZW50c1trZXlzXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudHNcbiAgfVxuXG4gIGhhbmRsZUVsZW1lbnRPYmplY3Qob2JqZWN0KSB7XG4gICAgbGV0IGJ1aWxkZWRPYmplY3RzID0ge31cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV1cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBidWlsZGVkT2JqZWN0c1trZXldID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVpbGRlZE9iamVjdHNba2V5XSA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKV1cbiAgICAgICAgaWYgKGJ1aWxkZWRPYmplY3RzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYnVpbGRlZE9iamVjdHNba2V5XSA9IG51bGxcbiAgICAgICAgfSBlbHNlIGlmIChidWlsZGVkT2JqZWN0c1trZXldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGJ1aWxkZWRPYmplY3RzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWlsZGVkT2JqZWN0c1xuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuL0NvbXBvbmVudHMnXG4vL2ltcG9ydCBTbW9vdGhzY3JvbGwgZnJvbSAnLi4vdXRpbHMvU21vb3Roc2Nyb2xsJ1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vYW5pbWF0aW9uL1RpdGxlJ1xuaW1wb3J0IFBhcmFncmFwaCBmcm9tICcuLi9hbmltYXRpb24vUGFyYWdyYXBoJ1xuLy9pbXBvcnQgeyBSZXNpemVPYnNlcnZlciB9IGZyb20gJ3Jlc2l6ZS1vYnNlcnZlcidcbmltcG9ydCB7IFNjYWxlIH0gZnJvbSAnLi8uLi9hbmltYXRpb24vU2NhbGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VzIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudHMpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50c1xuICAgIHRoaXMuYW5pbWF0ZU91dCA9IEdTQVAudGltZWxpbmUoKVxuICAgIHRoaXMuZGV2aWNlID0ge1xuICAgICAgbW9iaWxlOiAvbW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgICAgIHRhYmxldDogIS9pcGFkfHRhYmxldC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgfVxuXG4gICAgdGhpcy53cmFwcGVyID0gJCgnLndyYXBwZXInKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnNjYWxlQW5pbWF0aW9uID0gbmV3IFNjYWxlKFwiW2RhdGEtYW5pbWF0aW9uPSdzY2FsZSddXCIpXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICd2aXNpYmxlJ1xuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnXG4gICAgLy8gIGlmICh0aGlzLmRldmljZS5tb2JpbGUgJiYgdGhpcy5kZXZpY2UudGFibGV0KSB7XG4gICAgLy8gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICd2aXNpYmxlJ1xuICAgIC8vICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnXG4gICAgLy8gIH0gZWxzZSB7XG4gICAgLy8gICAgdGhpcy53cmFwcGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAvLyAgICAgIGNvbnNvbGUubG9nKHRoaXMud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSlcbiAgICAvLyAgICB9XG4gICAgLy8gICAgdGhpcy5zbW9vdHNjcm9sbCA9IG5ldyBTbW9vdGhzY3JvbGwodGhpcy53cmFwcGVyLCB7XG4gICAgLy8gICAgICBkaXJlY3Rpb246ICd2JyxcbiAgICAvLyAgICAgIHNtb290aDogMC4xLFxuICAgIC8vICAgIH0pXG4gICAgLy8gIH1cbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zb2xlLmxvZygkKCcud3JhcHBlcicpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKVxuICAgIC8vIHRoaXMuc21vb3RzY3JvbGwudXBkYXRlKClcbiAgfVxuXG4gIGNyZWF0ZUFuaW1hdGlvbigpIHtcbiAgICB0aGlzLmVsZW1lbnRzID0gbmV3IENvbXBvbmVudHModGhpcy5lbGVtZW50KS5lbGVtZW50c1xuICAgIGlmICh0aGlzLmVsZW1lbnRzICYmIHRoaXMuZWxlbWVudHMudGl0bGVzICYmIHRoaXMuZWxlbWVudHMucGFyYWdyYXBoZXMpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMudGl0bGVzLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgbmV3IFRpdGxlKHQpXG4gICAgICB9KVxuICAgICAgdGhpcy5lbGVtZW50cy5wYXJhZ3JhcGhlcy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgIG5ldyBQYXJhZ3JhcGgocClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbigpXG5cbiAgICB0aGlzLmFuaW1hdGVPdXQudG8oJCgnLndyYXBwZXInKSwge1xuICAgICAgZHVyYXRpb246IDIsXG4gICAgICBlYXNlOiAncG93ZXIxLm91dCcsXG4gICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwYWdlIHdhcyBzaG93bicpXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnNvbGUubG9nKCdoaWRkZW4gY3VycmVudCBwYWdlJylcblxuICAgIHRoaXMuYW5pbWF0ZU91dC50bygkKCcud3JhcHBlcicpLCB7XG4gICAgICBkdXJhdGlvbjogMSxcbiAgICAgIGVhc2U6ICdwb3dlcjEuaW4nLFxuICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncGFnZSB3YXMgaGlkZScpXG4gICAgICB9LFxuICAgIH0pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgcHJlbG9hZGVyOiB7XG4gICAgZWxlbWVudDogJy5wcmVsb2FkZXInLFxuICAgIHRleHQ6ICcucHJlbG9hZGVyX190ZXh0X19pdGVtJyxcbiAgICBjb250YWluZXI6ICcucHJlbG9hZGVyX190ZXh0JyxcbiAgICBsb2FkZXI6ICcucHJlbG9hZGVyX19sb2FkZXJfX2JhcicsXG4gICAgd3JhcHBlcjogJy5wcmVsb2FkZXJfX3RleHRfX3dyYXBwZXInLFxuICB9LFxuICBuYXZpZ2F0aW9uOiB7XG4gICAgaGVhZGVyOiAnLmhlYWRlcicsXG4gICAgbmF2TGlzdDogJy5tZW51X19saW5rc19faXRlbScsXG4gICAgcHJldmlld0ltZzogJy5tZW51X19saW5rc19fbWVkaWFfX2ltYWdlJyxcbiAgICBjb250ZW50OiAnLm1lbnVfX2NvbnRlbnQnLFxuICAgIG9wZW5NZW51OiAnLmJ1dHRvbi1vcGVuJyxcbiAgICBjbG9zZU1lbnU6ICcuYnV0dG9uLWNsb3NlJyxcbiAgfSxcbiAgcGxheWVyOiB7XG4gICAgYnV0dG9uOiB7XG4gICAgICBleHBhbmQ6ICcucGxheWVyX19idXR0b24uZXhwYW5kJyxcbiAgICAgIGNsb3NlOiAnLnBsYXllcl9fYnV0dG9uLmNsb3NlJyxcbiAgICAgIHBsYXk6IFwiW2RhdGEtaWNvbj0ncm9iLXBsYXknXVwiLFxuICAgICAgbmV4dDogXCJbZGF0YS1pY29uPSdyb2ItZm9yd2FyZCddXCIsXG4gICAgICBwcmV2OiBcIltkYXRhLWljb249J3JvYi1iYWNrd2FyZCddXCIsXG4gICAgICB0b2dnbGVyOiAnLnBsYXllcl9fY3RhJyxcbiAgICB9LFxuICAgIGNvdmVyQ29udGFpbmVyOiAnLnBsYXllcl9fY292ZXInLFxuICAgIGNvdmVyOiAnLnBsYXllcl9fY292ZXIgaW1nJyxcbiAgICBzZWxmOiAnLnBsYXllcicsXG4gICAgbWVkaWE6ICcucGxheWVyX19tZWRpYScsXG4gICAgYXJ0aXN0OiAnLnBsYXllcl9fZGV0YWlsX19uYW1lJyxcbiAgICB0aXRsZTogJy5wbGF5ZXJfX2RldGFpbF9fdGl0bGUnLFxuICAgIHRpbWVyOiB7XG4gICAgICBzdGFydFRpbWU6ICcucGxheWVyX190aW1lcl9fdGltZXNfX3N0YXJ0dGltZScsXG4gICAgICBlbmRUaW1lOiAnLnBsYXllcl9fdGltZXJfX3RpbWVzX19lbmR0aW1lJyxcbiAgICAgIHJhbmdlOiAnLnBsYXllcl9fdGltZXJfX3Byb2dyZXNzX19yYW5nZScsXG4gICAgICBwcm9ncmVzczogJy5wbGF5ZXJfX3RpbWVyX19wcm9ncmVzc19fYmFyJyxcbiAgICAgIHByZWxvYWQ6ICcucGxheWVyX190aW1lcl9fcHJvZ3Jlc3NfX2VsYXBzZScsXG4gICAgfSxcbiAgICB2b2x1bWU6IHtcbiAgICAgIGdyYXBwZXI6ICcucGxheWVyX192b2x1bWVfX2dyYXAnLFxuICAgICAgc2xpZGVyOiAnLnBsYXllcl9fdm9sdW1lX19zbGlkZXInLFxuICAgICAgY29udGFpbmVyOiAnLnBsYXllcl9fdm9sdW1lX193cmFwcGVyJyxcbiAgICB9LFxuICB9LFxuICBmb3JtOiB7XG4gICAgY29ubmVjdDoge1xuICAgICAgZm9ybTogJy5jb25uZWN0X19mb3JtJyxcbiAgICAgIGJ1dHRvbjogJy5jb25uZWN0X19mb3JtIC5idXR0b24nLFxuICAgICAgbmFtZTogJy5pbnB1dF9fbmFtZScsXG4gICAgICBtYWlsOiAnLmlucHV0X19lbWFpbCcsXG4gICAgICBtZXNzYWdlOiAnI21lc3NhZ2UnLFxuICAgICAgbmFtZUFsZXJ0OiAnLmNvbm5lY3RfX2Zvcm0gLmlucHV0X19hbGVydC1uYW1lJyxcbiAgICAgIGVtYWlsQWxlcnQ6ICcuY29ubmVjdF9fZm9ybSAuaW5wdXRfX2FsZXJ0LWVtYWlsJyxcbiAgICAgIG1lc3NhZ2VBbGVydDogJy5jb25uZWN0X19mb3JtIC5pbnB1dF9fYWxlcnQtbWVzc2FnZScsXG4gICAgICBhbGVydDogJy5jb25uZWN0X19mb3JtIC5pbnB1dF9fYWxlcnQnLFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgIGZvcm06ICcubW9kYWxfX2Zvcm0nLFxuICAgICAgYnV0dG9uOiAnLm1vZGFsX19zdWJtaXRfX2J1dHRvbicsXG4gICAgICBuYW1lOiAnLnVzZXJzUHJvamVjdHNOYW1lJyxcbiAgICAgIG1haWw6ICcudXNlcnNQcm9qZWN0c0VtYWlsJyxcbiAgICAgIG1lc3NhZ2U6ICcudXNlcnNQcm9qZWN0c0lkZWEnLFxuICAgICAgbmFtZUFsZXJ0OiAnLm1vZGFsX19mb3JtX193cmFwcGVyIC5pbnB1dF9fYWxlcnQtbmFtZScsXG4gICAgICBlbWFpbEFsZXJ0OiAnLm1vZGFsX19mb3JtX193cmFwcGVyIC5pbnB1dF9fYWxlcnQtZW1haWwnLFxuICAgICAgbWVzc2FnZUFsZXJ0OiAnLm1vZGFsX19mb3JtX193cmFwcGVyIC5pbnB1dF9fYWxlcnQtbWVzc2FnZScsXG4gICAgICBhbGVydDogJy5tb2RhbF9fZm9ybV9fd3JhcHBlciAuaW5wdXRfX2FsZXJ0JyxcbiAgICAgIGRhdGFTZXJ2aWNlSW5wdXQ6ICcubW9kYWxfX2RhdGEtc2VydmljZXMnLFxuICAgIH0sXG4gICAgYWxlcnQ6ICcuYWxlcnQnLFxuICB9LFxuICBzbGlkZXI6IHtcbiAgICBidXR0b246IHtcbiAgICAgIHByZXY6ICcjcmItc2xpZGVyLWJ1dHRvbi1wcmV2JyxcbiAgICAgIG5leHQ6ICcjcmItc2xpZGVyLWJ1dHRvbi1uZXh0JyxcbiAgICB9LFxuICAgIHdyYXBwZXI6ICcucmItc2xpZGVyLXdyYXBwZXInLFxuICAgIGl0ZW1zOiAnLnJiLXNsaWRlci1pdGVtcycsXG4gICAgY29udGFpbmVyOiAnLnJiLXNsaWRlcicsXG4gIH0sXG4gIHNlcnZpY2VzOiB7XG4gICAgYnV0dG9uczogJy5zZXJ2aWNlc19fY3RhJyxcbiAgfSxcbiAgbW9kYWw6IHtcbiAgICBzZWxmOiAnLm1vZGFsJyxcbiAgICBkYXRhU2VydmljZUlucHV0OiAnLm1vZGFsX19kYXRhLXNlcnZpY2VzJyxcbiAgICBidXR0b246ICcubW9kYWxfX2J1dHRvbiBidXR0b24nLFxuICB9LFxuICBpbWFnZXM6ICdpbWcnLFxuICBhYm91dDoge1xuICAgIHRpdGxlczogXCJbZGF0YS1hbmltYXRpb249J3RpdGxlJ11cIixcbiAgICBwYXJhZ3JhcGhlczogXCJbZGF0YS1hbmltYXRpb249J3BhcmFncmFwaCddXCIsXG4gIH0sXG4gIGhvbWU6IHtcbiAgICB0aXRsZXM6IFwiW2RhdGEtYW5pbWF0aW9uPSd0aXRsZSddXCIsXG4gICAgcGFyYWdyYXBoZXM6IFwiW2RhdGEtYW5pbWF0aW9uPSdwYXJhZ3JhcGgnXVwiLFxuICB9LFxuICBwcm9qZWN0OiB7XG4gICAgdGl0bGVzOiBcIltkYXRhLWFuaW1hdGlvbj0ndGl0bGUnXVwiLFxuICAgIHBhcmFncmFwaGVzOiBcIltkYXRhLWFuaW1hdGlvbj0ncGFyYWdyYXBoJ11cIixcbiAgfSxcbn1cbiIsImltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsZXJ0IHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGUoKVxuICAgIHRoaXMuc2VsZiA9ICQoJy5hbGVydCcpXG4gIH1cblxuICBjcmVhdGUoKSB7XG4gICAgdGhpcy5kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKVxuICAgIHRoaXMuZGl2LmNsYXNzTmFtZSA9ICdhbGVydCdcbiAgICBpZiAodGhpcy50eXBlID09PSAnc3VjY2VzcycpIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoJ2FsZXJ0X19zdWNjZXNzJylcbiAgICBlbHNlIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoJ2FsZXJ0X19lcnJvcicpXG5cbiAgICAvLyBDcmVhdGUgYWxlcnRfX3dyYXBwZXJcbiAgICBjb25zdCB3cmFwcGVyID0gY3JlYXRlRWxlbWVudCgnRElWJywgJ2FsZXJ0X193cmFwcGVyJylcbiAgICAvLyBjb250ZW50XG4gICAgY29uc3QgY29udGVudCA9IGNyZWF0ZUVsZW1lbnQoJ0RJVicsICdhbGVydF9fY29udGVudCcpXG4gICAgLy8gaWNvbnNcbiAgICBjb25zdCBpY29uID0gY3JlYXRlRWxlbWVudCgnU1BBTicsICdhbGVydF9faWNvbicpXG4gICAgLy8gTWVzc2FnZVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVFbGVtZW50KCdQJywgJ2FsZXJ0X19tZXNzYWdlJylcbiAgICBtZXNzYWdlLmlubmVyVGV4dCA9IHRoaXMubWVzc2FnZVxuICAgIC8vIENsb3NlIGljb25cbiAgICBjb25zdCBjbG9zZUljb24gPSBjcmVhdGVFbGVtZW50KCdTUEFOJywgJ2FsZXJ0X19jbG9zZUljb24nKVxuICAgIGNvbnN0IGkgPSBjcmVhdGVFbGVtZW50KCdJJywgJ3JvYi1jbG9zZScpXG4gICAgY2xvc2VJY29uLmFwcGVuZChpKVxuICAgIGNsb3NlSWNvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgLy8gYXBwbmVkIGNoaWxkXG4gICAgY29udGVudC5hcHBlbmQoaWNvbiwgbWVzc2FnZSlcbiAgICB3cmFwcGVyLmFwcGVuZChjb250ZW50LCBjbG9zZUljb24pXG4gICAgdGhpcy5kaXYuYXBwZW5kKHdyYXBwZXIpXG4gICAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRoaXMuZGl2KVxuICAgIHRoaXMuc2VsZiA9IHRoaXMuZGl2XG4gICAgdGhpcy5oaWRlKClcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc05hbWUpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZylcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lXG4gICAgICByZXR1cm4gZWxlbWVudFxuICAgIH1cbiAgfVxuXG4gIHNob3coKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNlbGYuc3R5bGUucmlnaHQgPSAnLjVyZW0nXG4gICAgfSwgMTAwMClcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5zZWxmLnN0eWxlLnJpZ2h0ID0gJy0xMDAlJ1xuICAgIHRoaXMuc2VsZi50cmFuc2l0aW9uID0gJ3JpZ2h0IC42cydcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRpdilcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IHsgJEFsbCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignbmF2aWdhdGlvbicpXG4gICAgdGhpcy5pbml0KClcbiAgICB0aGlzLmV2ZW50c0xpc3RlbmVyKClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgY29uc3QgZGVmYXVsdFNvdXJjZSA9ICdpbWFnZXMvcHJldmlld3MvaW1nLTEnXG4gICAgdGhpcy5yb290Lm5hdmlnYXRpb24ucHJldmlld0ltZy5zcmMgPSBgJHtkZWZhdWx0U291cmNlfS5wbmdgXG4gICAgdGhpcy5zZXRBY3RpdmVMaW5rU3R5bGVzKClcbiAgfVxuXG4gIHNldEFjdGl2ZUxpbmtTdHlsZXMoKSB7XG4gICAgY29uc3QgbGlua3MgPSAkQWxsKCdbZGF0YS1saW5rc10nKVxuICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgbGV0IHBhcmVudFxuXG4gICAgbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgaWYgKGxpbmsuaHJlZiA9PT0gdXJsKSB7XG4gICAgICAgIHBhcmVudCA9IGxpbmsucGFyZW50Tm9kZVxuICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LmFkZCgnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgb25Nb3VzZUhvdmVyTGlua3MoZSkge1xuICAgIGNvbnN0IHNyYyA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc25hcC1pbWFnZScpXG4gICAgdGhpcy5yb290Lm5hdmlnYXRpb24ucHJldmlld0ltZy5zcmMgPSBgJHtzcmN9LnBuZ2BcbiAgfVxuXG4gIG9wZW5NZW51KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLnJvb3QubmF2aWdhdGlvbi5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ21lbnVfX2NvbnRlbnQtdmlzaWJsZScpXG4gIH1cblxuICBjbG9zZU1lbnUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLmNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbWVudV9fY29udGVudC12aXNpYmxlJylcbiAgfVxuXG4gIGV2ZW50c0xpc3RlbmVyKCkge1xuICAgIC8qdGhpcy5yb290Lm5hdmlnYXRpb24ubmF2TGlzdC5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMub25Nb3VzZUhvdmVyTGlua3MuYmluZCh0aGlzKSlcbiAgICB9KSovXG5cbiAgICB0aGlzLnJvb3QubmF2aWdhdGlvbi5vcGVuTWVudS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMub3Blbk1lbnUuYmluZCh0aGlzKVxuICAgIClcbiAgICB0aGlzLnJvb3QubmF2aWdhdGlvbi5jbG9zZU1lbnUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLmNsb3NlTWVudS5iaW5kKHRoaXMpXG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gJ2ltYWdlc2xvYWRlZCdcbi8vaW1wb3J0IGF1dG9CaW5kIGZyb20gJ2F1dG8tYmluZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwcmVsb2FkZXInKVxuXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5zdGFydEluZGV4ID0gMVxuXG4gICAgdGhpcy5zaXplID0ge1xuICAgICAgaGVpZ2h0OiBOdW1iZXIodGhpcy5lbGVtZW50cy50ZXh0WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCksXG4gICAgICB3aWR0aDogTnVtYmVyKHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRXaWR0aCksXG4gICAgICBnYXA6IDIsXG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBjcmVhdGVQcmVsb2FkZXIoKSB7XG4gICAgaWYgKHRoaXMucm9vdC5pbWFnZXMpIHtcbiAgICAgIGNvbnN0IGltZ0xvYWQgPSBpbWFnZXNMb2FkZWQoZG9jdW1lbnQuYm9keSlcblxuICAgICAgaW1nTG9hZC5vbigncHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyhpbWdMb2FkLmltYWdlcy5sZW5ndGgpXG4gICAgICB9KVxuXG4gICAgICBpbWdMb2FkLm9uKCdkb25lJywgKCkgPT4ge1xuICAgICAgICAvLyAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5vbkxvYWQoKVxuICAgICAgICAvLyAgIH0sIDUwMDApXG4gICAgICAgIHRoaXMub25Mb2FkKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYW5pbVByZWxvYWRlclRleHQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZWxlbWVudHMud3JhcHBlci5jaGlsZHJlbi5sZW5ndGhcblxuICAgIC8vR2l2ZSB0aGUgd3JhcHBlciB0aGUgaGVpZ2h0IG9mIHRoZSB0ZXh0XG4gICAgdGhpcy5lbGVtZW50cy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5zaXplLmhlaWdodH1weGBcbiAgICB0aGlzLmVsZW1lbnRzLmNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGAke3RoaXMuc2l6ZS53aWR0aH1weGBcblxuICAgIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZS50b3AgPSBgJHtcbiAgICAgICAgICAoLXRoaXMuc2l6ZS5oZWlnaHQgLSB0aGlzLnNpemUuZ2FwKSAqIHRoaXMuc3RhcnRJbmRleFxuICAgICAgICB9cHhgXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCsrXG4gICAgICB9XG4gICAgfSwgMTAwMClcbiAgfVxuXG4gIG9uUHJvZ3Jlc3MobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggKz0gMVxuICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmxlbmd0aCAvIGxlbmd0aFxuXG4gICAgdGhpcy5lbGVtZW50cy5sb2FkZXIuc3R5bGUud2lkdGggPSBgJHtNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApfSVgXG4gIH1cblxuICBvbkxvYWQoKSB7XG4gICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKVxuICB9XG5cbiAgb25SZXNpemUoZSkge1xuICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgIGhlaWdodDogTnVtYmVyKHRoaXMuZWxlbWVudHMudGV4dFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpLFxuICAgICAgd2lkdGg6IE51bWJlcih0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50V2lkdGgpLFxuICAgICAgZ2FwOiAyLFxuICAgIH1cbiAgICB0aGlzLmFuaW1QcmVsb2FkZXJUZXh0KGUpXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgICAgdGhpcy5hbmltUHJlbG9hZGVyVGV4dC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudHMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMuZWxlbWVudClcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlcyBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2VydmljZXMnKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYnV0dG9ucyA9IFsuLi50aGlzLmVsZW1lbnRzLmJ1dHRvbnNdXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgfVxuXG4gIG9uQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGJ1dHRvbiA9IGUuY3VycmVudFRhcmdldFxuICAgIHRoaXMudHlwZSA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2VydmljZScpXG4gICAgY29uc29sZS5sb2coYnV0dG9uKVxuICAgIHRoaXMucm9vdC5tb2RhbC5kYXRhU2VydmljZUlucHV0LnZhbHVlID0gdGhpcy50eXBlXG4gICAgdGhpcy5yb290Lm1vZGFsLnNlbGYuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdmlzaWJsZScpXG4gIH1cblxuICBjbG9zZU1vZGFsKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAodGhpcy5yb290Lm1vZGFsLnNlbGYuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbC12aXNpYmxlJykpIHtcbiAgICAgIHRoaXMucm9vdC5tb2RhbC5zZWxmLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLXZpc2libGUnKVxuICAgIH1cbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLmJpbmQodGhpcykpXG4gICAgfSlcblxuICAgIHRoaXMucm9vdC5tb2RhbC5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgJEFsbCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFicyB7XG4gIF9fZGVmYXVsdHMgPSB7XG4gICAgZGVmYXVsdEluZGV4OiAwLFxuICB9XG5cbiAgX19zZWxlY3RvcnMgPSB7XG4gICAgbGlzdDoge1xuICAgICAgY29udGFpbmVyOiAnLnRhYnNfX2xpc3QnLFxuICAgICAgY2hpbGRyZW5zOiAnLnRhYnNfX2l0ZW1zJyxcbiAgICAgIGJ1dHRvbnM6ICcudGFic19faXRlbScsXG4gICAgfSxcbiAgICBwYW5lbHM6IHtcbiAgICAgIGNvbnRhaW5lcjogJy50YWJzX19wYW5lbHMnLFxuICAgICAgY2hpbGRyZW5zOiAnLnRhYnNfX3BhbmVsJyxcbiAgICB9LFxuICB9XG5cbiAgX19zdGF0ZSA9IHtcbiAgICBhY3RpdmU6ICdhY3RpdmUnLFxuICAgIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICB9XG5cbiAgX19hdHRyaWJ1YmVzID0ge1xuICAgIGJ1dHRvbjogJ2RhdGEtdGFicy1pbmRleCcsXG4gICAgcGFuZWw6ICdkYXRhLXRhYnMtcGFuZWwnLFxuICAgIGJ1dHRvblN0YXRlOiAnZGF0YS10YWJzLWluZGV4LWFjdGl2ZScsXG4gICAgcGFubmVsU3RhdGU6ICdkYXRhLXRhYnMtcGFuZWwtYWN0aXZlJyxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgZGVmYXVsdEluZGV4IH0pIHtcbiAgICB0aGlzLnByb3BzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgZGVmYXVsdEluZGV4LFxuICAgICAgfSxcbiAgICAgIHRoaXMuX19kZWZhdWx0c1xuICAgIClcblxuICAgIHRoaXMuYnV0dG9ucyA9ICRBbGwoYCR7dGhpcy5fX3NlbGVjdG9ycy5saXN0LmJ1dHRvbnN9YClcbiAgICB0aGlzLnBhbmVscyA9ICRBbGwoYCR7dGhpcy5fX3NlbGVjdG9ycy5wYW5lbHMuY2hpbGRyZW5zfWApXG5cbiAgICB0aGlzLmluaXQoKVxuICAgIHRoaXMuc2V0SW5kZXgoKVxuICAgIHRoaXMuZXZlbnRzTGlzdGVuZXJzKClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKFxuICAgICAgJ3RhYnNfX2l0ZW0tc3R5bGUtYWN0aXZlJ1xuICAgIClcblxuICAgIHRoaXMucGFuZWxzW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5wYW5uZWxTdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3RhYnNfX3BhbmVsLWFjdGl2ZScpXG4gIH1cblxuICBzZXRJbmRleCgpIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b24sIGluZGV4KVxuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSwgZmFsc2UpXG4gICAgfSlcblxuICAgIHRoaXMucGFuZWxzLmZvckVhY2goKHBhbmVsLCBpbmRleCkgPT4ge1xuICAgICAgcGFuZWwuc2V0QXR0cmlidXRlKHRoaXMuX19hdHRyaWJ1YmVzLnBhbmVsLCBpbmRleClcbiAgICAgIHBhbmVsLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5wYW5uZWxTdGF0ZSwgZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIG9uQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b24pXG5cbiAgICAvL3Vuc2V0IHByZXZpb3VzIGFjdGl2ZSBlbGVtZW50XG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLnNldEF0dHJpYnV0ZShcbiAgICAgIHRoaXMuX19hdHRyaWJ1YmVzLnBhbm5lbFN0YXRlLFxuICAgICAgZmFsc2VcbiAgICApXG5cbiAgICB0aGlzLmJ1dHRvbnNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAndGFic19faXRlbS1zdHlsZS1hY3RpdmUnXG4gICAgKVxuXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIGZhbHNlXG4gICAgKVxuXG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ3RhYnNfX3BhbmVsLWFjdGl2ZScpXG5cbiAgICB0aGlzLnByb3BzLmRlZmF1bHRJbmRleCA9IGluZGV4XG5cbiAgICAvL2FjdGl2ZSBjdXJyZW50ICBidXR0b24gYW5kIHRhYnNcbiAgICB0aGlzLnBhbmVsc1t0aGlzLnByb3BzLmRlZmF1bHRJbmRleF0uc2V0QXR0cmlidXRlKFxuICAgICAgdGhpcy5fX2F0dHJpYnViZXMucGFubmVsU3RhdGUsXG4gICAgICB0cnVlXG4gICAgKVxuICAgIHRoaXMucGFuZWxzW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKCd0YWJzX19wYW5lbC1hY3RpdmUnKVxuXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKFxuICAgICAgJ3RhYnNfX2l0ZW0tc3R5bGUtYWN0aXZlJ1xuICAgIClcbiAgfVxuXG4gIGV2ZW50c0xpc3RlbmVycygpIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSlcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi8uLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlciBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2xpZGVyJylcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMuaXRlbXMpIHJldHVyblxuXG4gICAgdGhpcy5jaGlsZCA9IFsuLi50aGlzLmVsZW1lbnRzLml0ZW1zLmNoaWxkcmVuXVxuICAgIHRoaXMuaW5kZXggPSAxXG4gICAgdGhpcy5wYWRkaW5nID0gMjRcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IDBcbiAgICB0aGlzLnRyZXNob2xkID0gMFxuICAgIHRoaXMuZHJhZ0ludGVydmFsbCA9IDgwXG5cbiAgICB0aGlzLnNldENoaWxkV2lkdGgoKVxuICAgIHRoaXMuc2V0UG9zaXRpb24oKVxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBzZXRDaGlsZFdpZHRoKCkge1xuICAgIHRoaXMuY2hpbGQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5zdHlsZS5mbGV4ID0gJ25vbmUnXG4gICAgICBpdGVtLnN0eWxlLndpZHRoID0gYCR7d2luZG93LmlubmVyV2lkdGggKiAwLjh9cHhgXG4gICAgfSlcbiAgfVxuXG4gIHNldFBvc2l0aW9uKCkge1xuICAgIHRoaXMud2lkdGggPSB0aGlzLmVsZW1lbnRzLml0ZW1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPVxuICAgICAgLSgodGhpcy53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoIC0gMjQpIC8gMikgKiB0aGlzLmluZGV4XG4gICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHt0aGlzLmN1cnJlbnRQb3NpdGlvbn1weCwgMCwgMClgXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBvc2l0aW9uXG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICh0aGlzLmluZGV4ID49IHRoaXMuY2hpbGQubGVuZ3RoIC0gMSkgcmV0dXJuXG4gICAgdGhpcy5pbmRleCsrXG4gICAgaWYgKHRoaXMuaW5kZXggPT09IDIpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmVsZW1lbnRzLml0ZW1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9XG4gICAgICAgIC0oKHRoaXMud2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aCkgLyAyKSAqIHRoaXMuaW5kZXhcbiAgICAgIHRoaXMuZWxlbWVudHMuaXRlbXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNEKCR7XG4gICAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uIC0gdGhpcy5wYWRkaW5nXG4gICAgICB9cHgsIDAsIDApYFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKClcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIGlmICh0aGlzLmluZGV4IDw9IDApIHtcbiAgICAgIHRoaXMuaW5kZXggPSAwXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5pbmRleC0tXG4gICAgaWYgKHRoaXMuaW5kZXggPT09IDApIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmVsZW1lbnRzLml0ZW1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9XG4gICAgICAgIC0oKHRoaXMud2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aCAtIDI0KSAvIDIpICogdGhpcy5pbmRleFxuICAgICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHt0aGlzLnBhZGRpbmd9cHgsIDAsIDApYFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKClcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlRG93bihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLnN0eWxlLmN1cnNvciA9ICdncmFiYmluZydcblxuICAgIHRoaXMuaXNEb3duID0gdHJ1ZVxuICAgIHRoaXMuZHJhZ1N0YXJ0ID0gZS54XG4gICAgdGhpcy5kcmFnU3RhcnR5ID0gZS55XG4gIH1cblxuICBvbk1vdXNlTW92ZShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXG4gICAgdGhpcy50cmVzaG9sZCA9IGUueCAtIHRoaXMuZHJhZ1N0YXJ0XG4gICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHtcbiAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uICsgdGhpcy50cmVzaG9sZFxuICAgIH1weCwgMCwgMClgXG4gIH1cblxuICBvbk1vdXNlVXAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZS5jdXJzb3IgPSAnZ3JhYidcbiAgICBpZiAodGhpcy50cmVzaG9sZCA+IDAgJiYgdGhpcy50cmVzaG9sZCA+PSB0aGlzLmRyYWdJbnRlcnZhbGwpIHtcbiAgICAgIHRoaXMucHJldigpXG4gICAgICBjb25zb2xlLmxvZygncHJldicpXG4gICAgfSBlbHNlIGlmICh0aGlzLnRyZXNob2xkIDwgMCAmJiB0aGlzLnRyZXNob2xkIDw9IC10aGlzLmRyYWdJbnRlcnZhbGwpIHtcbiAgICAgIHRoaXMubmV4dCgpXG4gICAgICBjb25zb2xlLmxvZygnbmV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuaXRlbXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNEKCR7dGhpcy5jdXJyZW50UG9zaXRpb259cHgsIDAsIDApYFxuICAgIH1cblxuICAgIHRoaXMuaXNEb3duID0gZmFsc2VcbiAgfVxuXG4gIG9uV2luZG93UmVzaXplKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLnNldENoaWxkV2lkdGgoKVxuICAgIHRoaXMuc2V0UG9zaXRpb24oKVxuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5uZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5uZXh0LmJpbmQodGhpcykpXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucHJldi5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2Vkb3duJyxcbiAgICAgIHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKVxuICAgIClcbiAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZW92ZXInLFxuICAgICAgdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSlcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5jb25zdCBkYXRhID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vZGF0YXMvc291bmRzLmpzb24nKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lciB7XG4gIGNvbnN0cnVjdG9yKHN0YXJ0dGltZSwgZW5kdGltZSwgcmFuZ2UsIHByb2dyZXNzLCBwcmVsb2FkZXIsIG1lZGlhKSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IHsgc3RhcnR0aW1lLCBlbmR0aW1lLCByYW5nZSwgcHJlbG9hZGVyLCBwcm9ncmVzcyB9XG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy4jaW5pdCgpXG4gIH1cblxuICAjaW5pdCgpIHtcbiAgICB0aGlzLiNhZGRFdmVudExpc3RlbmVyKClcbiAgfVxuXG4gICNpc1BsYXkoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy5tZWRpYS5jdXJyZW50VGltZSlcbiAgICBjb25zb2xlLmxvZygnaXMgc3RhcnQgcGxheScpXG4gIH1cblxuICAjb25QYXVzZSgpIHtcbiAgICBjb25zb2xlLmxvZygnUGF1c2UnKVxuICB9XG5cbiAgaXNFbmRlZChjYikge1xuICAgIGNiKClcbiAgfVxuXG4gICNzZXRUaW1lKCkge1xuICAgIHRoaXMuaG91cnMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuY3VycmVudFRpbWUgLyAzNjAwKVxuICAgIHRoaXMubWludXRlcyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5jdXJyZW50VGltZSAvIDYwKVxuICAgIHRoaXMuc2Vjb25kcyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5jdXJyZW50VGltZSAtIHRoaXMubWludXRlcyAqIDYwKVxuXG4gICAgdGhpcy5ob3Vyc1ZhbHVlID0gdGhpcy5taW51dGVzVmFsdWUgPSB0aGlzLnNlY29uZHNWYWx1ZSA9IDBcblxuICAgIGlmICh0aGlzLmhvdXJzIDw9IDApIHtcbiAgICAgIHRoaXMuaG91cnNWYWx1ZSA9IGAwJHt0aGlzLmhvdXJzfWBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ob3Vyc1ZhbHVlID0gdGhpcy5ob3Vyc1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1pbnV0ZXMgPCAxMCkge1xuICAgICAgdGhpcy5taW51dGVzVmFsdWUgPSBgMCR7dGhpcy5taW51dGVzfWBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5taW51dGVzVmFsdWUgPSB0aGlzLm1pbnV0ZXNcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zZWNvbmRzIDwgMTApIHtcbiAgICAgIHRoaXMuc2Vjb25kc1ZhbHVlID0gYDAke3RoaXMuc2Vjb25kc31gXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2Vjb25kc1ZhbHVlID0gdGhpcy5zZWNvbmRzXG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5zdGFydHRpbWUudGV4dENvbnRlbnQgPSBgJHt0aGlzLm1pbnV0ZXNWYWx1ZX0gOiAke3RoaXMuc2Vjb25kc1ZhbHVlfWBcbiAgICB0aGlzLiN1cGRhdGVQcm9ncmVzcygpXG4gIH1cblxuICAjdXBkYXRlUHJvZ3Jlc3MoKSB7XG4gICAgdGhpcy5lbGVtZW50cy5yYW5nZS52YWx1ZSA9IHRoaXMubWVkaWEuY3VycmVudFRpbWVcbiAgICB0aGlzLnJhdGlvID0gdGhpcy5lbGVtZW50cy5yYW5nZS52YWx1ZSAvIHRoaXMuZWxlbWVudHMucmFuZ2UubWF4XG4gICAgdGhpcy5lbGVtZW50cy5wcm9ncmVzcy5zdHlsZS53aWR0aCA9IGAke3RoaXMucmF0aW8gKiAxMDB9JWBcbiAgfVxuXG4gICNzZXRGdWxsVGltZSgpIHtcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5kdXJhdGlvbiAvIDM2MDApXG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5kdXJhdGlvbiAvIDYwKVxuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuZHVyYXRpb24gLSBtaW51dGVzICogNjApXG5cbiAgICBpZiAoaG91cnMgPD0gMCkge1xuICAgICAgdGhpcy5lbGVtZW50cy5lbmR0aW1lLnRleHRDb250ZW50ID0gYCR7bWludXRlc30gOiAke3NlY29uZHN9YFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVuZHRpbWUudGV4dENvbnRlbnQgPSBgJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN9YFxuICAgIH1cbiAgfVxuXG4gICNvblRpbWVDaGFuZ2UoKSB7XG4gICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IHRoaXMuZWxlbWVudHMucmFuZ2UudmFsdWVcbiAgICB0aGlzLiNzZXRUaW1lKClcbiAgfVxuXG4gICNwcm9ncmVzcygpIHtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMubWVkaWEuZHVyYXRpb25cbiAgICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVkaWEuYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMubWVkaWEuYnVmZmVyZWQuc3RhcnQodGhpcy5tZWRpYS5idWZmZXJlZC5sZW5ndGggLSAxIC0gaSkgPFxuICAgICAgICAgIHRoaXMubWVkaWEuY3VycmVudFRpbWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICB0aGlzLm1lZGlhLmJ1ZmZlcmVkLmVuZChcbiAgICAgICAgICAgICAgdGhpcy5tZWRpYS5idWZmZXJlZC5sZW5ndGggLSAxIC0gaSAvIGR1cmF0aW9uXG4gICAgICAgICAgICApICogMTAwXG4gICAgICAgICAgKVxuICAgICAgICAgIHRoaXMuZWxlbWVudHMucHJlbG9hZGVyLnN0eWxlLndpZHRoID1cbiAgICAgICAgICAgICh0aGlzLm1lZGlhLmJ1ZmZlcmVkLmVuZCh0aGlzLm1lZGlhLmJ1ZmZlcmVkLmxlbmd0aCAtIDEgLSBpKSAvXG4gICAgICAgICAgICAgIGR1cmF0aW9uKSAqXG4gICAgICAgICAgICAgIDEwMCArXG4gICAgICAgICAgICAnJSdcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgI21ldGFEYXRhTG9hZGVkKCkge1xuICAgIHRoaXMuI3NldEZ1bGxUaW1lKClcbiAgICB0aGlzLmVsZW1lbnRzLnJhbmdlLm1heCA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5kdXJhdGlvbilcblxuICAgIHRoaXMuZWxlbWVudHMucmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLiNvblRpbWVDaGFuZ2UuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCB0aGlzLiNpc1BsYXkuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgdGhpcy4jb25QYXVzZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCB0aGlzLmlzRW5kZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0aGlzLiNzZXRUaW1lLmJpbmQodGhpcykpXG4gIH1cblxuICAjYWRkRXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdGhpcy4jcHJvZ3Jlc3MuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnbG9hZGVkbWV0YWRhdGEnLFxuICAgICAgdGhpcy4jbWV0YURhdGFMb2FkZWQuYmluZCh0aGlzKVxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vLi4vLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IE1lZGlhTWFuYWdlciBmcm9tICcuL01lZGlhTWFuYWdlcidcbmltcG9ydCBUaW1lciBmcm9tICcuL1RpbWVyJ1xuaW1wb3J0IFZvbHVtZSBmcm9tICcuL3ZvbHVtZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwbGF5ZXInKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuaXNFeHBhbmQgPSBmYWxzZVxuICAgIHRoaXMuc3JjID0gdGhpcy5lbGVtZW50cy5tZWRpYS5nZXRBdHRyaWJ1dGUoJ3NyYycpXG4gICAgdGhpcy5tZWRpYSA9IHRoaXMuZWxlbWVudHMubWVkaWFcbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLnJhbmRvbUlkID0gMFxuICAgIHRoaXMuc291bmQgPSBudWxsXG4gICAgdGhpcy5pY29uID0gdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5xdWVyeVNlbGVjdG9yKCdpJylcblxuICAgIHRoaXMubWVkaWFNYW5hZ2VyID0gbmV3IE1lZGlhTWFuYWdlcigpXG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLm1lZGlhTWFuYWdlci5kYXRhLmxlbmd0aFxuICAgIHRoaXMucmFuZG9tSWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmxlbmd0aClcblxuICAgIHRoaXMuY29tcG9uZW50c0hhbmRsZXIodGhpcy5yYW5kb21JZClcbiAgICB0aGlzLmV2ZW50c0xpc3Rlcm5lcigpXG4gIH1cblxuICBleHBhbmQoKSB7XG4gICAgaWYgKHRoaXMucm9vdC5wbGF5ZXIuY292ZXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdpc0V4cGFuZCcpKSB7XG4gICAgICB0aGlzLnJvb3QucGxheWVyLmJ1dHRvbi5leHBhbmQucXVlcnlTZWxlY3Rvcignc3BhbicpLnRleHRDb250ZW50ID1cbiAgICAgICAgJ0V4cGFuZCdcbiAgICAgIHRoaXMucm9vdC5wbGF5ZXIuY292ZXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaXNFeHBhbmQnKVxuICAgICAgdGhpcy5yb290LnBsYXllci5jb3ZlckNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMHB4J1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucGxheWVyLmNvdmVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2lzRXhwYW5kJylcbiAgICAgIHRoaXMucm9vdC5wbGF5ZXIuYnV0dG9uLmV4cGFuZC5xdWVyeVNlbGVjdG9yKCdzcGFuJykudGV4dENvbnRlbnQgPVxuICAgICAgICAnUmVkdWNlJ1xuICAgICAgdGhpcy5yb290LnBsYXllci5jb3ZlckNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMTgwcHgnXG4gICAgfVxuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5lbGVtZW50cy5zZWxmLmNsYXNzTGlzdC5hZGQoJ2lzSGlkZGVuJylcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi50b2dnbGVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgdGhpcy5lbGVtZW50cy5zZWxmLmNsYXNzTGlzdC5yZW1vdmUoJ2lzSGlkZGVuJylcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi50b2dnbGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgfVxuXG4gIGNvbXBvbmVudHNIYW5kbGVyKGlkKSB7XG4gICAgdGhpcy5zb3VuZCA9IHRoaXMubWVkaWFNYW5hZ2VyLmRhdGFbaWRdXG4gICAgdGhpcy5tZWRpYS5zcmMgPSB0aGlzLnNvdW5kLmxpbmtcbiAgICB0aGlzLnNldENvbXBvbmVudHModGhpcy5zb3VuZClcbiAgICB0aGlzLnRpbWVySGFuZGxlcih0aGlzLm1lZGlhKVxuICB9XG5cbiAgc2V0Q29tcG9uZW50cyhzb3VuZCkge1xuICAgIHRoaXMuY292ZXJIYW5kbGVyKHNvdW5kKVxuICAgIHRoaXMudm9sdW1lSGFuZGxlcih0aGlzLm1lZGlhKVxuICAgIHRoaXMuc2V0U291bmREZXRhaWxzKHNvdW5kKVxuICB9XG5cbiAgY292ZXJIYW5kbGVyKHNvdW5kKSB7XG4gICAgdGhpcy5lbGVtZW50cy5jb3Zlci5zcmMgPSBzb3VuZC5hbGJ1bS5jb3ZlclxuICB9XG5cbiAgc2V0U291bmREZXRhaWxzKHNvdW5kKSB7XG4gICAgdGhpcy5lbGVtZW50cy5hcnRpc3QuaW5uZXJUZXh0ID0gc291bmQuYXJ0aXN0Lm5hbWVcbiAgICB0aGlzLmVsZW1lbnRzLnRpdGxlLmlubmVyVGV4dCA9IHNvdW5kLnRpdGxlXG4gIH1cblxuICBwbGF5KCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LmRhdGFzZXQuaWNvbiA9PT0gJ3JvYi1wbGF5Jykge1xuICAgICAgdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdyb2ItcGF1c2UnKVxuICAgICAgdGhpcy5pY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm9iLXBhdXNlJylcbiAgICAgIHRoaXMubWVkaWEucGxheSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAncm9iLXBsYXknKVxuICAgICAgdGhpcy5pY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm9iLXBsYXknKVxuICAgICAgdGhpcy5tZWRpYS5wYXVzZSgpXG4gICAgfVxuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuZGF0YXNldC5pY29uID09PSAncm9iLXBsYXknKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ3JvYi1wYXVzZScpXG4gICAgICB0aGlzLmljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb2ItcGF1c2UnKVxuICAgICAgdGhpcy5tZWRpYS5wYXVzZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAncm9iLXBsYXknKVxuICAgICAgdGhpcy5pY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm9iLXBsYXknKVxuICAgIH1cbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5tZWRpYS5wYXVzZSgpXG4gICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IDBcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ3JvYi1wbGF5JylcbiAgICB0aGlzLmljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb2ItcGxheScpXG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMucmFuZG9tSWQrK1xuICAgIGlmICh0aGlzLnJhbmRvbUlkID4gdGhpcy5sZW5ndGggLSAxKSB0aGlzLnJhbmRvbUlkID0gMFxuICAgIHRoaXMuc3RvcCgpXG4gICAgdGhpcy5jb21wb25lbnRzSGFuZGxlcih0aGlzLnJhbmRvbUlkKVxuICAgIHRoaXMucGxheSgpXG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMucmFuZG9tSWQtLVxuICAgIGlmICh0aGlzLnJhbmRvbUlkIDwgMCkgdGhpcy5yYW5kb21JZCA9IHRoaXMubGVuZ3RoIC0gMVxuICAgIHRoaXMuc3RvcCgpXG4gICAgdGhpcy5jb21wb25lbnRzSGFuZGxlcih0aGlzLnJhbmRvbUlkKVxuICAgIHRoaXMucGxheSgpXG4gIH1cblxuICB0aW1lckhhbmRsZXIobWVkaWEpIHtcbiAgICB0aGlzLnRpbWUgPSBuZXcgVGltZXIoXG4gICAgICB0aGlzLmVsZW1lbnRzLnRpbWVyLnN0YXJ0VGltZSxcbiAgICAgIHRoaXMuZWxlbWVudHMudGltZXIuZW5kVGltZSxcbiAgICAgIHRoaXMuZWxlbWVudHMudGltZXIucmFuZ2UsXG4gICAgICB0aGlzLmVsZW1lbnRzLnRpbWVyLnByb2dyZXNzLFxuICAgICAgdGhpcy5lbGVtZW50cy50aW1lci5wcmVsb2FkLFxuICAgICAgbWVkaWFcbiAgICApXG4gIH1cblxuICB2b2x1bWVIYW5kbGVyKHNvdW5kKSB7XG4gICAgdGhpcy52b2x1bWUgPSBuZXcgVm9sdW1lKFxuICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWUuY29udGFpbmVyLFxuICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWUuZ3JhcHBlcixcbiAgICAgIHRoaXMuZWxlbWVudHMudm9sdW1lLnNsaWRlcixcbiAgICAgIHNvdW5kXG4gICAgKVxuICB9XG5cbiAgZXZlbnRzTGlzdGVybmVyKCkge1xuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLmV4cGFuZC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMuZXhwYW5kLmJpbmQodGhpcylcbiAgICApXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24uY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpXG4gICAgLy8gQ29udHJvbFxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsYXkuYmluZCh0aGlzKSlcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5uZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5uZXh0LmJpbmQodGhpcykpXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucHJldi5iaW5kKHRoaXMpKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnRvZ2dsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnNob3cuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi8uLi91dGlscy9mdW5jdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm9sdW1lIHtcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBncmFwcGVyLCBzbGlkZXIsIG1lZGlhKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLmdyYXBwZXIgPSBncmFwcGVyXG4gICAgdGhpcy5jb250YWluZXJCb3R0b20gPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b21cbiAgICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICAgIHRoaXMuY29udGFpbmVyVG9wID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gICAgdGhpcy5zbGlkZXIgPSBzbGlkZXJcbiAgICB0aGlzLm1lZGlhID0gbWVkaWFcbiAgICB0aGlzLmlzRG93biA9IGZhbHNlXG4gICAgdGhpcy5wb3NpdGlvbiA9IHsgc3RhcnQ6IDAsIGVuZDogMCB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKClcbiAgfVxuXG4gIG9uUG9pbnRlckRvd24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuaXNEb3duID0gdHJ1ZVxuXG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwb2ludGVybW92ZScsXG4gICAgICB0aGlzLm9uUG9pbnRlck1vdmUuYmluZCh0aGlzKVxuICAgIClcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlclVwLmJpbmQodGhpcykpXG4gIH1cblxuICBvblBvaW50ZXJNb3ZlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoIXRoaXMuaXNEb3duICYmICF0aGlzLmlzT3V0T2ZWb2x1bWVWaWV3KHRoaXMuY29udGFpbmVyKSkgcmV0dXJuXG4gICAgdGhpcy5yYXRpbyA9IHRoaXMuY29udGFpbmVySGVpZ2h0IC0gKGUucGFnZVkgLSB0aGlzLmNvbnRhaW5lclRvcClcbiAgICB0aGlzLnNsaWRlci5zdHlsZS5oZWlnaHQgPSBgJHtjbGFtcChcbiAgICAgICh0aGlzLnJhdGlvIC8gdGhpcy5jb250YWluZXJIZWlnaHQpICogMTAwLFxuICAgICAgMCxcbiAgICAgIDEwMFxuICAgICl9JWBcbiAgICB0aGlzLm1lZGlhLnZvbHVtZSA9IGNsYW1wKHRoaXMucmF0aW8gLyB0aGlzLmNvbnRhaW5lckhlaWdodCwgMCwgMSlcbiAgfVxuXG4gIG9uUG9pbnRlclVwKCkge1xuICAgIHRoaXMuaXNEb3duID0gZmFsc2VcbiAgfVxuXG4gIGlzT3V0T2ZWb2x1bWVWaWV3KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50Lm9ubW91c2VsZWF2ZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ3BvaW50ZXJkb3duJyxcbiAgICAgIHRoaXMub25Qb2ludGVyRG93bi5iaW5kKHRoaXMpLFxuICAgICAgZmFsc2VcbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uL2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBBbGVydCBmcm9tICcuLi9jb21wb25lbnRzL0FsZXJ0J1xuaW1wb3J0IHsgdmFsaWRFbWFpbCB9IGZyb20gJy4uL3V0aWxzL2Z1bmN0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtSGFuZGxlciBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCB1cmwsIG1ldGhvZCkge1xuICAgIHN1cGVyKCdmb3JtJylcbiAgICB0aGlzLmZvcm1UeXBlID0gdHlwZVxuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kXG4gICAgdGhpcy51cmwgPSBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS8ke3VybH1gXG4gICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuZWxlbWVudHNbdGhpcy5mb3JtVHlwZV1cbiAgICB0aGlzLnZhbCA9IDBcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgLy8gU2VuZFRvRGIgKCkge31cblxuICBhc3luYyBmZXRjaCh1cmwsIG1ldGhvZCwgZGF0YSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2QsXG4gICAgICBtb2RlOiAnbm8tY29ycycsXG4gICAgICBib2R5OiBkYXRhLFxuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgLy8gc3VjY2Vzc1xuICAgICAgcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMuYWxlcnQgPSBuZXcgQWxlcnQoZGF0YS50ZXh0LCBkYXRhLnR5cGUpXG4gICAgICAgIHRoaXMuYWxlcnQuc2hvdygpXG4gICAgICAgIHRoaXMuZWxlbWVudHMuZm9ybS5yZXNldCgpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlcnJvclxuICAgICAgcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMuYWxlcnQgPSBuZXcgQWxlcnQoZGF0YS50ZXh0LCBkYXRhLnR5cGUpXG4gICAgICAgIHRoaXMuYWxlcnQuc2hvdygpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHNlbmREYXRhKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCB2YWxpZE51bWJlciA9IHRoaXMudmVyaWZ5RGF0YShcbiAgICAgIHRoaXMuZWxlbWVudHMubWFpbCxcbiAgICAgIHRoaXMuZWxlbWVudHMubmFtZSxcbiAgICAgIHRoaXMuZWxlbWVudHMubWVzc2FnZVxuICAgIClcbiAgICBpZiAoIXZhbGlkTnVtYmVyKSByZXR1cm5cbiAgICB0aGlzLmVsZW1lbnRzLmFsZXJ0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBlbC5pbm5lclRleHQgPSAnJ1xuICAgIH0pXG4gICAgY29uc3QgZm9ybUVsZW1lbnRzID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgRm9ybURhdGEodGhpcy5lbGVtZW50cy5mb3JtKSlcbiAgICB0aGlzLmZldGNoKHRoaXMudXJsLCB0aGlzLm1ldGhvZCwgZm9ybUVsZW1lbnRzKVxuICB9XG5cbiAgdmVyaWZ5RGF0YShtYWlsLCBuYW1lLCBtZXNzYWdlKSB7XG4gICAgdGhpcy52YWwgPSAwXG4gICAgLy8gZW1haWxcbiAgICBpZiAodmFsaWRFbWFpbChtYWlsLnZhbHVlKSkge1xuICAgICAgdGhpcy52YWwrK1xuICAgIH0gZWxzZSBpZiAobWFpbC52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuZW1haWxBbGVydC5pbm5lclRleHQgPSAnUmVxdWlyZWQqJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVtYWlsQWxlcnQuaW5uZXJUZXh0ID0gJ1RoaXMgZW1haWwgaXMgbm90IHZhbGlkJ1xuICAgIH1cblxuICAgIC8vIG5hbWVcbiAgICBpZiAobmFtZS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMubmFtZUFsZXJ0LmlubmVyVGV4dCA9ICdSZXF1aXJlZConXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsKytcbiAgICB9XG5cbiAgICAvLyBtZXNzYWdlXG4gICAgaWYgKG1lc3NhZ2UudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLm1lc3NhZ2VBbGVydC5pbm5lclRleHQgPSAnUmVxdWlyZWQqJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbCsrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudmFsID09PSAzXG4gIH1cblxuICBldmVudExpc3RlbmVyKCkge1xuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zZW5kRGF0YS5iaW5kKHRoaXMpKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vLi4vY2xhc3Nlcy9QYWdlcydcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0IGV4dGVuZHMgUGFnZXMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoJ2Fib3V0JylcbiAgfVxuXG4gIGNyZWF0ZSAoKSB7XG4gICAgc3VwZXIuY3JlYXRlKClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vLi4vY2xhc3Nlcy9QYWdlcydcbmltcG9ydCBTbGlkZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyJ1xuaW1wb3J0IFNlcnZpY2VzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvU2VydmljZXMnXG5pbXBvcnQgRm9ybUhhbmRsZXIgZnJvbSAnLi4vLi4vY29uZmlnL2Zvcm1zJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignaG9tZScpXG4gIH1cblxuICBjcmVhdGUoKSB7XG4gICAgc3VwZXIuY3JlYXRlKClcbiAgICBuZXcgU2xpZGVyKClcbiAgICBuZXcgU2VydmljZXMoKVxuICAgIG5ldyBGb3JtSGFuZGxlcignbW9kYWwnLCAncHJvamVjdHMvdXNlcnNQcm9qZWN0cycsICdQT1NUJylcbiAgfVxufVxuIiwiaW1wb3J0IFBhZ2VzIGZyb20gJy4uLy4uL2NsYXNzZXMvUGFnZXMnXG5pbXBvcnQgVGFicyBmcm9tICcuLi8uLi9jb21wb25lbnRzL1RhYnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3QgZXh0ZW5kcyBQYWdlcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwcm9qZWN0JylcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICB0aGlzLnRhYnMgPSBuZXcgVGFicyh7IGRlZmF1bHRJbmRleDogMSB9KVxuICAgIHN1cGVyLmNyZWF0ZSgpXG4gIH1cbn1cbiIsImltcG9ydCB7IGxlcnAsIGNsYW1wIH0gZnJvbSAnLi9mdW5jdGlvbidcbmltcG9ydCBub3JtYWxpemVXaGVlbCBmcm9tICdub3JtYWxpemUtd2hlZWwnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNtb290aHNjcm9sbCB7XG4gIF9fZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgZGlyZWN0aW9uOiAndicsIC8vIHY6IHZlcnRpY2FsIG9yICB2LSA6IHZlcnRpY2FsIGJvdHRvbSB0byB0b3A7ICBoOiBIb3Jpem9udGFsIG9yIGgtIGhvcml6b250YWwgcmlnaHQgdG8gbGVmdFxuICAgIHNtb290aDogMC4xLCAvLyBTbW9vdGggYW1vdW50IC0+IExlcnAgZnVuY3Rpb25cbiAgICBzdGFydGVkUG9pbnQ6IDAsXG4gIH1cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0cykge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLl9fZGVmYXVsdE9wdGlvbnMuc3RhcnRlZFBvaW50ID0gb3B0cy5zdGFydGVkUG9pbnQgfHwgMFxuICAgIHRoaXMuc21vb3RoT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5fX2RlZmF1bHRPcHRpb25zLCB7XG4gICAgICAuLi5vcHRzLFxuICAgIH0pXG5cbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsaW1pdDogMCxcbiAgICB9XG5cbiAgICB0aGlzLm9mZnNldEhlaWdodCA9IDBcblxuICAgIHRoaXMuZGltZW5zaW9uSGFuZGxlcigpXG4gICAgY29uc29sZS5sb2codGhpcy5zY3JvbGwubGltaXQpXG4gICAgdGhpcy5hZGRMaXN0ZW5lcigpXG4gIH1cblxuICBkaW1lbnNpb25IYW5kbGVyKCkge1xuICAgIHRoaXMub2Zmc2V0SGVpZ2h0ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID1cbiAgICAgIHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgK1xuICAgICAgdGhpcy5vZmZzZXRIZWlnaHQgLVxuICAgICAgd2luZG93LmlubmVySGVpZ2h0XG4gIH1cblxuICBvbk1vdXNlV2hlZWwoZSkge1xuICAgIGNvbnN0IGV2ZW50ID0gbm9ybWFsaXplV2hlZWwoZSlcblxuICAgIGlmIChcbiAgICAgIHRoaXMuc21vb3RoT3B0aW9ucy5kaXJlY3Rpb24gPT09ICd2JyB8fFxuICAgICAgdGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3YtJ1xuICAgICkge1xuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IGV2ZW50LnBpeGVsWVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuZGlyZWN0aW9uID09PSAnaCcgfHxcbiAgICAgIHRoaXMuc21vb3RoT3B0aW9ucy5kaXJlY3Rpb24gPT09ICdoLSdcbiAgICApIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBldmVudC5waXhlbFhcbiAgICB9XG4gIH1cblxuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLm9mZnNldEhlaWdodCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcbiAgICB0aGlzLnNjcm9sbC5saW1pdCA9XG4gICAgICB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgdGhpcy5vZmZzZXRIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgfVxuXG4gIGFkZExpc3RlbmVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcykpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC5saW1pdClcblxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IGNsYW1wKHRoaXMuc2Nyb2xsLnRhcmdldCwgMCwgdGhpcy5zY3JvbGwubGltaXQpXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IGxlcnAoXG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50LFxuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0LFxuICAgICAgdGhpcy5zbW9vdGhPcHRpb25zLnNtb290aFxuICAgIClcblxuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgMC4wMSkge1xuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IDBcbiAgICB9XG5cbiAgICB0aGlzLnRyYW5zbGF0ZUJ5Q2FzZSgpXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgdHJhbnNsYXRlQnlDYXNlKCkge1xuICAgIHN3aXRjaCAodGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbikge1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoMCwgLSR7TWF0aC5mbG9vcihcbiAgICAgICAgICB0aGlzLnNjcm9sbC5jdXJyZW50XG4gICAgICAgICl9cHggLCAwKWBcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAndi0nOlxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNEKDAsICR7TWF0aC5mbG9vcihcbiAgICAgICAgICB0aGlzLnNjcm9sbC5jdXJyZW50XG4gICAgICAgICl9cHgsIDApYFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdoJzpcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdoLSc6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYFxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGxlcnAgPSAoc3RhcnQsIGVuZCwgYW1vdW50KSA9PiB7XG4gIHJldHVybiAoMSAtIGFtb3VudCkgKiBzdGFydCArIGFtb3VudCAqIGVuZFxufVxuXG5leHBvcnQgY29uc3QgY2xhbXAgPSAodmFsdWUsIG1pbiwgbWF4KSA9PiB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KVxufVxuXG4vKipcbiAqIFbDqXJpZmllIHNpIHVuIGZpY2hpZXIgZXN0IGRlIHR5cGUgUERGLCAgRE9DIGV0IERPWCBjJ2VzdCDDoCBkaXJlXG4gKiB1biBkb2N1bWVudCB0ZXh0ZVxuICogQHBhcmFtIHtGSUxFfSBmaWxlIC0gbGUgZmljaGllciBxdWkgZG9pdCDDqnRyZSB2w6lyaWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gbGUgdHlwZSBkZSBmaWNoaWVyIGRvY3VtZW50IHwgaW1hZ2VcbiAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZEZpbGVUeXBlID0gKGZpbGUsIHR5cGUpID0+IHtcbiAgY29uc3QgZG9jdW1lbnRzID0gW1xuICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICdhcHBsaWNhdGlvbi9kb2MnLFxuICAgICdhcHBsaWNhdGlvbi9kb2N4JyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnLFxuICAgICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICBdXG5cbiAgY29uc3QgaW1hZ2VzID0gW1xuICAgICdpbWFnZS9wbmcnLFxuICAgICdpbWFnZS9qcGVnJyxcbiAgICAnaW1hZ2UvanBnJyxcbiAgICAnaW1hZ2Uvd2VicCcsXG4gICAgJ2ltYWdlL2JtcCcsXG4gIF1cblxuICBpZiAodHlwZSA9PT0gJ2RvY3VtZW50cycpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvY3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpbGUudHlwZSA9PT0gZG9jdW1lbnRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ltYWdlcycpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpbGUudHlwZSA9PT0gaW1hZ2VzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBWw6lyaWZpZSBzaSB1bmUgVXJsIHBvaW50ZSB2ZXJzIHVuZSBwYWdlIHZhbGlkZVxuICpcbiAqIEBhc3luY1xuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIGxlIGxpZW4gZGUgbGEgcGFnZVxuICogQHJldHVybnMge2Jvb2xlYW59IEJvb2xlYW5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFVybEV4aXN0KHVybCkge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1vZGU6ICduby1jb3JzJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuICAgIH0sXG4gIH1cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gIHJldHVybiByZXNwb25zZS5zdGF0dXMgIT09ICc0MDQnXG59XG5cbi8qKlxuICogVmVyaWZpZSBzaSB1biBlbWFpbCBlc3QgdmFsaWRlXG4gKiBAcGFyYW0gZW1haWxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZEVtYWlsKGVtYWlsKSB7XG4gIGNvbnN0IHJlZ2V4ID1cbiAgICAvXlthLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rQFthLXpBLVowLTktXSsoPzpcXC5bYS16QS1aMC05LV0rKSokL1xuXG4gIGlmIChyZWdleC50ZXN0KGVtYWlsKSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuLy9odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTXV0YXRpb25PYnNlcnZlclxuLyoqXG4gKiBPYnNlcnZlIGV0IGV4ZWN1c2UgdW4gY2FsbGJhY2sgbG9yc3F1ZSBsZXMgbm9ldWRzIGVuZmFudHMoRE9NKSBkZSBsYSBjaWJsZSBvbnQgw6l0w6kgbW9kaWZpZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgLSBMZSBub2V1ZCBET00gw6Agb2JzZXJ2w6lcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gbGEgZm9uY3Rpb24gw6Agw6l4w6ljdXRlciBsb3JzcXVlIGxlIERPTSBkZSBsYSBjaWJsZSDDoCBjaGFuZ8OpXG4gKiBAcGFyYW0ge3NlbGVjdG9yfSBzZWxlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gT2JzZXJ2ZU5vZGVEb21DaGFuZ2Uobm9kZSwgY2IsIHNlbGVjdG9yKSB7XG4gIC8vIFNlbGVjdCB0aGUgbm9kZSB0aGF0IHdpbGwgYmUgb2JzZXJ2ZWQgZm9yIG11dGF0aW9uc1xuICBjb25zdCB0YXJnZXROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7bm9kZX1gKVxuXG4gIC8vIE9wdGlvbnMgZm9yIHRoZSBvYnNlcnZlciAod2hpY2ggbXV0YXRpb25zIHRvIG9ic2VydmUpXG4gIGNvbnN0IGNvbmZpZyA9IHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH1cblxuICAvL0NhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiBtdXRhdGlvbnMgYXJlIG9ic2VydmVkXG4gIGNvbnN0IGNhbGxiYWNrID0gKG11dGF0aW9uc0xpc3QpID0+IHtcbiAgICAvLyBVc2UgdHJhZGl0aW9uYWwgJ2ZvciBsb29wcycgZm9yIElFIDExXG4gICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnNMaXN0KSB7XG4gICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgY2Ioc2VsZWN0b3IpXG4gICAgICB9IGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICBjYihzZWxlY3RvcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgbGlua2VkIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKVxuXG4gIC8vIFN0YXJ0IG9ic2VydmluZyB0aGUgdGFyZ2V0IG5vZGUgZm9yIGNvbmZpZ3VyZWQgbXV0YXRpb25zXG4gIHRhcmdldE5vZGUgPyBvYnNlcnZlci5vYnNlcnZlKHRhcmdldE5vZGUsIGNvbmZpZykgOiB2b2lkIDBcbiAgLy9vYnNlcnZlci5vYnNlcnZlKHRhcmdldE5vZGUsIGNvbmZpZyk7XG5cbiAgLy8gTGF0ZXIsIHlvdSBjYW4gc3RvcCBvYnNlcnZpbmdcbiAgLy9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG59XG4iLCIvKipcbiAqIFNlbGVjdCBlbGVtZW50IGluIERPTSBIVE1MXG4gKiBAcGFyYW0geyp9IGVsZW1lbnQgLSBUaGUgY3NzIHNlbGVjdG9yIG9mIHRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0XG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gKi9cbmV4cG9ydCBjb25zdCAkID0gKGVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7ZWxlbWVudH1gKVxufVxuXG4vKipcbiAqIFNlbGVjdCBlbGVtZW50cyBpbiBET00gSFRNTFxuICogQHBhcmFtIHsqfSBlbGVtZW50cyAtIFRoZSBjc3Mgc2VsZWN0b3Igb2YgdGhlIEhUTUwgZWxlbWVudHMgdG8gdGFyZ2V0XG4gKiBAcmV0dXJucyB7Tm9kZUxpc3R9XG4gKi9cbmV4cG9ydCBjb25zdCAkQWxsID0gKGVsZW1lbnRzKSA9PiB7XG4gIHJldHVybiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHtlbGVtZW50c31gKV1cbn1cblxuLyoqXG4gKiBHZXQgQXR0cmlidXRlIG9mIEVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBIVE1MIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5hbWUgLSBOYW1lIG9mIGF0dHJpYnV0ZSAoZXggOiBkYXRhLWFuaW1hdGlvbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCAkQXR0cmlidXRlID0gKGVsZW1lbnQsIG5hbWUpID0+IHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpXG59XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gc3BsaXRzIHRleHQgZnJvbSBpbm5lckhUTUwgYmFzZWQgb24gcmVnZXguIFRoZW4sIGl0IHdyYXAgc3BhcmF0ZWQgd29yZHMgd2l0aCA8c3Bhbj4gZXhjZXB0IDxicj5cbiAqIEZpbmFsbHksIGl0IHJldHVybnMgYXJyYXkgb2Ygc3BhblxuICogQHBhcmFtIHtIVE1MIGVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcGxpdCBUaGlzIGlzIHNlcGFyYXRvciBmb3IgdGV4dCAocmVnZXgpXG4gKiBAcmV0dXJuIHtBcnJheS48SFRNTCBlbGVtZW50Pn0gQXJyYXkgb2Ygc3BhbiBodG1sIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGVsZW1lbnQsIHNwbGl0KSB7XG4gIHZhciB3b3JkcyA9IHNwbGl0VGV4dChlbGVtZW50LmlubmVySFRNTC50b1N0cmluZygpLCBzcGxpdClcbiAgdmFyIHN0ciA9ICcnXG4gIHdvcmRzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICBpZiAobGluZS5pbmRleE9mKCc8YnI+JykgPiAtMSkge1xuICAgICAgdmFyIGxpbmVzID0gbGluZS5zcGxpdCgnPGJyPicpXG4gICAgICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpZCkge1xuICAgICAgICBzdHIgKz0gaWQgPiAwID8gJzxicj4nICsgcGFyc2VMaW5lKGxpbmUpIDogcGFyc2VMaW5lKGxpbmUpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gcGFyc2VMaW5lKGxpbmUpXG4gICAgfVxuICB9KVxuICBlbGVtZW50LmlubmVySFRNTCA9IHN0clxuICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJylcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHNwbGl0IHRleHQgaW50byBhcnJheSBpbmNsdWRpbmcgPGJyPlxuICogQHBhcmFtcyB7c3RyaW5nfSB0eHQgVGhpcyBpcyB0ZXh0IHRoYXQgcmV0cmlldmVkIGZyb20gaHRtbCBlbGVtZW50XG4gKiBAcGFyYW1zIHtzdHJpbmd9IHNwbGl0IEl0IGlzIHNlcGFyYXRvciBmb3IgdGV4dCAocmVnZXgpXG4gKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gcmVzdWx0IG9mIHNwbGl0IHVzaW5nIHNlcGFyYXRvciBpbmNsdWRpbmcgPGJyPlxuICovXG5mdW5jdGlvbiBzcGxpdFRleHQodHh0LCBzcGxpdCkge1xuICB2YXIgc3BsaXRzID0gdHh0LnNwbGl0KCc8YnI+JylcbiAgdmFyIGFyciA9IFtdXG4gIHNwbGl0cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpZCkge1xuICAgIGlmIChpZCA+IDApIGFyci5wdXNoKCc8YnI+JylcbiAgICBhcnIgPSBhcnIuY29uY2F0KGl0ZW0uc3BsaXQoc3BsaXQpKVxuICB9KVxuICByZXR1cm4gYXJyXG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCB3cmFwIHBhc3NlZCBhcmd1bWVudCB3aXRoIDxzcGFuPiBpZiBwYXNzZWQgYXJndW1lbnQgaXMgbm90IGVtcHR5LCBzcGFjZSwgb3IgPGJyPlxuICogQHBhcmFtcyB7c3RyaW5nfSBsaW5lIEl0IGlzIHdvcmRzIHRoYXQgYXJlIHNlcGFyYXRlZCBieSBzZXByYXRvclxuICogQHJldHVybiB7c3RyaW5nfSBpdCBpcyBlaXRoZXIgJycsICcgJywgPGJyPiAsIG9yIDxzcGFuPmxpbmU8c3Bhbj5cbiAqL1xuZnVuY3Rpb24gcGFyc2VMaW5lKGxpbmUpIHtcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmUgPT09ICcgJykge1xuICAgIHJldHVybiBsaW5lXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpbmUgPT09ICc8YnI+J1xuICAgICAgPyAnPGJyPidcbiAgICAgIDogJzxzcGFuPicgKyBsaW5lICsgJzwvc3Bhbj4nICsgKGxpbmUubGVuZ3RoID4gMSA/ICcgJyA6ICcnKVxuICB9XG59XG4iLCIvKipcbiAqIEV2RW1pdHRlciB2Mi4xLjFcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbmxldCBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICBsZXQgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCAhbGlzdGVuZXJzLmluY2x1ZGVzKCBsaXN0ZW5lciApICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgbGV0IG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIGxldCBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICBsZXQgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSggMCApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICBsZXQgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggbGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyApIHtcbiAgICBsZXQgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0gKSApO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTEuM1xuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgdGhpcy50Zm0gPSB0aGlzLnRmbSB8fCB7fTtcblxuICAgIGlmIChwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eTtcbiAgICAgIH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSA/IHByb3BlcnR5LnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy50Zm1bYV0gPSBfZ2V0KHRhcmdldCwgYSk7XG4gICAgICB9KSA6IHRoaXMudGZtW3Byb3BlcnR5XSA9IHRhcmdldC5fZ3NhcC54ID8gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA6IF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7IC8vIG5vdGU6IHNjYWxlIHdvdWxkIG1hcCB0byBcInNjYWxlWCxzY2FsZVlcIiwgdGh1cyB3ZSBsb29wIGFuZCBhcHBseSB0aGVtIGJvdGguXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0YXJnZXQuX2dzYXAuc3ZnKSB7XG4gICAgICB0aGlzLnN2Z28gPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpO1xuICAgICAgdGhpcy5wcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBpc05vdENTUywgXCJcIik7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgfVxuXG4gIChzdHlsZSB8fCBpc05vdENTUykgJiYgdGhpcy5wcm9wcy5wdXNoKHByb3BlcnR5LCBpc05vdENTUywgc3R5bGVbcHJvcGVydHldKTtcbn0sXG4gICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2NhbGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gIH1cbn0sXG4gICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgaSxcbiAgICAgIHA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgLy8gc3RvcmVkIGxpa2UgdGhpczogcHJvcGVydHksIGlzTm90Q1NTLCB2YWx1ZVxuICAgIHByb3BzW2kgKyAxXSA/IHRhcmdldFtwcm9wc1tpXV0gPSBwcm9wc1tpICsgMl0gOiBwcm9wc1tpICsgMl0gPyBzdHlsZVtwcm9wc1tpXV0gPSBwcm9wc1tpICsgMl0gOiBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wc1tpXS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoaSAmJiAhaS5pc1N0YXJ0ICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBjYWNoZS51bmNhY2hlID0gMTsgLy8gaWYgaXQncyBhIHN0YXJ0QXQgdGhhdCdzIGJlaW5nIHJldmVydGVkIGluIHRoZSBfaW5pdFR3ZWVuKCkgb2YgdGhlIGNvcmUsIHdlIGRvbid0IG5lZWQgdG8gdW5jYWNoZSB0cmFuc2Zvcm1zLiBUaGlzIGlzIHB1cmVseSBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldFN0eWxlU2F2ZXIgPSBmdW5jdGlvbiBfZ2V0U3R5bGVTYXZlcih0YXJnZXQsIHByb3BlcnRpZXMpIHtcbiAgdmFyIHNhdmVyID0ge1xuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIHByb3BzOiBbXSxcbiAgICByZXZlcnQ6IF9yZXZlcnRTdHlsZSxcbiAgICBzYXZlOiBfc2F2ZVN0eWxlXG4gIH07XG4gIHByb3BlcnRpZXMgJiYgcHJvcGVydGllcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBzYXZlci5zYXZlKHApO1xuICB9KTtcbiAgcmV0dXJuIHNhdmVyO1xufSxcbiAgICBfc3VwcG9ydHMzRCxcbiAgICBfY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50KHR5cGUsIG5zKSB7XG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUygobnMgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpLnJlcGxhY2UoL15odHRwcy8sIFwiaHR0cFwiKSwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBzZXJ2ZXJzIHN3YXAgaW4gaHR0cHMgZm9yIGh0dHAgaW4gdGhlIG5hbWVzcGFjZSB3aGljaCBjYW4gYnJlYWsgdGhpbmdzLCBtYWtpbmcgXCJzdHlsZVwiIGluYWNjZXNzaWJsZS5cblxuICByZXR1cm4gZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAyMTUtcHJvYmxlbS11c2luZy10d2Vlbm1heC1pbi1zdGFuZGFsb25lLXNlbGYtY29udGFpbmluZy1zdmctZmlsZS1lcnItY2Fubm90LXNldC1wcm9wZXJ0eS1jc3N0ZXh0LW9mLXVuZGVmaW5lZC8pLlxufSxcbiAgICBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHNraXBQcmVmaXhGYWxsYmFjaykge1xuICB2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gIHJldHVybiBjc1twcm9wZXJ0eV0gfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KSB8fCAhc2tpcFByZWZpeEZhbGxiYWNrICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSkgfHwgcHJvcGVydHksIDEpIHx8IFwiXCI7IC8vY3NzIHZhcmlhYmxlcyBtYXkgbm90IG5lZWQgY2FwcyBzd2FwcGVkIG91dCBmb3IgZGFzaGVzIGFuZCBsb3dlcmNhc2UuXG59LFxuICAgIF9wcmVmaXhlcyA9IFwiTyxNb3osbXMsTXMsV2Via2l0XCIuc3BsaXQoXCIsXCIpLFxuICAgIF9jaGVja1Byb3BQcmVmaXggPSBmdW5jdGlvbiBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5LCBlbGVtZW50LCBwcmVmZXJQcmVmaXgpIHtcbiAgdmFyIGUgPSBlbGVtZW50IHx8IF90ZW1wRGl2LFxuICAgICAgcyA9IGUuc3R5bGUsXG4gICAgICBpID0gNTtcblxuICBpZiAocHJvcGVydHkgaW4gcyAmJiAhcHJlZmVyUHJlZml4KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG5cbiAgcHJvcGVydHkgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnN1YnN0cigxKTtcblxuICB3aGlsZSAoaS0tICYmICEoX3ByZWZpeGVzW2ldICsgcHJvcGVydHkgaW4gcykpIHt9XG5cbiAgcmV0dXJuIGkgPCAwID8gbnVsbCA6IChpID09PSAzID8gXCJtc1wiIDogaSA+PSAwID8gX3ByZWZpeGVzW2ldIDogXCJcIikgKyBwcm9wZXJ0eTtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuICBpZiAoX3dpbmRvd0V4aXN0cygpICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IF93aW4uZG9jdW1lbnQ7XG4gICAgX2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfdGVtcERpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpIHx8IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgX3RlbXBEaXZTdHlsZXIgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBfdHJhbnNmb3JtUHJvcCA9IF9jaGVja1Byb3BQcmVmaXgoX3RyYW5zZm9ybVByb3ApO1xuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiO1xuICAgIF90ZW1wRGl2LnN0eWxlLmNzc1RleHQgPSBcImJvcmRlci13aWR0aDowO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7cGFkZGluZzowXCI7IC8vbWFrZSBzdXJlIHRvIG92ZXJyaWRlIGNlcnRhaW4gcHJvcGVydGllcyB0aGF0IG1heSBjb250YW1pbmF0ZSBtZWFzdXJlbWVudHMsIGluIGNhc2UgdGhlIHVzZXIgaGFzIG92ZXJyZWFjaGluZyBzdHlsZSBzaGVldHMuXG5cbiAgICBfc3VwcG9ydHMzRCA9ICEhX2NoZWNrUHJvcFByZWZpeChcInBlcnNwZWN0aXZlXCIpO1xuICAgIF9yZXZlcnRpbmcgPSBnc2FwLmNvcmUucmV2ZXJ0aW5nO1xuICAgIF9wbHVnaW5Jbml0dGVkID0gMTtcbiAgfVxufSxcbiAgICBfZ2V0QkJveEhhY2sgPSBmdW5jdGlvbiBfZ2V0QkJveEhhY2soc3dhcElmUG9zc2libGUpIHtcbiAgLy93b3JrcyBhcm91bmQgaXNzdWVzIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgdGhhdCBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IGdldEJCb3goKSBvbiBTVkcgZWxlbWVudHMgaW5zaWRlIGEgPGRlZnM+IGVsZW1lbnQgYW5kL29yIDxtYXNrPi4gV2UgdHJ5IGNyZWF0aW5nIGFuIFNWRywgYWRkaW5nIGl0IHRvIHRoZSBkb2N1bWVudEVsZW1lbnQgYW5kIHRvc3MgdGhlIGVsZW1lbnQgaW4gdGhlcmUgc28gdGhhdCBpdCdzIGRlZmluaXRlbHkgcGFydCBvZiB0aGUgcmVuZGVyaW5nIHRyZWUsIHRoZW4gZ3JhYiB0aGUgYmJveCBhbmQgaWYgaXQgd29ya3MsIHdlIGFjdHVhbGx5IHN3YXAgb3V0IHRoZSBvcmlnaW5hbCBnZXRCQm94KCkgbWV0aG9kIGZvciBvdXIgb3duIHRoYXQgZG9lcyB0aGVzZSBleHRyYSBzdGVwcyB3aGVuZXZlciBnZXRCQm94IGlzIG5lZWRlZC4gVGhpcyBoZWxwcyBlbnN1cmUgdGhhdCBwZXJmb3JtYW5jZSBpcyBvcHRpbWFsIChvbmx5IGRvIGFsbCB0aGVzZSBleHRyYSBzdGVwcyB3aGVuIGFic29sdXRlbHkgbmVjZXNzYXJ5Li4ubW9zdCBlbGVtZW50cyBkb24ndCBuZWVkIGl0KS5cbiAgdmFyIHN2ZyA9IF9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHRoaXMub3duZXJTVkdFbGVtZW50ICYmIHRoaXMub3duZXJTVkdFbGVtZW50LmdldEF0dHJpYnV0ZShcInhtbG5zXCIpIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiksXG4gICAgICBvbGRQYXJlbnQgPSB0aGlzLnBhcmVudE5vZGUsXG4gICAgICBvbGRTaWJsaW5nID0gdGhpcy5uZXh0U2libGluZyxcbiAgICAgIG9sZENTUyA9IHRoaXMuc3R5bGUuY3NzVGV4dCxcbiAgICAgIGJib3g7XG5cbiAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3ZnKTtcblxuICBzdmcuYXBwZW5kQ2hpbGQodGhpcyk7XG4gIHRoaXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICBpZiAoc3dhcElmUG9zc2libGUpIHtcbiAgICB0cnkge1xuICAgICAgYmJveCA9IHRoaXMuZ2V0QkJveCgpO1xuICAgICAgdGhpcy5fZ3NhcEJCb3ggPSB0aGlzLmdldEJCb3g7IC8vc3RvcmUgdGhlIG9yaWdpbmFsXG5cbiAgICAgIHRoaXMuZ2V0QkJveCA9IF9nZXRCQm94SGFjaztcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9IGVsc2UgaWYgKHRoaXMuX2dzYXBCQm94KSB7XG4gICAgYmJveCA9IHRoaXMuX2dzYXBCQm94KCk7XG4gIH1cblxuICBpZiAob2xkUGFyZW50KSB7XG4gICAgaWYgKG9sZFNpYmxpbmcpIHtcbiAgICAgIG9sZFBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgb2xkU2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZChzdmcpO1xuXG4gIHRoaXMuc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcbiAgcmV0dXJuIGJib3g7XG59LFxuICAgIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3MgPSBmdW5jdGlvbiBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgYXR0cmlidXRlc0FycmF5KSB7XG4gIHZhciBpID0gYXR0cmlidXRlc0FycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKSkge1xuICAgICAgcmV0dXJuIHRhcmdldC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldEJCb3ggPSBmdW5jdGlvbiBfZ2V0QkJveCh0YXJnZXQpIHtcbiAgdmFyIGJvdW5kcztcblxuICB0cnkge1xuICAgIGJvdW5kcyA9IHRhcmdldC5nZXRCQm94KCk7IC8vRmlyZWZveCB0aHJvd3MgZXJyb3JzIGlmIHlvdSB0cnkgY2FsbGluZyBnZXRCQm94KCkgb24gYW4gU1ZHIGVsZW1lbnQgdGhhdCdzIG5vdCByZW5kZXJlZCAobGlrZSBpbiBhIDxzeW1ib2w+IG9yIDxkZWZzPikuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYxMjExOFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSk7XG4gIH1cblxuICBib3VuZHMgJiYgKGJvdW5kcy53aWR0aCB8fCBib3VuZHMuaGVpZ2h0KSB8fCB0YXJnZXQuZ2V0QkJveCA9PT0gX2dldEJCb3hIYWNrIHx8IChib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpKTsgLy9zb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIG1pc3JlcG9ydCB0aGUgYm91bmRzIGlmIHRoZSBlbGVtZW50IGhhcyB6ZXJvIHdpZHRoIGFuZCBoZWlnaHQgKGl0IGp1c3QgYXNzdW1lcyBpdCdzIGF0IHg6MCwgeTowKSwgdGh1cyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGdyYWIgdGhlIHBvc2l0aW9uIGluIHRoYXQgY2FzZS5cblxuICByZXR1cm4gYm91bmRzICYmICFib3VuZHMud2lkdGggJiYgIWJvdW5kcy54ICYmICFib3VuZHMueSA/IHtcbiAgICB4OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInhcIiwgXCJjeFwiLCBcIngxXCJdKSB8fCAwLFxuICAgIHk6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieVwiLCBcImN5XCIsIFwieTFcIl0pIHx8IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0gOiBib3VuZHM7XG59LFxuICAgIF9pc1NWRyA9IGZ1bmN0aW9uIF9pc1NWRyhlKSB7XG4gIHJldHVybiAhIShlLmdldENUTSAmJiAoIWUucGFyZW50Tm9kZSB8fCBlLm93bmVyU1ZHRWxlbWVudCkgJiYgX2dldEJCb3goZSkpO1xufSxcbiAgICAvL3JlcG9ydHMgaWYgdGhlIGVsZW1lbnQgaXMgYW4gU1ZHIG9uIHdoaWNoIGdldEJCb3goKSBhY3R1YWxseSB3b3Jrc1xuX3JlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgaWYgKHByb3BlcnR5KSB7XG4gICAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBpZiAocHJvcGVydHkuc3Vic3RyKDAsIDIpID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgIHBhcmVudCA9PT0gdGFyZ2V0ICYmIChzdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCIpOyAvLyBsaWtlIGZvciBib3JkZXJSYWRpdXMsIGlmIGl0J3MgYSAlIHdlIG11c3QgaGF2ZSBpdCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0IGl0c2VsZiBidXQgdGhhdCBtYXkgbm90IGhhdmUgcG9zaXRpb246IHJlbGF0aXZlIG9yIHBvc2l0aW9uOiBhYnNvbHV0ZSBpbiB3aGljaCBjYXNlIGl0J2QgZ28gdXAgdGhlIGNoYWluIHVudGlsIGl0IGZpbmRzIGl0cyBvZmZzZXRQYXJlbnQgKGJhZCkuIHBvc2l0aW9uOiBzdGF0aWMgcHJvdGVjdHMgYWdhaW5zdCB0aGF0LlxuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcbiAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgIGlmIChob3Jpem9udGFsICYmIHRvUGVyY2VudCkge1xuICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUocGFyZW50KTtcbiAgICAgIGNhY2hlLnRpbWUgPSBfdGlja2VyLnRpbWU7XG4gICAgICBjYWNoZS53aWR0aCA9IHBhcmVudFttZWFzdXJlUHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfcm91bmQodG9QaXhlbHMgPyBweCAqIGN1clZhbHVlIC8gYW1vdW50IDogcHggJiYgY3VyVmFsdWUgPyBhbW91bnQgLyBweCAqIGN1clZhbHVlIDogMCk7XG59LFxuICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgdmFyIHZhbHVlO1xuICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICBpZiAocHJvcGVydHkgaW4gX3Byb3BlcnR5QWxpYXNlcyAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoXCIsXCIpKSB7XG4gICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnNwbGl0KFwiLFwiKVswXTtcbiAgICB9XG4gIH1cblxuICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHZhbHVlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSk7XG4gICAgdmFsdWUgPSBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IHZhbHVlW3Byb3BlcnR5XSA6IHZhbHVlLnN2ZyA/IHZhbHVlLm9yaWdpbiA6IF9maXJzdFR3b09ubHkoX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkpICsgXCIgXCIgKyB2YWx1ZS56T3JpZ2luICsgXCJweFwiO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09IFwiYXV0b1wiIHx8IHVuY2FjaGUgfHwgfih2YWx1ZSArIFwiXCIpLmluZGV4T2YoXCJjYWxjKFwiKSkge1xuICAgICAgdmFsdWUgPSBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSAmJiBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB8fCBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgKHByb3BlcnR5ID09PSBcIm9wYWNpdHlcIiA/IDEgOiAwKTsgLy8gbm90ZTogc29tZSBicm93c2VycywgbGlrZSBGaXJlZm94LCBkb24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSEgSW5zdGVhZCwgaXQgb25seSByZXBvcnRzIGV2ZXJ5IGNvcm5lciBsaWtlICBib3JkZXJUb3BMZWZ0UmFkaXVzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuaXQgJiYgIX4odmFsdWUgKyBcIlwiKS50cmltKCkuaW5kZXhPZihcIiBcIikgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkgKyB1bml0IDogdmFsdWU7XG59LFxuICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcgPSBmdW5jdGlvbiBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCkge1xuICAvLyBub3RlOiB3ZSBjYWxsIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbChwbHVnaW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0ID09PSBcIm5vbmVcIikge1xuICAgIC8vIHNvbWUgYnJvd3NlcnMgbGlrZSBTYWZhcmkgYWN0dWFsbHkgUFJFRkVSIHRoZSBwcmVmaXhlZCBwcm9wZXJ0eSBhbmQgbWlzLXJlcG9ydCB0aGUgdW5wcmVmaXhlZCB2YWx1ZSBsaWtlIGNsaXBQYXRoIChCVUcpLiBJbiBvdGhlciB3b3JkcywgZXZlbiB0aG91Z2ggY2xpcFBhdGggZXhpc3RzIGluIHRoZSBzdHlsZSAoXCJjbGlwUGF0aFwiIGluIHRhcmdldC5zdHlsZSkgYW5kIGl0J3Mgc2V0IGluIHRoZSBDU1MgcHJvcGVybHkgKGFsb25nIHdpdGggLXdlYmtpdC1jbGlwLXBhdGgpLCBTYWZhcmkgcmVwb3J0cyBjbGlwUGF0aCBhcyBcIm5vbmVcIiB3aGVyZWFzIFdlYmtpdENsaXBQYXRoIHJlcG9ydHMgYWNjdXJhdGVseSBsaWtlIFwiZWxsaXBzZSgxMDAlIDAlIGF0IDUwJSAwJSlcIiwgc28gaW4gdGhpcyBjYXNlIHdlIG11c3QgU1dJVENIIHRvIHVzaW5nIHRoZSBwcmVmaXhlZCBwcm9wZXJ0eSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8xODMxMC1jbGlwcGF0aC1kb2VzbnQtd29yay1vbi1pb3MvXG4gICAgdmFyIHAgPSBfY2hlY2tQcm9wUHJlZml4KHByb3AsIHRhcmdldCwgMSksXG4gICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgcHJvcCA9IHA7XG4gICAgICBzdGFydCA9IHM7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgIHN0YXJ0ID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcImJvcmRlclRvcENvbG9yXCIpOyAvLyBGaXJlZm94IGJ1ZzogYWx3YXlzIHJlcG9ydHMgXCJib3JkZXJDb2xvclwiIGFzIFwiXCIsIHNvIHdlIG11c3QgZmFsbCBiYWNrIHRvIGJvcmRlclRvcENvbG9yLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yNDU4My1ob3ctdG8tcmV0dXJuLWNvbG9ycy10aGF0LWktaGFkLWFmdGVyLXJldmVyc2UvXG4gICAgfVxuICB9XG5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIGEsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydFZhbHVlcyxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgY29sb3IsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIGVuZFVuaXQsXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy8gZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0O1xuICB9XG5cbiAgYSA9IFtzdGFydCwgZW5kXTtcblxuICBfY29sb3JTdHJpbmdGaWx0ZXIoYSk7IC8vIHBhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuIElmIGNvbG9ycyBhcmUgZm91bmQsIGl0IHJldHVybnMgdHJ1ZSBhbmQgdGhlbiB3ZSBtdXN0IG1hdGNoIHdoZXJlIHRoZSBjb2xvciBzaG93cyB1cCBvcmRlci13aXNlIGJlY2F1c2UgZm9yIHRoaW5ncyBsaWtlIGJveFNoYWRvdywgc29tZXRpbWVzIHRoZSBicm93c2VyIHByb3ZpZGVzIHRoZSBjb21wdXRlZCB2YWx1ZXMgd2l0aCB0aGUgY29sb3IgRklSU1QsIGJ1dCB0aGUgdXNlciBwcm92aWRlcyBpdCB3aXRoIHRoZSBjb2xvciBMQVNULCBzbyBmbGlwIHRoZW0gaWYgbmVjZXNzYXJ5LiBTYW1lIGZvciBkcm9wLXNoYWRvdygpLlxuXG5cbiAgc3RhcnQgPSBhWzBdO1xuICBlbmQgPSBhWzFdO1xuICBzdGFydFZhbHVlcyA9IHN0YXJ0Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gIGVuZFZhbHVlcyA9IGVuZC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuXG4gIGlmIChlbmRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgd2hpbGUgKHJlc3VsdCA9IF9udW1XaXRoVW5pdEV4cC5leGVjKGVuZCkpIHtcbiAgICAgIGVuZFZhbHVlID0gcmVzdWx0WzBdO1xuICAgICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIiB8fCBjaHVuay5zdWJzdHIoLTUpID09PSBcImhzbGEoXCIpIHtcbiAgICAgICAgY29sb3IgPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kVmFsdWUgIT09IChzdGFydFZhbHVlID0gc3RhcnRWYWx1ZXNbbWF0Y2hJbmRleCsrXSB8fCBcIlwiKSkge1xuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSkgfHwgMDtcbiAgICAgICAgc3RhcnRVbml0ID0gc3RhcnRWYWx1ZS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoZW5kVmFsdWUgPSBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kVmFsdWUpICsgc3RhcnRVbml0KTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICAgIGVuZFVuaXQgPSBlbmRWYWx1ZS5zdWJzdHIoKGVuZE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGluZGV4ID0gX251bVdpdGhVbml0RXhwLmxhc3RJbmRleCAtIGVuZFVuaXQubGVuZ3RoO1xuXG4gICAgICAgIGlmICghZW5kVW5pdCkge1xuICAgICAgICAgIC8vaWYgc29tZXRoaW5nIGxpa2UgXCJwZXJzcGVjdGl2ZTozMDBcIiBpcyBwYXNzZWQgaW4gYW5kIHdlIG11c3QgYWRkIGEgdW5pdCB0byB0aGUgZW5kXG4gICAgICAgICAgZW5kVW5pdCA9IGVuZFVuaXQgfHwgX2NvbmZpZy51bml0c1twcm9wXSB8fCBzdGFydFVuaXQ7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPT09IGVuZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVuZCArPSBlbmRVbml0O1xuICAgICAgICAgICAgcHQuZSArPSBlbmRVbml0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydFVuaXQgIT09IGVuZFVuaXQpIHtcbiAgICAgICAgICBzdGFydE51bSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgfHwgMDtcbiAgICAgICAgfSAvLyB0aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG5cbiAgICAgICAgcHQuX3B0ID0ge1xuICAgICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgICAgYzogZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0IHx8IHByb3AgPT09IFwiekluZGV4XCIgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcbiAgfSBlbHNlIHtcbiAgICBwdC5yID0gcHJvcCA9PT0gXCJkaXNwbGF5XCIgJiYgZW5kID09PSBcIm5vbmVcIiA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWU7XG4gIH1cblxuICBfcmVsRXhwLnRlc3QoZW5kKSAmJiAocHQuZSA9IDApOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG5cbiAgdGhpcy5fcHQgPSBwdDsgLy9zdGFydCB0aGUgbGlua2VkIGxpc3Qgd2l0aCB0aGlzIG5ldyBQcm9wVHdlZW4uIFJlbWVtYmVyLCB3ZSBjYWxsIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbChwbHVnaW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGFub3RoZXIgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2tleXdvcmRUb1BlcmNlbnQgPSB7XG4gIHRvcDogXCIwJVwiLFxuICBib3R0b206IFwiMTAwJVwiLFxuICBsZWZ0OiBcIjAlXCIsXG4gIHJpZ2h0OiBcIjEwMCVcIixcbiAgY2VudGVyOiBcIjUwJVwiXG59LFxuICAgIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzID0gZnVuY3Rpb24gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXModmFsdWUpIHtcbiAgdmFyIHNwbGl0ID0gdmFsdWUuc3BsaXQoXCIgXCIpLFxuICAgICAgeCA9IHNwbGl0WzBdLFxuICAgICAgeSA9IHNwbGl0WzFdIHx8IFwiNTAlXCI7XG5cbiAgaWYgKHggPT09IFwidG9wXCIgfHwgeCA9PT0gXCJib3R0b21cIiB8fCB5ID09PSBcImxlZnRcIiB8fCB5ID09PSBcInJpZ2h0XCIpIHtcbiAgICAvL3RoZSB1c2VyIHByb3ZpZGVkIHRoZW0gaW4gdGhlIHdyb25nIG9yZGVyLCBzbyBmbGlwIHRoZW1cbiAgICB2YWx1ZSA9IHg7XG4gICAgeCA9IHk7XG4gICAgeSA9IHZhbHVlO1xuICB9XG5cbiAgc3BsaXRbMF0gPSBfa2V5d29yZFRvUGVyY2VudFt4XSB8fCB4O1xuICBzcGxpdFsxXSA9IF9rZXl3b3JkVG9QZXJjZW50W3ldIHx8IHk7XG4gIHJldHVybiBzcGxpdC5qb2luKFwiIFwiKTtcbn0sXG4gICAgX3JlbmRlckNsZWFyUHJvcHMgPSBmdW5jdGlvbiBfcmVuZGVyQ2xlYXJQcm9wcyhyYXRpbywgZGF0YSkge1xuICBpZiAoZGF0YS50d2VlbiAmJiBkYXRhLnR3ZWVuLl90aW1lID09PSBkYXRhLnR3ZWVuLl9kdXIpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZGF0YS50LFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgcHJvcHMgPSBkYXRhLnUsXG4gICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgICBwcm9wLFxuICAgICAgICBjbGVhclRyYW5zZm9ybXMsXG4gICAgICAgIGk7XG5cbiAgICBpZiAocHJvcHMgPT09IFwiYWxsXCIgfHwgcHJvcHMgPT09IHRydWUpIHtcbiAgICAgIHN0eWxlLmNzc1RleHQgPSBcIlwiO1xuICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMgPSBwcm9wcy5zcGxpdChcIixcIik7XG4gICAgICBpID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgcHJvcCA9IHByb3BzW2ldO1xuXG4gICAgICAgIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcF0pIHtcbiAgICAgICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgICAgICAgIHByb3AgPSBwcm9wID09PSBcInRyYW5zZm9ybU9yaWdpblwiID8gX3RyYW5zZm9ybU9yaWdpblByb3AgOiBfdHJhbnNmb3JtUHJvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbGVhclRyYW5zZm9ybXMpIHtcbiAgICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlLnN2ZyAmJiB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpOyAvLyBmb3JjZSBhbGwgdGhlIGNhY2hlZCB2YWx1ZXMgYmFjayB0byBcIm5vcm1hbFwiL2lkZW50aXR5LCBvdGhlcndpc2UgaWYgdGhlcmUncyBhbm90aGVyIHR3ZWVuIHRoYXQncyBhbHJlYWR5IHNldCB0byByZW5kZXIgdHJhbnNmb3JtcyBvbiB0aGlzIGVsZW1lbnQsIGl0IGNvdWxkIGRpc3BsYXkgdGhlIHdyb25nIHZhbHVlcy5cblxuXG4gICAgICAgIGNhY2hlLnVuY2FjaGUgPSAxO1xuXG4gICAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICAvLyBub3RlOiBzcGVjaWFsUHJvcHMgc2hvdWxkIHJldHVybiAxIGlmIChhbmQgb25seSBpZikgdGhleSBoYXZlIGEgbm9uLXplcm8gcHJpb3JpdHkuIEl0IGluZGljYXRlcyB3ZSBuZWVkIHRvIHNvcnQgdGhlIGxpbmtlZCBsaXN0LlxuX3NwZWNpYWxQcm9wcyA9IHtcbiAgY2xlYXJQcm9wczogZnVuY3Rpb24gY2xlYXJQcm9wcyhwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIGlmICh0d2Vlbi5kYXRhICE9PSBcImlzRnJvbVN0YXJ0XCIpIHtcbiAgICAgIHZhciBwdCA9IHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDAsIF9yZW5kZXJDbGVhclByb3BzKTtcbiAgICAgIHB0LnUgPSBlbmRWYWx1ZTtcbiAgICAgIHB0LnByID0gLTEwO1xuICAgICAgcHQudHdlZW4gPSB0d2VlbjtcblxuICAgICAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIC8qIGNsYXNzTmFtZSBmZWF0dXJlIChhYm91dCAwLjRrYiBnemlwcGVkKS5cbiAgLCBjbGFzc05hbWUocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgXHRsZXQgX3JlbmRlckNsYXNzTmFtZSA9IChyYXRpbywgZGF0YSkgPT4ge1xuICBcdFx0XHRkYXRhLmNzcy5yZW5kZXIocmF0aW8sIGRhdGEuY3NzKTtcbiAgXHRcdFx0aWYgKCFyYXRpbyB8fCByYXRpbyA9PT0gMSkge1xuICBcdFx0XHRcdGxldCBpbmxpbmUgPSBkYXRhLnJtdixcbiAgXHRcdFx0XHRcdHRhcmdldCA9IGRhdGEudCxcbiAgXHRcdFx0XHRcdHA7XG4gIFx0XHRcdFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iKTtcbiAgXHRcdFx0XHRmb3IgKHAgaW4gaW5saW5lKSB7XG4gIFx0XHRcdFx0XHRfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwKTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdH0sXG4gIFx0XHRfZ2V0QWxsU3R5bGVzID0gKHRhcmdldCkgPT4ge1xuICBcdFx0XHRsZXQgc3R5bGVzID0ge30sXG4gIFx0XHRcdFx0Y29tcHV0ZWQgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gIFx0XHRcdFx0cDtcbiAgXHRcdFx0Zm9yIChwIGluIGNvbXB1dGVkKSB7XG4gIFx0XHRcdFx0aWYgKGlzTmFOKHApICYmIHAgIT09IFwiY3NzVGV4dFwiICYmIHAgIT09IFwibGVuZ3RoXCIpIHtcbiAgXHRcdFx0XHRcdHN0eWxlc1twXSA9IGNvbXB1dGVkW3BdO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0XHRfc2V0RGVmYXVsdHMoc3R5bGVzLCBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKSk7XG4gIFx0XHRcdHJldHVybiBzdHlsZXM7XG4gIFx0XHR9LFxuICBcdFx0c3RhcnRDbGFzc0xpc3QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIiksXG4gIFx0XHRzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgXHRcdGNzc1RleHQgPSBzdHlsZS5jc3NUZXh0LFxuICBcdFx0Y2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gIFx0XHRjbGFzc1BUID0gY2FjaGUuY2xhc3NQVCxcbiAgXHRcdGlubGluZVRvUmVtb3ZlQXRFbmQgPSB7fSxcbiAgXHRcdGRhdGEgPSB7dDp0YXJnZXQsIHBsdWdpbjpwbHVnaW4sIHJtdjppbmxpbmVUb1JlbW92ZUF0RW5kLCBiOnN0YXJ0Q2xhc3NMaXN0LCBlOihlbmRWYWx1ZS5jaGFyQXQoMSkgIT09IFwiPVwiKSA/IGVuZFZhbHVlIDogc3RhcnRDbGFzc0xpc3QucmVwbGFjZShuZXcgUmVnRXhwKFwiKD86XFxcXHN8XilcIiArIGVuZFZhbHVlLnN1YnN0cigyKSArIFwiKD8hW1xcXFx3LV0pXCIpLCBcIlwiKSArICgoZW5kVmFsdWUuY2hhckF0KDApID09PSBcIitcIikgPyBcIiBcIiArIGVuZFZhbHVlLnN1YnN0cigyKSA6IFwiXCIpfSxcbiAgXHRcdGNoYW5naW5nVmFycyA9IHt9LFxuICBcdFx0c3RhcnRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQpLFxuICBcdFx0dHJhbnNmb3JtUmVsYXRlZCA9IC8odHJhbnNmb3JtfHBlcnNwZWN0aXZlKS9pLFxuICBcdFx0ZW5kVmFycywgcDtcbiAgXHRpZiAoY2xhc3NQVCkge1xuICBcdFx0Y2xhc3NQVC5yKDEsIGNsYXNzUFQuZCk7XG4gIFx0XHRfcmVtb3ZlTGlua2VkTGlzdEl0ZW0oY2xhc3NQVC5kLnBsdWdpbiwgY2xhc3NQVCwgXCJfcHRcIik7XG4gIFx0fVxuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkYXRhLmUpO1xuICBcdGVuZFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCwgdHJ1ZSk7XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHN0YXJ0Q2xhc3NMaXN0KTtcbiAgXHRmb3IgKHAgaW4gZW5kVmFycykge1xuICBcdFx0aWYgKGVuZFZhcnNbcF0gIT09IHN0YXJ0VmFyc1twXSAmJiAhdHJhbnNmb3JtUmVsYXRlZC50ZXN0KHApKSB7XG4gIFx0XHRcdGNoYW5naW5nVmFyc1twXSA9IGVuZFZhcnNbcF07XG4gIFx0XHRcdGlmICghc3R5bGVbcF0gJiYgc3R5bGVbcF0gIT09IFwiMFwiKSB7XG4gIFx0XHRcdFx0aW5saW5lVG9SZW1vdmVBdEVuZFtwXSA9IDE7XG4gIFx0XHRcdH1cbiAgXHRcdH1cbiAgXHR9XG4gIFx0Y2FjaGUuY2xhc3NQVCA9IHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgXCJjbGFzc05hbWVcIiwgMCwgMCwgX3JlbmRlckNsYXNzTmFtZSwgZGF0YSwgMCwgLTExKTtcbiAgXHRpZiAoc3R5bGUuY3NzVGV4dCAhPT0gY3NzVGV4dCkgeyAvL29ubHkgYXBwbHkgaWYgdGhpbmdzIGNoYW5nZS4gT3RoZXJ3aXNlLCBpbiBjYXNlcyBsaWtlIGEgYmFja2dyb3VuZC1pbWFnZSB0aGF0J3MgcHVsbGVkIGR5bmFtaWNhbGx5LCBpdCBjb3VsZCBjYXVzZSBhIHJlZnJlc2guIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgLy8gbm90ZTogaW4gMy4zLjAgd2Ugc3dpdGNoZWQgdGFyZ2V0Lm9mZnNldFBhcmVudCB0byBfZG9jLmJvZHkuY29udGFpbnModGFyZ2V0KSB0byBhdm9pZCBbc29tZXRpbWVzIHVubmVjZXNzYXJ5XSBNdXRhdGlvbk9ic2VydmVyIGNhbGxzIGJ1dCB0aGF0IHdhc24ndCBhZGVxdWF0ZSBiZWNhdXNlIHRoZXJlIGFyZSBlZGdlIGNhc2VzIHdoZXJlIG5lc3RlZCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgbmVlZCB0byBnZXQgcmVwYXJlbnRlZCB0byBhY2N1cmF0ZWx5IHNlbnNlIHRyYW5zZm9ybXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM4OCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zNzVcbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTtcbiAgfSBlbHNlIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4ICYmIChkZXRlcm1pbmFudCA9IGEgKiBkIC0gYiAqIGMpKSB7XG4gICAgLy9pZiBpdCdzIHplcm8gKGxpa2UgaWYgc2NhbGVYIGFuZCBzY2FsZVkgYXJlIHplcm8pLCBza2lwIGl0IHRvIGF2b2lkIGVycm9ycyB3aXRoIGRpdmlkaW5nIGJ5IHplcm8uXG4gICAgeCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHkgPSB4T3JpZ2luICogKC1iIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqIChhIC8gZGV0ZXJtaW5hbnQpIC0gKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB4T3JpZ2luID0geDtcbiAgICB5T3JpZ2luID0geTtcbiAgfVxuXG4gIGlmIChzbW9vdGggfHwgc21vb3RoICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGgpIHtcbiAgICB0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuICAgIHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG4gICAgY2FjaGUueE9mZnNldCA9IHhPZmZzZXRPbGQgKyAodHggKiBhICsgdHkgKiBjKSAtIHR4O1xuICAgIGNhY2hlLnlPZmZzZXQgPSB5T2Zmc2V0T2xkICsgKHR4ICogYiArIHR5ICogZCkgLSB0eTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIH1cblxuICBjYWNoZS54T3JpZ2luID0geE9yaWdpbjtcbiAgY2FjaGUueU9yaWdpbiA9IHlPcmlnaW47XG4gIGNhY2hlLnNtb290aCA9ICEhc21vb3RoO1xuICBjYWNoZS5vcmlnaW4gPSBvcmlnaW47XG4gIGNhY2hlLm9yaWdpbklzQWJzb2x1dGUgPSAhIW9yaWdpbklzQWJzb2x1dGU7XG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjBweCAwcHhcIjsgLy9vdGhlcndpc2UsIGlmIHNvbWVvbmUgc2V0cyAgYW4gb3JpZ2luIHZpYSBDU1MsIGl0IHdpbGwgbGlrZWx5IGludGVyZmVyZSB3aXRoIHRoZSBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZSBvbmVzIChiZWNhdXNlIHJlbWVtYmVyLCB3ZSdyZSBiYWtpbmcgdGhlIG9yaWdpbiBpbnRvIHRoZSBtYXRyaXgoKSB2YWx1ZSkuXG5cbiAgaWYgKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPcmlnaW5cIiwgeE9yaWdpbk9sZCwgeE9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9yaWdpblwiLCB5T3JpZ2luT2xkLCB5T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T2Zmc2V0XCIsIHhPZmZzZXRPbGQsIGNhY2hlLnhPZmZzZXQpO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPZmZzZXRcIiwgeU9mZnNldE9sZCwgY2FjaGUueU9mZnNldCk7XG4gIH1cblxuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHhPcmlnaW4gKyBcIiBcIiArIHlPcmlnaW4pO1xufSxcbiAgICBfcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBuZXcgR1NDYWNoZSh0YXJnZXQpO1xuXG4gIGlmIChcInhcIiBpbiBjYWNoZSAmJiAhdW5jYWNoZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGludmVydGVkU2NhbGVYID0gY2FjaGUuc2NhbGVYIDwgMCxcbiAgICAgIHB4ID0gXCJweFwiLFxuICAgICAgZGVnID0gXCJkZWdcIixcbiAgICAgIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICAgICAgb3JpZ2luID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkgfHwgXCIwXCIsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHosXG4gICAgICBzY2FsZVgsXG4gICAgICBzY2FsZVksXG4gICAgICByb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWCxcbiAgICAgIHJvdGF0aW9uWSxcbiAgICAgIHNrZXdYLFxuICAgICAgc2tld1ksXG4gICAgICBwZXJzcGVjdGl2ZSxcbiAgICAgIHhPcmlnaW4sXG4gICAgICB5T3JpZ2luLFxuICAgICAgbWF0cml4LFxuICAgICAgYW5nbGUsXG4gICAgICBjb3MsXG4gICAgICBzaW4sXG4gICAgICBhLFxuICAgICAgYixcbiAgICAgIGMsXG4gICAgICBkLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdDEsXG4gICAgICB0MixcbiAgICAgIHQzLFxuICAgICAgYTEzLFxuICAgICAgYTIzLFxuICAgICAgYTMzLFxuICAgICAgYTQyLFxuICAgICAgYTQzLFxuICAgICAgYTMyO1xuICB4ID0geSA9IHogPSByb3RhdGlvbiA9IHJvdGF0aW9uWCA9IHJvdGF0aW9uWSA9IHNrZXdYID0gc2tld1kgPSBwZXJzcGVjdGl2ZSA9IDA7XG4gIHNjYWxlWCA9IHNjYWxlWSA9IDE7XG4gIGNhY2hlLnN2ZyA9ICEhKHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCkpO1xuXG4gIGlmIChjcy50cmFuc2xhdGUpIHtcbiAgICAvLyBhY2NvbW1vZGF0ZSBpbmRlcGVuZGVudCB0cmFuc2Zvcm1zIGJ5IGNvbWJpbmluZyB0aGVtIGludG8gbm9ybWFsIG9uZXMuXG4gICAgaWYgKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgfHwgY3Muc2NhbGUgIT09IFwibm9uZVwiIHx8IGNzLnJvdGF0ZSAhPT0gXCJub25lXCIpIHtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiID8gXCJ0cmFuc2xhdGUzZChcIiArIChjcy50cmFuc2xhdGUgKyBcIiAwIDBcIikuc3BsaXQoXCIgXCIpLnNsaWNlKDAsIDMpLmpvaW4oXCIsIFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnJvdGF0ZSAhPT0gXCJub25lXCIgPyBcInJvdGF0ZShcIiArIGNzLnJvdGF0ZSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnNjYWxlICE9PSBcIm5vbmVcIiA/IFwic2NhbGUoXCIgKyBjcy5zY2FsZS5zcGxpdChcIiBcIikuam9pbihcIixcIikgKyBcIikgXCIgOiBcIlwiKSArIChjc1tfdHJhbnNmb3JtUHJvcF0gIT09IFwibm9uZVwiID8gY3NbX3RyYW5zZm9ybVByb3BdIDogXCJcIik7XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICBpZiAoY2FjaGUudW5jYWNoZSkge1xuICAgICAgLy8gaWYgY2FjaGUudW5jYWNoZSBpcyB0cnVlIChhbmQgbWF5YmUgaWYgb3JpZ2luIGlzIDAsMCksIHdlIG5lZWQgdG8gc2V0IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gKGNhY2hlLnhPcmlnaW4gLSBiYm94LngpICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gYmJveC55KSArIFwicHhcIi4gUHJldmlvdXNseSB3ZSBsZXQgdGhlIGRhdGEtc3ZnLW9yaWdpbiBzdGF5IGluc3RlYWQsIGJ1dCB3aGVuIGludHJvZHVjaW5nIHJldmVydCgpLCBpdCBjb21wbGljYXRlZCB0aGluZ3MuXG4gICAgICB0MiA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgICBvcmlnaW4gPSBjYWNoZS54T3JpZ2luIC0gdDIueCArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIHQyLnkpICsgXCJweFwiO1xuICAgICAgdDEgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MSA9ICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7IC8vICBSZW1lbWJlciwgdG8gd29yayBhcm91bmQgYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMgd2UgYWx3YXlzIGZvcmNlIFNWRyBlbGVtZW50cycgdHJhbnNmb3JtT3JpZ2luIHRvIDAsMCBhbmQgb2Zmc2V0IHRoZSB0cmFuc2xhdGlvbiBhY2NvcmRpbmdseS5cbiAgICB9XG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHggLT0geE9yaWdpbiAtICh4T3JpZ2luICogYSArIHlPcmlnaW4gKiBjKTtcbiAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgfSAvLzNEIG1hdHJpeFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGEzMiA9IG1hdHJpeFs2XTtcbiAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgIGEyMyA9IG1hdHJpeFs5XTtcbiAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgeCA9IG1hdHJpeFsxMl07XG4gICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTMyLCBhMzMpO1xuICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRzsgLy9yb3RhdGlvblhcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICB0MiA9IGEyMiAqIGNvcyArIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgIGEyMyA9IGEyMiAqIC1zaW4gKyBhMjMgKiBjb3M7XG4gICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGExMiA9IHQxO1xuICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgYTMyID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25ZXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoLWMsIGEzMyk7XG4gICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICB0MiA9IGIgKiBjb3MgLSBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBiID0gdDI7XG4gICAgICAgIGMgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvblpcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMihiLCBhKTtcbiAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICB0MiA9IGExMiAqIGNvcyArIGEyMiAqIHNpbjtcbiAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYTEyID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3RhdGlvblggJiYgTWF0aC5hYnMocm90YXRpb25YKSArIE1hdGguYWJzKHJvdGF0aW9uKSA+IDM1OS45KSB7XG4gICAgICAgIC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgIHJvdGF0aW9uWSA9IDE4MCAtIHJvdGF0aW9uWTtcbiAgICAgIH1cblxuICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgIHNjYWxlWSA9IF9yb3VuZChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSk7XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgcGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKGE0MyA8IDAgPyAtYTQzIDogYTQzKSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgLy9zZW5zZSBpZiB0aGVyZSBhcmUgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvbiBhbiBTVkcgZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gd2hlbiByZW5kZXJpbmcuIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlzIG1vcmUgcmVsaWFibGUgY3Jvc3MtYnJvd3NlciwgYnV0IHdlIGNhbid0IGp1c3QgcmVtb3ZlIHRoZSBDU1Mgb25lcyBiZWNhdXNlIHRoZXkgbWF5IGJlIGFwcGxpZWQgaW4gYSBDU1MgcnVsZSBzb21ld2hlcmUgKG5vdCBqdXN0IGlubGluZSkuXG4gICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICBjYWNoZS5mb3JjZUNTUyA9IHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIikgfHwgIV9pc051bGxUcmFuc2Zvcm0oX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCkpO1xuICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfVxuICB9XG5cbiAgdW5jYWNoZSA9IHVuY2FjaGUgfHwgY2FjaGUudW5jYWNoZTtcbiAgY2FjaGUueCA9IHggLSAoKGNhY2hlLnhQZXJjZW50ID0geCAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueFBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgPT09IE1hdGgucm91bmQoLXgpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRXaWR0aCAqIGNhY2hlLnhQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS56ID0geiArIHB4O1xuICBjYWNoZS5zY2FsZVggPSBfcm91bmQoc2NhbGVYKTtcbiAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25YID0gX3JvdW5kKHJvdGF0aW9uWCkgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICBjYWNoZS5za2V3WSA9IHNrZXdZICsgZGVnO1xuICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMS4zXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnTm9LaWxsID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWVcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfcm91bmRQcmVjaXNlID0gZnVuY3Rpb24gX3JvdW5kUHJlY2lzZSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG59LFxuICAgIC8vIGluY3JlYXNlZCBwcmVjaXNpb24gbW9zdGx5IGZvciB0aW1pbmcgdmFsdWVzLlxuX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgdmFyIG9wZXJhdG9yID0gdmFsdWUuY2hhckF0KDApLFxuICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICByZXR1cm4gb3BlcmF0b3IgPT09IFwiK1wiID8gc3RhcnQgKyBlbmQgOiBvcGVyYXRvciA9PT0gXCItXCIgPyBzdGFydCAtIGVuZCA6IG9wZXJhdG9yID09PSBcIipcIiA/IHN0YXJ0ICogZW5kIDogc3RhcnQgLyBlbmQ7XG59LFxuICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8IGNoaWxkLl9pbml0dGVkICYmICFjaGlsZC5fZHVyKSB7XG4gICAgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX2NyZWF0ZVBsdWdpbiA9IGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4oY29uZmlnKSB7XG4gIGNvbmZpZyA9ICFjb25maWcubmFtZSAmJiBjb25maWdbXCJkZWZhdWx0XCJdIHx8IGNvbmZpZzsgLy9VTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICBQbHVnaW4gPSBuYW1lICYmICFpc0Z1bmMgJiYgY29uZmlnLmluaXQgPyBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgfSA6IGNvbmZpZyxcbiAgICAgIC8vaW4gY2FzZSBzb21lb25lIHBhc3NlcyBpbiBhbiBvYmplY3QgdGhhdCdzIG5vdCBhIHBsdWdpbiwgbGlrZSBDdXN0b21FYXNlXG4gIGluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICByZW5kZXI6IF9yZW5kZXJQcm9wVHdlZW5zLFxuICAgIGFkZDogX2FkZFByb3BUd2VlbixcbiAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICBtb2RpZmllcjogX2FkZFBsdWdpbk1vZGlmaWVyLFxuICAgIHJhd1ZhcnM6IDBcbiAgfSxcbiAgICAgIHN0YXRpY3MgPSB7XG4gICAgdGFyZ2V0VGVzdDogMCxcbiAgICBnZXQ6IDAsXG4gICAgZ2V0U2V0dGVyOiBfZ2V0U2V0dGVyLFxuICAgIGFsaWFzZXM6IHt9LFxuICAgIHJlZ2lzdGVyOiAwXG4gIH07XG5cbiAgX3dha2UoKTtcblxuICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICBpZiAoX3BsdWdpbnNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfc2V0RGVmYXVsdHMoUGx1Z2luLCBfc2V0RGVmYXVsdHMoX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBpbnN0YW5jZURlZmF1bHRzKSwgc3RhdGljcykpOyAvL3N0YXRpYyBtZXRob2RzXG5cblxuICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpOyAvL2luc3RhbmNlIG1ldGhvZHNcblxuXG4gICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgIGlmIChjb25maWcudGFyZ2V0VGVzdCkge1xuICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgIH1cblxuICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjsgLy9mb3IgdGhlIGdsb2JhbCBuYW1lLiBcIm1vdGlvblBhdGhcIiBzaG91bGQgYmVjb21lIE1vdGlvblBhdGhQbHVnaW5cbiAgfVxuXG4gIF9hZGRHbG9iYWwobmFtZSwgUGx1Z2luKTtcblxuICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ09MT1JTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fMjU1ID0gMjU1LFxuICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgYXF1YTogWzAsIF8yNTUsIF8yNTVdLFxuICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBibGFjazogWzAsIDAsIDBdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICBibHVlOiBbMCwgMCwgXzI1NV0sXG4gIG5hdnk6IFswLCAwLCAxMjhdLFxuICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIHJlZDogW18yNTUsIDAsIDBdLFxuICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gIHRyYW5zcGFyZW50OiBbXzI1NSwgXzI1NSwgXzI1NSwgMF1cbn0sXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGlkZWEgdG8gcmVwbGFjZSB0aGUgaGFyZC1jb2RlZCBjb2xvciBuYW1lIHZhbHVlcyAtIHB1dCB0aGlzIGluIHRoZSB0aWNrZXIud2FrZSgpIHdoZXJlIHdlIHNldCB0aGUgX2RvYzpcbi8vIGxldCBjdHggPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuLy8gX2ZvckVhY2hOYW1lKFwiYXF1YSxsaW1lLHNpbHZlcixibGFjayxtYXJvb24sdGVhbCxibHVlLG5hdnksd2hpdGUsb2xpdmUseWVsbG93LG9yYW5nZSxncmF5LHB1cnBsZSxncmVlbixyZWQscGluayxjeWFuXCIsIGNvbG9yID0+IHtjdHguZmlsbFN0eWxlID0gY29sb3I7IF9jb2xvckxvb2t1cFtjb2xvcl0gPSBzcGxpdENvbG9yKGN0eC5maWxsU3R5bGUpfSk7XG5faHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCArPSBoIDwgMCA/IDEgOiBoID4gMSA/IC0xIDogMDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgIC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjAgb3IgIzlGMEYgKGNvdWxkIGhhdmUgYWxwaGEpXG4gICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgZyA9IHYuY2hhckF0KDIpO1xuICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIC8vIGhleCB3aXRoIGFscGhhLCBsaWtlICNmZDVlNTNmZlxuICAgICAgICBhID0gcGFyc2VJbnQodi5zdWJzdHIoMSwgNiksIDE2KTtcbiAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLixcbiAgcDtcblxuICBmb3IgKHAgaW4gX2NvbG9yTG9va3VwKSB7XG4gICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChzICsgXCIpXCIsIFwiZ2lcIik7XG59KCksXG4gICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbiBfY29sb3JTdHJpbmdGaWx0ZXIoYSkge1xuICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgdG9IU0w7XG4gIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgYVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpOyAvLyBtYWtlIHN1cmUgdGhlIG9yZGVyIG9mIG51bWJlcnMvY29sb3JzIG1hdGNoIHdpdGggdGhlIEVORCB2YWx1ZS5cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJQ0tFUlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX3RpY2tlckFjdGl2ZSxcbiAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgIF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICBfbmV4dFRpbWUgPSBfZ2FwLFxuICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgX2lkLFxuICAgICAgX3JlcSxcbiAgICAgIF9yYWYsXG4gICAgICBfc2VsZixcbiAgICAgIF9kZWx0YSxcbiAgICAgIF9pLFxuICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgdmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG4gICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgIG92ZXJsYXAsXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICB0aW1lLFxuICAgICAgICBmcmFtZTtcblxuICAgIGVsYXBzZWQgPiBfbGFnVGhyZXNob2xkICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JhZiA9IF93aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gX3dpbi5jYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEgLyBfdGlueU51bTsgLy96ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnLCBfbGFnVGhyZXNob2xkLCAwKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICBjYWxsYmFjayh0LCBkLCBmLCB2KTtcblxuICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgIF9zZWxmLnJlbW92ZShjYWxsYmFjayk7XG5cbiAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICB+KGkgPSBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spKSAmJiBfbGlzdGVuZXJzLnNwbGljZShpLCAxKSAmJiBfaSA+PSBpICYmIF9pLS07XG4gICAgfSxcbiAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBfc2VsZjtcbn0oKSxcbiAgICBfd2FrZSA9IGZ1bmN0aW9uIF93YWtlKCkge1xuICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG59LFxuICAgIC8vYWxzbyBlbnN1cmVzIHRoZSBjb3JlIGNsYXNzZXMgYXJlIGluaXRpYWxpemVkLlxuXG4vKlxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIEVBU0lOR1xuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuX2Vhc2VNYXAgPSB7fSxcbiAgICBfY3VzdG9tRWFzZUV4cCA9IC9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLFxuICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gIC8vdGFrZXMgYSBzdHJpbmcgbGlrZSBcInt3aWdnbGVzOjEwLCB0eXBlOmFudGljaXBhdGV9KVwiIGFuZCB0dXJucyBpdCBpbnRvIGEgcmVhbCBvYmplY3QuIE5vdGljZSBpdCBlbmRzIGluIFwiKVwiIGFuZCBpbmNsdWRlcyB0aGUge30gd3JhcHBlcnMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGVhc2UgY29uZmlncyBhbmQgcHJpb3JpdGl6ZWQgb3B0aW1pemF0aW9uIHJhdGhlciB0aGFuIHJldXNhYmlsaXR5LlxuICB2YXIgb2JqID0ge30sXG4gICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICBrZXkgPSBzcGxpdFswXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsLFxuICAgICAgcGFyc2VkVmFsO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFsID0gc3BsaXRbaV07XG4gICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgIHBhcnNlZFZhbCA9IHZhbC5zdWJzdHIoMCwgaW5kZXgpO1xuICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF92YWx1ZUluUGFyZW50aGVzZXMgPSBmdW5jdGlvbiBfdmFsdWVJblBhcmVudGhlc2VzKHZhbHVlKSB7XG4gIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgIG5lc3RlZCA9IHZhbHVlLmluZGV4T2YoXCIoXCIsIG9wZW4pO1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xufSxcbiAgICBfY29uZmlnRWFzZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBfY29uZmlnRWFzZUZyb21TdHJpbmcobmFtZSkge1xuICAvL25hbWUgY2FuIGJlIGEgc3RyaW5nIGxpa2UgXCJlbGFzdGljLm91dCgxLDAuNSlcIiwgYW5kIHBhc3MgaW4gX2Vhc2VNYXAgYXMgb2JqIGFuZCBpdCdsbCBwYXJzZSBpdCBvdXQgYW5kIGNhbGwgdGhlIGFjdHVhbCBmdW5jdGlvbiBsaWtlIF9lYXNlTWFwLkVsYXN0aWMuZWFzZU91dC5jb25maWcoMSwwLjUpLiBJdCB3aWxsIGFsc28gcGFyc2UgY3VzdG9tIGVhc2Ugc3RyaW5ncyBhcyBsb25nIGFzIEN1c3RvbUVhc2UgaXMgbG9hZGVkIGFuZCByZWdpc3RlcmVkIChpbnRlcm5hbGx5IGFzIF9lYXNlTWFwLl9DRSkuXG4gIHZhciBzcGxpdCA9IChuYW1lICsgXCJcIikuc3BsaXQoXCIoXCIpLFxuICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG59LFxuICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2UoMSAtIHApO1xuICB9O1xufSxcbiAgICAvLyBhbGxvdyB5b3lvRWFzZSB0byBiZSBzZXQgaW4gY2hpbGRyZW4gYW5kIGhhdmUgdGhvc2UgYWZmZWN0ZWQgd2hlbiB0aGUgcGFyZW50L2FuY2VzdG9yIHRpbWVsaW5lIHlveW9zLlxuX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgZWFzZTtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLCBpc1lveW8pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLnRpbWVsaW5lLCBpc1lveW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICBjaGlsZC5fZWFzZSA9IGNoaWxkLl95RWFzZTtcbiAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgfVxufSxcbiAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICByZXR1cm4gIWVhc2UgPyBkZWZhdWx0RWFzZSA6IChfaXNGdW5jdGlvbihlYXNlKSA/IGVhc2UgOiBfZWFzZU1hcFtlYXNlXSB8fCBfY29uZmlnRWFzZUZyb21TdHJpbmcoZWFzZSkpIHx8IGRlZmF1bHRFYXNlO1xufSxcbiAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICBpZiAoZWFzZU91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgIH07XG4gIH1cblxuICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlSW5PdXQgPSBmdW5jdGlvbiBlYXNlSW5PdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgIH07XG4gIH1cblxuICB2YXIgZWFzZSA9IHtcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gIH0sXG4gICAgICBsb3dlcmNhc2VOYW1lO1xuXG4gIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGVhc2VPdXQ7XG5cbiAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gKDEgLSBlYXNlT3V0KDEgLSBwICogMikpIC8gMiA6IC41ICsgZWFzZU91dCgocCAtIC41KSAqIDIpIC8gMjtcbiAgfTtcbn0sXG4gICAgX2NvbmZpZ0VsYXN0aWMgPSBmdW5jdGlvbiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgIHAzID0gcDIgLyBfMlBJICogKE1hdGguYXNpbigxIC8gcDEpIHx8IDApLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIHAyID0gXzJQSSAvIHAyOyAvL3ByZWNhbGN1bGF0ZSB0byBvcHRpbWl6ZVxuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgcmV0dXJuIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgfVxuXG4gIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPyAtLXAgKiBwICogKChvdmVyc2hvb3QgKyAxKSAqIHAgKyBvdmVyc2hvb3QpICsgMSA6IDA7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn07IC8vIGEgY2hlYXBlciAoa2IgYW5kIGNwdSkgYnV0IG1vcmUgbWlsZCB3YXkgdG8gZ2V0IGEgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIGJ5IGZlZWRpbmcgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2UgPSByYXRpbyA9PiB7XG4vLyBcdGxldCB5ID0gMC41ICsgcmF0aW8gLyAyO1xuLy8gXHRyZXR1cm4gcCA9PiAoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbi8vIH0sXG4vLyBhIHN0cm9uZ2VyIChidXQgbW9yZSBleHBlbnNpdmUga2IvY3B1KSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgdGhhdCBsZXRzIHlvdSBmZWVkIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlU3Ryb25nID0gcmF0aW8gPT4ge1xuLy8gXHRyYXRpbyA9IC41ICsgcmF0aW8gLyAyO1xuLy8gXHRsZXQgbyA9IDEgLyAzICogKHJhdGlvIDwgLjUgPyByYXRpbyA6IDEgLSByYXRpbyksXG4vLyBcdFx0YiA9IHJhdGlvIC0gbyxcbi8vIFx0XHRjID0gcmF0aW8gKyBvO1xuLy8gXHRyZXR1cm4gcCA9PiBwID09PSAxID8gcCA6IDMgKiBiICogKDEgLSBwKSAqICgxIC0gcCkgKiBwICsgMyAqIGMgKiAoMSAtIHApICogcCAqIHAgKyBwICogcCAqIHA7XG4vLyB9O1xuXG5cbl9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICBfaW5zZXJ0RWFzZShuYW1lICsgXCIsUG93ZXJcIiArIChwb3dlciAtIDEpLCBpID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICB9KTtcbn0pO1xuXG5fZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuKGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBuMSA9IDEgLyBjLFxuICAgICAgbjIgPSAyICogbjEsXG4gICAgICBuMyA9IDIuNSAqIG4xLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gIH07XG5cbiAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9LCBlYXNlT3V0KTtcbn0pKDcuNTYyNSwgMi43NSk7XG5cbl9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA/IE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gLShfc3FydCgxIC0gcCAqIHApIC0gMSk7XG59KTtcblxuX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID09PSAxID8gMSA6IC1fY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbl9lYXNlTWFwLlN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuc3RlcHMgPSBfZ2xvYmFscy5TdGVwcGVkRWFzZSA9IHtcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgIHN0ZXBzID0gMTtcbiAgICB9XG5cbiAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgIHAyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSksXG4gICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgfTtcbiAgfVxufTtcbl9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuX2ZvckVhY2hOYW1lKFwib25Db21wbGV0ZSxvblVwZGF0ZSxvblN0YXJ0LG9uUmVwZWF0LG9uUmV2ZXJzZUNvbXBsZXRlLG9uSW50ZXJydXB0XCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ0FDSEVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIEdTQ2FjaGUgPSBmdW5jdGlvbiBHU0NhY2hlKHRhcmdldCwgaGFybmVzcykge1xuICB0aGlzLmlkID0gX2dzSUQrKztcbiAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICB0aGlzLnNldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldFNldHRlciA6IF9nZXRTZXR0ZXI7XG59O1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBTklNQVRJT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IHZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgLy8gVE9ETzogcmVwZWF0OiBJbmZpbml0eSBvbiBhIHRpbWVsaW5lJ3MgY2hpbGRyZW4gbXVzdCBmbGFnIHRoYXQgdGltZWxpbmUgaW50ZXJuYWxseSBhbmQgYWZmZWN0IGl0cyB0b3RhbER1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc3RvcCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIHdoZW4gcmVhY2hpbmcgdGhlIHN0YXJ0LlxuICAgICAgdGhpcy5fckRlbGF5ID0gdmFycy5yZXBlYXREZWxheSB8fCAwO1xuICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cyA9IDE7XG5cbiAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgaWYgKF9jb250ZXh0KSB7XG4gICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5zdGFydFRpbWUodGhpcy5fc3RhcnQgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICB9O1xuXG4gIF9wcm90by50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSAwO1xuICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICFwYXJlbnQuX2RwIHx8IHBhcmVudC5wYXJlbnQgfHwgX3Bvc3RBZGRDaGVja3MocGFyZW50LCB0aGlzKTsgLy8gZWRnZSBjYXNlOiBpZiB0aGlzIGlzIGEgY2hpbGQgb2YgYSB0aW1lbGluZSB0aGF0IGFscmVhZHkgY29tcGxldGVkLCBmb3IgZXhhbXBsZSwgd2UgbXVzdCByZS1hY3RpdmF0ZSB0aGUgcGFyZW50LlxuICAgICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0IG9mIHRoYXQgY2hpbGQgd291bGQgZ2V0IHB1c2hlZCBvdXQsIGJ1dCBvbmUgb2YgdGhlIGFuY2VzdG9ycyBtYXkgaGF2ZSBjb21wbGV0ZWQuXG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuICAgICAgLy9pZiAoIXRoaXMuX2xvY2spIHsgLy8gYXZvaWQgZW5kbGVzcyByZWN1cnNpb24gKG5vdCBzdXJlIHdlIG5lZWQgdGhpcyB5ZXQgb3IgaWYgaXQncyB3b3J0aCB0aGUgcGVyZm9ybWFuY2UgaGl0KVxuICAgICAgLy8gICB0aGlzLl9sb2NrID0gMTtcblxuICAgICAgX2xhenlTYWZlUmVuZGVyKHRoaXMsIF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKTsgLy8gICB0aGlzLl9sb2NrID0gMDtcbiAgICAgIC8vfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksIHZhbHVlICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpKSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIHx8ICh2YWx1ZSA/IHRoaXMuX2R1ciA6IDApLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl90aW1lOyAvLyBub3RlOiBpZiB0aGUgbW9kdWx1cyByZXN1bHRzIGluIDAsIHRoZSBwbGF5aGVhZCBjb3VsZCBiZSBleGFjdGx5IGF0IHRoZSBlbmQgb3IgdGhlIGJlZ2lubmluZywgYW5kIHdlIGFsd2F5cyBkZWZlciB0byB0aGUgRU5EIHdpdGggYSBub24temVybyB2YWx1ZSwgb3RoZXJ3aXNlIGlmIHlvdSBzZXQgdGhlIHRpbWUoKSB0byB0aGUgdmVyeSBlbmQgKGR1cmF0aW9uKCkpLCBpdCB3b3VsZCByZW5kZXIgYXQgdGhlIFNUQVJUIVxuICB9O1xuXG4gIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMudG90YWxEdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdFRpbWUgLyB0aGlzLl90RHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLnByb2dyZXNzID0gZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLmR1cmF0aW9uKCkgKiAodGhpcy5feW95byAmJiAhKHRoaXMuaXRlcmF0aW9uKCkgJiAxKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5kdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdGltZSAvIHRoaXMuX2R1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydHMgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIHJlY29yZGVkIHRpbWVTY2FsZS4gU3BlY2lhbCBjYXNlOiBpZiBzb21lb25lIGNhbGxzIHJldmVyc2UoKSBvbiBhbiBhbmltYXRpb24gd2l0aCB0aW1lU2NhbGUgb2YgMCwgd2UgYXNzaWduIGl0IC1fdGlueU51bSB0byByZW1lbWJlciBpdCdzIHJldmVyc2VkLlxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ydHMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgdFRpbWUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLl90cyA/IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRoaXMucGFyZW50Ll90aW1lLCB0aGlzKSA6IHRoaXMuX3RUaW1lOyAvLyBtYWtlIHN1cmUgdG8gZG8gdGhlIHBhcmVudFRvQ2hpbGRUb3RhbFRpbWUoKSBCRUZPUkUgc2V0dGluZyB0aGUgbmV3IF90cyBiZWNhdXNlIHRoZSBvbGQgb25lIG11c3QgYmUgdXNlZCBpbiB0aGF0IGNhbGN1bGF0aW9uLlxuICAgIC8vIGZ1dHVyZSBhZGRpdGlvbj8gVXAgc2lkZTogZmFzdCBhbmQgbWluaW1hbCBmaWxlIHNpemUuIERvd24gc2lkZTogb25seSB3b3JrcyBvbiB0aGlzIGFuaW1hdGlvbjsgaWYgYSB0aW1lbGluZSBpcyByZXZlcnNlZCwgZm9yIGV4YW1wbGUsIGl0cyBjaGlsZHJlbnMnIG9uUmV2ZXJzZSB3b3VsZG4ndCBnZXQgY2FsbGVkLlxuICAgIC8vKCt2YWx1ZSA8IDAgJiYgdGhpcy5fcnRzID49IDApICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmV2ZXJzZVwiLCB0cnVlKTtcbiAgICAvLyBwcmlvcml0aXplIHJlbmRlcmluZyB3aGVyZSB0aGUgcGFyZW50J3MgcGxheWhlYWQgbGluZXMgdXAgaW5zdGVhZCBvZiB0aGlzLl90VGltZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIGEgdHdlZW4gdGhhdCdzIGFuaW1hdGluZyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIGluIHRoZSBzYW1lIHJlbmRlcmluZyBsb29wIChzYW1lIHBhcmVudCksIHRodXMgaWYgdGhlIHRpbWVTY2FsZSB0d2VlbiByZW5kZXJzIGZpcnN0LCBpdCB3b3VsZCBhbHRlciBfc3RhcnQgQkVGT1JFIF90VGltZSB3YXMgc2V0IG9uIHRoYXQgdGljayAoaW4gdGhlIHJlbmRlcmluZyBsb29wKSwgZWZmZWN0aXZlbHkgZnJlZXppbmcgaXQgdW50aWwgdGhlIHRpbWVTY2FsZSB0d2VlbiBmaW5pc2hlcy5cblxuICAgIHRoaXMuX3J0cyA9ICt2YWx1ZSB8fCAwO1xuICAgIHRoaXMuX3RzID0gdGhpcy5fcHMgfHwgdmFsdWUgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUgd2hpY2ggd291bGQgYmUgMCBpZiB0aGUgYW5pbWF0aW9uIGlzIHBhdXNlZC5cblxuICAgIHRoaXMudG90YWxUaW1lKF9jbGFtcCgtdGhpcy5fZGVsYXksIHRoaXMuX3REdXIsIHRUaW1lKSwgdHJ1ZSk7XG5cbiAgICBfc2V0RW5kKHRoaXMpOyAvLyBpZiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgd2FzIGZhbHNlLCB0aGUgZW5kIHRpbWUgZGlkbid0IGdldCB1cGRhdGVkIGluIHRoZSBfYWxpZ25QbGF5aGVhZCgpIG1ldGhvZCwgc28gZG8gaXQgaGVyZS5cblxuXG4gICAgcmV0dXJuIF9yZWNhY2hlQW5jZXN0b3JzKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHMgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9wcyA9IHZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcFRpbWUgPSB0aGlzLl90VGltZSB8fCBNYXRoLm1heCgtdGhpcy5fZGVsYXksIHRoaXMucmF3VGltZSgpKTsgLy8gaWYgdGhlIHBhdXNlIG9jY3VycyBkdXJpbmcgdGhlIGRlbGF5IHBoYXNlLCBtYWtlIHN1cmUgdGhhdCdzIGZhY3RvcmVkIGluIHdoZW4gcmVzdW1pbmcuXG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9hY3QgPSAwOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlLCBzbyBhIHBhdXNlZCB0d2VlbiB3b3VsZCBlZmZlY3RpdmVseSBoYXZlIGEgdGltZVNjYWxlIG9mIDAuIFdlIHJlY29yZCB0aGUgXCJyZWFsXCIgdGltZVNjYWxlIGFzIF9ydHMgKHJlY29yZGVkIHRpbWUgc2NhbGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fcnRzOyAvL29ubHkgZGVmZXIgdG8gX3BUaW1lIChwYXVzZVRpbWUpIGlmIHRUaW1lIGlzIHplcm8uIFJlbWVtYmVyLCBzb21lb25lIGNvdWxkIHBhdXNlKCkgYW4gYW5pbWF0aW9uLCB0aGVuIHNjcnViIHRoZSBwbGF5aGVhZCBhbmQgcmVzdW1lKCkuIElmIHRoZSBwYXJlbnQgZG9lc24ndCBoYXZlIHNtb290aENoaWxkVGltaW5nLCB3ZSByZW5kZXIgYXQgdGhlIHJhd1RpbWUoKSBiZWNhdXNlIHRoZSBzdGFydFRpbWUgd29uJ3QgZ2V0IHVwZGF0ZWQuXG5cbiAgICAgICAgdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nID8gdGhpcy5yYXdUaW1lKCkgOiB0aGlzLl90VGltZSB8fCB0aGlzLl9wVGltZSwgdGhpcy5wcm9ncmVzcygpID09PSAxICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSk7IC8vIGVkZ2UgY2FzZTogYW5pbWF0aW9uLnByb2dyZXNzKDEpLnBhdXNlKCkucGxheSgpIHdvdWxkbid0IHJlbmRlciBhZ2FpbiBiZWNhdXNlIHRoZSBwbGF5aGVhZCBpcyBhbHJlYWR5IGF0IHRoZSBlbmQsIGJ1dCB0aGUgY2FsbCB0byB0b3RhbFRpbWUoKSBiZWxvdyB3aWxsIGFkZCBpdCBiYWNrIHRvIGl0cyBwYXJlbnQuLi5hbmQgbm90IHJlbW92ZSBpdCBhZ2FpbiAoc2luY2UgcmVtb3Zpbmcgb25seSBoYXBwZW5zIHVwb24gcmVuZGVyaW5nIGF0IGEgbmV3IHRpbWUpLiBPZmZzZXR0aW5nIHRoZSBfdFRpbWUgc2xpZ2h0bHkgaXMgZG9uZSBzaW1wbHkgdG8gY2F1c2UgdGhlIGZpbmFsIHJlbmRlciBpbiB0b3RhbFRpbWUoKSB0aGF0J2xsIHBvcCBpdCBvZmYgaXRzIHRpbWVsaW5lIChpZiBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSwgb2YgY291cnNlKS4gQ2hlY2sgdG8gbWFrZSBzdXJlIF96VGltZSBpc24ndCAtX3RpbnlOdW0gdG8gYXZvaWQgYW4gZWRnZSBjYXNlIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBwdXNoZWQgdG8gdGhlIGVuZCBidXQgSU5TSURFIGEgdHdlZW4vY2FsbGJhY2ssIHRoZSB0aW1lbGluZSBpdHNlbGYgaXMgcGF1c2VkIHRodXMgaGFsdGluZyByZW5kZXJpbmcgYW5kIGxlYXZpbmcgYSBmZXcgdW5yZW5kZXJlZC4gV2hlbiByZXN1bWluZywgaXQgd291bGRuJ3QgcmVuZGVyIHRob3NlIG90aGVyd2lzZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uc3RhcnRUaW1lID0gZnVuY3Rpb24gc3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7XG4gICAgICBwYXJlbnQgJiYgKHBhcmVudC5fc29ydCB8fCAhdGhpcy5wYXJlbnQpICYmIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgdGhpcywgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gIH07XG5cbiAgX3Byb3RvLmVuZFRpbWUgPSBmdW5jdGlvbiBlbmRUaW1lKGluY2x1ZGVSZXBlYXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ICsgKF9pc05vdEZhbHNlKGluY2x1ZGVSZXBlYXRzKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIE1hdGguYWJzKHRoaXMuX3RzIHx8IDEpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YWNoZWQgcGFyZW50XG5cbiAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0gX3JldmVydENvbmZpZztcbiAgICB9XG5cbiAgICB2YXIgcHJldklzUmV2ZXJ0aW5nID0gX3JldmVydGluZztcbiAgICBfcmV2ZXJ0aW5nID0gY29uZmlnO1xuXG4gICAgaWYgKHRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fc3RhcnRBdCkge1xuICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIGNvbmZpZy5raWxsICE9PSBmYWxzZSAmJiB0aGlzLmtpbGwoKTtcbiAgICBfcmV2ZXJ0aW5nID0gcHJldklzUmV2ZXJ0aW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbG9iYWxUaW1lID0gZnVuY3Rpb24gZ2xvYmFsVGltZShyYXdUaW1lKSB7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICB3aGlsZSAoYW5pbWF0aW9uKSB7XG4gICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoYW5pbWF0aW9uLl90cyB8fCAxKTtcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gLTEgOiB0aW1lOyAvLyB0aGUgX3N0YXJ0QXQgdHdlZW5zIGZvciAuZnJvbVRvKCkgYW5kIC5mcm9tKCkgdGhhdCBoYXZlIGltbWVkaWF0ZVJlbmRlciBzaG91bGQgYWx3YXlzIGJlIEZJUlNUIGluIHRoZSB0aW1lbGluZSAoaW1wb3J0YW50IGZvciBSZWNvcmRpbmcucmV2ZXJ0KCkpXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIChwcmV2SXRlcmF0aW9uID0gaXRlcmF0aW9uKTsgLy8gZWRnZSBjYXNlIC0gaWYgc29tZW9uZSBkb2VzIGFkZFBhdXNlKCkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgcmVwZWF0aW5nIHRpbWVsaW5lLCB0aGF0IHBhdXNlIGlzIHRlY2huaWNhbGx5IGF0IHRoZSBzYW1lIHNwb3QgYXMgdGhlIGVuZCB3aGljaCBjYXVzZXMgdGhpcy5fdGltZSB0byBnZXQgc2V0IHRvIDAgd2hlbiB0aGUgdG90YWxUaW1lIHdvdWxkIG5vcm1hbGx5IHBsYWNlIHRoZSBwbGF5aGVhZCBhdCB0aGUgZW5kLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMzgyMy1jbG9zaW5nLW5hdi1hbmltYXRpb24tbm90LXdvcmtpbmctb24taWUtYW5kLWlwaG9uZS02LW1heWJlLW90aGVyLW9sZGVyLWJyb3dzZXIvP3RhYj1jb21tZW50cyNjb21tZW50LTExMzAwNVxuXG4gICAgICAgIGlmICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpIHtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG4gICAgICAgIGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG4gICAgICAgIHdvdWxkIGdldCB0cmFuc2xhdGVkIHRvIDIuOCBzZWNvbmRzIGlmIHRoZSB0aW1lbGluZSB5b3lvcyBvciAwLjIgc2Vjb25kcyBpZiBpdCBqdXN0IHJlcGVhdHMpLCB0aGVyZVxuICAgICAgICBjb3VsZCBiZSBhIGNhbGxiYWNrIG9yIGEgc2hvcnQgdHdlZW4gdGhhdCdzIGF0IDIuOTUgb3IgMyBzZWNvbmRzIGluIHdoaWNoIHdvdWxkbid0IHJlbmRlci4gU29cbiAgICAgICAgd2UgbmVlZCB0byBwdXNoIHRoZSB0aW1lbGluZSB0byB0aGUgZW5kIChhbmQvb3IgYmVnaW5uaW5nIGRlcGVuZGluZyBvbiBpdHMgeW95byB2YWx1ZSkuIEFsc28gd2UgbXVzdFxuICAgICAgICBlbnN1cmUgdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBUaW1lbGluZSB3b3JrLlxuICAgICAgICAqL1xuXG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICBkb2VzV3JhcCA9IHJld2luZGluZyA9PT0gKHlveW8gJiYgaXRlcmF0aW9uICYgMSk7XG4gICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogZHVyO1xuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gdG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWU7IC8vd2hlbiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoaXMgdGltZWxpbmUsIHdlIG11c3QgcGFzcyB0aGF0IGluZm9ybWF0aW9uIGRvd24gdG8gdGhlIGNoaWxkIGFuaW1hdGlvbnMgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBrbm93IHdoZXRoZXIgdG8gcmVuZGVyIHRoZWlyIHN0YXJ0aW5nIG9yIGVuZGluZyB2YWx1ZXMuXG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IGFkanVzdGVkVGltZSA8PSBjaGlsZC5fZW5kKSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/IChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArIChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyAmJiAoY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0QXQpKTsgLy8gaWYgcmV2ZXJ0aW5nLCB3ZSBzaG91bGQgYWx3YXlzIGZvcmNlIHJlbmRlcnMgb2YgaW5pdHRlZCB0d2VlbnMgKGJ1dCByZW1lbWJlciB0aGF0IC5mcm9tVG8oKSBvciAuZnJvbSgpIG1heSBoYXZlIGEgX3N0YXJ0QXQgYnV0IG5vdCBfaW5pdHRlZCB5ZXQpLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBhZGp1c3QgelRpbWUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHBhdXNlVHdlZW4ucmVuZGVyKHRpbWUgPj0gcHJldlRpbWUgPyAwIDogLV90aW55TnVtKS5felRpbWUgPSB0aW1lID49IHByZXZUaW1lID8gMSA6IC0xO1xuXG4gICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgIC8vdGhlIGNhbGxiYWNrIHJlc3VtZWQgcGxheWJhY2shIFNvIHNpbmNlIHdlIG1heSBoYXZlIGhlbGQgYmFjayB0aGUgcGxheWhlYWQgZHVlIHRvIHdoZXJlIHRoZSBwYXVzZSBpcyBwb3NpdGlvbmVkLCBnbyBhaGVhZCBhbmQganVtcCB0byB3aGVyZSBpdCdzIFNVUFBPU0VEIHRvIGJlIChpZiBubyBwYXVzZSBoYXBwZW5lZCkuXG4gICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7IC8vaWYgdGhlIHBhdXNlIHdhcyBhdCBhbiBlYXJsaWVyIHRpbWUgYW5kIHRoZSB1c2VyIHJlc3VtZWQgaW4gdGhlIGNhbGxiYWNrLCBpdCBjb3VsZCByZXBvc2l0aW9uIHRoZSB0aW1lbGluZSAoY2hhbmdpbmcgaXRzIHN0YXJ0VGltZSksIHRocm93aW5nIHRoaW5ncyBvZmYgc2xpZ2h0bHksIHNvIHdlIG1ha2Ugc3VyZSB0aGUgX3N0YXJ0IGRvZXNuJ3Qgc2hpZnQuXG5cbiAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIiwgdHJ1ZSk7XG4gICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdFRpbWUgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkgfHwgIXRUaW1lICYmIHByZXZUaW1lKSBpZiAocHJldlN0YXJ0ID09PSB0aGlzLl9zdGFydCB8fCBNYXRoLmFicyh0aW1lU2NhbGUpICE9PSBNYXRoLmFicyh0aGlzLl90cykpIGlmICghdGhpcy5fbG9jaykge1xuICAgICAgICAvLyByZW1lbWJlciwgYSBjaGlsZCdzIGNhbGxiYWNrIG1heSBhbHRlciB0aGlzIHRpbWVsaW5lJ3MgcGxheWhlYWQgb3IgdGltZVNjYWxlIHdoaWNoIGlzIHdoeSB3ZSBuZWVkIHRvIGFkZCBzb21lIG9mIHRoZXNlIGNoZWNrcy5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEodG90YWxUaW1lIDwgMCAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCAhdER1cikpIHtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgJiYgdG90YWxUaW1lID49IDAgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChjaGlsZCwgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIF9pc051bWJlcihwb3NpdGlvbikgfHwgKHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24sIGNoaWxkKSk7XG5cbiAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcbiAgICAgIGlmIChfaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQob2JqLCBwb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGFiZWwoY2hpbGQsIHBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgICBjaGlsZCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzICE9PSBjaGlsZCA/IF9hZGRUb1RpbWVsaW5lKHRoaXMsIGNoaWxkLCBwb3NpdGlvbikgOiB0aGlzOyAvL2Rvbid0IGFsbG93IGEgdGltZWxpbmUgdG8gYmUgYWRkZWQgdG8gaXRzZWxmIGFzIGEgY2hpbGQhXG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uIGdldENoaWxkcmVuKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAobmVzdGVkID09PSB2b2lkIDApIHtcbiAgICAgIG5lc3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR3ZWVucyA9PT0gdm9pZCAwKSB7XG4gICAgICB0d2VlbnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aW1lbGluZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGltZWxpbmVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gLV9iaWdOdW07XG4gICAgfVxuXG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgdHdlZW5zICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZWxpbmVzICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgbmVzdGVkICYmIGEucHVzaC5hcHBseShhLCBjaGlsZC5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRCeUlkID0gZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHZhciBhbmltYXRpb25zID0gdGhpcy5nZXRDaGlsZHJlbigxLCAxLCAxKSxcbiAgICAgICAgaSA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGFuaW1hdGlvbnNbaV0udmFycy5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGNoaWxkKSB7XG4gICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZUxhYmVsKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5raWxsVHdlZW5zT2YoY2hpbGQpO1xuICAgIH1cblxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBjaGlsZCk7XG5cbiAgICBpZiAoY2hpbGQgPT09IHRoaXMuX3JlY2VudCkge1xuICAgICAgdGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fZm9yY2luZyA9IDE7XG5cbiAgICBpZiAoIXRoaXMuX2RwICYmIHRoaXMuX3RzKSB7XG4gICAgICAvL3NwZWNpYWwgY2FzZSBmb3IgdGhlIGdsb2JhbCB0aW1lbGluZSAob3IgYW55IG90aGVyIHRoYXQgaGFzIG5vIHBhcmVudCBvciBkZXRhY2hlZCBwYXJlbnQpLlxuICAgICAgdGhpcy5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKF90aWNrZXIudGltZSAtICh0aGlzLl90cyA+IDAgPyBfdG90YWxUaW1lMiAvIHRoaXMuX3RzIDogKHRoaXMudG90YWxEdXJhdGlvbigpIC0gX3RvdGFsVGltZTIpIC8gLXRoaXMuX3RzKSk7XG4gICAgfVxuXG4gICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkTGFiZWwgPSBmdW5jdGlvbiBhZGRMYWJlbChsYWJlbCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrIHx8IF9lbXB0eUZ1bmMsIHBhcmFtcyk7XG4gICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCB0LCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID09PSBwb3NpdGlvbiAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIikge1xuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgaXNHbG9iYWxUaW1lID0gX2lzTnVtYmVyKG9ubHlBY3RpdmUpLFxuICAgICAgICAvLyBhIG51bWJlciBpcyBpbnRlcnByZXRlZCBhcyBhIGdsb2JhbCB0aW1lLiBJZiB0aGUgYW5pbWF0aW9uIHNwYW5zXG4gICAgY2hpbGRyZW47XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgLy8gbm90ZTogaWYgdGhpcyBpcyBmb3Igb3ZlcndyaXRpbmcsIGl0IHNob3VsZCBvbmx5IGJlIGZvciB0d2VlbnMgdGhhdCBhcmVuJ3QgcGF1c2VkIGFuZCBhcmUgaW5pdHRlZC5cbiAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgLSB0YXJnZXRzKCkgb24gdGltZWxpbmVzXG4gIC8vIHRhcmdldHMoKSB7XG4gIC8vIFx0bGV0IHJlc3VsdCA9IFtdO1xuICAvLyBcdHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2godCA9PiByZXN1bHQucHVzaCguLi50LnRhcmdldHMoKSkpO1xuICAvLyBcdHJldHVybiByZXN1bHQuZmlsdGVyKCh2LCBpKSA9PiByZXN1bHQuaW5kZXhPZih2KSA9PT0gaSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgIHZhciB0bCA9IHRoaXMsXG4gICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHN0YXJ0QXQgPSBfdmFycy5zdGFydEF0LFxuICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIGluaXR0ZWQsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICBlYXNlOiB2YXJzLmVhc2UgfHwgXCJub25lXCIsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICB0aW1lOiBlbmRUaW1lLFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoc29mdCk7XG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBfQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMi5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKGluY2x1ZGVMYWJlbHMpIHtcbiAgICBpZiAoaW5jbHVkZUxhYmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICBpbmNsdWRlTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuICAgICAgdGhpcy5yZW1vdmUoY2hpbGQpO1xuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX2RwICYmICh0aGlzLl90aW1lID0gdGhpcy5fdFRpbWUgPSB0aGlzLl9wVGltZSA9IDApO1xuICAgIGluY2x1ZGVMYWJlbHMgJiYgKHRoaXMubGFiZWxzID0ge30pO1xuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBjaGlsZCA9IHNlbGYuX2xhc3QsXG4gICAgICAgIHByZXZTdGFydCA9IF9iaWdOdW0sXG4gICAgICAgIHByZXYsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHNlbGYudGltZVNjYWxlKChzZWxmLl9yZXBlYXQgPCAwID8gc2VsZi5kdXJhdGlvbigpIDogc2VsZi50b3RhbER1cmF0aW9uKCkpIC8gKHNlbGYucmV2ZXJzZWQoKSA/IC12YWx1ZSA6IHZhbHVlKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2RpcnR5KSB7XG4gICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHByZXYgPSBjaGlsZC5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBpbiBjYXNlIHRoZSB0d2VlbiBjaGFuZ2VzIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZS4uLlxuXG4gICAgICAgIGNoaWxkLl9kaXJ0eSAmJiBjaGlsZC50b3RhbER1cmF0aW9uKCk7IC8vY291bGQgY2hhbmdlIHRoZSB0d2Vlbi5fc3RhcnRUaW1lLCBzbyBtYWtlIHN1cmUgdGhlIGFuaW1hdGlvbidzIGNhY2hlIGlzIGNsZWFuIGJlZm9yZSBhbmFseXppbmcgaXQuXG5cbiAgICAgICAgc3RhcnQgPSBjaGlsZC5fc3RhcnQ7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gcHJldlN0YXJ0ICYmIHNlbGYuX3NvcnQgJiYgY2hpbGQuX3RzICYmICFzZWxmLl9sb2NrKSB7XG4gICAgICAgICAgLy9pbiBjYXNlIG9uZSBvZiB0aGUgdHdlZW5zIHNoaWZ0ZWQgb3V0IG9mIG9yZGVyLCBpdCBuZWVkcyB0byBiZSByZS1pbnNlcnRlZCBpbnRvIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgIHNlbGYuX2xvY2sgPSAxOyAvL3ByZXZlbnQgZW5kbGVzcyByZWN1cnNpdmUgY2FsbHMgLSB0aGVyZSBhcmUgbWV0aG9kcyB0aGF0IGdldCB0cmlnZ2VyZWQgdGhhdCBjaGVjayBkdXJhdGlvbi90b3RhbER1cmF0aW9uIHdoZW4gd2UgYWRkKCkuXG5cbiAgICAgICAgICBfYWRkVG9UaW1lbGluZShzZWxmLCBjaGlsZCwgc3RhcnQgLSBjaGlsZC5fZGVsYXksIDEpLl9sb2NrID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2U3RhcnQgPSBzdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA8IDAgJiYgY2hpbGQuX3RzKSB7XG4gICAgICAgICAgLy9jaGlsZHJlbiBhcmVuJ3QgYWxsb3dlZCB0byBoYXZlIG5lZ2F0aXZlIHN0YXJ0VGltZXMgdW5sZXNzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHNvIGFkanVzdCBoZXJlIGlmIG9uZSBpcyBmb3VuZC5cbiAgICAgICAgICBtYXggLT0gc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoIXBhcmVudCAmJiAhc2VsZi5fZHAgfHwgcGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZykge1xuICAgICAgICAgICAgc2VsZi5fc3RhcnQgKz0gc3RhcnQgLyBzZWxmLl90cztcbiAgICAgICAgICAgIHNlbGYuX3RpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICBzZWxmLl90VGltZSAtPSBzdGFydDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNoaWZ0Q2hpbGRyZW4oLXN0YXJ0LCBmYWxzZSwgLTFlOTk5KTtcbiAgICAgICAgICBwcmV2U3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuX2VuZCA+IG1heCAmJiBjaGlsZC5fdHMgJiYgKG1heCA9IGNoaWxkLl9lbmQpO1xuICAgICAgICBjaGlsZCA9IHByZXY7XG4gICAgICB9XG5cbiAgICAgIF9zZXREdXJhdGlvbihzZWxmLCBzZWxmID09PSBfZ2xvYmFsVGltZWxpbmUgJiYgc2VsZi5fdGltZSA+IG1heCA/IHNlbGYuX3RpbWUgOiBtYXgsIDEsIDEpO1xuXG4gICAgICBzZWxmLl9kaXJ0eSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuX3REdXI7XG4gIH07XG5cbiAgVGltZWxpbmUudXBkYXRlUm9vdCA9IGZ1bmN0aW9uIHVwZGF0ZVJvb3QodGltZSkge1xuICAgIGlmIChfZ2xvYmFsVGltZWxpbmUuX3RzKSB7XG4gICAgICBfbGF6eVNhZmVSZW5kZXIoX2dsb2JhbFRpbWVsaW5lLCBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lLCBfZ2xvYmFsVGltZWxpbmUpKTtcblxuICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lID0gX3RpY2tlci5mcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoX3RpY2tlci5mcmFtZSA+PSBfbmV4dEdDRnJhbWUpIHtcbiAgICAgIF9uZXh0R0NGcmFtZSArPSBfY29uZmlnLmF1dG9TbGVlcCB8fCAxMjA7XG4gICAgICB2YXIgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuICAgICAgaWYgKCFjaGlsZCB8fCAhY2hpbGQuX3RzKSBpZiAoX2NvbmZpZy5hdXRvU2xlZXAgJiYgX3RpY2tlci5fbGlzdGVuZXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkICYmICFjaGlsZC5fdHMpIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgfHwgX3RpY2tlci5zbGVlcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVGltZWxpbmU7XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUaW1lbGluZS5wcm90b3R5cGUsIHtcbiAgX2xvY2s6IDAsXG4gIF9oYXNQYXVzZTogMCxcbiAgX2ZvcmNpbmc6IDBcbn0pO1xuXG52YXIgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pIHtcbiAgLy9ub3RlOiB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBudWxsLCBzZXR0ZXIpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydE51bXMsXG4gICAgICBjb2xvcixcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBoYXNSYW5kb20sXG4gICAgICBhO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChoYXNSYW5kb20gPSB+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgfVxuXG4gIGlmIChzdHJpbmdGaWx0ZXIpIHtcbiAgICBhID0gW3N0YXJ0LCBlbmRdO1xuICAgIHN0cmluZ0ZpbHRlcihhLCB0YXJnZXQsIHByb3ApOyAvL3Bhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuXG5cbiAgICBzdGFydCA9IGFbMF07XG4gICAgZW5kID0gYVsxXTtcbiAgfVxuXG4gIHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9jb21wbGV4U3RyaW5nTnVtRXhwKSB8fCBbXTtcblxuICB3aGlsZSAocmVzdWx0ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAuZXhlYyhlbmQpKSB7XG4gICAgZW5kTnVtID0gcmVzdWx0WzBdO1xuICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcbiAgICAgIGNvbG9yID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZW5kTnVtICE9PSBzdGFydE51bXNbbWF0Y2hJbmRleCsrXSkge1xuICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1ttYXRjaEluZGV4IC0gMV0pIHx8IDA7IC8vdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuICAgICAgcHQuX3B0ID0ge1xuICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICBjOiBlbmROdW0uY2hhckF0KDEpID09PSBcIj1cIiA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmROdW0pIC0gc3RhcnROdW0gOiBwYXJzZUZsb2F0KGVuZE51bSkgLSBzdGFydE51bSxcbiAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgIH07XG4gICAgICBpbmRleCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG5cbiAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgaWYgKF9yZWxFeHAudGVzdChlbmQpIHx8IGhhc1JhbmRvbSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFByb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIGluZGV4LCB0YXJnZXRzLCBtb2RpZmllciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0sIG9wdGlvbmFsKSB7XG4gIF9pc0Z1bmN0aW9uKGVuZCkgJiYgKGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQsIHRhcmdldHMpKTtcbiAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXSxcbiAgICAgIHBhcnNlZFN0YXJ0ID0gc3RhcnQgIT09IFwiZ2V0XCIgPyBzdGFydCA6ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogZnVuY1BhcmFtID8gdGFyZ2V0W3Byb3AuaW5kZXhPZihcInNldFwiKSB8fCAhX2lzRnVuY3Rpb24odGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0oZnVuY1BhcmFtKSA6IHRhcmdldFtwcm9wXSgpLFxuICAgICAgc2V0dGVyID0gIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBfc2V0dGVyUGxhaW4gOiBmdW5jUGFyYW0gPyBfc2V0dGVyRnVuY1dpdGhQYXJhbSA6IF9zZXR0ZXJGdW5jLFxuICAgICAgcHQ7XG5cbiAgaWYgKF9pc1N0cmluZyhlbmQpKSB7XG4gICAgaWYgKH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgfVxuXG4gICAgaWYgKGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG4gICAgICBwdCA9IF9wYXJzZVJlbGF0aXZlKHBhcnNlZFN0YXJ0LCBlbmQpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIW9wdGlvbmFsIHx8IHBhcnNlZFN0YXJ0ICE9PSBlbmQgfHwgX2ZvcmNlQWxsUHJvcFR3ZWVucykge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5fZm9yY2VBbGxQcm9wVHdlZW5zLFxuICAgIF9pbml0VHdlZW4gPSBmdW5jdGlvbiBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSkge1xuICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgc3RhcnRBdCA9IHZhcnMuc3RhcnRBdCxcbiAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgIG9uVXBkYXRlID0gdmFycy5vblVwZGF0ZSxcbiAgICAgIG9uVXBkYXRlUGFyYW1zID0gdmFycy5vblVwZGF0ZVBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGUgPSB2YXJzLmNhbGxiYWNrU2NvcGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCB8fCBrZXlmcmFtZXMgJiYgIXZhcnMuc3RhZ2dlcikge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG5cbiAgICBpZiAocHJldlN0YXJ0QXQpIHtcbiAgICAgIHByZXZTdGFydEF0Ll96VGltZSA8IDAgJiYgcHJldlN0YXJ0QXQucHJvZ3Jlc3MoMSk7IC8vIGluIGNhc2UgaXQncyBhIGxhenkgc3RhcnRBdCB0aGF0IGhhc24ndCByZW5kZXJlZCB5ZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIHJ1bkJhY2t3YXJkcyAmJiBpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQgPyBwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpIDogcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnTm9LaWxsIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpOyAvLyBpZiBpdCdzIGEgXCJzdGFydEF0XCIgKG5vdCBcImZyb20oKVwiIG9yIHJ1bkJhY2t3YXJkczogdHJ1ZSksIHdlIG9ubHkgbmVlZCB0byBkbyBhIHNoYWxsb3cgcmV2ZXJ0IChrZWVwIHRyYW5zZm9ybXMgY2FjaGVkIGluIENTU1BsdWdpbilcbiAgICAgIC8vIGRvbid0IGp1c3QgX3JlbW92ZUZyb21QYXJlbnQocHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSkgYmVjYXVzZSB0aGF0J2xsIGxlYXZlIGlubGluZSBzdHlsZXMuIFdlJ3JlIGNyZWF0aW5nIGEgbmV3IF9zdGFydEF0IGZvciBcInN0YXJ0QXRcIiB0d2VlbnMgdGhhdCByZS1jYXB0dXJlIHRoaW5ncyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcHJlLXR3ZWVuIHZhbHVlcyBjaGFuZ2VkIHNpbmNlIHRoZSB0d2VlbiB3YXMgY3JlYXRlZCwgdGhleSdyZSByZWNvcmRlZC5cblxuICAgICAgcHJldlN0YXJ0QXQuX2xhenkgPSAwO1xuICAgIH1cblxuICAgIGlmIChzdGFydEF0KSB7XG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgbGF6eTogX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgIHN0YXJ0QXQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiAwLFxuICAgICAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgICAgIG9uVXBkYXRlUGFyYW1zOiBvblVwZGF0ZVBhcmFtcyxcbiAgICAgICAgY2FsbGJhY2tTY29wZTogY2FsbGJhY2tTY29wZSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSFcblxuICAgICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpO1xuICAgICAgICB0d2Vlbi5felRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmICghaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgX2luaXRUd2Vlbih0d2Vlbi5fc3RhcnRBdCwgX3RpbnlOdW0sIF90aW55TnVtKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0d2Vlbi5fcHQgPSB0d2Vlbi5fcHRDYWNoZSA9IDA7XG4gICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICBfbGF6eUxvb2t1cFtnc0RhdGEuaWRdICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXG4gICAgICBpbmRleCA9IGZ1bGxUYXJnZXRzID09PSB0YXJnZXRzID8gaSA6IGZ1bGxUYXJnZXRzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGNsZWFuVmFycykge1xuICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICBpZiAoYXV0b092ZXJ3cml0ZSAmJiB0d2Vlbi5fcHQpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpOyAvLyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG5cbiAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7IC8vIGlmIHRoZXJlJ3MgYSAwJSBrZXlmcmFtZSwgaXQnbGwgcmVuZGVyIGluIHRoZSBcImJlZm9yZVwiIHN0YXRlIGZvciBhbnkgc3RhZ2dlcmVkL2RlbGF5ZWQgYW5pbWF0aW9ucyB0aHVzIHdoZW4gdGhlIGZvbGxvd2luZyB0d2VlbiBpbml0aWFsaXplcywgaXQnbGwgdXNlIHRoZSBcImJlZm9yZVwiIHN0YXRlIGluc3RlYWQgb2YgdGhlIFwiYWZ0ZXJcIiBzdGF0ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZXMuXG59LFxuICAgIF91cGRhdGVQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3VwZGF0ZVByb3BUd2VlbnModHdlZW4sIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpIHtcbiAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgcHQsXG4gICAgICByb290UFQsXG4gICAgICBsb29rdXAsXG4gICAgICBpO1xuXG4gIGlmICghcHRDYWNoZSkge1xuICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgaSA9IHR3ZWVuLl90YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHB0ICYmIHB0LmQgJiYgcHQuZC5fcHQpIHtcbiAgICAgICAgLy8gaXQncyBhIHBsdWdpbiwgc28gZmluZCB0aGUgbmVzdGVkIFByb3BUd2VlblxuICAgICAgICBwdCA9IHB0LmQuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAvLyBcImZwXCIgaXMgZnVuY3Rpb25QYXJhbSBmb3IgdGhpbmdzIGxpa2Ugc2V0dGluZyBDU1MgdmFyaWFibGVzIHdoaWNoIHJlcXVpcmUgLnNldFByb3BlcnR5KFwiLS12YXItbmFtZVwiLCB2YWx1ZSlcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcHQpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHByb3BlcnR5LCBzbyB3ZSBtdXN0IEZPUkNFIG9uZSB0byBiZSBjcmVhdGVkIGFuZCBkaXRjaCBvdXQgb2YgdGhpc1xuICAgICAgICAvLyBpZiB0aGUgdHdlZW4gaGFzIG90aGVyIHByb3BlcnRpZXMgdGhhdCBhbHJlYWR5IHJlbmRlcmVkIGF0IG5ldyBwb3NpdGlvbnMsIHdlJ2Qgbm9ybWFsbHkgaGF2ZSB0byByZXdpbmQgdG8gcHV0IHRoZW0gYmFjayBsaWtlIHR3ZWVuLnJlbmRlcigwLCB0cnVlKSBiZWZvcmUgZm9yY2luZyBhbiBfaW5pdFR3ZWVuKCksIGJ1dCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBlZGdlIGNhc2UgbGlrZSB0d2VlbmluZyBhIHRpbWVsaW5lJ3MgcHJvZ3Jlc3Mgd291bGQgdHJpZ2dlciBvblVwZGF0ZXMgdG8gZmlyZSB3aGljaCBjb3VsZCBtb3ZlIG90aGVyIHRoaW5ncyBhcm91bmQuIEl0J3MgYmV0dGVyIHRvIGp1c3QgaW5mb3JtIHVzZXJzIHRoYXQgLnJlc2V0VG8oKSBzaG91bGQgT05MWSBiZSB1c2VkIGZvciB0d2VlbnMgdGhhdCBhbHJlYWR5IGhhdmUgdGhhdCBwcm9wZXJ0eS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBnc2FwLnRvKC4uLnsgeTogMCB9KSBhbmQgdGhlbiB0d2Vlbi5yZXN0VG8oXCJ4XCIsIDIwMCkgZm9yIGV4YW1wbGUuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxOyAvLyBvdGhlcndpc2UsIHdoZW4gd2UgX2FkZFByb3BUd2VlbigpIGFuZCBpdCBmaW5kcyBubyBjaGFuZ2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMsIGl0IHNraXBzIGNyZWF0aW5nIGEgUHJvcFR3ZWVuIChmb3IgZWZmaWNpZW5jeS4uLndoeSB0d2VlbiB3aGVuIHRoZXJlJ3Mgbm8gZGlmZmVyZW5jZT8pIGJ1dCBpbiB0aGlzIGNhc2Ugd2UgTkVFRCB0aGF0IFByb3BUd2VlbiBjcmVhdGVkIHNvIHdlIGNhbiBlZGl0IGl0LlxuXG4gICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMDtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIHB0Q2FjaGUucHVzaChwdCk7XG4gICAgfVxuICB9XG5cbiAgaSA9IHB0Q2FjaGUubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgIHB0ID0gcm9vdFBULl9wdCB8fCByb290UFQ7IC8vIGNvbXBsZXggdmFsdWVzIG1heSBoYXZlIG5lc3RlZCBQcm9wVHdlZW5zLiBXZSBvbmx5IGFjY29tbW9kYXRlIHRoZSBGSVJTVCB2YWx1ZS5cblxuICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgcHQuYyA9IHZhbHVlIC0gcHQucztcbiAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpOyAvLyBtYWlubHkgZm9yIENTU1BsdWdpbiAoZW5kIHZhbHVlKVxuXG4gICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTsgLy8gKGJlZ2lubmluZyB2YWx1ZSlcbiAgfVxufSxcbiAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgcHJvcGVydHlBbGlhc2VzID0gaGFybmVzcyAmJiBoYXJuZXNzLmFsaWFzZXMsXG4gICAgICBjb3B5LFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBhbGlhc2VzO1xuXG4gIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICBmb3IgKHAgaW4gcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICBpID0gYWxpYXNlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vIHBhcnNlcyBtdWx0aXBsZSBmb3JtYXRzLCBsaWtlIHtcIjAlXCI6IHt4OiAxMDB9LCB7XCI1MCVcIjoge3g6IC0yMH19IGFuZCB7IHg6IHtcIjAlXCI6IDEwMCwgXCI1MCVcIjogLTIwfSB9LCBhbmQgYW4gXCJlYXNlXCIgY2FuIGJlIHNldCBvbiBhbnkgb2JqZWN0LiBXZSBwb3B1bGF0ZSBhbiBcImFsbFByb3BzXCIgb2JqZWN0IHdpdGggYW4gQXJyYXkgZm9yIGVhY2ggcHJvcGVydHksIGxpa2Uge3g6IFt7fSwge31dLCB5Olt7fSwge31dfSB3aXRoIGRhdGEgZm9yIGVhY2ggcHJvcGVydHkgdHdlZW4uIFRoZSBvYmplY3RzIGhhdmUgYSBcInRcIiAodGltZSksIFwidlwiLCAodmFsdWUpLCBhbmQgXCJlXCIgKGVhc2UpIHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBwaWVjZSB0b2dldGhlciBhIHRpbWVsaW5lIGxhdGVyLlxuX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICBwLFxuICAgICAgYTtcblxuICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgIGEgPSBhbGxQcm9wc1twcm9wXSB8fCAoYWxsUHJvcHNbcHJvcF0gPSBbXSk7IC8vIHQgPSB0aW1lIChvdXQgb2YgMTAwKSwgdiA9IHZhbHVlLCBlID0gZWFzZVxuXG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgdDogaSAvIChvYmoubGVuZ3RoIC0gMSkgKiAxMDAsXG4gICAgICAgIHY6IHZhbHVlLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgdDogcGFyc2VGbG9hdChwcm9wKSxcbiAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuX2ZvckVhY2hOYW1lKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSkge1xuICAgICAgICAgIC8vIHJhcmUgZWRnZSBjYXNlIC0gZHVyaW5nIGluaXRpYWxpemF0aW9uLCBhbiBvblVwZGF0ZSBpbiB0aGUgX3N0YXJ0QXQgKC5mcm9tVG8oKSkgbWlnaHQgZm9yY2UgdGhpcyB0d2VlbiB0byByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkaXRjaCB0aGlzIHJlbmRlcigpIGNhbGwgc28gdGhhdCBpdCBkb2Vzbid0IHJldmVydCB0aGUgdmFsdWVzLlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR1ciAhPT0gdGhpcy5fZHVyKSB7XG4gICAgICAgICAgLy8gd2hpbGUgaW5pdHRpbmcsIGEgcGx1Z2luIGxpa2UgSW5lcnRpYVBsdWdpbiBtaWdodCBhbHRlciB0aGUgZHVyYXRpb24sIHNvIHJlcnVuIGZyb20gdGhlIHN0YXJ0IHRvIGVuc3VyZSBldmVyeXRoaW5nIHJlbmRlcnMgYXMgaXQgc2hvdWxkLlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuXG4gICAgICBpZiAoIXRoaXMuX2FjdCAmJiB0aGlzLl90cykge1xuICAgICAgICB0aGlzLl9hY3QgPSAxOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgICB0aGlzLl9sYXp5ID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gKHlveW9FYXNlIHx8IHRoaXMuX2Vhc2UpKHRpbWUgLyBkdXIpO1xuXG4gICAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogIXRpbWUgJiYgaXNZb3lvID8gLV90aW55TnVtIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pOyAvLyB3ZSBtdXN0IHVzZSBvblJldmVyc2VDb21wbGV0ZSB0b28gZm9yIHRoaW5ncyBsaWtlIHRpbWVsaW5lLmFkZCgoKSA9PiB7Li4ufSkgd2hpY2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBpbiBCT1RIIGRpcmVjdGlvbnMgKGZvcndhcmQgYW5kIHJldmVyc2UpXG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYyk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYpIDogbmFtZSA/IHNlbGZbbmFtZV0gPSBmIDogZjtcbiAgfTtcblxuICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBfY29udGV4dDtcbiAgICBfY29udGV4dCA9IG51bGw7XG4gICAgZnVuYyh0aGlzKTtcbiAgICBfY29udGV4dCA9IHByZXY7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmICEoZS5wYXJlbnQgJiYgZS5wYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIikgJiYgYS5wdXNoKGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIF9wcm90bzUua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0LCBtYXRjaE1lZGlhKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnMoKTtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIC8vIEZsaXAgcGx1Z2luIHR3ZWVucyBhcmUgdmVyeSBkaWZmZXJlbnQgaW4gdGhhdCB0aGV5IHNob3VsZCBhY3R1YWxseSBiZSBwdXNoZWQgdG8gdGhlaXIgZW5kLiBUaGUgcGx1Z2luIHJlcGxhY2VzIHRoZSB0aW1lbGluZSdzIC5yZXZlcnQoKSBtZXRob2QgdG8gZG8gZXhhY3RseSB0aGF0LiBCdXQgd2UgYWxzbyBuZWVkIHRvIHJlbW92ZSBhbnkgb2YgdGhvc2UgbmVzdGVkIHR3ZWVucyBpbnNpZGUgdGhlIGZsaXAgdGltZWxpbmUgc28gdGhhdCB0aGV5IGRvbid0IGdldCBpbmRpdmlkdWFsbHkgcmV2ZXJ0ZWQuXG4gICAgICAgIGlmICh0LmRhdGEgPT09IFwiaXNGbGlwXCIpIHtcbiAgICAgICAgICB0LnJldmVydCgpO1xuICAgICAgICAgIHQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2goZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgICAgICByZXR1cm4gdHdlZW5zLnNwbGljZSh0d2VlbnMuaW5kZXhPZih0d2VlbiksIDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG5cbiAgICAgIHR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnOiB0Lmdsb2JhbFRpbWUoMCksXG4gICAgICAgICAgdDogdFxuICAgICAgICB9O1xuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC0xO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7IC8vIG5vdGU6IGFsbCBvZiB0aGUgX3N0YXJ0QXQgdHdlZW5zIHNob3VsZCBiZSByZXZlcnRlZCBpbiByZXZlcnNlIG9yZGVyIHRoYXQgdGh5IHdlcmUgY3JlYXRlZCwgYW5kIHRoZXknbGwgYWxsIGhhdmUgdGhlIHNhbWUgZ2xvYmFsVGltZSAoLTEpIHNvIHRoZSBcIiB8fCAtMVwiIGluIHRoZSBzb3J0IGtlZXBzIHRoZSBvcmRlciBwcm9wZXJseS5cblxuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuICEoZSBpbnN0YW5jZW9mIEFuaW1hdGlvbikgJiYgZS5yZXZlcnQgJiYgZS5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYocmV2ZXJ0LCBfdGhpczQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEuaW5kZXhPZih0aGlzKTtcblxuICAgICAgISF+aSAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgfVxuXG4gIHZhciBfcHJvdG82ID0gTWF0Y2hNZWRpYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNi5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZGl0aW9ucywgZnVuYywgc2NvcGUpIHtcbiAgICBfaXNPYmplY3QoY29uZGl0aW9ucykgfHwgKGNvbmRpdGlvbnMgPSB7XG4gICAgICBtYXRjaGVzOiBjb25kaXRpb25zXG4gICAgfSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgwLCBzY29wZSB8fCB0aGlzLnNjb3BlKSxcbiAgICAgICAgY29uZCA9IGNvbnRleHQuY29uZGl0aW9ucyA9IHt9LFxuICAgICAgICBtcSxcbiAgICAgICAgcCxcbiAgICAgICAgYWN0aXZlO1xuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gcmVmcmVzaCgpIHtcbiAgLy8gXHRsZXQgdGltZSA9IF9sYXN0TWVkaWFUaW1lLFxuICAvLyBcdFx0bWVkaWEgPSBfbWVkaWE7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSAtMTtcbiAgLy8gXHRfbWVkaWEgPSB0aGlzLmNvbnRleHRzO1xuICAvLyBcdF9vbk1lZGlhQ2hhbmdlKCk7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuICAvLyBcdF9tZWRpYSA9IG1lZGlhO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG82LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICBfcHJvdG82LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCkge1xuICAgIHRoaXMuY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMua2lsbChyZXZlcnQsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNYXRjaE1lZGlhO1xufSgpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9nc2FwID0ge1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlUGx1Z2luKGNvbmZpZyk7XG4gICAgfSk7XG4gIH0sXG4gIHRpbWVsaW5lOiBmdW5jdGlvbiB0aW1lbGluZSh2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lbGluZSh2YXJzKTtcbiAgfSxcbiAgZ2V0VHdlZW5zT2Y6IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpO1xuICB9LFxuICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24gZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgIF9pc1N0cmluZyh0YXJnZXQpICYmICh0YXJnZXQgPSB0b0FycmF5KHRhcmdldClbMF0pOyAvL2luIGNhc2Ugc2VsZWN0b3IgdGV4dCBvciBhbiBhcnJheSBpcyBwYXNzZWQgaW5cblxuICAgIHZhciBnZXR0ZXIgPSBfZ2V0Q2FjaGUodGFyZ2V0IHx8IHt9KS5nZXQsXG4gICAgICAgIGZvcm1hdCA9IHVuaXQgPyBfcGFzc1Rocm91Z2ggOiBfbnVtZXJpY0lmUG9zc2libGU7XG5cbiAgICB1bml0ID09PSBcIm5hdGl2ZVwiICYmICh1bml0ID0gXCJcIik7XG4gICAgcmV0dXJuICF0YXJnZXQgPyB0YXJnZXQgOiAhcHJvcGVydHkgPyBmdW5jdGlvbiAocHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgIH0gOiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICB9LFxuICBxdWlja1NldHRlcjogZnVuY3Rpb24gcXVpY2tTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkge1xuICAgIHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KTtcblxuICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHNldHRlcnMgPSB0YXJnZXQubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBnc2FwLnF1aWNrU2V0dGVyKHQsIHByb3BlcnR5LCB1bml0KTtcbiAgICAgIH0pLFxuICAgICAgICAgIGwgPSBzZXR0ZXJzLmxlbmd0aDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSBsO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBzZXR0ZXJzW2ldKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbMF0gfHwge307XG5cbiAgICB2YXIgUGx1Z2luID0gX3BsdWdpbnNbcHJvcGVydHldLFxuICAgICAgICBjYWNoZSA9IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBwID0gY2FjaGUuaGFybmVzcyAmJiAoY2FjaGUuaGFybmVzcy5hbGlhc2VzIHx8IHt9KVtwcm9wZXJ0eV0gfHwgcHJvcGVydHksXG4gICAgICAgIC8vIGluIGNhc2UgaXQncyBhbiBhbGlhcywgbGlrZSBcInJvdGF0ZVwiIGZvciBcInJvdGF0aW9uXCIuXG4gICAgc2V0dGVyID0gUGx1Z2luID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQbHVnaW4oKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCA9IDA7XG4gICAgICBwLmluaXQodGFyZ2V0LCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIF9xdWlja1R3ZWVuLCAwLCBbdGFyZ2V0XSk7XG4gICAgICBwLnJlbmRlcigxLCBwKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCAmJiBfcmVuZGVyUHJvcFR3ZWVucygxLCBfcXVpY2tUd2Vlbik7XG4gICAgfSA6IGNhY2hlLnNldCh0YXJnZXQsIHApO1xuXG4gICAgcmV0dXJuIFBsdWdpbiA/IHNldHRlciA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHNldHRlcih0YXJnZXQsIHAsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgY2FjaGUsIDEpO1xuICAgIH07XG4gIH0sXG4gIHF1aWNrVG86IGZ1bmN0aW9uIHF1aWNrVG8odGFyZ2V0LCBwcm9wZXJ0eSwgdmFycykge1xuICAgIHZhciBfbWVyZ2UyO1xuXG4gICAgdmFyIHR3ZWVuID0gZ3NhcC50byh0YXJnZXQsIF9tZXJnZSgoX21lcmdlMiA9IHt9LCBfbWVyZ2UyW3Byb3BlcnR5XSA9IFwiKz0wLjFcIiwgX21lcmdlMi5wYXVzZWQgPSB0cnVlLCBfbWVyZ2UyKSwgdmFycyB8fCB7fSkpLFxuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyh2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgcmV0dXJuIHR3ZWVuLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTtcbiAgICB9O1xuXG4gICAgZnVuYy50d2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiBmdW5jO1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYzLnBsdWdpbnMsXG4gICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIGZ1bmMgPyBuZXcgQ29udGV4dChmdW5jLCBzY29wZSkgOiBfY29udGV4dDtcbiAgfSxcbiAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gbWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hNZWRpYShzY29wZSk7XG4gIH0sXG4gIG1hdGNoTWVkaWFSZWZyZXNoOiBmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpIHtcbiAgICByZXR1cm4gX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBjb25kID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgIHA7XG5cbiAgICAgIGZvciAocCBpbiBjb25kKSB7XG4gICAgICAgIGlmIChjb25kW3BdKSB7XG4gICAgICAgICAgY29uZFtwXSA9IGZhbHNlO1xuICAgICAgICAgIGZvdW5kID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3VuZCAmJiBjLnJldmVydCgpO1xuICAgIH0pIHx8IF9vbk1lZGlhQ2hhbmdlKCk7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG4gIH0sXG4gIHV0aWxzOiB7XG4gICAgd3JhcDogd3JhcCxcbiAgICB3cmFwWW95bzogd3JhcFlveW8sXG4gICAgZGlzdHJpYnV0ZTogZGlzdHJpYnV0ZSxcbiAgICByYW5kb206IHJhbmRvbSxcbiAgICBzbmFwOiBzbmFwLFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplLFxuICAgIGdldFVuaXQ6IGdldFVuaXQsXG4gICAgY2xhbXA6IGNsYW1wLFxuICAgIHNwbGl0Q29sb3I6IHNwbGl0Q29sb3IsXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgIHBpcGU6IHBpcGUsXG4gICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGUsXG4gICAgc2h1ZmZsZTogc2h1ZmZsZVxuICB9LFxuICBpbnN0YWxsOiBfaW5zdGFsbCxcbiAgZWZmZWN0czogX2VmZmVjdHMsXG4gIHRpY2tlcjogX3RpY2tlcixcbiAgdXBkYXRlUm9vdDogVGltZWxpbmUudXBkYXRlUm9vdCxcbiAgcGx1Z2luczogX3BsdWdpbnMsXG4gIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gIGNvcmU6IHtcbiAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgZ2V0Q2FjaGU6IF9nZXRDYWNoZSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbSxcbiAgICByZXZlcnRpbmc6IGZ1bmN0aW9uIHJldmVydGluZygpIHtcbiAgICAgIHJldHVybiBfcmV2ZXJ0aW5nO1xuICAgIH0sXG4gICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dCh0b0FkZCkge1xuICAgICAgaWYgKHRvQWRkICYmIF9jb250ZXh0KSB7XG4gICAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0b0FkZCk7XG5cbiAgICAgICAgdG9BZGQuX2N0eCA9IF9jb250ZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgfSxcbiAgICBzdXBwcmVzc092ZXJ3cml0ZXM6IGZ1bmN0aW9uIHN1cHByZXNzT3ZlcndyaXRlcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbl9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLGRlbGF5ZWRDYWxsLHNldCxraWxsVHdlZW5zT2ZcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9nc2FwW25hbWVdID0gVHdlZW5bbmFtZV07XG59KTtcblxuX3RpY2tlci5hZGQoVGltZWxpbmUudXBkYXRlUm9vdCk7XG5cbl9xdWlja1R3ZWVuID0gX2dzYXAudG8oe30sIHtcbiAgZHVyYXRpb246IDBcbn0pOyAvLyAtLS0tIEVYVFJBIFBMVUdJTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIF9nZXRQbHVnaW5Qcm9wVHdlZW4gPSBmdW5jdGlvbiBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHBsdWdpbiwgcHJvcCkge1xuICB2YXIgcHQgPSBwbHVnaW4uX3B0O1xuXG4gIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wICYmIHB0Lm9wICE9PSBwcm9wICYmIHB0LmZwICE9PSBwcm9wKSB7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZE1vZGlmaWVycyA9IGZ1bmN0aW9uIF9hZGRNb2RpZmllcnModHdlZW4sIG1vZGlmaWVycykge1xuICB2YXIgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBwdDtcblxuICBmb3IgKHAgaW4gbW9kaWZpZXJzKSB7XG4gICAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSB0d2Vlbi5fcHRMb29rdXBbaV1bcF07XG5cbiAgICAgIGlmIChwdCAmJiAocHQgPSBwdC5kKSkge1xuICAgICAgICBpZiAocHQuX3B0KSB7XG4gICAgICAgICAgLy8gaXMgYSBwbHVnaW5cbiAgICAgICAgICBwdCA9IF9nZXRQbHVnaW5Qcm9wVHdlZW4ocHQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHQgJiYgcHQubW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXJzW3BdLCB0d2VlbiwgdGFyZ2V0c1tpXSwgcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9idWlsZE1vZGlmaWVyUGx1Z2luID0gZnVuY3Rpb24gX2J1aWxkTW9kaWZpZXJQbHVnaW4obmFtZSwgbW9kaWZpZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd1ZhcnM6IDEsXG4gICAgLy9kb24ndCBwcmUtcHJvY2VzcyBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgb3IgXCJyYW5kb20oKVwiIHN0cmluZ3MuXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG4gICAgICB0d2Vlbi5fb25Jbml0ID0gZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgIHZhciB0ZW1wLCBwO1xuXG4gICAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wW25hbWVdID0gMTtcbiAgICAgICAgICB9KTsgLy9pZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byByb3VuZFByb3BzLCBsaWtlIFwieCx5XCIsIHdlIHJvdW5kIHRvIHdob2xlIG51bWJlcnMuXG5cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGlmaWVyKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgIHRlbXBbcF0gPSBtb2RpZmllcih2YXJzW3BdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9hZGRNb2RpZmllcnModHdlZW4sIHZhcnMpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59OyAvL3JlZ2lzdGVyIGNvcmUgcGx1Z2luc1xuXG5cbmV4cG9ydCB2YXIgZ3NhcCA9IF9nc2FwLnJlZ2lzdGVyUGx1Z2luKHtcbiAgbmFtZTogXCJhdHRyXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcCwgcHQsIHY7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHYgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHApIHx8IFwiXCI7XG4gICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHYgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICBwdC5vcCA9IHA7XG4gICAgICBwdC5iID0gdjsgLy8gcmVjb3JkIHRoZSBiZWdpbm5pbmcgdmFsdWUgc28gd2UgY2FuIHJldmVydCgpXG5cbiAgICAgIHRoaXMuX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBfcmV2ZXJ0aW5nID8gcHQuc2V0KHB0LnQsIHB0LnAsIHB0LmIsIHB0KSA6IHB0LnIocmF0aW8sIHB0LmQpOyAvLyBpZiByZXZlcnRpbmcsIGdvIGJhY2sgdG8gdGhlIG9yaWdpbmFsIChwdC5iKVxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0sIDAsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuMTEuM1wiO1xuX2NvcmVSZWFkeSA9IDE7XG5fd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbnZhciBQb3dlcjAgPSBfZWFzZU1hcC5Qb3dlcjAsXG4gICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICBQb3dlcjMgPSBfZWFzZU1hcC5Qb3dlcjMsXG4gICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICBRdWFkID0gX2Vhc2VNYXAuUXVhZCxcbiAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgUXVpbnQgPSBfZWFzZU1hcC5RdWludCxcbiAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgQmFjayA9IF9lYXNlTWFwLkJhY2ssXG4gICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgU2luZSA9IF9lYXNlTWFwLlNpbmUsXG4gICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5leHBvcnQgeyBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTtcbmV4cG9ydCB7IFR3ZWVuIGFzIFR3ZWVuTWF4LCBUd2VlbiBhcyBUd2VlbkxpdGUsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTWF4LCBUaW1lbGluZSBhcyBUaW1lbGluZUxpdGUsIGdzYXAgYXMgZGVmYXVsdCwgd3JhcCwgd3JhcFlveW8sIGRpc3RyaWJ1dGUsIHJhbmRvbSwgc25hcCwgbm9ybWFsaXplLCBnZXRVbml0LCBjbGFtcCwgc3BsaXRDb2xvciwgdG9BcnJheSwgc2VsZWN0b3IsIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2NS4wLjBcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggd2luZG93LCByZXF1aXJlKCdldi1lbWl0dGVyJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KCB3aW5kb3csIHdpbmRvdy5FdkVtaXR0ZXIgKTtcbiAgfVxuXG59ICkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcbiAgICBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxubGV0ICQgPSB3aW5kb3cualF1ZXJ5O1xubGV0IGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkgcmV0dXJuIG9iajtcblxuICBsZXQgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gIGlmICggaXNBcnJheUxpa2UgKSByZXR1cm4gWyAuLi5vYmogXTtcblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7W0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nXX0gZWxlbVxuICogQHBhcmFtIHtbT2JqZWN0LCBGdW5jdGlvbl19IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7SW1hZ2VzTG9hZGVkfVxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgbGV0IHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEJhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgJHtxdWVyeUVsZW0gfHwgZWxlbX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0ge307XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5hc3NpZ24oIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG4gIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gIGlmICggJCApIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbmNvbnN0IGVsZW1lbnROb2RlVHlwZXMgPSBbIDEsIDksIDExIF07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgbGV0IHsgbm9kZVR5cGUgfSA9IGVsZW07XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzLmluY2x1ZGVzKCBub2RlVHlwZSApICkgcmV0dXJuO1xuXG4gIGxldCBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCBsZXQgaW1nIG9mIGNoaWxkSW1ncyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggbGV0IGNoaWxkIG9mIGNoaWxkcmVuICkge1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gIGlmICggIXN0eWxlICkgcmV0dXJuO1xuXG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICBsZXQgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgbGV0IHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIGxldCBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICBsZXQgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLXN0eWxlICovXG4gIGxldCBvblByb2dyZXNzID0gKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApID0+IHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSApO1xuICB9O1xuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggYHByb2dyZXNzOiAke21lc3NhZ2V9YCwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgbGV0IGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIC8vIGFkZCBjcm9zc09yaWdpbiBhdHRyaWJ1dGUuICMyMDRcbiAgaWYgKCB0aGlzLmltZy5jcm9zc09yaWdpbiApIHtcbiAgICB0aGlzLnByb3h5SW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmltZy5jcm9zc09yaWdpbjtcbiAgfVxuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuY3VycmVudFNyYyB8fCB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgbGV0IHsgcGFyZW50Tm9kZSB9ID0gdGhpcy5pbWc7XG4gIC8vIGVtaXQgcHJvZ3Jlc3Mgd2l0aCBwYXJlbnQgPHBpY3R1cmU+IG9yIHNlbGYgPGltZz5cbiAgbGV0IGVsZW0gPSBwYXJlbnROb2RlLm5vZGVOYW1lID09PSAnUElDVFVSRScgPyBwYXJlbnROb2RlIDogdGhpcy5pbWc7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGVsZW0sIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSByZXR1cm47XG5cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgICBsZXQgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQoIHRoaXMgKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3JtYWxpemVXaGVlbC5qcycpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBVc2VyQWdlbnRfREVQUkVDQVRFRFxuICovXG5cbi8qKlxuICogIFByb3ZpZGVzIGVudGlyZWx5IGNsaWVudC1zaWRlIFVzZXIgQWdlbnQgYW5kIE9TIGRldGVjdGlvbi4gWW91IHNob3VsZCBwcmVmZXJcbiAqICB0aGUgbm9uLWRlcHJlY2F0ZWQgVXNlckFnZW50IG1vZHVsZSB3aGVuIHBvc3NpYmxlLCB3aGljaCBleHBvc2VzIG91clxuICogIGF1dGhvcml0YXRpdmUgc2VydmVyLXNpZGUgUEhQLWJhc2VkIGRldGVjdGlvbiB0byB0aGUgY2xpZW50LlxuICpcbiAqICBVc2FnZSBpcyBzdHJhaWdodGZvcndhcmQ6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkpIHtcbiAqICAgICAgLy8gIElFXG4gKiAgICB9XG4gKlxuICogIFlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNoZWNrczpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA+PSA3KSB7XG4gKiAgICAgIC8vICBJRTcgb3IgYmV0dGVyXG4gKiAgICB9XG4gKlxuICogIFRoZSBicm93c2VyIGZ1bmN0aW9ucyB3aWxsIHJldHVybiBOYU4gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3QgbWF0Y2gsIHNvXG4gKiAgeW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY29tcGFyZXMgdGhlIG90aGVyIHdheTpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA8IDcpIHtcbiAqICAgICAgLy8gIElFNiBvciB3b3JzZVxuICogICAgfVxuICpcbiAqICBOb3RlIHRoYXQgdGhlIHZlcnNpb24gaXMgYSBmbG9hdCBhbmQgbWF5IGluY2x1ZGUgYSBtaW5vciB2ZXJzaW9uIG51bWJlcixcbiAqICBzbyB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgcmFuZ2Ugb3BlcmF0b3JzIHRvIHBlcmZvcm0gY29tcGFyaXNvbnMsIG5vdFxuICogIHN0cmljdCBlcXVhbGl0eS5cbiAqXG4gKiAgKipOb3RlOioqIFlvdSBzaG91bGQgKipzdHJvbmdseSoqIHByZWZlciBjYXBhYmlsaXR5IGRldGVjdGlvbiB0byBicm93c2VyXG4gKiAgdmVyc2lvbiBkZXRlY3Rpb24gd2hlcmUgaXQncyByZWFzb25hYmxlOlxuICpcbiAqICAgIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvc3VwcG9ydC5odG1sXG4gKlxuICogIEZ1cnRoZXIsIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgbWF0dXJlIHdyYXBwZXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gKiAgd2hpY2ggYWJzdHJhY3QgYXdheSBtYW55IGJyb3dzZXIgaXJyZWd1bGFyaXRpZXMuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uLFxuICogIGdyZXAgZm9yIHRoaW5ncywgb3IgYXNrIG9uIGphdmFzY3JpcHRAbGlzdHMuZmFjZWJvb2suY29tIGJlZm9yZSB3cml0aW5nIHlldFxuICogIGFub3RoZXIgY29weSBvZiBcImV2ZW50IHx8IHdpbmRvdy5ldmVudFwiLlxuICpcbiAqL1xuXG52YXIgX3BvcHVsYXRlZCA9IGZhbHNlO1xuXG4vLyBCcm93c2Vyc1xudmFyIF9pZSwgX2ZpcmVmb3gsIF9vcGVyYSwgX3dlYmtpdCwgX2Nocm9tZTtcblxuLy8gQWN0dWFsIElFIGJyb3dzZXIgZm9yIGNvbXBhdGliaWxpdHkgbW9kZVxudmFyIF9pZV9yZWFsX3ZlcnNpb247XG5cbi8vIFBsYXRmb3Jtc1xudmFyIF9vc3gsIF93aW5kb3dzLCBfbGludXgsIF9hbmRyb2lkO1xuXG4vLyBBcmNoaXRlY3R1cmVzXG52YXIgX3dpbjY0O1xuXG4vLyBEZXZpY2VzXG52YXIgX2lwaG9uZSwgX2lwYWQsIF9uYXRpdmU7XG5cbnZhciBfbW9iaWxlO1xuXG5mdW5jdGlvbiBfcG9wdWxhdGUoKSB7XG4gIGlmIChfcG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3BvcHVsYXRlZCA9IHRydWU7XG5cbiAgLy8gVG8gd29yayBhcm91bmQgYnVnZ3kgSlMgbGlicmFyaWVzIHRoYXQgY2FuJ3QgaGFuZGxlIG11bHRpLWRpZ2l0XG4gIC8vIHZlcnNpb24gbnVtYmVycywgT3BlcmEgMTAncyB1c2VyIGFnZW50IHN0cmluZyBjbGFpbXMgaXQncyBPcGVyYVxuICAvLyA5LCB0aGVuIGxhdGVyIGluY2x1ZGVzIGEgVmVyc2lvbi9YLlkgZmllbGQ6XG4gIC8vXG4gIC8vIE9wZXJhLzkuODAgKGZvbykgUHJlc3RvLzIuMi4xNSBWZXJzaW9uLzEwLjEwXG4gIHZhciB1YXMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgYWdlbnQgPSAvKD86TVNJRS4oXFxkK1xcLlxcZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcXGQrXFwuXFxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcXGQrXFwuXFxkKykpfCg/OkFwcGxlV2ViS2l0LihcXGQrKD86XFwuXFxkKyk/KSl8KD86VHJpZGVudFxcL1xcZCtcXC5cXGQrLipydjooXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICB2YXIgb3MgICAgPSAvKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyh1YXMpO1xuXG4gIF9pcGhvbmUgPSAvXFxiKGlQaG9uZXxpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfaXBhZCA9IC9cXGIoaVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2FuZHJvaWQgPSAvQW5kcm9pZC9pLmV4ZWModWFzKTtcbiAgX25hdGl2ZSA9IC9GQkFOXFwvXFx3KzsvaS5leGVjKHVhcyk7XG4gIF9tb2JpbGUgPSAvTW9iaWxlL2kuZXhlYyh1YXMpO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgSUUgdGVhbSBibG9nIHdvdWxkIGhhdmUgeW91IGJlbGlldmUgeW91IHNob3VsZCBiZSBjaGVja2luZ1xuICAvLyBmb3IgJ1dpbjY0OyB4NjQnLiAgQnV0IE1TRE4gdGhlbiByZXZlYWxzIHRoYXQgeW91IGNhbiBhY3R1YWxseSBiZSBjb21pbmdcbiAgLy8gZnJvbSBlaXRoZXIgeDY0IG9yIGlhNjQ7ICBzbyB1bHRpbWF0ZWx5LCB5b3Ugc2hvdWxkIGp1c3QgY2hlY2sgZm9yIFdpbjY0XG4gIC8vIGFzIGluIGluZGljYXRvciBvZiB3aGV0aGVyIHlvdSdyZSBpbiA2NC1iaXQgSUUuICAzMi1iaXQgSUUgb24gNjQtYml0XG4gIC8vIFdpbmRvd3Mgd2lsbCBzZW5kICdXT1c2NCcgaW5zdGVhZC5cbiAgX3dpbjY0ID0gISEoL1dpbjY0Ly5leGVjKHVhcykpO1xuXG4gIGlmIChhZ2VudCkge1xuICAgIF9pZSA9IGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiAoXG4gICAgICAgICAgYWdlbnRbNV0gPyBwYXJzZUZsb2F0KGFnZW50WzVdKSA6IE5hTik7XG4gICAgLy8gSUUgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgaWYgKF9pZSAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcbiAgICAgIF9pZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICB9XG4gICAgLy8gZ3JhYiB0aGUgXCJ0cnVlXCIgaWUgdmVyc2lvbiBmcm9tIHRoZSB0cmlkZW50IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIHZhciB0cmlkZW50ID0gLyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICBfaWVfcmVhbF92ZXJzaW9uID0gdHJpZGVudCA/IHBhcnNlRmxvYXQodHJpZGVudFsxXSkgKyA0IDogX2llO1xuXG4gICAgX2ZpcmVmb3ggPSBhZ2VudFsyXSA/IHBhcnNlRmxvYXQoYWdlbnRbMl0pIDogTmFOO1xuICAgIF9vcGVyYSAgID0gYWdlbnRbM10gPyBwYXJzZUZsb2F0KGFnZW50WzNdKSA6IE5hTjtcbiAgICBfd2Via2l0ICA9IGFnZW50WzRdID8gcGFyc2VGbG9hdChhZ2VudFs0XSkgOiBOYU47XG4gICAgaWYgKF93ZWJraXQpIHtcbiAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhlIHJlZ2V4cCB0byB0aGUgYWJvdmUgdGVzdCwgYmVjYXVzZSBpdCB3aWxsIGFsd2F5c1xuICAgICAgLy8gbWF0Y2ggJ3NhZmFyaScgb25seSBzaW5jZSAnQXBwbGVXZWJLaXQnIGFwcGVhcnMgYmVmb3JlICdDaHJvbWUnIGluXG4gICAgICAvLyB0aGUgdXNlckFnZW50IHN0cmluZy5cbiAgICAgIGFnZW50ID0gLyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgICBfY2hyb21lID0gYWdlbnQgJiYgYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IE5hTjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2Nocm9tZSA9IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX2llID0gX2ZpcmVmb3ggPSBfb3BlcmEgPSBfY2hyb21lID0gX3dlYmtpdCA9IE5hTjtcbiAgfVxuXG4gIGlmIChvcykge1xuICAgIGlmIChvc1sxXSkge1xuICAgICAgLy8gRGV0ZWN0IE9TIFggdmVyc2lvbi4gIElmIG5vIHZlcnNpb24gbnVtYmVyIG1hdGNoZXMsIHNldCBfb3N4IHRvIHRydWUuXG4gICAgICAvLyBWZXJzaW9uIGV4YW1wbGVzOiAgMTAsIDEwXzZfMSwgMTAuN1xuICAgICAgLy8gUGFyc2VzIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXQsIHRha2luZyBvbmx5IGZpcnN0IHR3byBzZXRzIG9mXG4gICAgICAvLyBkaWdpdHMuICBJZiBvbmx5IG9uZSBzZXQgb2YgZGlnaXRzIGlzIGZvdW5kLCByZXR1cm5zIGp1c3QgdGhlIG1ham9yXG4gICAgICAvLyB2ZXJzaW9uIG51bWJlci5cbiAgICAgIHZhciB2ZXIgPSAvKD86TWFjIE9TIFggKFxcZCsoPzpbLl9dXFxkKyk/KSkvLmV4ZWModWFzKTtcblxuICAgICAgX29zeCA9IHZlciA/IHBhcnNlRmxvYXQodmVyWzFdLnJlcGxhY2UoJ18nLCAnLicpKSA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vc3ggPSBmYWxzZTtcbiAgICB9XG4gICAgX3dpbmRvd3MgPSAhIW9zWzJdO1xuICAgIF9saW51eCAgID0gISFvc1szXTtcbiAgfSBlbHNlIHtcbiAgICBfb3N4ID0gX3dpbmRvd3MgPSBfbGludXggPSBmYWxzZTtcbiAgfVxufVxuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSB7XG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGllOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2llO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB3ZSdyZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBjb21wYXRpYmlsaXR5IG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGluIGNvbXBhdGliaWxpdHkgbW9kZSwgZmFsc2UgaWZcbiAgICogbm90IGNvbXBhdGliaWxpdHkgbW9kZSBvciBub3QgaWVcbiAgICovXG4gIGllQ29tcGF0aWJpbGl0eU1vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2llX3JlYWxfdmVyc2lvbiA+IF9pZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyA2NC1iaXQgSUUuICBSZWFsbHksIHRoaXMgaXMga2luZCBvZiB3ZWFrIHNhdWNlOyAgd2VcbiAgICogb25seSBuZWVkIHRoaXMgYmVjYXVzZSBTa3lwZSBjYW4ndCBoYW5kbGUgNjQtYml0IElFIHlldC4gIFdlIG5lZWQgdG8gcmVtb3ZlXG4gICAqIHRoaXMgd2hlbiB3ZSBkb24ndCBuZWVkIGl0IC0tIHRyYWNrZWQgYnkgIzYwMTk1Ny5cbiAgICovXG4gIGllNjQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpICYmIF93aW42NDtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBGaXJlZm94LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBmaXJlZm94OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2ZpcmVmb3g7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBPcGVyYS5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgb3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3BlcmE7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBXZWJLaXQuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIHdlYmtpdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93ZWJraXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBGb3IgUHVzaFxuICAgKiAgV0lMTCBCRSBSRU1PVkVEIFZFUlkgU09PTi4gVXNlIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdFxuICAgKi9cbiAgc2FmYXJpOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgYSBDaHJvbWUgYnJvd3Nlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgY2hyb21lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9jaHJvbWU7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgV2luZG93cy5cbiAgICpcbiAgICogIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBXaW5kb3dzLlxuICAgKi9cbiAgd2luZG93czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93aW5kb3dzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIE1hYyBPUyBYLlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxib29sICAgUmV0dXJucyBhIGZsb2F0IGlmIGEgdmVyc2lvbiBudW1iZXIgaXMgZGV0ZWN0ZWQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdHJ1ZS9mYWxzZS5cbiAgICovXG4gIG9zeDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vc3g7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTGludXguXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBzb21lIGZsYXZvciBvZiBMaW51eC5cbiAgICovXG4gIGxpbnV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2xpbnV4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHBsYXRmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgc29tZSBmbGF2b3Igb2YgdGhlXG4gICAqICAgIGlQaG9uZSBPUy5cbiAgICovXG4gIGlwaG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGhvbmU7XG4gIH0sXG5cbiAgbW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pcGhvbmUgfHwgX2lwYWQgfHwgX2FuZHJvaWQgfHwgX21vYmlsZSk7XG4gIH0sXG5cbiAgbmF0aXZlQXBwOiBmdW5jdGlvbigpIHtcbiAgICAvLyB3ZWJ2aWV3cyBpbnNpZGUgb2YgdGhlIG5hdGl2ZSBhcHBzXG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9uYXRpdmU7XG4gIH0sXG5cbiAgYW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9hbmRyb2lkO1xuICB9LFxuXG4gIGlwYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBhZDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQWdlbnRfREVQUkVDQVRFRDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG5vcm1hbGl6ZVdoZWVsXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRfREVQUkVDQVRFRCcpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG5cbi8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbnZhciBQSVhFTF9TVEVQICA9IDEwO1xudmFyIExJTkVfSEVJR0hUID0gNDA7XG52YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbi8qKlxuICogTW91c2Ugd2hlZWwgKGFuZCAyLWZpbmdlciB0cmFja3BhZCkgc3VwcG9ydCBvbiB0aGUgd2ViIHN1Y2tzLiAgSXQgaXNcbiAqIGNvbXBsaWNhdGVkLCB0aHVzIHRoaXMgZG9jIGlzIGxvbmcgYW5kIChob3BlZnVsbHkpIGRldGFpbGVkIGVub3VnaCB0byBhbnN3ZXJcbiAqIHlvdXIgcXVlc3Rpb25zLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIHJlYWN0IHRvIHRoZSBtb3VzZSB3aGVlbCBpbiBhIHByZWRpY3RhYmxlIHdheSwgdGhpcyBjb2RlIGlzXG4gKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gKlxuICogQXMgb2YgdG9kYXksIHRoZXJlIGFyZSA0IERPTSBldmVudCB0eXBlcyB5b3UgY2FuIGxpc3RlbiB0bzpcbiAqXG4gKiAgICd3aGVlbCcgICAgICAgICAgICAgICAgLS0gQ2hyb21lKDMxKyksIEZGKDE3KyksIElFKDkrKVxuICogICAnbW91c2V3aGVlbCcgICAgICAgICAgIC0tIENocm9tZSwgSUUoNispLCBPcGVyYSwgU2FmYXJpXG4gKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gKiAgICdET01Nb3VzZVNjcm9sbCcgICAgICAgLS0gRkYoMC45LjcrKSBzaW5jZSAyMDAzXG4gKlxuICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAqXG4gKiAgIG5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSgpO1xuICpcbiAqIEluIHlvdXIgZXZlbnQgY2FsbGJhY2ssIHVzZSB0aGlzIGNvZGUgdG8gZ2V0IHNhbmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlXG4gKiBkZWx0YXMuICBUaGlzIGNvZGUgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczpcbiAqXG4gKiAgIHNwaW5YICAgLS0gbm9ybWFsaXplZCBzcGluIHNwZWVkICh1c2UgZm9yIHpvb20pIC0geCBwbGFuZVxuICogICBzcGluWSAgIC0tIFwiIC0geSBwbGFuZVxuICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gKiAgIHBpeGVsWSAgLS0gXCIgLSB5IHBsYW5lXG4gKlxuICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICogc2Nyb2xsIGEgd2ViIHBhZ2UgYnkgYSBudW1iZXIgb2YgbGluZXMgb3IgcGl4ZWxzIChvciBwYWdlcykuICBWYWx1ZXMgY2FuIHZhcnlcbiAqIHNpZ25pZmljYW50bHkgb24gZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgYnJvd3NlcnMsIGZvcmdldHRpbmcgdGhhdCB5b3UgY2FuXG4gKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAqIGF0IHNtYWxsZXIgaW5jcmVtZW50cyB3aXRoIGZpbmUgZ3JhbnVsYXJpdHksIGFuZCBzb21lIGVtaXQgbWFzc2l2ZSBqdW1wcyB3aXRoXG4gKiBsaW5lYXIgc3BlZWQgb3IgYWNjZWxlcmF0aW9uLlxuICpcbiAqIFRoaXMgY29kZSBkb2VzIGl0cyBiZXN0IHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGFzIGZvciB5b3U6XG4gKlxuICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAqICAgICBkcmFnZ2VkKS4gIFRoaXMgaXMgc3VwZXIgdXNlZnVsIGZvciB6b29tIHN1cHBvcnQgd2hlcmUgeW91IHdhbnQgdG9cbiAqICAgICB0aHJvdyBhd2F5IHRoZSBjaHVua3kgc2Nyb2xsIHN0ZXBzIG9uIHRoZSBQQyBhbmQgbWFrZSB0aG9zZSBlcXVhbCB0b1xuICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gKiAgICAgcmVzb2x2ZSBhIHNpbmdsZSBzbG93IHN0ZXAgb24gYSB3aGVlbCB0byAxLlxuICpcbiAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAqICAgICBnZXQgdGhlIGNyYXp5IGRpZmZlcmVuY2VzIGJldHdlZW4gYnJvd3NlcnMsIGJ1dCBhdCBsZWFzdCBpdCdsbCBiZSBpblxuICogICAgIHBpeGVscyFcbiAqXG4gKiAgIC0gcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHNjcm9sbGluZyBET1dOL1JJR0hULCBuZWdhdGl2ZSBVUC9MRUZULiAgVGhpc1xuICogICAgIHNob3VsZCB0cmFuc2xhdGUgdG8gcG9zaXRpdmUgdmFsdWUgem9vbWluZyBJTiwgbmVnYXRpdmUgem9vbWluZyBPVVQuXG4gKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICpcbiAqIFdoeSBhcmUgdGhlcmUgc3BpblgsIHNwaW5ZIChvciBwaXhlbHMpP1xuICpcbiAqICAgLSBzcGluWCBpcyBhIDItZmluZ2VyIHNpZGUgZHJhZyBvbiB0aGUgdHJhY2twYWQsIGFuZCBhIHNoaWZ0ICsgd2hlZWwgdHVyblxuICogICAgIHdpdGggYSBtb3VzZS4gIEl0IHJlc3VsdHMgaW4gc2lkZS1zY3JvbGxpbmcgaW4gdGhlIGJyb3dzZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiAgIC0gc3BpblkgaXMgd2hhdCB5b3UgZXhwZWN0IC0tIGl0J3MgdGhlIGNsYXNzaWMgYXhpcyBvZiBhIG1vdXNlIHdoZWVsLlxuICpcbiAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICogICAgIHByb2JhYmx5IGlzIGJ5IGJyb3dzZXJzIGluIGNvbmp1bmN0aW9uIHdpdGggZmFuY3kgM0QgY29udHJvbGxlcnMgLi4gYnV0XG4gKiAgICAgeW91IGtub3cuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaW5mbzpcbiAqXG4gKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gKiBhdmVyYWdlIG1vdXNlOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIE9TIFggKyBTYWZhcmkgIChtb3VzZSkgICAgIC0gIE4vQSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgLTEyKVxuICogICBPUyBYICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDAuMSBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIFdpbjggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMyAgIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICpcbiAqIE9uIHRoZSB0cmFja3BhZDpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgICh0cmFja3BhZCkgIC0gICAgMiAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgIC02KVxuICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqXG4gKiBPbiBvdGhlci9vbGRlciBicm93c2Vycy4uIGl0J3MgbW9yZSBjb21wbGljYXRlZCBhcyB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgYW5kXG4gKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICpcbiAqIFRoZSAnd2hlZWwnIGV2ZW50IGlzIG1vcmUgc3RhbmRhcmQ6XG4gKlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtd2hlZWxldmVudHNcbiAqXG4gKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gKiBkZWx0YVgsIGRlbHRhWSBhbmQgZGVsdGFaLiAgU29tZSBicm93c2VycyBwcm92aWRlIG90aGVyIHZhbHVlcyB0byBtYWludGFpblxuICogYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGV2ZW50cy4gIFRob3NlIG90aGVyIHZhbHVlcyBoZWxwIHVzXG4gKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgZXZlbnQud2hlZWxEZWx0YSB8IGV2ZW50LmRldGFpbFxuICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgIFNhZmFyaSB2NS9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICBTYWZhcmkgdjUvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICAgICAgICBJRTkvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICB1bmRlZmluZWRcbiAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvV2luNyAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgM1xuICpcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2hlZWwoLypvYmplY3QqLyBldmVudCkgLypvYmplY3QqLyB7XG4gIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBwWCA9IDAsIHBZID0gMDsgICAgICAgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAvLyBMZWdhY3lcbiAgaWYgKCdkZXRhaWwnICAgICAgaW4gZXZlbnQpIHsgc1kgPSBldmVudC5kZXRhaWw7IH1cbiAgaWYgKCd3aGVlbERlbHRhJyAgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBldmVudCkgeyBzWCA9IC1ldmVudC53aGVlbERlbHRhWCAvIDEyMDsgfVxuXG4gIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgaWYgKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgIHNYID0gc1k7XG4gICAgc1kgPSAwO1xuICB9XG5cbiAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gIGlmICgnZGVsdGFZJyBpbiBldmVudCkgeyBwWSA9IGV2ZW50LmRlbHRhWTsgfVxuICBpZiAoJ2RlbHRhWCcgaW4gZXZlbnQpIHsgcFggPSBldmVudC5kZWx0YVg7IH1cblxuICBpZiAoKHBYIHx8IHBZKSAmJiBldmVudC5kZWx0YU1vZGUpIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IDEpIHsgICAgICAgICAgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICBpZiAocFggJiYgIXNYKSB7IHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7IH1cbiAgaWYgKHBZICYmICFzWSkgeyBzWSA9IChwWSA8IDEpID8gLTEgOiAxOyB9XG5cbiAgcmV0dXJuIHsgc3BpblggIDogc1gsXG4gICAgICAgICAgIHNwaW5ZICA6IHNZLFxuICAgICAgICAgICBwaXhlbFggOiBwWCxcbiAgICAgICAgICAgcGl4ZWxZIDogcFkgfTtcbn1cblxuXG4vKipcbiAqIFRoZSBiZXN0IGNvbWJpbmF0aW9uIGlmIHlvdSBwcmVmZXIgc3BpblggKyBzcGluWSBub3JtYWxpemF0aW9uLiAgSXQgZmF2b3JzXG4gKiB0aGUgb2xkZXIgRE9NTW91c2VTY3JvbGwgZm9yIEZpcmVmb3gsIGFzIEZGIGRvZXMgbm90IGluY2x1ZGUgd2hlZWxEZWx0YSB3aXRoXG4gKiAnd2hlZWwnIGV2ZW50LCBtYWtpbmcgc3BpbiBzcGVlZCBkZXRlcm1pbmF0aW9uIGltcG9zc2libGUuXG4gKi9cbm5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uKCkgLypzdHJpbmcqLyB7XG4gIHJldHVybiAoVXNlckFnZW50X0RFUFJFQ0FURUQuZmlyZWZveCgpKVxuICAgICAgICAgICA/ICdET01Nb3VzZVNjcm9sbCdcbiAgICAgICAgICAgOiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSlcbiAgICAgICAgICAgICAgID8gJ3doZWVsJ1xuICAgICAgICAgICAgICAgOiAnbW91c2V3aGVlbCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVdoZWVsO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgSG9tZSBmcm9tICcuL3BhZ2VzL2hvbWUnXG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9wYWdlcy9hYm91dCdcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSAnLi9jb21wb25lbnRzL1ByZWxvYWRlcidcbmltcG9ydCBQbGF5ZXIgZnJvbSAnLi9jb21wb25lbnRzL3dpZGdldHMvbXVzaWMtcGxheWVyL3BsYXllcidcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uJ1xuaW1wb3J0IEZvcm1IYW5kbGVyIGZyb20gJy4vY29uZmlnL2Zvcm1zJ1xuaW1wb3J0IENhbnZhcyBmcm9tICcuL2FuaW1hdGlvbi9jYW52YXMnXG5pbXBvcnQgU21vb3Roc2Nyb2xsIGZyb20gJy4vdXRpbHMvU21vb3Roc2Nyb2xsJ1xuaW1wb3J0IHsgJEFsbCwgJCB9IGZyb20gJy4vdXRpbHMvc2VsZWN0b3JzJ1xuaW1wb3J0IFByb2plY3QgZnJvbSAnLi9wYWdlcy9wcm9qZWN0J1xuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXG4gICAgdGhpcy5pbml0TmF2aWdhdGlvbigpXG4gICAgdGhpcy5pbml0KClcbiAgICB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoKVxuICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcygpXG4gIH1cblxuICBjcmVhdGVQcmVsb2FkZXIoKSB7XG4gICAgdGhpcy5wcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKClcbiAgICB0aGlzLnByZWxvYWRlci5vbmNlKCdjb21wbGV0ZWQnLCAoKSA9PiB0aGlzLm9uUHJlbG9hZEVuZCgpKVxuICB9XG5cbiAgb25QcmVsb2FkRW5kKCkge1xuICAgIHRoaXMucHJlbG9hZGVyLmRlc3Ryb3koKVxuICAgIHRoaXMuaW5pdFBhZ2VzKClcbiAgICB0aGlzLmNvbmZpZygpXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgfVxuXG4gIGdldENvbnRlbnQoKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKVxuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcbiAgfVxuXG4gIGluaXRQYWdlcygpIHtcbiAgICB0aGlzLnBhZ2VzID0ge1xuICAgICAgaG9tZTogbmV3IEhvbWUoKSxcbiAgICAgIGFib3V0OiBuZXcgQWJvdXQoKSxcbiAgICAgIHByb2plY3Q6IG5ldyBQcm9qZWN0KCksXG4gICAgfVxuXG4gICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuICAgIHRoaXMucGFnZS5pbml0KClcbiAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICB0aGlzLnBhZ2Uuc2hvdygpXG4gIH1cblxuICBpbml0TmF2aWdhdGlvbigpIHtcbiAgICB0aGlzLm5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpXG4gIH1cblxuICBjb25maWcoKSB7XG4gICAgdGhpcy5mb3JtSGFuZGxlciA9IG5ldyBGb3JtSGFuZGxlcignY29ubmVjdCcsICdjb25uZWN0JywgJ1BPU1QnKVxuICB9XG5cbiAgb2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coZW50cnkpXG4gICAgICAgIG5ldyBTbW9vdGhzY3JvbGwoJCgnLndyYXBwZXInKSwge1xuICAgICAgICAgIGRpcmVjdGlvbjogJ3YnLFxuICAgICAgICAgIHNtb290aDogMC4xLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpXG4gIH1cblxuICBhc3luYyBvbkNoYW5nZSh7IHVybCB9KSB7XG4gICAgYXdhaXQgdGhpcy5wYWdlLmhpZGUoKVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgd2luZG93LmZldGNoKHVybClcblxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXMudGV4dCgpXG5cbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHVybClcblxuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXG5cbiAgICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuICAgICAgdGhpcy50ZW1wbGF0ZSA9IGRpdkNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcbiAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTFxuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuXG4gICAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICAgIHRoaXMucGFnZS5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignZXJyb3I6ICcgKyByZXMpXG4gICAgfVxuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBsaW5rcyA9ICRBbGwoJ1tkYXRhLWxpbmtzXScpXG4gICAgY29uc3QgbGlua3NJdGVtID0gJEFsbCgnLm1lbnVfX2xpbmtzX19pdGVtJylcblxuICAgIGxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgIGNvbnN0IHsgaHJlZiB9ID0gbGlua1xuICAgICAgY29uc3QgbGlua0RhdGEgPSBocmVmLnNwbGl0KCcjJylcbiAgICAgIGNvbnN0IFt1cmxdID0gbGlua0RhdGFcbiAgICAgIGNvbnN0IHBhcmVudCA9IGxpbmsucGFyZW50Tm9kZVxuXG4gICAgICBsaW5rLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBsaW5rc0l0ZW0uZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucygnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJykpIHtcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHVybCA9PT0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHJldHVyblxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHsgdXJsOiBocmVmIH0pXG4gICAgICAgIGlmICghcGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJykpIHtcbiAgICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LmFkZCgnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xubmV3IEFwcCgpXG4iXSwibmFtZXMiOlsiQW5pbWF0aW9uIiwic3BsaXR0ZXh0IiwiR1NBUCIsIlBhcmFncmFwaCIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsInNwYW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImFuaW1hdGVJbiIsInRvIiwiZHVyYXRpb24iLCJvcGFjaXR5IiwiZGVsYXkiLCJzdGFnZ2VyIiwiZWFzZSIsInkiLCJhbmltYXRlT3V0Iiwic2V0IiwiJEFsbCIsIlNjYWxlIiwiZWxlbWVudHMiLCJpbml0IiwiZXZlbnRMaXN0ZW5lciIsInNjYWxlVXAiLCJlIiwiY3VycmVudFRhcmdldCIsInN0eWxlIiwidHJhbnNmb3JtIiwic2NhbGVEb3duIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kIiwiU2hhcGVzIiwicG9zaXRpb24iLCJoZWlnaHQiLCJ3aWR0aCIsImJsdXIiLCJiYWNrZ3JvdW5kIiwidG9wIiwidW5kZWZpbmVkIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwid2luZG93V2lkdGgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiY3JlYXRlU2hhcGUiLCJvbldpbmRvd1Jlc2l6ZSIsImV2ZW50cyIsInNoYXBlRnJhbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpZCIsInRlc3RCcmVha3BvaW50IiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwiYW5pbXNoYXBlcyIsImFuaW1hdGlvbkFyciIsImluZGV4IiwiYW5pbUZsb3ciLCJzZXRJbnRlcnZhbCIsImxlbmd0aCIsImZpbHRlciIsIm1vdW50U2hhcGUiLCJwYXJlbnQiLCJhcHBlbmQiLCJUaXRsZSIsIkNvbXBvbmVudHMiLCIkIiwiQ2FudmFzIiwiaXNNb3VudGVkIiwic2hhcGVHcmFkaWVudCIsIm1vdW50RnJhbWUiLCJzaGFwZTEiLCJzaGFwZTIiLCJjcmVhdGVGcmFtZSIsImZyYW1lIiwiaW5uZXJIZWlnaHQiLCJ6SW5kZXgiLCJib2R5Iiwib25SZXNpemUiLCJwcmV2ZW50RGVmYXVsdCIsIm1vdW50ZWRGcmFtZSIsImNyZWF0ZU9ic2VydmVyIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZSIsIkV2ZW50RW1pdHRlciIsImNvbXBvbmVudE5hbWUiLCJzZWxlY3RvckNoaWxkcmVucyIsInJvb3QiLCJoYW5kbGVFbGVtZW50T2JqZWN0IiwiZ2V0RWxlbWVudHMiLCJjaGlsZHJlbnMiLCJrZXlzIiwidmFsdWUiLCJPYmplY3QiLCJxdWVyeVNlbGVjdG9yIiwib2JqZWN0IiwiYnVpbGRlZE9iamVjdHMiLCJrZXkiLCJQYWdlcyIsInRpbWVsaW5lIiwiZGV2aWNlIiwibW9iaWxlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRhYmxldCIsIndyYXBwZXIiLCJzY2FsZUFuaW1hdGlvbiIsIm92ZXJmbG93IiwiY3JlYXRlIiwiY29uc29sZSIsImxvZyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNyZWF0ZUFuaW1hdGlvbiIsInRpdGxlcyIsInBhcmFncmFwaGVzIiwidCIsInAiLCJzaG93IiwiYXV0b0FscGhhIiwib25Db21wbGV0ZSIsImhpZGUiLCJwcmVsb2FkZXIiLCJ0ZXh0IiwiY29udGFpbmVyIiwibG9hZGVyIiwibmF2aWdhdGlvbiIsImhlYWRlciIsIm5hdkxpc3QiLCJwcmV2aWV3SW1nIiwiY29udGVudCIsIm9wZW5NZW51IiwiY2xvc2VNZW51IiwicGxheWVyIiwiYnV0dG9uIiwiZXhwYW5kIiwiY2xvc2UiLCJwbGF5IiwibmV4dCIsInByZXYiLCJ0b2dnbGVyIiwiY292ZXJDb250YWluZXIiLCJjb3ZlciIsInNlbGYiLCJtZWRpYSIsImFydGlzdCIsInRpdGxlIiwidGltZXIiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwicmFuZ2UiLCJwcm9ncmVzcyIsInByZWxvYWQiLCJ2b2x1bWUiLCJncmFwcGVyIiwic2xpZGVyIiwiZm9ybSIsImNvbm5lY3QiLCJuYW1lIiwibWFpbCIsIm1lc3NhZ2UiLCJuYW1lQWxlcnQiLCJlbWFpbEFsZXJ0IiwibWVzc2FnZUFsZXJ0IiwiYWxlcnQiLCJtb2RhbCIsImRhdGFTZXJ2aWNlSW5wdXQiLCJpdGVtcyIsInNlcnZpY2VzIiwiYnV0dG9ucyIsImltYWdlcyIsImFib3V0IiwiaG9tZSIsInByb2plY3QiLCJBbGVydCIsInR5cGUiLCJkaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJpY29uIiwiaW5uZXJUZXh0IiwiY2xvc2VJY29uIiwiaSIsIm9uY2xpY2siLCJkZXN0cm95IiwicHJlcGVuZCIsInRhZyIsInNldFRpbWVvdXQiLCJ0cmFuc2l0aW9uIiwicmVtb3ZlQ2hpbGQiLCJOYXZpZ2F0aW9uIiwiZXZlbnRzTGlzdGVuZXIiLCJkZWZhdWx0U291cmNlIiwic3JjIiwic2V0QWN0aXZlTGlua1N0eWxlcyIsImxpbmtzIiwidXJsIiwibG9jYXRpb24iLCJocmVmIiwibGluayIsInBhcmVudE5vZGUiLCJvbk1vdXNlSG92ZXJMaW5rcyIsImdldEF0dHJpYnV0ZSIsInJlbW92ZSIsImltYWdlc0xvYWRlZCIsIlByZWxvYWRlciIsInN0YXJ0SW5kZXgiLCJzaXplIiwiTnVtYmVyIiwiY2xpZW50V2lkdGgiLCJnYXAiLCJjcmVhdGVQcmVsb2FkZXIiLCJpbWdMb2FkIiwib24iLCJvblByb2dyZXNzIiwib25Mb2FkIiwiYW5pbVByZWxvYWRlclRleHQiLCJjaGlsZHJlbiIsInBlcmNlbnQiLCJNYXRoIiwicm91bmQiLCJlbWl0IiwiU2VydmljZXMiLCJvbkNsaWNrIiwiY2xvc2VNb2RhbCIsImNvbnRhaW5zIiwiVGFicyIsIl9fZGVmYXVsdHMiLCJkZWZhdWx0SW5kZXgiLCJfX3NlbGVjdG9ycyIsImxpc3QiLCJwYW5lbHMiLCJfX3N0YXRlIiwiYWN0aXZlIiwic2VsZWN0ZWQiLCJfX2F0dHJpYnViZXMiLCJwYW5lbCIsImJ1dHRvblN0YXRlIiwicGFubmVsU3RhdGUiLCJwcm9wcyIsImFzc2lnbiIsInNldEluZGV4IiwiZXZlbnRzTGlzdGVuZXJzIiwic2V0QXR0cmlidXRlIiwidGFyZ2V0IiwiU2xpZGVyIiwiY2hpbGQiLCJwYWRkaW5nIiwiY3VycmVudFBvc2l0aW9uIiwidHJlc2hvbGQiLCJkcmFnSW50ZXJ2YWxsIiwic2V0Q2hpbGRXaWR0aCIsInNldFBvc2l0aW9uIiwiaXRlbSIsImZsZXgiLCJvbk1vdXNlRG93biIsImN1cnNvciIsImlzRG93biIsImRyYWdTdGFydCIsIngiLCJkcmFnU3RhcnR5Iiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJkYXRhIiwicmVxdWlyZSIsIk1lZGlhTWFuYWdlciIsIlRpbWVyIiwic3RhcnR0aW1lIiwiZW5kdGltZSIsImlzUGxheSIsImN1cnJlbnRUaW1lIiwib25QYXVzZSIsImlzRW5kZWQiLCJjYiIsInNldFRpbWUiLCJob3VycyIsImZsb29yIiwibWludXRlcyIsInNlY29uZHMiLCJob3Vyc1ZhbHVlIiwibWludXRlc1ZhbHVlIiwic2Vjb25kc1ZhbHVlIiwidGV4dENvbnRlbnQiLCJ1cGRhdGVQcm9ncmVzcyIsInJhdGlvIiwibWF4Iiwic2V0RnVsbFRpbWUiLCJvblRpbWVDaGFuZ2UiLCJidWZmZXJlZCIsInN0YXJ0IiwiZW5kIiwibWV0YURhdGFMb2FkZWQiLCJWb2x1bWUiLCJQbGF5ZXIiLCJpc0V4cGFuZCIsInJhbmRvbUlkIiwic291bmQiLCJtZWRpYU1hbmFnZXIiLCJyYW5kb20iLCJjb21wb25lbnRzSGFuZGxlciIsImV2ZW50c0xpc3Rlcm5lciIsImRpc3BsYXkiLCJzZXRDb21wb25lbnRzIiwidGltZXJIYW5kbGVyIiwiY292ZXJIYW5kbGVyIiwidm9sdW1lSGFuZGxlciIsInNldFNvdW5kRGV0YWlscyIsImFsYnVtIiwiZGF0YXNldCIsInBhdXNlIiwic3RvcCIsInRpbWUiLCJjbGFtcCIsImNvbnRhaW5lckJvdHRvbSIsImNvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lclRvcCIsIm9uUG9pbnRlckRvd24iLCJvblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyVXAiLCJpc091dE9mVm9sdW1lVmlldyIsInBhZ2VZIiwib25tb3VzZWxlYXZlIiwidmFsaWRFbWFpbCIsIkZvcm1IYW5kbGVyIiwibWV0aG9kIiwiZm9ybVR5cGUiLCJvcmlnaW4iLCJ2YWwiLCJmZXRjaCIsIm9wdGlvbnMiLCJtb2RlIiwicmVzIiwic3RhdHVzIiwianNvbiIsInRoZW4iLCJyZXNldCIsInNlbmREYXRhIiwidmFsaWROdW1iZXIiLCJ2ZXJpZnlEYXRhIiwiZWwiLCJmb3JtRWxlbWVudHMiLCJVUkxTZWFyY2hQYXJhbXMiLCJGb3JtRGF0YSIsIkFib3V0IiwiSG9tZSIsIlByb2plY3QiLCJ0YWJzIiwibGVycCIsIm5vcm1hbGl6ZVdoZWVsIiwiU21vb3Roc2Nyb2xsIiwiX19kZWZhdWx0T3B0aW9ucyIsImRpcmVjdGlvbiIsInNtb290aCIsInN0YXJ0ZWRQb2ludCIsIm9wdHMiLCJzbW9vdGhPcHRpb25zIiwic2Nyb2xsIiwiY3VycmVudCIsImxpbWl0Iiwib2Zmc2V0SGVpZ2h0IiwiZGltZW5zaW9uSGFuZGxlciIsImFkZExpc3RlbmVyIiwib25Nb3VzZVdoZWVsIiwiZXZlbnQiLCJwaXhlbFkiLCJwaXhlbFgiLCJjbGllbnRIZWlnaHQiLCJ1cGRhdGUiLCJ0cmFuc2xhdGVCeUNhc2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbW91bnQiLCJtaW4iLCJ2YWxpZEZpbGVUeXBlIiwiZmlsZSIsImRvY3VtZW50cyIsIlVybEV4aXN0IiwiaGVhZGVycyIsInJlc3BvbnNlIiwiZW1haWwiLCJyZWdleCIsIk9ic2VydmVOb2RlRG9tQ2hhbmdlIiwibm9kZSIsInNlbGVjdG9yIiwidGFyZ2V0Tm9kZSIsImNvbmZpZyIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjYWxsYmFjayIsIm11dGF0aW9uc0xpc3QiLCJtdXRhdGlvbiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCIkQXR0cmlidXRlIiwic3BsaXQiLCJ3b3JkcyIsInNwbGl0VGV4dCIsImlubmVySFRNTCIsInRvU3RyaW5nIiwic3RyIiwibGluZSIsImluZGV4T2YiLCJsaW5lcyIsInBhcnNlTGluZSIsInR4dCIsInNwbGl0cyIsImFyciIsInB1c2giLCJjb25jYXQiLCJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsIkV2RW1pdHRlciIsInByb3RvIiwicHJvdG90eXBlIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwiaW5jbHVkZXMiLCJvbmNlIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib25jZUxpc3RlbmVycyIsIm9mZiIsInNwbGljZSIsImVtaXRFdmVudCIsImFyZ3MiLCJzbGljZSIsImlzT25jZSIsImFwcGx5IiwiYWxsT2ZmIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIkZ1bmN0aW9uIiwiY2FsbCIsIlJlZmxlY3RPd25LZXlzIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJQcm9jZXNzRW1pdFdhcm5pbmciLCJ3YXJuaW5nIiwid2FybiIsIk51bWJlcklzTmFOIiwiaXNOYU4iLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJuIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJnZXRNYXhMaXN0ZW5lcnMiLCJhcmd1bWVudHMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIkVycm9yIiwiZXJyIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJhcnJheUNsb25lIiwiX2FkZExpc3RlbmVyIiwibSIsImV4aXN0aW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsIlN0cmluZyIsImVtaXR0ZXIiLCJjb3VudCIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJzcGxpY2VPbmUiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJldmVudE5hbWVzIiwiY29weSIsIkFycmF5IiwicG9wIiwicmV0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvckxpc3RlbmVyIiwicmVzb2x2ZXIiLCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsImZsYWdzIiwid3JhcExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdzYXAiLCJfZ2V0UHJvcGVydHkiLCJfbnVtRXhwIiwiX251bVdpdGhVbml0RXhwIiwiZ2V0VW5pdCIsIl9pc1N0cmluZyIsIl9pc1VuZGVmaW5lZCIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwiX3JlbEV4cCIsIl9mb3JFYWNoTmFtZSIsIl9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsIl9wbHVnaW5zIiwiR1NDYWNoZSIsIlByb3BUd2VlbiIsIl9jb25maWciLCJfdGlja2VyIiwiX3JvdW5kIiwiX21pc3NpbmdQbHVnaW4iLCJfZ2V0U2V0dGVyIiwiX2dldENhY2hlIiwiX2NvbG9yRXhwIiwiX3BhcnNlUmVsYXRpdmUiLCJfc2V0RGVmYXVsdHMiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJfd2luIiwiX2RvYyIsIl9kb2NFbGVtZW50IiwiX3BsdWdpbkluaXR0ZWQiLCJfdGVtcERpdiIsIl90ZW1wRGl2U3R5bGVyIiwiX3JlY2VudFNldHRlclBsdWdpbiIsIl9yZXZlcnRpbmciLCJfd2luZG93RXhpc3RzIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJQSSIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfYmlnTnVtIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsInNjYWxlIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsInMiLCJjIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwiX3RoaXMiLCJ0Zm0iLCJhIiwiX2dldCIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwicmV2ZXJ0Iiwic2F2ZSIsIl9zdXBwb3J0czNEIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl9pbml0Q29yZSIsImRvY3VtZW50RWxlbWVudCIsImNzc1RleHQiLCJjb3JlIiwicmV2ZXJ0aW5nIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJvd25lclNWR0VsZW1lbnQiLCJvbGRQYXJlbnQiLCJvbGRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJvbGRDU1MiLCJiYm94IiwiYXBwZW5kQ2hpbGQiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiaW5zZXJ0QmVmb3JlIiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsImhhc0F0dHJpYnV0ZSIsIl9nZXRCQm94IiwiYm91bmRzIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwicmVtb3ZlQXR0cmlidXRlIiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJwbHVnaW4iLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJwdCIsIl9wdCIsIl9wcm9wcyIsIl9ub25Db252ZXJ0aWJsZVVuaXRzIiwiZGVnIiwicmFkIiwidHVybiIsIl9ub25TdGFuZGFyZExheW91dHMiLCJncmlkIiwiX2NvbnZlcnRUb1VuaXQiLCJ1bml0IiwiY3VyVmFsdWUiLCJwYXJzZUZsb2F0IiwiY3VyVW5pdCIsInRyaW0iLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwicHgiLCJpc1NWRyIsIl9wYXJzZVRyYW5zZm9ybSIsIl9maXJzdFR3b09ubHkiLCJ6T3JpZ2luIiwiX3NwZWNpYWxQcm9wcyIsIl90d2VlbkNvbXBsZXhDU1NTdHJpbmciLCJwcm9wIiwibWF0Y2hJbmRleCIsInJlc3VsdCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJjb2xvciIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImVuZE51bSIsImNodW5rIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsImVuZFZhbHVlcyIsIm1hdGNoIiwiZXhlYyIsInN1YnN0cmluZyIsImxhc3RJbmRleCIsInVuaXRzIiwiX25leHQiLCJyIiwiX2tleXdvcmRUb1BlcmNlbnQiLCJjZW50ZXIiLCJfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyIsImpvaW4iLCJfcmVuZGVyQ2xlYXJQcm9wcyIsInR3ZWVuIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIm1hcCIsIl9nZXRNYXRyaXgiLCJmb3JjZTJEIiwibWF0cml4IiwidGVtcCIsImFkZGVkVG9ET00iLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJkIiwiZiIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsIl9hcHBseVNWR09yaWdpbiIsIm9yaWdpbklzQWJzb2x1dGUiLCJtYXRyaXhBcnJheSIsInBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvIiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJkZXRlcm1pbmFudCIsImludmVydGVkU2NhbGVYIiwieiIsInJvdGF0aW9uIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2tld1giLCJza2V3WSIsInBlcnNwZWN0aXZlIiwiYW5nbGUiLCJjb3MiLCJzaW4iLCJhMTIiLCJhMjIiLCJ0MSIsInQyIiwidDMiLCJhMTMiLCJhMjMiLCJhMzMiLCJhNDIiLCJhNDMiLCJhMzIiLCJyb3RhdGUiLCJzcXJ0IiwiYWJzIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsImZvcmNlM0QiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsIl96ZXJvRGVnIiwiX3plcm9QeCIsIl9lbmRQYXJlbnRoZXNpcyIsIl9yZWYiLCJ0cmFuc2Zvcm1zIiwidXNlM0QiLCJfcmVmMiIsImExMSIsImEyMSIsInRhbiIsIl9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuIiwiY2FwIiwiaXNTdHJpbmciLCJjaGFuZ2UiLCJmaW5hbFZhbHVlIiwiX2Fzc2lnbiIsInNvdXJjZSIsIl9hZGRSYXdUcmFuc2Zvcm1QVHMiLCJzdGFydENhY2hlIiwiZXhjbHVkZSIsImVuZENhY2hlIiwibCIsInNpZGUiLCJ2YXJzIiwiQ1NTUGx1Z2luIiwicmVnaXN0ZXIiLCJ0YXJnZXRUZXN0Iiwibm9kZVR5cGUiLCJ0YXJnZXRzIiwic3RhcnRBdCIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJoYXNQcmlvcml0eSIsImlubGluZVByb3BzIiwic3R5bGVzIiwidmlzaWJpbGl0eSIsInBhcnNlVHJhbnNmb3JtIiwic21vb3RoT3JpZ2luIiwiZGVwIiwiYXV0b1JvdW5kIiwicmVuZGVyIiwiYWxpYXNlcyIsImdldFNldHRlciIsInV0aWxzIiwiY2hlY2tQcmVmaXgiLCJnZXRTdHlsZVNhdmVyIiwicG9zaXRpb25BbmRTY2FsZSIsIm90aGVycyIsImFsbCIsInJlZ2lzdGVyUGx1Z2luIiwiZGVmYXVsdCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX19wcm90b19fIiwiYXV0b1NsZWVwIiwibnVsbFRhcmdldFdhcm4iLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwib3ZlcndyaXRlIiwiX3N1cHByZXNzT3ZlcndyaXRlcyIsIl9jb250ZXh0IiwiX3RpbnlOdW0iLCJfMlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0IiwiX2NvcyIsIl9zaW4iLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJpc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFsVGltZWxpbmUiLCJfY29yZUluaXR0ZWQiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfY29yZVJlYWR5IiwiX2luc3RhbGwiLCJzY29wZSIsIl9tZXJnZSIsIl93YXJuIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwib2JqIiwiX2VtcHR5RnVuYyIsIl9zdGFydEF0UmV2ZXJ0Q29uZmlnIiwic3VwcHJlc3NFdmVudHMiLCJraWxsIiwiX3JldmVydENvbmZpZ05vS2lsbCIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsInRvQXJyYXkiLCJ2IiwibmFtZXMiLCJmdW5jIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJhbmltYXRpb24iLCJmb3JjZSIsIl9pbml0dGVkIiwiX3N0YXJ0QXQiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfcGFzc1Rocm91Z2giLCJkZWZhdWx0cyIsIl9zZXRLZXlmcmFtZURlZmF1bHRzIiwiZXhjbHVkZUR1cmF0aW9uIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJfaW5oZXJpdERlZmF1bHRzIiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9hcnJheXNNYXRjaCIsImExIiwiYTIiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJmaXJzdFByb3AiLCJsYXN0UHJvcCIsInNvcnRCeSIsIl9wcmV2IiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9zdGFydCIsIl9kaXJ0eSIsIl9yZWNhY2hlQW5jZXN0b3JzIiwidG90YWxEdXJhdGlvbiIsIl9yZXdpbmRTdGFydEF0IiwidG90YWxUaW1lIiwiaW1tZWRpYXRlUmVuZGVyIiwiYXV0b1JldmVydCIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJfcGFyZW50VG9DaGlsZFRvdGFsVGltZSIsInBhcmVudFRpbWUiLCJfdER1ciIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl9wb3N0QWRkQ2hlY2tzIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImxhenkiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJwcmV2UmF0aW8iLCJyZXBlYXREZWxheSIsIml0ZXJhdGlvbiIsInByZXZJdGVyYXRpb24iLCJfeW95byIsInJlcGVhdFJlZnJlc2giLCJpbnZhbGlkYXRlIiwiX2Zyb20iLCJfb25VcGRhdGUiLCJfY2FsbGJhY2siLCJfcHJvbSIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJwcmV2VGltZSIsIl9maXJzdCIsIl9sYXN0IiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwicmVwZWF0IiwiZHVyIiwidG90YWxQcm9ncmVzcyIsIl9vblVwZGF0ZVRvdGFsRHVyYXRpb24iLCJUaW1lbGluZSIsIl96ZXJvUG9zaXRpb24iLCJwZXJjZW50QW5pbWF0aW9uIiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwiaXJWYXJzIiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwibmF0aXZlRWxlbWVudCIsInNodWZmbGUiLCJzb3J0IiwiZGlzdHJpYnV0ZSIsImVhY2giLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJlZGdlcyIsImRpc3RhbmNlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiaiIsIndyYXBBdCIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImNsb3Nlc3QiLCJkeCIsImR5Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJtYXBSYW5nZSIsIl93cmFwQXJyYXkiLCJ3cmFwIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJtdXRhdGUiLCJtYXN0ZXIiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsImxhYmVsIiwiZXhlY3V0ZUxhenlGaXJzdCIsInByZXZDb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsIl9xdWlja1R3ZWVuIiwiX2NyZWF0ZVBsdWdpbiIsImlzRnVuYyIsIlBsdWdpbiIsImluc3RhbmNlRGVmYXVsdHMiLCJfa2lsbFByb3BUd2VlbnNPZiIsIm1vZGlmaWVyIiwiX2FkZFBsdWdpbk1vZGlmaWVyIiwicmF3VmFycyIsInN0YXRpY3MiLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJibGFjayIsIm1hcm9vbiIsInRlYWwiLCJibHVlIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJ5ZWxsb3ciLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwiZ3JlZW4iLCJyZWQiLCJwaW5rIiwiY3lhbiIsInRyYW5zcGFyZW50IiwiX2h1ZSIsImgiLCJtMSIsIm0yIiwic3BsaXRDb2xvciIsInRvSFNMIiwiZm9yY2VBbHBoYSIsImciLCJ3YXNIU0wiLCJwYXJzZUludCIsIl9jb2xvck9yZGVyRGF0YSIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsImNvbG9ycyIsInNoZWxsIiwiUmVnRXhwIiwiX2hzbEV4cCIsImNvbWJpbmVkIiwiX3RpY2tlckFjdGl2ZSIsIl9nZXRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2lkIiwiX3JlcSIsIl9yYWYiLCJfc2VsZiIsIl9kZWx0YSIsIl9pIiwiX3RpY2siLCJlbGFwc2VkIiwibWFudWFsIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwibGFnU21vb3RoaW5nIiwidGhyZXNob2xkIiwiYWRqdXN0ZWRMYWciLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl92YWx1ZUluUGFyZW50aGVzZXMiLCJvcGVuIiwibmVzdGVkIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX0NFIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwieW95b0Vhc2UiLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsIl9lYXNlSW5PdXRGcm9tT3V0IiwiX2NvbmZpZ0VsYXN0aWMiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJwMSIsInAyIiwicDMiLCJhc2luIiwiX2NvbmZpZ0JhY2siLCJvdmVyc2hvb3QiLCJwb3dlciIsIkxpbmVhciIsImVhc2VOb25lIiwibm9uZSIsIm4xIiwibjIiLCJuMyIsIlN0ZXBwZWRFYXNlIiwic3RlcHMiLCJpbW1lZGlhdGVTdGFydCIsIkluZmluaXR5IiwieW95byIsIl9wcm90byIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJfcHMiLCJwYXVzZWQiLCJpbmNsdWRlUmVwZWF0cyIsIndyYXBSZXBlYXRzIiwicHJldklzUmV2ZXJ0aW5nIiwiZ2xvYmFsVGltZSIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicmV2ZXJzZWQiLCJyZXZlcnNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaXNBY3RpdmUiLCJldmVudENhbGxiYWNrIiwib25GdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIl90aGVuIiwiX0FuaW1hdGlvbiIsInNvcnRDaGlsZHJlbiIsIl9wcm90bzIiLCJmcm9tVG8iLCJmcm9tVmFycyIsInRvVmFycyIsImRlbGF5ZWRDYWxsIiwic3RhZ2dlclRvIiwib25Db21wbGV0ZUFsbCIsIm9uQ29tcGxldGVBbGxQYXJhbXMiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIm9uVXBkYXRlIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJnZXRCeUlkIiwiYW5pbWF0aW9ucyIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwidGwiLCJfdmFycyIsIl9vblN0YXJ0Iiwib25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJpbml0dGVkIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwic29mdCIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiIsInNldHRlciIsInN0cmluZ0ZpbHRlciIsImZ1bmNQYXJhbSIsInN0YXJ0TnVtcyIsImhhc1JhbmRvbSIsImZwIiwib3B0aW9uYWwiLCJjdXJyZW50VmFsdWUiLCJwYXJzZWRTdGFydCIsIl9zZXR0ZXJQbGFpbiIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJfcHJvY2Vzc1ZhcnMiLCJfcGFyc2VGdW5jT3JTdHJpbmciLCJwdExvb2t1cCIsInByaW9yaXR5Iiwib25VcGRhdGVQYXJhbXMiLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJjbGVhblZhcnMiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwiX3B0Q2FjaGUiLCJfb3AiLCJfb25Jbml0IiwiX3VwZGF0ZVByb3BUd2VlbnMiLCJzdGFydElzUmVsYXRpdmUiLCJwdENhY2hlIiwicm9vdFBUIiwibG9va3VwIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJwcm9wZXJ0eUFsaWFzZXMiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsIl90aGlzMyR2YXJzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicmVzZXRUbyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicmVuZGVyZXIiLCJfcHJvdG80IiwiVHdlZW5NYXgiLCJUd2VlbkxpdGUiLCJUaW1lbGluZUxpdGUiLCJUaW1lbGluZU1heCIsIl9tZWRpYSIsIl9lbXB0eUFycmF5IiwiX2xhc3RNZWRpYVRpbWUiLCJfZGlzcGF0Y2giLCJfb25NZWRpYUNoYW5nZSIsIm1hdGNoZXMiLCJxdWVyaWVzIiwiY29uZGl0aW9ucyIsImFueU1hdGNoIiwidG9nZ2xlZCIsIm1hdGNoTWVkaWEiLCJvbk1hdGNoIiwiQ29udGV4dCIsIl9yIiwiaXNSZXZlcnRlZCIsIl9wcm90bzUiLCJwcmV2U2VsZWN0b3IiLCJpZ25vcmUiLCJnZXRUd2VlbnMiLCJfdGhpczQiLCJvIiwiTWF0Y2hNZWRpYSIsImNvbnRleHRzIiwiX3Byb3RvNiIsImNvbmQiLCJtcSIsIl9sZW4yIiwiX2tleTIiLCJnZXRQcm9wZXJ0eSIsImdldHRlciIsImZvcm1hdCIsInF1aWNrU2V0dGVyIiwic2V0dGVycyIsInF1aWNrVG8iLCJfbWVyZ2UyIiwiaXNUd2VlbmluZyIsInJlZ2lzdGVyRWZmZWN0IiwiX3JlZjMiLCJlZmZlY3QiLCJwbHVnaW5zIiwiZXh0ZW5kVGltZWxpbmUiLCJwbHVnaW5OYW1lIiwicmVnaXN0ZXJFYXNlIiwicGFyc2VFYXNlIiwiZXhwb3J0Um9vdCIsImluY2x1ZGVEZWxheWVkQ2FsbHMiLCJtYXRjaE1lZGlhUmVmcmVzaCIsImZvdW5kIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImdsb2JhbHMiLCJnZXRDYWNoZSIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9hZGRNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJfYnVpbGRNb2RpZmllclBsdWdpbiIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwialF1ZXJ5IiwibWFrZUFycmF5IiwiaXNBcnJheUxpa2UiLCJJbWFnZXNMb2FkZWQiLCJlbGVtIiwib25BbHdheXMiLCJxdWVyeUVsZW0iLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJjaGVjayIsImFkZEVsZW1lbnRJbWFnZXMiLCJlbGVtZW50Tm9kZVR5cGVzIiwibm9kZU5hbWUiLCJhZGRJbWFnZSIsImFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzIiwiY2hpbGRJbWdzIiwiaW1nIiwicmVVUkwiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kIiwibG9hZGluZ0ltYWdlIiwiTG9hZGluZ0ltYWdlIiwiQmFja2dyb3VuZCIsInByb2dyZXNzZWRDb3VudCIsImhhc0FueUJyb2tlbiIsImNvbXBsZXRlIiwiaW1hZ2UiLCJpc0xvYWRlZCIsIm5vdGlmeSIsImRlYnVnIiwiaXNDb21wbGV0ZSIsImpxTWV0aG9kIiwiZ2V0SXNJbWFnZUNvbXBsZXRlIiwiY29uZmlybSIsIm5hdHVyYWxXaWR0aCIsInByb3h5SW1hZ2UiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwiY3VycmVudFNyYyIsImhhbmRsZUV2ZW50Iiwib25sb2FkIiwidW5iaW5kRXZlbnRzIiwib25lcnJvciIsIm1ha2VKUXVlcnlQbHVnaW4iLCJmbiIsImluc3RhbmNlIiwicHJvbWlzZSIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJfcG9wdWxhdGVkIiwiX2llIiwiX2ZpcmVmb3giLCJfb3BlcmEiLCJfd2Via2l0IiwiX2Nocm9tZSIsIl9pZV9yZWFsX3ZlcnNpb24iLCJfb3N4IiwiX3dpbmRvd3MiLCJfbGludXgiLCJfYW5kcm9pZCIsIl93aW42NCIsIl9pcGhvbmUiLCJfaXBhZCIsIl9uYXRpdmUiLCJfbW9iaWxlIiwiX3BvcHVsYXRlIiwidWFzIiwiYWdlbnQiLCJvcyIsIk5hTiIsImRvY3VtZW50TW9kZSIsInRyaWRlbnQiLCJ2ZXIiLCJVc2VyQWdlbnRfREVQUkVDQVRFRCIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsInVzZUhhc0ZlYXR1cmUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJpc0V2ZW50U3VwcG9ydGVkIiwiZXZlbnROYW1lU3VmZml4IiwiY2FwdHVyZSIsImlzU3VwcG9ydGVkIiwiUElYRUxfU1RFUCIsIkxJTkVfSEVJR0hUIiwiUEFHRV9IRUlHSFQiLCJzWCIsInNZIiwicFgiLCJwWSIsImRldGFpbCIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsImdldEV2ZW50VHlwZSIsIkFwcCIsImluaXROYXZpZ2F0aW9uIiwiZ2V0Q29udGVudCIsImNhbnZhcyIsIm9uUHJlbG9hZEVuZCIsImluaXRQYWdlcyIsInRlbXBsYXRlIiwicGFnZXMiLCJwYWdlIiwiZm9ybUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm9uQ2hhbmdlIiwiaHRtbCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkaXZDb250ZW50IiwibGlua3NJdGVtIiwibGlua0RhdGEiXSwic291cmNlUm9vdCI6IiJ9