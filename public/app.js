/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/animation/Paragraph.js":
/*!************************************!*\
  !*** ./app/animation/Paragraph.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Paragraph)
/* harmony export */ });
/* harmony import */ var _classes_Animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Animation */ "./app/classes/Animation.js");
/* harmony import */ var _utils_splittext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/splittext */ "./app/utils/splittext.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");



class Paragraph extends _classes_Animation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    this.spans = this.element.querySelectorAll('span span');
  }
  animateIn() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      duration: 0.4,
      opacity: 1
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.spans, {
      delay: 0.5,
      duration: 1.6,
      stagger: 0.2,
      ease: 'expo.inOut',
      y: '0%',
      opacity: 1
    });
  }
  animateOut() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      opacity: 0
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.spans, {
      delay: 0.6,
      duration: 1.6,
      opacity: 0,
      ease: 'expo.inOut',
      stagger: 0.1,
      y: '100%'
    });
  }
}

/***/ }),

/***/ "./app/animation/Scale.js":
/*!********************************!*\
  !*** ./app/animation/Scale.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scale": () => (/* binding */ Scale)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Scale {
  constructor(element) {
    this.elements = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(element);
    this.init();
  }
  init() {
    this.eventListener();
  }
  scaleUp(e) {
    const element = e.currentTarget;
    element.style.transform = `scale(1)`;
  }
  scaleDown(e) {
    const element = e.currentTarget;
    element.style.transform = `scale(.8)`;
  }
  eventListener() {
    this.elements.forEach(element => {
      element.addEventListener('mousedown', this.scaleDown.bind(this));
      element.addEventListener('mouseup', this.scaleUp.bind(this));
    });
  }
}

/***/ }),

/***/ "./app/animation/Shapes.js":
/*!*********************************!*\
  !*** ./app/animation/Shapes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Shapes)
/* harmony export */ });
class Shapes {
  constructor({
    position,
    height,
    width,
    blur,
    background,
    src
  }) {
    this.top = position.top === -1 ? undefined : position.top;
    this.left = position.left === -1 ? undefined : position.left;
    this.right = position.right === -1 ? undefined : position.right;
    this.bottom = position.bottom === -1 ? undefined : position.bottom;
    this.height = height;
    this.width = width;
    this.blur = blur;
    this.background = background;
    this.windowWidth = window.innerWidth;
    this.src = src;
    this.init();
    return this;
  }
  init() {
    this.createShape();
    this.onWindowResize();
    this.events();
  }
  createShape() {
    this.shapeFrame = document.createElement('DIV');
    this.shapeFrame.className = 'shapes';
    this.shapeFrame.id = 'shapes';
    this.testBreakpoint();
    // style
    //this.shapeFrame.style.borderRadius = this.height[2] + 'px'
    //this.shapeFrame.style.backgroundColor = this.background
    // this.shapeFrame.style.transition = 'all 8s'
    this.shapeFrame.style.position = 'absolute';

    // set shape position
    this.shapeFrame.style.top = this.top + 'px';
    this.shapeFrame.style.left = this.left + 'px';
    this.shapeFrame.style.right = this.right + 'px';
    this.shapeFrame.style.bottom = this.bottom + 'px';

    //Insert shape img
    this.shapeFrame.appendChild(this.createShapeImg(this.src));
  }
  createShapeImg(src) {
    this.shapeFrameImg = document.createElement('IMG');
    this.shapeFrameImg.setAttribute('src', src);
    this.shapeFrame.style.objectFit = "cover";
    this.shapeFrameImg.setAttribute('alt', 'blur frame');
    return this.shapeFrameImg;
  }
  animshapes(animationArr) {
    let index = 0;
    let animFlow = null;
    setInterval(() => {
      if (index >= animationArr.length) index = 0;
      animFlow = animationArr[index];
      this.shapeFrame.style.top = animFlow.to.top + 'px';
      this.shapeFrame.style.left = animFlow.to.left + 'px';
      this.shapeFrame.style.bottom = animFlow.to.bottom + 'px';
      this.shapeFrame.style.right = animFlow.to.right + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur}px)`;
      index++;
    }, 4000);
  }
  mountShape(parent) {
    parent.append(this.shapeFrame);
  }
  onWindowResize() {
    this.windowWidth = window.innerWidth;
    this.testBreakpoint();
  }
  testBreakpoint() {
    if (this.windowWidth >= 640 && this.windowWidth < 1024) {
      this.shapeFrame.style.height = this.height[1] + 'px';
      this.shapeFrame.style.width = this.width[1] + 'px';
    } else if (this.windowWidth >= 1024) {
      this.shapeFrame.style.height = this.height[2] + 'px';
      this.shapeFrame.style.width = this.width[2] + 'px';
    } else {
      this.shapeFrame.style.height = this.height[0] + 'px';
      this.shapeFrame.style.width = this.width[0] + 'px';
    }
  }
  events() {
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }
}

/***/ }),

/***/ "./app/animation/Title.js":
/*!********************************!*\
  !*** ./app/animation/Title.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Title)
/* harmony export */ });
/* harmony import */ var _classes_Animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Animation */ "./app/classes/Animation.js");
/* harmony import */ var _utils_splittext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/splittext */ "./app/utils/splittext.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");



class Title extends _classes_Animation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    (0,_utils_splittext__WEBPACK_IMPORTED_MODULE_1__["default"])(this.element, '<br>');
    this.spans = this.element.querySelectorAll('span span');
  }
  animateIn() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      duration: 0.4,
      opacity: 1
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.spans, {
      delay: 0.5,
      duration: 1.6,
      stagger: 0.3,
      ease: 'expo.inOut',
      y: '0%',
      opacity: 1
    });
  }
  animateOut() {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.element, {
      opacity: 0
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.spans, {
      delay: 0,
      duration: 1,
      opacity: 0,
      ease: 'expo.inOut',
      stagger: 0.1,
      y: '100%'
    });
  }
}

/***/ }),

/***/ "./app/animation/canvas.js":
/*!*********************************!*\
  !*** ./app/animation/canvas.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _Shapes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shapes */ "./app/animation/Shapes.js");



class Canvas extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.isMounted = false;
    this.shapeGradient = '#00FF47';
    this.blur = 80;
    this.init();
  }
  init() {
    this.mountFrame();
  }
  createFrame() {
    this.frame = document.createElement('DIV');
    this.frame.className = 'frame';
    this.frame.style.position = 'fixed';
    this.frame.style.top = 0;
    this.frame.style.left = 0;
    this.frame.style.width = `${window.innerWidth}px`;
    this.frame.style.height = `${window.innerHeight}px`;
    this.frame.style.filter = `blur(${this.blur}px)`;
    this.frame.style.zIndex = '-1';
    this.frame.id = 'frame';
  }
  mountFrame() {
    this.createFrame();
    const size = [480, 768, 1024];
    const shape1 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -300,
        right: -1,
        left: -300,
        bottom: -1
      },
      height: size,
      width: size,
      background: this.shapeGradient,
      src: 'images/blur-pic.png'
    });
    const shape2 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -1,
        right: -300,
        left: -1,
        bottom: -300
      },
      height: size,
      width: size,
      background: this.shapeGradient,
      src: 'images/blur-pic.png'
    });
    this.frame.appendChild(shape1.shapeFrame);
    this.frame.appendChild(shape2.shapeFrame);
    document.body.append(this.frame);
    this.eventListener();
    this.isMounted = true;
  }
  onResize(e) {
    e.preventDefault();
    this.mountedFrame = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame');
    this.mountedFrame.style.width = `${window.innerWidth}px`;
    this.mountedFrame.style.height = `${window.innerHeight}px`;
  }
  eventListener() {
    window.addEventListener('resize', this.onResize.bind(this));
  }
}

/***/ }),

/***/ "./app/classes/Animation.js":
/*!**********************************!*\
  !*** ./app/classes/Animation.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Animation)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components */ "./app/classes/Components.js");

class Animation extends _Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.element = element;
    this.createObserver();
  }
  createObserver() {
    this.observer = new window.IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.animateIn();
        } else {
          this.animateOut();
        }
      });
    });
    this.observer.observe(this.element);
  }
}

/***/ }),

/***/ "./app/classes/Components.js":
/*!***********************************!*\
  !*** ./app/classes/Components.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Components)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements */ "./app/classes/elements.js");


class Components extends (events__WEBPACK_IMPORTED_MODULE_0___default()) {
  constructor(componentName) {
    super();
    this.selectorChildrens = _elements__WEBPACK_IMPORTED_MODULE_1__["default"][componentName];
    this.root = this.handleElementObject(_elements__WEBPACK_IMPORTED_MODULE_1__["default"]);
    this.elements = this.getElements(this.selectorChildrens);
  }
  getElements(childrens) {
    const elements = {};
    for (const keys in childrens) {
      const value = childrens[keys];
      if (value instanceof Object) {
        elements[keys] = this.handleElementObject(value);
      } else {
        elements[keys] = [...document.querySelectorAll(value)];
        if (elements[keys].length === 0) {
          elements[keys] = null;
        } else if (elements[keys].length === 1) {
          elements[keys] = document.querySelector(value);
        }
      }
    }
    return elements;
  }
  handleElementObject(object) {
    let buildedObjects = {};
    for (const key in object) {
      const value = object[key];
      if (value instanceof Object) {
        buildedObjects[key] = this.handleElementObject(value);
      } else {
        buildedObjects[key] = [...document.querySelectorAll(value)];
        if (buildedObjects[key].length === 0) {
          buildedObjects[key] = null;
        } else if (buildedObjects[key].length === 1) {
          buildedObjects[key] = document.querySelector(value);
        }
      }
    }
    return buildedObjects;
  }
}

/***/ }),

/***/ "./app/classes/Pages.js":
/*!******************************!*\
  !*** ./app/classes/Pages.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pages)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _animation_Title__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../animation/Title */ "./app/animation/Title.js");
/* harmony import */ var _animation_Paragraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../animation/Paragraph */ "./app/animation/Paragraph.js");
/* harmony import */ var _animation_Scale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../animation/Scale */ "./app/animation/Scale.js");

//import Smoothscroll from '../utils/Smoothscroll'




//import { ResizeObserver } from 'resize-observer'

class Pages {
  constructor(elements) {
    this.element = elements;
    this.animateOut = gsap__WEBPACK_IMPORTED_MODULE_5__["default"].timeline();
    this.wrapper = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper');
  }
  init() {
    this.scaleAnimation = new _animation_Scale__WEBPACK_IMPORTED_MODULE_4__.Scale("[data-animation='scale']");
    document.body.style.overflow = 'visible';
    document.body.style.position = 'relative';
  }
  create() {
    const template = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('[data-hide]');
    if (!template) return;
    template.forEach(wrapper => {
      const attributes = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$Attribute)(wrapper, 'data-hide').split(',');
      if (!attributes) return;
      attributes.forEach(attr => {
        const component = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)(`.${attr.trim()}`);
        if (!component) return;
        component.style.display = 'none';
      });
    });
  }
  createAnimation() {
    this.elements = new _Components__WEBPACK_IMPORTED_MODULE_0__["default"](this.element).elements;
    if (this.elements && this.elements.titles && this.elements.paragraphes) {
      this.elements.titles.forEach(t => {
        new _animation_Title__WEBPACK_IMPORTED_MODULE_2__["default"](t);
      });
      this.elements.paragraphes.forEach(p => {
        new _animation_Paragraph__WEBPACK_IMPORTED_MODULE_3__["default"](p);
      });
    }
  }
  show() {
    this.createAnimation();
    this.animateOut.to((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper'), {
      duration: 2,
      ease: 'power1.out',
      autoAlpha: 1,
      onComplete: () => {
        console.log('page was shown');
      }
    });
  }
  hide() {
    console.log('hidden current page');
    this.animateOut.to((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper'), {
      duration: 1,
      ease: 'power1.in',
      autoAlpha: 0,
      onComplete: () => {
        console.log('page was hide');
      }
    });
  }
}

/***/ }),

/***/ "./app/classes/elements.js":
/*!*********************************!*\
  !*** ./app/classes/elements.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  preloader: {
    element: '.preloader',
    text: '.preloader__text__item',
    container: '.preloader__text',
    loader: '.preloader__loader__bar',
    wrapper: '.preloader__text__wrapper'
  },
  navigation: {
    header: '.header',
    navList: '.menu__links__item',
    content: '.mobile-header__container',
    menu: '.menu-mobile',
    openMenu: '.menu-button-open'
  },
  player: {
    button: {
      expand: '.player__button.expand',
      close: '.player__button.close',
      play: "[data-icon='rob-play']",
      next: "[data-icon='rob-forward']",
      prev: "[data-icon='rob-backward']",
      toggler: '.player__cta'
    },
    coverContainer: '.player__cover',
    cover: '.player__cover img',
    self: '.player',
    media: '.player__media',
    artist: '.player__detail__name',
    title: '.player__detail__title',
    timer: {
      startTime: '.player__timer__times__starttime',
      endTime: '.player__timer__times__endtime',
      range: '.player__timer__progress__range',
      progress: '.player__timer__progress__bar',
      preload: '.player__timer__progress__elapse'
    },
    volume: {
      grapper: '.player__volume__grap',
      slider: '.player__volume__slider',
      container: '.player__volume'
    }
  },
  form: {
    connect: {
      form: '.connect__form',
      button: '.connect__form .button',
      name: '.input__name',
      mail: '.input__email',
      message: '#message',
      nameAlert: '.connect__form .input__alert-name',
      emailAlert: '.connect__form .input__alert-email',
      messageAlert: '.connect__form .input__alert-message',
      alert: '.connect__form .input__alert'
    },
    modal: {
      form: '.modal__form',
      button: '.modal__submit__button',
      name: '.usersProjectsName',
      mail: '.usersProjectsEmail',
      message: '.usersProjectsIdea',
      nameAlert: '.modal__form__wrapper .input__alert-name',
      emailAlert: '.modal__form__wrapper .input__alert-email',
      messageAlert: '.modal__form__wrapper .input__alert-message',
      alert: '.modal__form__wrapper .input__alert',
      dataServiceInput: '.modal__data-services'
    },
    alert: '.alert'
  },
  slider: {
    button: {
      prev: '#rb-slider-button-prev',
      next: '#rb-slider-button-next'
    },
    wrapper: '.rb-slider-wrapper',
    items: '.rb-slider-items',
    container: '.rb-slider'
  },
  services: {
    buttons: '.services__cta'
  },
  modal: {
    self: '.modal',
    dataServiceInput: '.modal__data-services',
    button: '.modal__button button'
  },
  images: 'img',
  about: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  },
  home: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  },
  project: {
    titles: "[data-animation='title']",
    paragraphes: "[data-animation='paragraph']"
  }
});

/***/ }),

/***/ "./app/components/Alert.js":
/*!*********************************!*\
  !*** ./app/components/Alert.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Alert)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Alert {
  constructor(message, type) {
    this.message = message;
    this.type = type;
    this.init();
  }
  init() {
    this.create();
    this.self = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$)('.alert');
  }
  create() {
    this.div = document.createElement('DIV');
    this.div.className = 'alert';
    if (this.type === 'success') this.div.classList.add('alert__success');else this.div.classList.add('alert__error');

    // Create alert__wrapper
    const wrapper = createElement('DIV', 'alert__wrapper');
    // content
    const content = createElement('DIV', 'alert__content');
    // icons
    const icon = createElement('SPAN', 'alert__icon');
    // Message
    const message = createElement('P', 'alert__message');
    message.innerText = this.message;
    // Close icon
    const closeIcon = createElement('SPAN', 'alert__closeIcon');
    const i = createElement('I', 'rob-close');
    closeIcon.append(i);
    closeIcon.onclick = () => {
      this.hide();
      this.destroy();
    };

    // appned child
    content.append(icon, message);
    wrapper.append(content, closeIcon);
    this.div.append(wrapper);
    document.body.prepend(this.div);
    this.self = this.div;
    this.hide();
    function createElement(tag, className) {
      const element = document.createElement(tag);
      element.className = className;
      return element;
    }
  }
  show() {
    setTimeout(() => {
      this.self.style.right = '.5rem';
    }, 1000);
  }
  hide() {
    this.self.style.right = '-100%';
    this.self.transition = 'right .6s';
  }
  destroy() {
    document.body.removeChild(this.div);
  }
}

/***/ }),

/***/ "./app/components/Navigation.js":
/*!**************************************!*\
  !*** ./app/components/Navigation.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Navigation)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");


class Navigation extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('navigation');
    //this.init()
    this.eventsListener();
  }
  init() {
    const defaultSource = 'images/previews/img-1';
    this.root.navigation.previewImg.src = `${defaultSource}.png`;
    this.setActiveLinkStyles();
  }
  setActiveLinkStyles() {
    const links = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('[data-links]');
    const url = window.location.href;
    let parent;
    links.forEach(link => {
      if (link.href === url) {
        parent = link.parentNode;
        parent.classList.add('menu__links__item-active');
      }
    });
  }
  onMouseHoverLinks(e) {
    const src = e.currentTarget.getAttribute('data-snap-image');
    this.root.navigation.previewImg.src = `${src}.png`;
  }
  openMenu(e) {
    e.preventDefault();
    this.root.navigation.content.classList.toggle('menu-visible');
    this.root.navigation.menu.classList.toggle('menu-mobile-visible');
  }
  closeMenu(e) {
    e.preventDefault();
    this.root.navigation.content.classList.remove('menu-visible');
  }
  eventsListener() {
    /*this.root.navigation.navList.forEach((link) => {
      link.addEventListener('mouseover', this.onMouseHoverLinks.bind(this))
    })*/

    if (!this.root.navigation.openMenu) return;
    this.root.navigation.openMenu.addEventListener('click', this.openMenu.bind(this));
  }
}

/***/ }),

/***/ "./app/components/Preloader.js":
/*!*************************************!*\
  !*** ./app/components/Preloader.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Preloader)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! imagesloaded */ "./node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_1__);


//import autoBind from 'auto-bind'

class Preloader extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('preloader');
    this.length = 0;
    this.startIndex = 1;
    this.size = {
      height: Number(this.elements.text[0].getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.createPreloader();
    this.addEventListener();
  }
  createPreloader() {
    if (this.root.images) {
      const imgLoad = imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(document.body);
      imgLoad.on('progress', () => {
        this.onProgress(imgLoad.images.length);
      });
      imgLoad.on('done', () => {
        //   setTimeout(() => {
        //     this.onLoad()
        //   }, 5000)
        this.onLoad();
      });
    }
  }
  animPreloaderText(e) {
    e.preventDefault();
    const length = this.elements.wrapper.children.length;

    //Give the wrapper the height of the text
    this.elements.container.style.height = `${this.size.height}px`;
    this.elements.container.style.width = `${this.size.width}px`;
    window.setInterval(() => {
      if (this.startIndex < length) {
        this.elements.wrapper.style.top = `${(-this.size.height - this.size.gap) * this.startIndex}px`;
        this.startIndex++;
      }
    }, 1000);
  }
  onProgress(length) {
    this.length += 1;
    const percent = this.length / length;
    this.elements.loader.style.width = `${Math.round(percent * 100)}%`;
  }
  onLoad() {
    this.emit('completed');
  }
  onResize(e) {
    this.size = {
      height: Number(this.elements.text[0].getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.animPreloaderText(e);
  }
  addEventListener() {
    window.addEventListener('DOMContentLoaded', this.animPreloaderText.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }
  destroy() {
    this.elements.element.parentNode.removeChild(this.elements.element);
  }
}

/***/ }),

/***/ "./app/components/Services.js":
/*!************************************!*\
  !*** ./app/components/Services.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Services)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");

class Services extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('services');
    this.init();
  }
  init() {
    this.buttons = [...this.elements.buttons];
    this.eventListener();
  }
  onClick(e) {
    e.preventDefault();
    const button = e.currentTarget;
    this.type = button.getAttribute('data-service');
    console.log(button);
    this.root.modal.dataServiceInput.value = this.type;
    this.root.modal.self.classList.add('modal-visible');
  }
  closeModal(e) {
    e.preventDefault();
    if (this.root.modal.self.classList.contains('modal-visible')) {
      this.root.modal.self.classList.remove('modal-visible');
    }
  }
  eventListener() {
    this.buttons.forEach(button => {
      button.addEventListener('click', this.onClick.bind(this));
    });
    this.root.modal.button.addEventListener('click', this.closeModal.bind(this));
  }
}

/***/ }),

/***/ "./app/components/Tabs.js":
/*!********************************!*\
  !*** ./app/components/Tabs.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Tabs {
  __defaults = {
    defaultIndex: 0
  };
  __selectors = {
    list: {
      container: '.tabs__list',
      childrens: '.tabs__items',
      buttons: '.tabs__item'
    },
    panels: {
      container: '.tabs__panels',
      childrens: '.tabs__panel'
    }
  };
  __state = {
    active: 'active',
    selected: 'selected'
  };
  __attribubes = {
    button: 'data-tabs-index',
    panel: 'data-tabs-panel',
    buttonState: 'data-tabs-index-active',
    pannelState: 'data-tabs-panel-active'
  };
  constructor({
    defaultIndex
  }) {
    this.props = Object.assign({
      defaultIndex
    }, this.__defaults);
    this.buttons = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(`${this.__selectors.list.buttons}`);
    this.panels = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$All)(`${this.__selectors.panels.childrens}`);
    this.init();
    this.setIndex();
    this.eventsListeners();
  }
  init() {
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, true);
    this.buttons[this.props.defaultIndex].classList.add('tabs__item-style-active');
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, true);
    this.panels[this.props.defaultIndex].classList.add('tabs__panel-active');
  }
  setIndex() {
    this.buttons.forEach((button, index) => {
      button.setAttribute(this.__attribubes.button, index);
      button.setAttribute(this.__attribubes.buttonState, false);
    });
    this.panels.forEach((panel, index) => {
      panel.setAttribute(this.__attribubes.panel, index);
      panel.setAttribute(this.__attribubes.pannelState, false);
    });
  }
  onClick(e) {
    e.preventDefault();
    const target = e.currentTarget;
    const index = target.getAttribute(this.__attribubes.button);

    //unset previous active element
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, false);
    this.buttons[this.props.defaultIndex].classList.remove('tabs__item-style-active');
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, false);
    this.panels[this.props.defaultIndex].classList.remove('tabs__panel-active');
    this.props.defaultIndex = index;

    //active current  button and tabs
    this.panels[this.props.defaultIndex].setAttribute(this.__attribubes.pannelState, true);
    this.panels[this.props.defaultIndex].classList.add('tabs__panel-active');
    this.buttons[this.props.defaultIndex].setAttribute(this.__attribubes.buttonState, true);
    this.buttons[this.props.defaultIndex].classList.add('tabs__item-style-active');
  }
  eventsListeners() {
    this.buttons.forEach(button => {
      button.addEventListener('click', this.onClick.bind(this));
    });
  }
}

/***/ }),

/***/ "./app/components/index.js":
/*!*********************************!*\
  !*** ./app/components/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Canvas": () => (/* reexport safe */ _animation_canvas__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "FormHandler": () => (/* reexport safe */ _config_forms__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "Navigation": () => (/* reexport safe */ _Navigation__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "Player": () => (/* reexport safe */ _widgets_music_player_player__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "Preloader": () => (/* reexport safe */ _Preloader__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "Smoothscroll": () => (/* reexport safe */ _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _Preloader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Preloader */ "./app/components/Preloader.js");
/* harmony import */ var _widgets_music_player_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets/music-player/player */ "./app/components/widgets/music-player/player.js");
/* harmony import */ var _Navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Navigation */ "./app/components/Navigation.js");
/* harmony import */ var _config_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/forms */ "./app/config/forms.js");
/* harmony import */ var _animation_canvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../animation/canvas */ "./app/animation/canvas.js");
/* harmony import */ var _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Smoothscroll */ "./app/utils/Smoothscroll.js");








/***/ }),

/***/ "./app/components/slider/Slider.js":
/*!*****************************************!*\
  !*** ./app/components/slider/Slider.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Slider)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Components */ "./app/classes/Components.js");

class Slider extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('slider');
    this.init();
  }
  init() {
    if (!this.elements.items) return;
    this.child = [...this.elements.items.children];
    this.index = 1;
    this.padding = 24;
    this.currentPosition = 0;
    this.treshold = 0;
    this.dragIntervall = 80;
    this.setChildWidth();
    this.setPosition();
    this.eventListener();
  }
  setChildWidth() {
    this.child.forEach(item => {
      item.style.flex = 'none';
      item.style.width = `${window.innerWidth * 0.8}px`;
    });
  }
  setPosition() {
    this.width = this.elements.items.getBoundingClientRect().width;
    this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
    this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    return this.currentPosition;
  }
  next() {
    if (this.index >= this.child.length - 1) return;
    this.index++;
    if (this.index === 2) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.currentPosition - this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }
  prev() {
    if (this.index <= 0) {
      this.index = 0;
      return;
    }
    this.index--;
    if (this.index === 0) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }
  onMouseDown(e) {
    e.preventDefault();
    this.elements.wrapper.style.cursor = 'grabbing';
    this.isDown = true;
    this.dragStart = e.x;
    this.dragStarty = e.y;
  }
  onMouseMove(e) {
    e.preventDefault();
    if (!this.isDown) return;
    this.treshold = e.x - this.dragStart;
    this.elements.items.style.transform = `translate3D(${this.currentPosition + this.treshold}px, 0, 0)`;
  }
  onMouseUp(e) {
    e.preventDefault();
    this.elements.wrapper.style.cursor = 'grab';
    if (this.treshold > 0 && this.treshold >= this.dragIntervall) {
      this.prev();
      console.log('prev');
    } else if (this.treshold < 0 && this.treshold <= -this.dragIntervall) {
      this.next();
      console.log('next');
    } else {
      this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    }
    this.isDown = false;
  }
  onWindowResize(e) {
    e.preventDefault();
    this.setChildWidth();
    this.setPosition();
  }
  eventListener() {
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
    this.elements.wrapper.addEventListener('mousedown', this.onMouseDown.bind(this));
    this.elements.wrapper.addEventListener('mouseover', this.onMouseMove.bind(this));
    this.elements.wrapper.addEventListener('mouseup', this.onMouseUp.bind(this));
    addEventListener('resize', this.onWindowResize.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/MediaManager.js":
/*!*************************************************************!*\
  !*** ./app/components/widgets/music-player/MediaManager.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MediaManager)
/* harmony export */ });
// eslint-disable-next-line no-undef
const data = __webpack_require__(/*! ../../../../datas/sounds.json */ "./datas/sounds.json");
class MediaManager {
  constructor() {
    this.data = data;
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/Timer.js":
/*!******************************************************!*\
  !*** ./app/components/widgets/music-player/Timer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Timer)
/* harmony export */ });
class Timer {
  constructor(starttime, endtime, range, progress, preloader, media) {
    this.elements = {
      starttime,
      endtime,
      range,
      preloader,
      progress
    };
    this.media = media;
    this.#init();
  }
  #init() {
    this.#addEventListener();
  }
  #isPlay() {
    console.log(this.media.currentTime);
    console.log('is start play');
  }
  #onPause() {
    console.log('Pause');
  }
  isEnded(e) {
    console.log(e);
  }
  #setTime() {
    this.hours = Math.floor(this.media.currentTime / 3600);
    this.minutes = Math.floor(this.media.currentTime / 60);
    this.seconds = Math.floor(this.media.currentTime - this.minutes * 60);
    this.hoursValue = this.minutesValue = this.secondsValue = 0;
    if (this.hours <= 0) {
      this.hoursValue = `0${this.hours}`;
    } else {
      this.hoursValue = this.hours;
    }
    if (this.minutes < 10) {
      this.minutesValue = `0${this.minutes}`;
    } else {
      this.minutesValue = this.minutes;
    }
    if (this.seconds < 10) {
      this.secondsValue = `0${this.seconds}`;
    } else {
      this.secondsValue = this.seconds;
    }
    this.elements.starttime.textContent = `${this.minutesValue} : ${this.secondsValue}`;
    this.#updateProgress();
  }
  #updateProgress() {
    this.elements.range.value = this.media.currentTime;
    this.ratio = this.elements.range.value / this.elements.range.max;
    this.elements.progress.style.width = `${this.ratio * 100}%`;
  }
  #setFullTime() {
    const hours = Math.floor(this.media.duration / 3600);
    const minutes = Math.floor(this.media.duration / 60);
    const seconds = Math.floor(this.media.duration - minutes * 60);
    if (hours <= 0) {
      this.elements.endtime.textContent = `${minutes <= 9 ? '0' + minutes : minutes} : ${seconds <= 9 ? '0' + seconds : seconds}`;
    } else {
      this.elements.endtime.textContent = `${hours}:${minutes}:${seconds}`;
    }
  }
  #onTimeChange() {
    this.media.currentTime = this.elements.range.value;
    this.#setTime();
  }
  #progress() {
    const duration = this.media.duration;
    if (duration > 0) {
      for (let i = 0; i < this.media.buffered.length; i++) {
        if (this.media.buffered.start(this.media.buffered.length - 1 - i) < this.media.currentTime) {
          console.log(this.media.buffered.end(this.media.buffered.length - 1 - i / duration) * 100);
          this.elements.preloader.style.width = this.media.buffered.end(this.media.buffered.length - 1 - i) / duration * 100 + '%';
          break;
        }
      }
    }
  }
  #metaDataLoaded() {
    this.#setFullTime();
    this.elements.range.max = Math.floor(this.media.duration);
    this.elements.range.addEventListener('input', this.#onTimeChange.bind(this));
    this.media.addEventListener('play', this.#isPlay.bind(this));
    this.media.addEventListener('pause', this.#onPause.bind(this));
    this.media.addEventListener('ended', this.isEnded.bind(this));
    this.media.addEventListener('timeupdate', this.#setTime.bind(this));
  }
  #addEventListener() {
    this.media.addEventListener('progress', this.#progress.bind(this));
    this.media.addEventListener('loadedmetadata', this.#metaDataLoaded.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/player.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/player.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Player)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _MediaManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MediaManager */ "./app/components/widgets/music-player/MediaManager.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Timer */ "./app/components/widgets/music-player/Timer.js");
/* harmony import */ var _volume__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./volume */ "./app/components/widgets/music-player/volume.js");




class Player extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('player');
    this.init();
  }
  init() {
    this.isExpand = false;
    this.src = this.elements.media.getAttribute('src');
    this.media = this.elements.media;
    this.length = 0;
    this.randomId = 0;
    this.sound = null;
    this.icon = this.elements.button.play.querySelector('i');
    this.desktop = 768;
    this.media.volume = this.volume = 26 / 100;
    this.mediaManager = new _MediaManager__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = this.mediaManager.data.length;
    this.randomId = Math.floor(Math.random() * this.length);

    //Events

    this.close();
    if (window.innerWidth > this.desktop) this.show();
    this.componentsHandler(this.randomId);
    this.volumeHandler(this.media);
    this.eventsListerner();
  }
  expand() {
    if (this.root.player.coverContainer.classList.contains('isExpand')) {
      this.root.player.button.expand.querySelector('span').textContent = 'Expand';
      this.root.player.coverContainer.classList.remove('isExpand');
      this.root.player.coverContainer.style.height = '0px';
    } else {
      this.root.player.coverContainer.classList.add('isExpand');
      this.root.player.button.expand.querySelector('span').textContent = 'Reduce';
      this.root.player.coverContainer.style.height = '180px';
    }
  }
  close() {
    this.elements.self.classList.add('isHidden');
    this.elements.button.toggler.style.display = 'flex';
  }
  show() {
    this.elements.self.classList.remove('isHidden');
    this.elements.button.toggler.style.display = 'none';
  }
  componentsHandler(id) {
    this.sound = this.mediaManager.data[id];
    this.media.src = this.sound.link;
    this.setComponents(this.sound);
    this.timerHandler(this.media);
  }
  setComponents(sound) {
    this.coverHandler(sound);
    this.setSoundDetails(sound);
  }
  coverHandler(sound) {
    this.elements.cover.src = sound.album.cover;
  }
  setSoundDetails(sound) {
    this.elements.artist.innerText = sound.artist.name;
    this.elements.title.innerText = sound.title;
  }
  play() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.play();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
      this.media.pause();
    }
  }
  pause() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.pause();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
    }
  }
  stop() {
    this.media.pause();
    this.media.currentTime = 0;
    this.elements.button.play.setAttribute('data-icon', 'rob-play');
    this.icon.setAttribute('class', 'rob-play');
  }
  next() {
    this.randomId++;
    if (this.randomId > this.length - 1) this.randomId = 0;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }
  prev() {
    this.randomId--;
    if (this.randomId < 0) this.randomId = this.length - 1;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }
  timerHandler(media) {
    this.time = new _Timer__WEBPACK_IMPORTED_MODULE_2__["default"](this.elements.timer.startTime, this.elements.timer.endTime, this.elements.timer.range, this.elements.timer.progress, this.elements.timer.preload, media);
  }
  volumeHandler(sound) {
    this.volume = new _volume__WEBPACK_IMPORTED_MODULE_3__["default"](this.elements.volume.container, this.elements.volume.grapper, this.elements.volume.slider, sound, this.volume * 100);
  }
  onWindowResize(e) {
    const size = window.innerWidth;
    if (size > this.desktop) {
      this.show();
    } else {
      this.close();
    }
  }
  onEnded(e) {
    this.next();
  }
  eventsListerner() {
    this.elements.button.expand.addEventListener('click', this.expand.bind(this));
    this.elements.button.close.addEventListener('click', this.close.bind(this));
    // Control
    this.elements.button.play.addEventListener('click', this.play.bind(this));
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
    this.elements.button.toggler.addEventListener('click', this.show.bind(this));
    this.media.addEventListener('ended', this.onEnded.bind(this));
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }
}

/***/ }),

/***/ "./app/components/widgets/music-player/volume.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/volume.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Volume)
/* harmony export */ });
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/function */ "./app/utils/function.js");

class Volume {
  constructor(container, grapper, slider, media, volume) {
    this.container = container;
    this.grapper = grapper;
    this.containerBottom = this.container.getBoundingClientRect().bottom;
    this.containerHeight = this.container.getBoundingClientRect().height;
    this.containerTop = this.container.getBoundingClientRect().top;
    this.slider = slider;
    this.media = media;
    this.initialValue = volume | 26;
    this.position = {
      current: 0,
      target: 0
    };
    this.step = 0.8;
    this.slider.style.height = `calc(${this.initialValue}%)`;
    this.media.volume = (0,_utils_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.initialValue / this.containerHeight, 0, 1);
    this.onPointerDownHandler = this.onPointerDown.bind(this);
    this.onPointerMoveHandler = this.onPointerMove.bind(this);
    this.onPointerUpHandler = this.onPointerUp.bind(this);
    this.addEventListener();
  }
  onPointerDown(e) {
    e.stopPropagation();
    this.position.current = e.clientY;
    document.body.style.cursor = 'ns-resize';
    window.addEventListener('pointerup', this.onPointerUpHandler);
    window.addEventListener('pointermove', this.onPointerMoveHandler);
  }
  onPointerMove(e) {
    e.preventDefault();
    e.stopPropagation();
    this.position.target = e.clientY;
    const distance = this.position.current - this.position.target;
    console.log(distance);
    if (distance !== 0) {
      if (distance > 0) {
        this.initialValue += this.step;
      } else {
        this.initialValue -= this.step;
      }
      this.slider.style.height = `calc(${(0,_utils_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.initialValue, 0, 100)}%)`;
      this.media.volume = (0,_utils_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.initialValue / this.containerHeight, 0, 1);
    }
    this.position.current = this.position.target;
  }
  onPointerUp(e) {
    e.preventDefault();
    e.stopPropagation();
    this.position.current = e.clientY;
    document.body.style.cursor = 'default';
    window.removeEventListener('pointerdown', this.onPointerDownHandler);
    window.removeEventListener('pointermove', this.onPointerMoveHandler);
  }
  addEventListener() {
    this.container.addEventListener('pointerdown', this.onPointerDownHandler);
  }
}

/***/ }),

/***/ "./app/config/forms.js":
/*!*****************************!*\
  !*** ./app/config/forms.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormHandler)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _components_Alert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Alert */ "./app/components/Alert.js");
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/function */ "./app/utils/function.js");



class FormHandler extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(type, url, method) {
    super('form');
    this.formType = type;
    this.method = method;
    this.url = `${window.location.origin}/${url}`;
    this.elements = this.elements[this.formType];
    this.val = 0;
    this.init();
  }
  init() {
    this.eventListener();
  }

  // SendToDb () {}

  async fetch(url, method, data) {
    const options = {
      method,
      mode: 'no-cors',
      body: data
    };
    const res = await fetch(url, options);
    if (res.status === 200) {
      // success
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
        this.elements.form.reset();
      });
    } else {
      // error
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
      });
    }
  }
  sendData(e) {
    e.preventDefault();
    const validNumber = this.verifyData(this.elements.mail, this.elements.name, this.elements.message);
    if (!validNumber) return;
    this.elements.alert.forEach(el => {
      el.innerText = '';
    });
    const formElements = new URLSearchParams(new FormData(this.elements.form));
    this.fetch(this.url, this.method, formElements);
  }
  verifyData(mail, name, message) {
    this.val = 0;
    // email
    if ((0,_utils_function__WEBPACK_IMPORTED_MODULE_2__.validEmail)(mail.value)) {
      this.val++;
    } else if (mail.value === '') {
      this.elements.emailAlert.innerText = 'Required*';
    } else {
      this.elements.emailAlert.innerText = 'This email is not valid';
    }

    // name
    if (name.value === '') {
      this.elements.nameAlert.innerText = 'Required*';
    } else {
      this.val++;
    }

    // message
    if (message.value === '') {
      this.elements.messageAlert.innerText = 'Required*';
    } else {
      this.val++;
    }
    return this.val === 3;
  }
  eventListener() {
    if (!this.elements.button) return;
    this.elements.button.addEventListener('click', this.sendData.bind(this));
  }
}

/***/ }),

/***/ "./app/factories/pagesFactory.js":
/*!***************************************!*\
  !*** ./app/factories/pagesFactory.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageFactory)
/* harmony export */ });
/* harmony import */ var _pages_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pages/index */ "./app/pages/index.js");

let PAGES = {};
for (let [key, value] of Object.entries(_pages_index__WEBPACK_IMPORTED_MODULE_0__)) {
  PAGES[key] = value;
}
class PageFactory {
  static createInstance(className, datas) {
    const elementName = PAGES[className];
    const element = elementName ? new elementName(datas ? datas : void 0) : null;
    return element;
  }
}
PageFactory.createInstance('Home');

/***/ }),

/***/ "./app/pages/about.js":
/*!****************************!*\
  !*** ./app/pages/about.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ About)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Pages */ "./app/classes/Pages.js");

class About extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('about');
  }
  create() {
    super.create();
  }
}

/***/ }),

/***/ "./app/pages/home.js":
/*!***************************!*\
  !*** ./app/pages/home.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Home)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Pages */ "./app/classes/Pages.js");
/* harmony import */ var _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/slider/Slider */ "./app/components/slider/Slider.js");
/* harmony import */ var _components_Services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Services */ "./app/components/Services.js");
/* harmony import */ var _config_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/forms */ "./app/config/forms.js");




class Home extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('home');
  }
  create() {
    super.create();
    new _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__["default"]();
    new _components_Services__WEBPACK_IMPORTED_MODULE_2__["default"]();
    new _config_forms__WEBPACK_IMPORTED_MODULE_3__["default"]('modal', 'projects/usersProjects', 'POST');
  }
}

/***/ }),

/***/ "./app/pages/index.js":
/*!****************************!*\
  !*** ./app/pages/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "About": () => (/* reexport safe */ _about__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "Home": () => (/* reexport safe */ _home__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "Photographies": () => (/* reexport safe */ _photographies__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "Project": () => (/* reexport safe */ _project__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./home */ "./app/pages/home.js");
/* harmony import */ var _about__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./about */ "./app/pages/about.js");
/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./project */ "./app/pages/project.js");
/* harmony import */ var _photographies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./photographies */ "./app/pages/photographies.js");






/***/ }),

/***/ "./app/pages/photographies.js":
/*!************************************!*\
  !*** ./app/pages/photographies.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Photographies)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Pages */ "./app/classes/Pages.js");

class Photographies extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('photographies');
  }
  create() {
    console.log('photographies page');
    super.create();
  }
}

/***/ }),

/***/ "./app/pages/project.js":
/*!******************************!*\
  !*** ./app/pages/project.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Project)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Pages */ "./app/classes/Pages.js");
/* harmony import */ var _components_Tabs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Tabs */ "./app/components/Tabs.js");


class Project extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('project');
  }
  create() {
    this.tabs = new _components_Tabs__WEBPACK_IMPORTED_MODULE_1__["default"]({
      defaultIndex: 1
    });
    super.create();
  }
}

/***/ }),

/***/ "./app/utils/Smoothscroll.js":
/*!***********************************!*\
  !*** ./app/utils/Smoothscroll.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Smoothscroll)
/* harmony export */ });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./app/utils/function.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! normalize-wheel */ "./node_modules/normalize-wheel/index.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(normalize_wheel__WEBPACK_IMPORTED_MODULE_1__);


class Smoothscroll {
  __defaultOptions = {
    direction: 'v',
    // v: vertical or  v- : vertical bottom to top;  h: Horizontal or h- horizontal right to left
    smooth: 0.1,
    // Smooth amount -> Lerp function
    startedPoint: 0
  };
  constructor(element, opts) {
    this.element = element;
    this.__defaultOptions.startedPoint = opts.startedPoint || 0;
    this.smoothOptions = Object.assign(this.__defaultOptions, {
      ...opts
    });
    this.init();
  }
  init() {
    this.scroll = {
      current: 0,
      target: 0,
      limit: 0
    };
    this.offsetHeight = 0;
    this.dimensionHandler();
    console.log(this.scroll.limit);
    this.addListener();
  }
  dimensionHandler() {
    this.offsetHeight = this.element.getBoundingClientRect().top;
    this.scroll.limit = this.element.getBoundingClientRect().height + this.offsetHeight - window.innerHeight;
  }
  onMouseWheel(e) {
    const event = normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default()(e);
    if (this.smoothOptions.direction === 'v' || this.smoothOptions.direction === 'v-') {
      this.scroll.target += event.pixelY;
    } else if (this.smoothOptions.direction === 'h' || this.smoothOptions.direction === 'h-') {
      this.scroll.target += event.pixelX;
    }
  }
  onResize() {
    this.offsetHeight = this.element.getBoundingClientRect().top;
    this.scroll.limit = this.element.clientHeight + this.offsetHeight - window.innerHeight;
  }
  addListener() {
    window.addEventListener('wheel', this.onMouseWheel.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }
  update() {
    console.log(this.scroll.limit);
    this.scroll.target = (0,_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.scroll.target, 0, this.scroll.limit);
    this.scroll.current = (0,_function__WEBPACK_IMPORTED_MODULE_0__.lerp)(this.scroll.current, this.scroll.target, this.smoothOptions.smooth);
    if (this.scroll.current < 0.01) {
      this.scroll.current = 0;
    }
    this.translateByCase();
    window.requestAnimationFrame(this.update.bind(this));
  }
  translateByCase() {
    switch (this.smoothOptions.direction) {
      case 'v':
        this.element.style.transform = `translate3D(0, -${Math.floor(this.scroll.current)}px , 0)`;
        break;
      case 'v-':
        this.element.style.transform = `translate3D(0, ${Math.floor(this.scroll.current)}px, 0)`;
        break;
      case 'h':
        this.element.style.transform = `translateX(-${this.scroll.current}px)`;
        break;
      case 'h-':
        this.element.style.transform = `translateX(${this.scroll.current}px)`;
        break;
    }
  }
}

/***/ }),

/***/ "./app/utils/function.js":
/*!*******************************!*\
  !*** ./app/utils/function.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObserveNodeDomChange": () => (/* binding */ ObserveNodeDomChange),
/* harmony export */   "UrlExist": () => (/* binding */ UrlExist),
/* harmony export */   "capitalize": () => (/* binding */ capitalize),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "lerp": () => (/* binding */ lerp),
/* harmony export */   "validEmail": () => (/* binding */ validEmail),
/* harmony export */   "validFileType": () => (/* binding */ validFileType)
/* harmony export */ });
const lerp = (start, end, amount) => {
  return (1 - amount) * start + amount * end;
};
const clamp = (value, min, max) => {
  return Math.min(Math.max(value, min), max);
};

/**
 * Vérifie si un fichier est de type PDF,  DOC et DOX c'est à dire
 * un document texte
 * @param {FILE} file - le fichier qui doit être vérifier
 * @param {string} type - le type de fichier document | image
 * @returns {Boolean} Boolean
 */
const validFileType = (file, type) => {
  const documents = ['application/pdf', 'application/doc', 'application/docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword'];
  const images = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/bmp'];
  if (type === 'documents') {
    for (let i = 0; i < documents.length; i++) {
      if (file.type === documents[i]) {
        return true;
      }
    }
    return false;
  } else if (type === 'images') {
    for (let i = 0; i < images.length; i++) {
      if (file.type === images[i]) {
        return true;
      }
    }
    return false;
  }
};

/**
 * Vérifie si une Url pointe vers une page valide
 *
 * @async
 * @param {string} url - le lien de la page
 * @returns {boolean} Boolean
 */
async function UrlExist(url) {
  const options = {
    mode: 'no-cors',
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  };
  const response = await fetch(url, options);
  return response.status !== '404';
}

/**
 * Verifie si un email est valide
 * @param email
 * @returns {boolean}
 */

function validEmail(email) {
  const regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
  if (regex.test(email)) {
    return true;
  }
}

/**
 * Capitalise a given string
 *
 * @param {string} string - A string to capitalize
 * @return {string}
 */
function capitalize(string) {
  const str = string;
  const c = str.charAt(0).toUpperCase() + str.slice(1);
  return c;
}

//https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
/**
 * Observe et execuse un callback lorsque les noeuds enfants(DOM) de la cible ont été modifier
 * @param {HTMLElement} node - Le noeud DOM à observé
 * @param {Function} callback - la fonction à éxécuter lorsque le DOM de la cible à changé
 * @param {selector} selector
 */
function ObserveNodeDomChange(node, cb, selector) {
  // Select the node that will be observed for mutations
  const targetNode = document.querySelector(`.${node}`);

  // Options for the observer (which mutations to observe)
  const config = {
    childList: true,
    subtree: true
  };

  //Callback function to execute when mutations are observed
  const callback = mutationsList => {
    // Use traditional 'for loops' for IE 11
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        cb(selector);
      } else if (mutation.type === 'attributes') {
        cb(selector);
      }
    }
  };

  // Create an observer instance linked to the callback function
  const observer = new MutationObserver(callback);

  // Start observing the target node for configured mutations
  targetNode ? observer.observe(targetNode, config) : void 0;
  //observer.observe(targetNode, config);

  // Later, you can stop observing
  //observer.disconnect();
}

/***/ }),

/***/ "./app/utils/selectors.js":
/*!********************************!*\
  !*** ./app/utils/selectors.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ $),
/* harmony export */   "$All": () => (/* binding */ $All),
/* harmony export */   "$Attribute": () => (/* binding */ $Attribute)
/* harmony export */ });
/**
 * Select element in DOM HTML
 * @param {*} element - The css selector of the HTML element to target
 * @returns {HTMLElement}
 */
const $ = element => {
  return document.querySelector(`${element}`);
};

/**
 * Select elements in DOM HTML
 * @param {*} elements - The css selector of the HTML elements to target
 * @returns {NodeList}
 */
const $All = elements => {
  return [...document.querySelectorAll(`${elements}`)];
};

/**
 * Get Attribute of Element
 * @param {HTMLElement} element - HTML element
 * @param {HTMLElement} name - Name of attribute (ex : data-animation)
 * @returns {string}
 */
const $Attribute = (element, name) => {
  return element.getAttribute(name);
};

/***/ }),

/***/ "./app/utils/splittext.js":
/*!********************************!*\
  !*** ./app/utils/splittext.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This function splits text from innerHTML based on regex. Then, it wrap sparated words with <span> except <br>
 * Finally, it returns array of span
 * @param {HTML element} element
 * @param {string} split This is separator for text (regex)
 * @return {Array.<HTML element>} Array of span html element
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(element, split) {
  var words = splitText(element.innerHTML.toString(), split);
  var str = '';
  words.forEach(function (line) {
    if (line.indexOf('<br>') > -1) {
      var lines = line.split('<br>');
      lines.forEach(function (line, id) {
        str += id > 0 ? '<br>' + parseLine(line) : parseLine(line);
      });
    } else {
      str += parseLine(line);
    }
  });
  element.innerHTML = str;
  return element.querySelectorAll('span');
}

/**
 * This function split text into array including <br>
 * @params {string} txt This is text that retrieved from html element
 * @params {string} split It is separator for text (regex)
 * @return {Array.<string>} result of split using separator including <br>
 */
function splitText(txt, split) {
  var splits = txt.split('<br>');
  var arr = [];
  splits.forEach(function (item, id) {
    if (id > 0) arr.push('<br>');
    arr = arr.concat(item.split(split));
  });
  return arr;
}
/**
 * This function will wrap passed argument with <span> if passed argument is not empty, space, or <br>
 * @params {string} line It is words that are separated by seprator
 * @return {string} it is either '', ' ', <br> , or <span>line<span>
 */
function parseLine(line) {
  if (line === '' || line === ' ') {
    return line;
  } else {
    return line === '<br>' ? '<br>' : '<span>' + line + '</span>' + (line.length > 1 ? ' ' : '');
  }
}

/***/ }),

/***/ "./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/***/ (function(module) {

/**
 * EvEmitter v2.1.1
 * Lil' event emitter
 * MIT License
 */

(function (global, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }
})(typeof window != 'undefined' ? window : this, function () {
  function EvEmitter() {}
  let proto = EvEmitter.prototype;
  proto.on = function (eventName, listener) {
    if (!eventName || !listener) return this;

    // set events hash
    let events = this._events = this._events || {};
    // set listeners array
    let listeners = events[eventName] = events[eventName] || [];
    // only add once
    if (!listeners.includes(listener)) {
      listeners.push(listener);
    }
    return this;
  };
  proto.once = function (eventName, listener) {
    if (!eventName || !listener) return this;

    // add event
    this.on(eventName, listener);
    // set once flag
    // set onceEvents hash
    let onceEvents = this._onceEvents = this._onceEvents || {};
    // set onceListeners object
    let onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
    // set flag
    onceListeners[listener] = true;
    return this;
  };
  proto.off = function (eventName, listener) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this;
    let index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index, 1);
    }
    return this;
  };
  proto.emitEvent = function (eventName, args) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this;

    // copy over to avoid interference if .off() in listener
    listeners = listeners.slice(0);
    args = args || [];
    // once stuff
    let onceListeners = this._onceEvents && this._onceEvents[eventName];
    for (let listener of listeners) {
      let isOnce = onceListeners && onceListeners[listener];
      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener);
        // unset once flag
        delete onceListeners[listener];
      }
      // trigger listener
      listener.apply(this, args);
    }
    return this;
  };
  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
    return this;
  };
  return EvEmitter;
});

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/***/ }),

/***/ "./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSPlugin": () => (/* binding */ CSSPlugin),
/* harmony export */   "_createElement": () => (/* binding */ _createElement),
/* harmony export */   "_getBBox": () => (/* binding */ _getBBox),
/* harmony export */   "checkPrefix": () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/*!
 * CSSPlugin 3.11.3
 * https://greensock.com
 *
 * Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var _win,
  _doc,
  _docElement,
  _pluginInitted,
  _tempDiv,
  _tempDivStyler,
  _recentSetterPlugin,
  _reverting,
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG = 180 / Math.PI,
  _DEG2RAD = Math.PI / 180,
  _atan2 = Math.atan2,
  _bigNum = 1e8,
  _capsExp = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
  _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
  _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp = "transform",
  _transformOriginProp = _transformProp + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
    var target = this.target,
      style = target.style;
    if (property in _transformProps) {
      this.tfm = this.tfm || {};
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
      }

      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
      property = _transformProp;
    }
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].replace(_capsExp, "-$1").toLowerCase());
    }
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
      i = _reverting();
      if (i && !i.isStart && !style[_transformProp]) {
        _removeIndependentTransforms(style);
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;
    if (property in s && !preferPrefix) {
      return property;
    }
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while (i-- && !(_prefixes[i] + property in s)) {}
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore = function _initCore() {
    if (_windowExists() && window.document) {
      _win = window;
      _doc = _win.document;
      _docElement = _doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;
    _docElement.appendChild(svg);
    svg.appendChild(this);
    this.style.display = "block";
    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original

        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }
    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }
    _docElement.removeChild(svg);
    this.style.cssText = oldCSS;
    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds;
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }
    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
    if (!parent || parent === _doc || !parent.appendChild) {
      parent = _doc.body;
    }
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";
      if (horizontal && toPercent) {
        cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
        cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
        cache.width = parent[measureProperty];
      }
    }
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
  _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }

    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";
    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }
    a = [start, end];
    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    if (endValues.length) {
      while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
        while (--i > -1) {
          prop = props[i];
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
          _removeProperty(target, prop);
        }
      }
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
        if (cache) {
          cache.svg && target.removeAttribute("transform");
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;
          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
        plugin._props.push(property);
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);
  },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
      style.scale = style.rotate = style.translate = "none";
    }
    matrix = _getMatrix(target, cache.svg);
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
        scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
        scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
      a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
      a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
      a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
      a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
      isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;
    if (isString) {
      direction = endValue.split("_")[1];
      if (direction === "short") {
        change %= cap;
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
      }
    }
    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      _removeProperty(target, _transformProp);
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
        endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
        plugin._props.push(p);
      }
    }
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;
    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }
    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});
var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;
    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }
      endValue = vars[p];
      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }
      type = typeof endValue;
      specialProp = _specialProps[p];
      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }
      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }
      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;
        if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }
        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);
        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }
            inlineProps.push("visibility", 0, style.visibility);
            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }
          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }
        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }
            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);
            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);
            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);
            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }
        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;
          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else {
            (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);
            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }
        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }
    hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;
(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });
  _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Back": () => (/* binding */ Back),
/* harmony export */   "Bounce": () => (/* binding */ Bounce),
/* harmony export */   "Circ": () => (/* binding */ Circ),
/* harmony export */   "Cubic": () => (/* binding */ Cubic),
/* harmony export */   "Elastic": () => (/* binding */ Elastic),
/* harmony export */   "Expo": () => (/* binding */ Expo),
/* harmony export */   "GSCache": () => (/* binding */ GSCache),
/* harmony export */   "Linear": () => (/* binding */ Linear),
/* harmony export */   "Power0": () => (/* binding */ Power0),
/* harmony export */   "Power1": () => (/* binding */ Power1),
/* harmony export */   "Power2": () => (/* binding */ Power2),
/* harmony export */   "Power3": () => (/* binding */ Power3),
/* harmony export */   "Power4": () => (/* binding */ Power4),
/* harmony export */   "PropTween": () => (/* binding */ PropTween),
/* harmony export */   "Quad": () => (/* binding */ Quad),
/* harmony export */   "Quart": () => (/* binding */ Quart),
/* harmony export */   "Quint": () => (/* binding */ Quint),
/* harmony export */   "Sine": () => (/* binding */ Sine),
/* harmony export */   "SteppedEase": () => (/* binding */ SteppedEase),
/* harmony export */   "Strong": () => (/* binding */ Strong),
/* harmony export */   "Timeline": () => (/* binding */ Timeline),
/* harmony export */   "TimelineLite": () => (/* binding */ Timeline),
/* harmony export */   "TimelineMax": () => (/* binding */ Timeline),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "TweenLite": () => (/* binding */ Tween),
/* harmony export */   "TweenMax": () => (/* binding */ Tween),
/* harmony export */   "_checkPlugin": () => (/* binding */ _checkPlugin),
/* harmony export */   "_colorExp": () => (/* binding */ _colorExp),
/* harmony export */   "_colorStringFilter": () => (/* binding */ _colorStringFilter),
/* harmony export */   "_config": () => (/* binding */ _config),
/* harmony export */   "_forEachName": () => (/* binding */ _forEachName),
/* harmony export */   "_getCache": () => (/* binding */ _getCache),
/* harmony export */   "_getProperty": () => (/* binding */ _getProperty),
/* harmony export */   "_getSetter": () => (/* binding */ _getSetter),
/* harmony export */   "_isString": () => (/* binding */ _isString),
/* harmony export */   "_isUndefined": () => (/* binding */ _isUndefined),
/* harmony export */   "_missingPlugin": () => (/* binding */ _missingPlugin),
/* harmony export */   "_numExp": () => (/* binding */ _numExp),
/* harmony export */   "_numWithUnitExp": () => (/* binding */ _numWithUnitExp),
/* harmony export */   "_parseRelative": () => (/* binding */ _parseRelative),
/* harmony export */   "_plugins": () => (/* binding */ _plugins),
/* harmony export */   "_relExp": () => (/* binding */ _relExp),
/* harmony export */   "_removeLinkedListItem": () => (/* binding */ _removeLinkedListItem),
/* harmony export */   "_renderComplexString": () => (/* binding */ _renderComplexString),
/* harmony export */   "_replaceRandom": () => (/* binding */ _replaceRandom),
/* harmony export */   "_round": () => (/* binding */ _round),
/* harmony export */   "_roundModifier": () => (/* binding */ _roundModifier),
/* harmony export */   "_setDefaults": () => (/* binding */ _setDefaults),
/* harmony export */   "_sortPropTweensByPriority": () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   "_ticker": () => (/* binding */ _ticker),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   "distribute": () => (/* binding */ distribute),
/* harmony export */   "getUnit": () => (/* binding */ getUnit),
/* harmony export */   "gsap": () => (/* binding */ gsap),
/* harmony export */   "interpolate": () => (/* binding */ interpolate),
/* harmony export */   "mapRange": () => (/* binding */ mapRange),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "selector": () => (/* binding */ selector),
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "snap": () => (/* binding */ snap),
/* harmony export */   "splitColor": () => (/* binding */ splitColor),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "unitize": () => (/* binding */ unitize),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapYoyo": () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.11.3
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
  _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
  _suppressOverwrites,
  _reverting,
  _context,
  _bigNum = 1e8,
  _tinyNum = 1 / _bigNum,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt = Math.sqrt,
  _cos = Math.cos,
  _sin = Math.sin,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
  _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win,
  _coreInitted,
  _doc,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
  _emptyFunc = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
  _revertConfig = {
    suppressEvents: true
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
      harnessPlugin = _harnessPlugins[i];
    }
    i = targets.length;
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;
    _lazyLookup = {};
    _lazyTweens.length = 0;
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
  _passThrough = function _passThrough(p) {
    return p;
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;
    while (match && i-- && a1[i] === a2[i]) {}
    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = parent[lastProp],
      t;
    if (sortBy) {
      t = child[sortBy];
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = child._prev,
      next = child._next;
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
    return animation;
  },
  _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
  _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
      _setEnd(animation);
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }

    return animation;
  },
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || child._initted && !child._dur) {
      //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
      t = _parentToChildTotalTime(timeline.rawTime(), child);
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
  _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
    if (!tween._initted) {
      return 1;
    }
    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
      child = animation._first;
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
        child = child._next;
      }
    } else {
      child = animation._last;
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
  _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
      irVars = vars;
      parent = timeline;
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
    return ar.forEach(function (value) {
      var _accumulator;
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
    var vars = _isObject(v) ? v : {
        each: v
      },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];
        if (!wrapAt) {
          max = -_bigNum;
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
          wrapAt--;
        }
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;
      if (snapTo.values) {
        snapTo = toArray(snapTo.values);
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
  pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
    if (!func) {
      var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;
      progress === true && (mutate = 1) && (progress = null);
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }

        l--;
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;
    for (p in labels) {
      distance = labels[p] - fromTime;
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
    return label;
  },
  _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;
    if (!callback) {
      return;
    }
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
      instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
      statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };
    _wake();
    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }
      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods

      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods

      _plugins[Plugin.prop = name] = Plugin;
      if (config.targetTest) {
        _harnessPlugins.push(Plugin);
        _reservedProps[name] = 1;
      }
      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
    }

    _addGlobal(name, Plugin);
    config.register && config.register(gsap, Plugin, PropTween);
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
      a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;
    if (!colors) {
      return s;
    }
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
    return result + shell[l];
  },
  _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
    return new RegExp(s + ")", "gi");
  }(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});
            _raf = _win.requestAnimationFrame;
          }
          _id && _self.sleep();
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
          _tickerActive = 1;
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
          _self.remove(func);
        } : callback;
        _self.remove(callback);
        _listeners[prioritize ? "unshift" : "push"](func);
        _wake();
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
      lowercaseName;
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;
  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});
_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);
_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});
_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});
_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});
_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }
    var p1 = 1 / steps,
      p2 = steps + (immediateStart ? 0 : 1),
      p3 = immediateStart ? 1 : 0,
      max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];
_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;
    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }
    this._ts = 1;
    _setDuration(this, +vars.duration, 1, 1);
    this.data = vars.data;
    if (_context) {
      this._ctx = _context;
      _context.data.push(this);
    }
    _tickerActive || _ticker.wake();
  }
  var _proto = Animation.prototype;
  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }
    return this._delay;
  };
  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };
  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }
    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };
  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();
    if (!arguments.length) {
      return this._tTime;
    }
    var parent = this._dp;
    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);
      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }
        parent = parent.parent;
      }
      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }
    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }

    return this;
  };
  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
  };
  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
  };
  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;

  _proto.timeScale = function timeScale(value) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }
    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);
    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };
  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }
    if (this._ps !== value) {
      this._ps = value;
      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();
        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };
  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }
    return this._start;
  };
  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };
  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };
  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }
    var prevIsReverting = _reverting;
    _reverting = config;
    if (this._initted || this._startAt) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }
    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting = prevIsReverting;
    return this;
  };
  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();
    while (animation) {
      time = animation._start + time / (animation._ts || 1);
      animation = animation._dp;
    }
    return !this.parent && this.vars.immediateRender ? -1 : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for Recording.revert())
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }
    return this._repeat === -2 ? Infinity : this._repeat;
  };
  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;
      _onUpdateTotalDuration(this);
      return time ? this.time(time) : this;
    }
    return this._rDelay;
  };
  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }
    return this._yoyo;
  };
  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };
  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };
  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };
  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };
  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };
  _proto.resume = function resume() {
    return this.paused(false);
  };
  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }
    return this._rts < 0;
  };
  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };
  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };
  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;
    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }
      return this;
    }
    return vars[type];
  };
  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };
  _proto.kill = function kill() {
    _interrupt(this);
  };
  return Animation;
}();
_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);
  function Timeline(vars, position) {
    var _this;
    if (vars === void 0) {
      vars = {};
    }
    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }
  var _proto2 = Timeline.prototype;
  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);
    return this;
  };
  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);
    return this;
  };
  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);
    return this;
  };
  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };
  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;

  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };
  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }
      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;
      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : dur;
          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }
          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;
          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }
          this._lock = 0;
          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }
      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }

      if (!prevTime && time && !suppressEvents) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      if (time >= prevTime && totalTime >= 0) {
        child = this._first;
        while (child) {
          next = child._next;
          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;
          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      }
      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto2.add = function add(child, position) {
    var _this2 = this;
    _isNumber(position) || (position = _parsePosition(this, position, child));
    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }
      if (_isString(child)) {
        return this.addLabel(child, position);
      }
      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }
    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }
    if (tweens === void 0) {
      tweens = true;
    }
    if (timelines === void 0) {
      timelines = true;
    }
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }
    var a = [],
      child = this._first;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }
      child = child._next;
    }
    return a;
  };
  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;
    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };
  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }
    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }
    _removeLinkedListItem(this, child);
    if (child === this._recent) {
      this._recent = this._last;
    }
    return _uncache(this);
  };
  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }
    this._forcing = 1;
    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }
    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
    this._forcing = 0;
    return this;
  };
  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };
  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };
  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };
  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);
    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }
      child = child._next;
    }
  };
  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;
    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }
    return this;
  };
  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;
    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }
      child = child._next;
    }
    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};
    var tl = this,
      endTime = _parsePosition(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
    return immediateRender ? tween.render(0) : tween;
  };
  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };
  _proto2.recent = function recent() {
    return this._recent;
  };
  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };
  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };
  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };
  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }
    var child = this._first,
      labels = this.labels,
      p;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }
      child = child._next;
    }
    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }
    return _uncache(this);
  };
  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;
    while (child) {
      child.invalidate(soft);
      child = child._next;
    }
    return _Animation.prototype.invalidate.call(this, soft);
  };
  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }
    var child = this._first,
      next;
    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }
    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };
  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum,
      prev,
      start,
      parent;
    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }
    if (self._dirty) {
      parent = self.parent;
      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;
        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }
        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;
          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }
          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }
        child._end > max && child._ts && (max = child._end);
        child = prev;
      }
      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
      self._dirty = 0;
    }
    return self._tDur;
  };
  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
      _lastRenderedFrame = _ticker.frame;
    }
    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }
        child || _ticker.sleep();
      }
    }
  };
  return Timeline;
}(Animation);
_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }
    startNums = start.match(_complexStringNumExp) || [];
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
    var copy = {},
      p;
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
    return copy;
  },
  _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
          plugin.priority && (hasPriority = 1);
        }
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
      while (i--) {
        pt = lookup[i][property];
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";
          _initTween(tween, time);
          _forceAllPropTweens = 0;
          return 1;
        }
        ptCache.push(pt);
      }
    }
    i = ptCache.length;
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;
    if (!propertyAliases) {
      return vars;
    }
    copy = _merge({}, vars);
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
  _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};
_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);
  function Tween(targets, vars, position, skipInherit) {
    var _this3;
    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }
    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;
    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;
      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);
        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }
        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }
          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }
        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));
        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;
        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};
          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }
          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;
            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }
          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);
      _globalTimeline.killTweensOf(parsedTargets);
      _overwritingTween = 0;
    }
    _addToTimeline(parent, _assertThisInitialized(_this3), position);
    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);
    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }
  var _proto3 = Tween.prototype;
  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;
    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        isYoyo = this._yoyo && iteration & 1;
        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        if (time === prevTime && !force && this._initted) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }
        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }
      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }
        if (prevTime !== this._time) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
          return this;
        }
        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._tTime = tTime;
      this._time = time;
      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }
      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }
      if (time && !prevTime && !suppressEvents) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      pt = this._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }
      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto3.targets = function targets() {
    return this._targets;
  };
  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };
  _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
      return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);
    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };
  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }
    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      return this.parent ? _interrupt(this) : this;
    }
    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }
    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;
    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }
    overwrittenProps = this._op = this._op || [];
    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};
        _forEachName(vars, function (name) {
          return p[name] = 1;
        });
        vars = p;
      }
      vars = _addAliasesToVars(parsedTargets, vars);
    }
    i = parsedTargets.length;
    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];
        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }
        for (p in props) {
          pt = curLookup && curLookup[p];
          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }
            delete curLookup[p];
          }
          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }
    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };
  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };
  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };
  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };
  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };
  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };
  return Tween;
}(Animation);
_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);
    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }

    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
      next;
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;
    while (pt) {
      next = pt._next;
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
      pt = next;
    }
    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
      pt = next;
    }
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;
    if (next) {
      next._prev = this;
    }
  }
  var _proto4 = PropTween.prototype;
  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };
  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});
_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
var _media = [],
  _listeners = {},
  _emptyArray = [],
  _lastMediaTime = 0,
  _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;
        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
      _dispatch("matchMediaRevert");
      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;
      _dispatch("matchMedia");
    }
  };
var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    func && this.add(func);
  }
  var _proto5 = Context.prototype;
  _proto5.add = function add(name, func, scope) {
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }
    var self = this,
      f = function f() {
        var prev = _context,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
    self.last = f;
    return name === _isFunction ? f(self) : name ? self[name] = f : f;
  };
  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };
  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
    });
    return a;
  };
  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };
  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;
    if (revert) {
      var tweens = this.getTweens();
      this.data.forEach(function (t) {
        // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
        if (t.data === "isFlip") {
          t.revert();
          t.getChildren(true, true, false).forEach(function (tween) {
            return tweens.splice(tweens.indexOf(tween), 1);
          });
        }
      }); // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

      tweens.map(function (t) {
        return {
          g: t.globalTime(0),
          t: t
        };
      }).sort(function (a, b) {
        return b.g - a.g || -1;
      }).forEach(function (o) {
        return o.t.revert(revert);
      }); // note: all of the _startAt tweens should be reverted in reverse order that thy were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

      this.data.forEach(function (e) {
        return !(e instanceof Animation) && e.revert && e.revert(revert);
      });
      this._r.forEach(function (f) {
        return f(revert, _this4);
      });
      this.isReverted = true;
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }
    this.clear();
    if (matchMedia) {
      var i = _media.indexOf(this);
      !!~i && _media.splice(i, 1);
    }
  };
  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };
  return Context;
}();
var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
  }
  var _proto6 = MatchMedia.prototype;
  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
      cond = context.conditions = {},
      mq,
      p,
      active;
    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;
    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win.matchMedia(conditions[p]);
        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }
    active && func(context);
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;

  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };
  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };
  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough : _numericIfPossible;
    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);
    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;
        while (i--) {
          setters[i](value);
        }
      };
    }
    target = target[0] || {};
    var Plugin = _plugins[property],
      cache = _getCache(target),
      p = cache.harness && (cache.harness.aliases || {})[property] || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;
    var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });
    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };
    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }
    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
    _globalTimeline.remove(tl);
    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;
    while (child) {
      next = child._next;
      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }
      child = next;
    }
    _addToTimeline(_globalTimeline, tl, 0);
    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
        found,
        p;
      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }
      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);
        toAdd._ctx = _context;
      }
      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};
_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});
_ticker.add(Timeline.updateRoot);
_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;
    for (p in modifiers) {
      i = targets.length;
      while (i--) {
        pt = tween._ptLookup[i][p];
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
          if (_isString(vars)) {
            temp = {};
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }
          if (modifier) {
            temp = {};
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
            vars = temp;
          }
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins

var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;
    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;
    while (pt) {
      _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;
    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.11.3";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
  Power1 = _easeMap.Power1,
  Power2 = _easeMap.Power2,
  Power3 = _easeMap.Power3,
  Power4 = _easeMap.Power4,
  Linear = _easeMap.Linear,
  Quad = _easeMap.Quad,
  Cubic = _easeMap.Cubic,
  Quart = _easeMap.Quart,
  Quint = _easeMap.Quint,
  Strong = _easeMap.Strong,
  Elastic = _easeMap.Elastic,
  Back = _easeMap.Back,
  SteppedEase = _easeMap.SteppedEase,
  Bounce = _easeMap.Bounce,
  Sine = _easeMap.Sine,
  Expo = _easeMap.Expo,
  Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Back": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),
/* harmony export */   "Bounce": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),
/* harmony export */   "CSSPlugin": () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),
/* harmony export */   "Circ": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),
/* harmony export */   "Cubic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),
/* harmony export */   "Elastic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),
/* harmony export */   "Expo": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),
/* harmony export */   "Linear": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),
/* harmony export */   "Power0": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),
/* harmony export */   "Power1": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),
/* harmony export */   "Power2": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),
/* harmony export */   "Power3": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),
/* harmony export */   "Power4": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),
/* harmony export */   "Quad": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),
/* harmony export */   "Quart": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),
/* harmony export */   "Quint": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),
/* harmony export */   "Sine": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),
/* harmony export */   "SteppedEase": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),
/* harmony export */   "Strong": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),
/* harmony export */   "TimelineLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),
/* harmony export */   "TimelineMax": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),
/* harmony export */   "TweenLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),
/* harmony export */   "TweenMax": () => (/* binding */ TweenMaxWithCSS),
/* harmony export */   "default": () => (/* binding */ gsapWithCSS),
/* harmony export */   "gsap": () => (/* binding */ gsapWithCSS)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js");


var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap,
  // to protect from tree shaking
  TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/imagesloaded/imagesloaded.js":
/*!***************************************************!*\
  !*** ./node_modules/imagesloaded/imagesloaded.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * imagesLoaded v5.0.0
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function (window, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS
    module.exports = factory(window, __webpack_require__(/*! ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js"));
  } else {
    // browser global
    window.imagesLoaded = factory(window, window.EvEmitter);
  }
})(typeof window !== 'undefined' ? window : this, function factory(window, EvEmitter) {
  let $ = window.jQuery;
  let console = window.console;

  // -------------------------- helpers -------------------------- //

  // turn element or nodeList into an array
  function makeArray(obj) {
    // use object if already an array
    if (Array.isArray(obj)) return obj;
    let isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';
    // convert nodeList to array
    if (isArrayLike) return [...obj];

    // array of single index
    return [obj];
  }

  // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {[Array, Element, NodeList, String]} elem
   * @param {[Object, Function]} options - if function, use as callback
   * @param {Function} onAlways - callback function
   * @returns {ImagesLoaded}
   */
  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    }
    // use elem as selector string
    let queryElem = elem;
    if (typeof elem == 'string') {
      queryElem = document.querySelectorAll(elem);
    }
    // bail if bad element
    if (!queryElem) {
      console.error(`Bad element for imagesLoaded ${queryElem || elem}`);
      return;
    }
    this.elements = makeArray(queryElem);
    this.options = {};
    // shift arguments if no options set
    if (typeof options == 'function') {
      onAlways = options;
    } else {
      Object.assign(this.options, options);
    }
    if (onAlways) this.on('always', onAlways);
    this.getImages();
    // add jQuery Deferred object
    if ($) this.jqDeferred = new $.Deferred();

    // HACK check async to allow time to bind listeners
    setTimeout(this.check.bind(this));
  }
  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);
  ImagesLoaded.prototype.getImages = function () {
    this.images = [];

    // filter & find items if we have an item selector
    this.elements.forEach(this.addElementImages, this);
  };
  const elementNodeTypes = [1, 9, 11];

  /**
   * @param {Node} elem
   */
  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName === 'IMG') {
      this.addImage(elem);
    }
    // get background image on element
    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    }

    // find children
    // no non-element nodes, #143
    let {
      nodeType
    } = elem;
    if (!nodeType || !elementNodeTypes.includes(nodeType)) return;
    let childImgs = elem.querySelectorAll('img');
    // concat childElems to filterFound array
    for (let img of childImgs) {
      this.addImage(img);
    }

    // get child background images
    if (typeof this.options.background == 'string') {
      let children = elem.querySelectorAll(this.options.background);
      for (let child of children) {
        this.addElementBackgroundImages(child);
      }
    }
  };
  const reURL = /url\((['"])?(.*?)\1\)/gi;
  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    let style = getComputedStyle(elem);
    // Firefox returns null if in a hidden iframe https://bugzil.la/548397
    if (!style) return;

    // get url inside url("...")
    let matches = reURL.exec(style.backgroundImage);
    while (matches !== null) {
      let url = matches && matches[2];
      if (url) {
        this.addBackground(url, elem);
      }
      matches = reURL.exec(style.backgroundImage);
    }
  };

  /**
   * @param {Image} img
   */
  ImagesLoaded.prototype.addImage = function (img) {
    let loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };
  ImagesLoaded.prototype.addBackground = function (url, elem) {
    let background = new Background(url, elem);
    this.images.push(background);
  };
  ImagesLoaded.prototype.check = function () {
    this.progressedCount = 0;
    this.hasAnyBroken = false;
    // complete if no images
    if (!this.images.length) {
      this.complete();
      return;
    }

    /* eslint-disable-next-line func-style */
    let onProgress = (image, elem, message) => {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(() => {
        this.progress(image, elem, message);
      });
    };
    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };
  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    // progress event
    this.emitEvent('progress', [this, image, elem]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    }
    // check if completed
    if (this.progressedCount === this.images.length) {
      this.complete();
    }
    if (this.options.debug && console) {
      console.log(`progress: ${message}`, image, elem);
    }
  };
  ImagesLoaded.prototype.complete = function () {
    let eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);
    if (this.jqDeferred) {
      let jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  };

  // --------------------------  -------------------------- //

  function LoadingImage(img) {
    this.img = img;
  }
  LoadingImage.prototype = Object.create(EvEmitter.prototype);
  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    let isComplete = this.getIsImageComplete();
    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    }

    // If none of the checks above matched, simulate loading on detached element.
    this.proxyImage = new Image();
    // add crossOrigin attribute. #204
    if (this.img.crossOrigin) {
      this.proxyImage.crossOrigin = this.img.crossOrigin;
    }
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this);
    // bind to image as well for Firefox. #191
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.currentSrc || this.img.src;
  };
  LoadingImage.prototype.getIsImageComplete = function () {
    // check for non-zero, non-undefined naturalWidth
    // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
    return this.img.complete && this.img.naturalWidth;
  };
  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    let {
      parentNode
    } = this.img;
    // emit progress with parent <picture> or self <img>
    let elem = parentNode.nodeName === 'PICTURE' ? parentNode : this.img;
    this.emitEvent('progress', [this, elem, message]);
  };

  // ----- events ----- //

  // trigger specified handler for event type
  LoadingImage.prototype.handleEvent = function (event) {
    let method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };
  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };
  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };
  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  // -------------------------- Background -------------------------- //

  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  }

  // inherit LoadingImage prototype
  Background.prototype = Object.create(LoadingImage.prototype);
  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url;
    // check if image is already complete
    let isComplete = this.getIsImageComplete();
    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };
  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };
  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  };

  // -------------------------- jQuery -------------------------- //

  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;
    if (!jQuery) return;

    // set local variable
    $ = jQuery;
    // $().imagesLoaded()
    $.fn.imagesLoaded = function (options, onAlways) {
      let instance = new ImagesLoaded(this, options, onAlways);
      return instance.jqDeferred.promise($(this));
    };
  };
  // try making plugin
  ImagesLoaded.makeJQueryPlugin();

  // --------------------------  -------------------------- //

  return ImagesLoaded;
});

/***/ }),

/***/ "./node_modules/normalize-wheel/index.js":
/*!***********************************************!*\
  !*** ./node_modules/normalize-wheel/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./src/normalizeWheel.js */ "./node_modules/normalize-wheel/src/normalizeWheel.js");

/***/ }),

/***/ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/ExecutionEnvironment.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {
  canUseDOM: canUseDOM,
  canUseWorkers: typeof Worker !== 'undefined',
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM // For now, this is true - might change in the future.
};

module.exports = ExecutionEnvironment;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js ***!
  \******************************************************************/
/***/ ((module) => {

/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */

/**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */

var _populated = false;

// Browsers
var _ie, _firefox, _opera, _webkit, _chrome;

// Actual IE browser for compatibility mode
var _ie_real_version;

// Platforms
var _osx, _windows, _linux, _android;

// Architectures
var _win64;

// Devices
var _iphone, _ipad, _native;
var _mobile;
function _populate() {
  if (_populated) {
    return;
  }
  _populated = true;

  // To work around buggy JS libraries that can't handle multi-digit
  // version numbers, Opera 10's user agent string claims it's Opera
  // 9, then later includes a Version/X.Y field:
  //
  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);

  // Note that the IE team blog would have you believe you should be checking
  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
  // from either x64 or ia64;  so ultimately, you should just check for Win64
  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
  // Windows will send 'WOW64' instead.
  _win64 = !!/Win64/.exec(uas);
  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
    // IE compatibility mode
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    // grab the "true" ie version from the trident token if available
    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      // We do not add the regexp to the above test, because it will always
      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
      // the userAgent string.
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      // Detect OS X version.  If no version number matches, set _osx to true.
      // Version examples:  10, 10_6_1, 10.7
      // Parses version number as a float, taking only first two sets of
      // digits.  If only one set of digits is found, returns just the major
      // version number.
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}
var UserAgent_DEPRECATED = {
  /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  ie: function () {
    return _populate() || _ie;
  },
  /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
  ieCompatibilityMode: function () {
    return _populate() || _ie_real_version > _ie;
  },
  /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
  ie64: function () {
    return UserAgent_DEPRECATED.ie() && _win64;
  },
  /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  firefox: function () {
    return _populate() || _firefox;
  },
  /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  opera: function () {
    return _populate() || _opera;
  },
  /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  webkit: function () {
    return _populate() || _webkit;
  },
  /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
  safari: function () {
    return UserAgent_DEPRECATED.webkit();
  },
  /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  chrome: function () {
    return _populate() || _chrome;
  },
  /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
  windows: function () {
    return _populate() || _windows;
  },
  /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
  osx: function () {
    return _populate() || _osx;
  },
  /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
  linux: function () {
    return _populate() || _linux;
  },
  /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
  iphone: function () {
    return _populate() || _iphone;
  },
  mobile: function () {
    return _populate() || _iphone || _ipad || _android || _mobile;
  },
  nativeApp: function () {
    // webviews inside of the native apps
    return _populate() || _native;
  },
  android: function () {
    return _populate() || _android;
  },
  ipad: function () {
    return _populate() || _ipad;
  }
};
module.exports = UserAgent_DEPRECATED;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/isEventSupported.js":
/*!**************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/isEventSupported.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */



var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js");
var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }
  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);
  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }
  return isSupported;
}
module.exports = isEventSupported;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/normalizeWheel.js":
/*!************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/normalizeWheel.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */



var UserAgent_DEPRECATED = __webpack_require__(/*! ./UserAgent_DEPRECATED */ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js");
var isEventSupported = __webpack_require__(/*! ./isEventSupported */ "./node_modules/normalize-wheel/src/isEventSupported.js");

// Reasonable defaults
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;

/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */
function normalizeWheel( /*object*/event) /*object*/{
  var sX = 0,
    sY = 0,
    // spinX, spinY
    pX = 0,
    pY = 0; // pixelX, pixelY

  // Legacy
  if ('detail' in event) {
    sY = event.detail;
  }
  if ('wheelDelta' in event) {
    sY = -event.wheelDelta / 120;
  }
  if ('wheelDeltaY' in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ('wheelDeltaX' in event) {
    sX = -event.wheelDeltaX / 120;
  }

  // side scrolling on FF with DOMMouseScroll
  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ('deltaY' in event) {
    pY = event.deltaY;
  }
  if ('deltaX' in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }

  // Fall-back if spin cannot be determined
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}

/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */
normalizeWheel.getEventType = function () /*string*/{
  return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';
};
module.exports = normalizeWheel;

/***/ }),

/***/ "./datas/sounds.json":
/*!***************************!*\
  !*** ./datas/sounds.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"id":1,"title":"The Descent","link":"sound/BlueWednesdayInMyHead/The Descent.mp3","artist":{"name":"Blue Wednesday"},"album":{"id":1,"title":"In My Head","cover":"sound/BlueWednesdayInMyHead/cover.png"}},{"id":2,"title":"Aura","link":"sound/DaniSogenAWorlOfIllusion/Aura.mp3","artist":{"name":"Dani Sogen"},"album":{"id":1,"title":"A World of Illusion","cover":"sound/DaniSogenAWorlOfIllusion/cover.png"}},{"id":3,"title":"The Look","link":"sound/softyXlucidGreenOvernight/1. The Look.mp3","artist":{"name":"softy x lucid green"},"album":{"id":1,"title":"overnight","cover":"sound/softyXlucidGreenOvernight/cover.png"}},{"id":4,"title":"T-Rain","link":"sound/Niska/t-rain.mp3","artist":{"name":"Niska"},"album":{"id":1,"title":"Le monde est méchant","cover":"sound/Niska/cover.png"}},{"id":5,"title":"Carry Me","link":"sound/Tayc/carry-me.mp3","artist":{"name":"Tayc"},"album":{"id":1,"title":"Carry Me -Single","cover":"sound/Tayc/cover.png"}},{"id":6,"title":"Titanium (feat. Sia)","link":"sound/DavidGuetta/titanium.mp3","artist":{"name":"David Guetta"},"album":{"id":1,"title":"Nothing But The Beat Ultimate","cover":"sound/DavidGuetta/cover.png"}},{"id":7,"title":"Cartagine","link":"sound/EmanueleAloia/cartagine.mp3","artist":{"name":"Emanuele Aloia"},"album":{"id":1,"title":"Cartagine - Single","cover":"sound/EmanueleAloia/cover.png"}},{"id":8,"title":"On my Way","link":"sound/AlanWalker/on-my-way.mp3","artist":{"name":"Alan Walker"},"album":{"id":1,"title":"On my Way - Single","cover":"sound/AlanWalker/cover.png"}},{"id":8,"title":"Loading (ft Bad Boy Timz)","link":"sound/Olamide/loading.mp3","artist":{"name":"Olamide"},"album":{"id":1,"title":"Carpe Diem","cover":"sound/Olamide/cover.png"}}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ "./app/components/index.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _pages_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/index */ "./app/pages/index.js");
/* harmony import */ var _factories_pagesFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./factories/pagesFactory */ "./app/factories/pagesFactory.js");
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/function */ "./app/utils/function.js");


//Components


//Helpers


//Config



class App {
  constructor() {
    this.createPreloader();
    this.initNavigation();
    this.init();
    this.getContent();
  }
  init() {
    this.player = new _components__WEBPACK_IMPORTED_MODULE_0__.Player();
    this.canvas = new _components__WEBPACK_IMPORTED_MODULE_0__.Canvas();
  }
  createPreloader() {
    this.preloader = new _components__WEBPACK_IMPORTED_MODULE_0__.Preloader();
    this.preloader.once('completed', () => this.onPreloadEnd());
  }
  onPreloadEnd() {
    this.preloader.destroy();
    this.initPages();
    this.config();
    this.eventListener();
  }
  getContent() {
    this.content = document.querySelector('#content');
    this.template = (0,_utils_function__WEBPACK_IMPORTED_MODULE_4__.capitalize)(this.content.getAttribute('data-template'));
  }
  initPages() {
    this.pages = {};
    for (let [key, value] of Object.entries(_pages_index__WEBPACK_IMPORTED_MODULE_2__)) {
      this.pages[key] = _factories_pagesFactory__WEBPACK_IMPORTED_MODULE_3__["default"].createInstance(key);
    }

    //  this.pages = {
    //    home: new Home(),
    //    about: new About(),
    //    project: new Project(),
    //    photographies: new Photographies(),
    //  }

    this.page = this.pages[this.template];
    console.log(this.page);
    this.page.init();
    this.page.create();
    this.page.show();
  }
  initNavigation() {
    this.navigation = new _components__WEBPACK_IMPORTED_MODULE_0__.Navigation();
  }
  config() {
    this.formHandler = new _components__WEBPACK_IMPORTED_MODULE_0__.FormHandler('connect', 'connect', 'POST');
  }
  observer(element) {
    const observer = new ResizeObserver(entries => {
      for (const entry of entries) {
        console.log(entry);
        new _components__WEBPACK_IMPORTED_MODULE_0__.Smoothscroll((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.wrapper'), {
          direction: 'v',
          smooth: 0.1
        });
      }
    });
    observer.observe(element);
  }
  async onChange({
    url
  }) {
    await this.page.hide();
    const res = await window.fetch(url);
    if (res.status === 200) {
      const html = await res.text();
      window.history.pushState({}, '', url);
      const div = document.createElement('div');
      div.innerHTML = html;
      const divContent = div.querySelector('.content');
      this.template = (0,_utils_function__WEBPACK_IMPORTED_MODULE_4__.capitalize)(divContent.getAttribute('data-template'));
      this.content.innerHTML = divContent.innerHTML;
      this.page = this.pages[this.template];
      console.log(this.template);
      this.page.create();
      this.page.show();
    } else {
      console.error('error: ' + res);
    }
  }
  eventListener() {
    const links = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('[data-links]');
    const linksItem = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('.header__links__item__link');
    if (!links || !linksItem) return;
    links.forEach(link => {
      const {
        href
      } = link;
      const linkData = href.split('#');
      const [url] = linkData;
      const attribute = link.getAttribute('data-links-disabled');
      const isDisabled = attribute === 'true';
      link.onclick = e => {
        e.preventDefault();
        if (isDisabled) return;
        if (link.classList.contains('menu__links__item-active')) {
          link.classList.remove('menu__links__item-active');
        } else {
          link.classList.add('menu__links__item-active');
        }
        if (url === window.location.href) return;
        this.onChange({
          url: href
        });
      };
    });
  }
}

// eslint-disable-next-line no-new
new App();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dEIsTUFBTUMsU0FBUyxHQUFHeDVDLElBQUksQ0FBQ0csWUFBWSxDQUFDLHFCQUFxQixDQUFDO01BQzFELE1BQU1zNUMsVUFBVSxHQUFHRCxTQUFTLEtBQUssTUFBTTtNQUV2Q3g1QyxJQUFJLENBQUNoQixPQUFPLEdBQUkzSyxDQUFDLElBQUs7UUFDcEJBLENBQUMsQ0FBQytELGNBQWMsRUFBRTtRQUVsQixJQUFJcWhELFVBQVUsRUFBRTtRQUVoQixJQUFJejVDLElBQUksQ0FBQ3RCLFNBQVMsQ0FBQ2tELFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO1VBQ3ZENUIsSUFBSSxDQUFDdEIsU0FBUyxDQUFDNEIsTUFBTSxDQUFDLDBCQUEwQixDQUFDO1FBQ25ELENBQUMsTUFBTTtVQUNMTixJQUFJLENBQUN0QixTQUFTLENBQUNDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztRQUNoRDtRQUVBLElBQUlrQixHQUFHLEtBQUtuSyxNQUFNLENBQUNvSyxRQUFRLENBQUNDLElBQUksRUFBRTtRQUNsQyxJQUFJLENBQUNrNUMsUUFBUSxDQUFDO1VBQUVwNUMsR0FBRyxFQUFFRTtRQUFLLENBQUMsQ0FBQztNQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0o7QUFDRjs7QUFFQTtBQUNBLElBQUl3NEMsR0FBRyxFQUFFLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvYW5pbWF0aW9uL1BhcmFncmFwaC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvYW5pbWF0aW9uL1NjYWxlLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9hbmltYXRpb24vU2hhcGVzLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9hbmltYXRpb24vVGl0bGUuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2FuaW1hdGlvbi9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jbGFzc2VzL0NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvUGFnZXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvQWxlcnQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9QcmVsb2FkZXIuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvU2VydmljZXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvVGFicy5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jb21wb25lbnRzL3dpZGdldHMvbXVzaWMtcGxheWVyL01lZGlhTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci9UaW1lci5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2NvbXBvbmVudHMvd2lkZ2V0cy9tdXNpYy1wbGF5ZXIvdm9sdW1lLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9jb25maWcvZm9ybXMuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2ZhY3Rvcmllcy9wYWdlc0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL3BhZ2VzL2Fib3V0LmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9wYWdlcy9ob21lLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvcGFnZXMvcGhvdG9ncmFwaGllcy5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvcGFnZXMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvdXRpbHMvU21vb3Roc2Nyb2xsLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC91dGlscy9mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9hcHAvdXRpbHMvc2VsZWN0b3JzLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL2FwcC91dGlscy9zcGxpdHRleHQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9nc2FwL2luZGV4LmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9pbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkLmpzIiwid2VicGFjazovL1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvVXNlckFnZW50X0RFUFJFQ0FURUQuanMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvaXNFdmVudFN1cHBvcnRlZC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9ub3JtYWxpemVXaGVlbC5qcyIsIndlYnBhY2s6Ly9Qb3J0Zm9saW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vUG9ydGZvbGlvLy4vYXBwL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4uL2NsYXNzZXMvQW5pbWF0aW9uJ1xuaW1wb3J0IHNwbGl0dGV4dCBmcm9tICcuLi91dGlscy9zcGxpdHRleHQnXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhZ3JhcGggZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgc3BsaXR0ZXh0KHRoaXMuZWxlbWVudCwgJzxicj4nKVxuICAgIHNwbGl0dGV4dCh0aGlzLmVsZW1lbnQsICc8YnI+JylcbiAgICB0aGlzLnNwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0pXG5cbiAgICBHU0FQLnRvKHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLjUsXG4gICAgICBkdXJhdGlvbjogMS42LFxuICAgICAgc3RhZ2dlcjogMC4yLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgeTogJzAlJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSlcblxuICAgIEdTQVAuc2V0KHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLjYsXG4gICAgICBkdXJhdGlvbjogMS42LFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGVhc2U6ICdleHBvLmluT3V0JyxcbiAgICAgIHN0YWdnZXI6IDAuMSxcbiAgICAgIHk6ICcxMDAlJyxcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyAkQWxsIH0gZnJvbSAnLi4vdXRpbHMvc2VsZWN0b3JzJ1xuXG5leHBvcnQgY2xhc3MgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50cyA9ICRBbGwoZWxlbWVudClcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgc2NhbGVVcChlKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGUuY3VycmVudFRhcmdldFxuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKDEpYFxuICB9XG5cbiAgc2NhbGVEb3duKGUpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZS5jdXJyZW50VGFyZ2V0XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoLjgpYFxuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5zY2FsZURvd24uYmluZCh0aGlzKSlcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuc2NhbGVVcC5iaW5kKHRoaXMpKVxuICAgIH0pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXBlcyB7XG4gIGNvbnN0cnVjdG9yKHsgcG9zaXRpb24sIGhlaWdodCwgd2lkdGgsIGJsdXIsIGJhY2tncm91bmQsIHNyYyB9KSB7XG4gICAgdGhpcy50b3AgPSBwb3NpdGlvbi50b3AgPT09IC0xID8gdW5kZWZpbmVkIDogcG9zaXRpb24udG9wXG4gICAgdGhpcy5sZWZ0ID0gcG9zaXRpb24ubGVmdCA9PT0gLTEgPyB1bmRlZmluZWQgOiBwb3NpdGlvbi5sZWZ0XG4gICAgdGhpcy5yaWdodCA9IHBvc2l0aW9uLnJpZ2h0ID09PSAtMSA/IHVuZGVmaW5lZCA6IHBvc2l0aW9uLnJpZ2h0XG4gICAgdGhpcy5ib3R0b20gPSBwb3NpdGlvbi5ib3R0b20gPT09IC0xID8gdW5kZWZpbmVkIDogcG9zaXRpb24uYm90dG9tXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHRcbiAgICB0aGlzLndpZHRoID0gd2lkdGhcbiAgICB0aGlzLmJsdXIgPSBibHVyXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZFxuICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIHRoaXMuc3JjID0gc3JjXG5cbiAgICB0aGlzLmluaXQoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVTaGFwZSgpXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpXG4gICAgdGhpcy5ldmVudHMoKVxuICB9XG5cbiAgY3JlYXRlU2hhcGUoKSB7XG4gICAgdGhpcy5zaGFwZUZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgICB0aGlzLnNoYXBlRnJhbWUuY2xhc3NOYW1lID0gJ3NoYXBlcydcbiAgICB0aGlzLnNoYXBlRnJhbWUuaWQgPSAnc2hhcGVzJ1xuXG4gICAgdGhpcy50ZXN0QnJlYWtwb2ludCgpXG4gICAgLy8gc3R5bGVcbiAgICAvL3RoaXMuc2hhcGVGcmFtZS5zdHlsZS5ib3JkZXJSYWRpdXMgPSB0aGlzLmhlaWdodFsyXSArICdweCdcbiAgICAvL3RoaXMuc2hhcGVGcmFtZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmJhY2tncm91bmRcbiAgICAvLyB0aGlzLnNoYXBlRnJhbWUuc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgOHMnXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuXG4gICAgLy8gc2V0IHNoYXBlIHBvc2l0aW9uXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnRvcCA9IHRoaXMudG9wICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5sZWZ0ID0gdGhpcy5sZWZ0ICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5yaWdodCA9IHRoaXMucmlnaHQgKyAncHgnXG4gICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmJvdHRvbSA9IHRoaXMuYm90dG9tICsgJ3B4J1xuXG4gICAgLy9JbnNlcnQgc2hhcGUgaW1nXG4gICAgdGhpcy5zaGFwZUZyYW1lLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU2hhcGVJbWcodGhpcy5zcmMpKVxuICB9XG5cbiAgY3JlYXRlU2hhcGVJbWcoc3JjKSB7XG4gICAgdGhpcy5zaGFwZUZyYW1lSW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnSU1HJylcbiAgICAgdGhpcy5zaGFwZUZyYW1lSW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcbiAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLm9iamVjdEZpdCA9IFwiY292ZXJcIjtcbiAgICB0aGlzLnNoYXBlRnJhbWVJbWcuc2V0QXR0cmlidXRlKCdhbHQnLCAnYmx1ciBmcmFtZScpXG5cbiAgICByZXR1cm4gdGhpcy5zaGFwZUZyYW1lSW1nXG4gIH1cblxuICBhbmltc2hhcGVzKGFuaW1hdGlvbkFycikge1xuICAgIGxldCBpbmRleCA9IDBcbiAgICBsZXQgYW5pbUZsb3cgPSBudWxsXG5cbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoaW5kZXggPj0gYW5pbWF0aW9uQXJyLmxlbmd0aCkgaW5kZXggPSAwXG4gICAgICBhbmltRmxvdyA9IGFuaW1hdGlvbkFycltpbmRleF1cbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS50b3AgPSBhbmltRmxvdy50by50b3AgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUubGVmdCA9IGFuaW1GbG93LnRvLmxlZnQgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuYm90dG9tID0gYW5pbUZsb3cudG8uYm90dG9tICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnJpZ2h0ID0gYW5pbUZsb3cudG8ucmlnaHQgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuZmlsdGVyID0gYGJsdXIoJHt0aGlzLmJsdXJ9cHgpYFxuXG4gICAgICBpbmRleCsrXG4gICAgfSwgNDAwMClcbiAgfVxuXG4gIG1vdW50U2hhcGUocGFyZW50KSB7XG4gICAgcGFyZW50LmFwcGVuZCh0aGlzLnNoYXBlRnJhbWUpXG4gIH1cblxuICBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICB0aGlzLndpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICB0aGlzLnRlc3RCcmVha3BvaW50KClcbiAgfVxuXG4gIHRlc3RCcmVha3BvaW50KCkge1xuICAgIGlmICh0aGlzLndpbmRvd1dpZHRoID49IDY0MCAmJiB0aGlzLndpbmRvd1dpZHRoIDwgMTAyNCkge1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0WzFdICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFsxXSArICdweCdcbiAgICB9IGVsc2UgaWYgKHRoaXMud2luZG93V2lkdGggPj0gMTAyNCkge1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0WzJdICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFsyXSArICdweCdcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0WzBdICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFswXSArICdweCdcbiAgICB9XG4gIH1cblxuICBldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuLi9jbGFzc2VzL0FuaW1hdGlvbidcbmltcG9ydCBzcGxpdHRleHQgZnJvbSAnLi4vdXRpbHMvc3BsaXR0ZXh0J1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgc3BsaXR0ZXh0KHRoaXMuZWxlbWVudCwgJzxicj4nKVxuICAgIHNwbGl0dGV4dCh0aGlzLmVsZW1lbnQsICc8YnI+JylcbiAgICB0aGlzLnNwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0pXG5cbiAgICBHU0FQLnRvKHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLjUsXG4gICAgICBkdXJhdGlvbjogMS42LFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgeTogJzAlJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSlcblxuICAgIEdTQVAuc2V0KHRoaXMuc3BhbnMsIHtcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgZHVyYXRpb246IDEsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4xLFxuICAgICAgeTogJzEwMCUnLFxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uL2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5pbXBvcnQgU2hhcGVzIGZyb20gJy4vU2hhcGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuaXNNb3VudGVkID0gZmFsc2VcbiAgICB0aGlzLnNoYXBlR3JhZGllbnQgPSAnIzAwRkY0NydcbiAgICB0aGlzLmJsdXIgPSA4MFxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMubW91bnRGcmFtZSgpXG4gIH1cblxuICBjcmVhdGVGcmFtZSgpIHtcbiAgICB0aGlzLmZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgICB0aGlzLmZyYW1lLmNsYXNzTmFtZSA9ICdmcmFtZSdcbiAgICB0aGlzLmZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIHRoaXMuZnJhbWUuc3R5bGUudG9wID0gMFxuICAgIHRoaXMuZnJhbWUuc3R5bGUubGVmdCA9IDBcbiAgICB0aGlzLmZyYW1lLnN0eWxlLndpZHRoID0gYCR7d2luZG93LmlubmVyV2lkdGh9cHhgXG4gICAgdGhpcy5mcmFtZS5zdHlsZS5oZWlnaHQgPSBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgXG4gICAgdGhpcy5mcmFtZS5zdHlsZS5maWx0ZXIgPSBgYmx1cigke3RoaXMuYmx1cn1weClgXG4gICAgdGhpcy5mcmFtZS5zdHlsZS56SW5kZXggPSAnLTEnXG4gICAgdGhpcy5mcmFtZS5pZCA9ICdmcmFtZSdcbiAgfVxuXG4gIG1vdW50RnJhbWUoKSB7XG4gICAgIHRoaXMuY3JlYXRlRnJhbWUoKVxuXG4gICAgIGNvbnN0IHNpemUgPSBbNDgwLCA3NjgsIDEwMjRdO1xuICAgIGNvbnN0IHNoYXBlMSA9IG5ldyBTaGFwZXMoe1xuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgdG9wOiAtMzAwLFxuICAgICAgICByaWdodDogLTEsXG4gICAgICAgIGxlZnQ6IC0zMDAsXG4gICAgICAgIGJvdHRvbTogLTEsXG4gICAgICB9LFxuICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLnNoYXBlR3JhZGllbnQsXG4gICAgICBzcmM6ICdpbWFnZXMvYmx1ci1waWMucG5nJyxcbiAgICB9KVxuICAgIGNvbnN0IHNoYXBlMiA9IG5ldyBTaGFwZXMoe1xuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgdG9wOiAtMSxcbiAgICAgICAgcmlnaHQ6IC0zMDAsXG4gICAgICAgIGxlZnQ6IC0xLFxuICAgICAgICBib3R0b206IC0zMDAsXG4gICAgICB9LFxuICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLnNoYXBlR3JhZGllbnQsXG4gICAgICBzcmM6ICdpbWFnZXMvYmx1ci1waWMucG5nJyxcbiAgICB9KVxuXG4gICAgdGhpcy5mcmFtZS5hcHBlbmRDaGlsZChzaGFwZTEuc2hhcGVGcmFtZSlcbiAgICB0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHNoYXBlMi5zaGFwZUZyYW1lKVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuZnJhbWUpXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgICB0aGlzLmlzTW91bnRlZCA9IHRydWVcbiAgfVxuXG4gIG9uUmVzaXplKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLm1vdW50ZWRGcmFtZSA9ICQoJyNmcmFtZScpXG4gICAgdGhpcy5tb3VudGVkRnJhbWUuc3R5bGUud2lkdGggPSBgJHt3aW5kb3cuaW5uZXJXaWR0aH1weGBcbiAgICB0aGlzLm1vdW50ZWRGcmFtZS5zdHlsZS5oZWlnaHQgPSBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgXG4gIH1cblxuICBldmVudExpc3RlbmVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4vQ29tcG9uZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKClcbiAgfVxuXG4gIGNyZWF0ZU9ic2VydmVyKCkge1xuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZUluKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudClcbiAgfVxufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgZWxlbWVudHMgZnJvbSAnLi9lbGVtZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50cyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGNvbXBvbmVudE5hbWUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zZWxlY3RvckNoaWxkcmVucyA9IGVsZW1lbnRzW2NvbXBvbmVudE5hbWVdXG4gICAgdGhpcy5yb290ID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KGVsZW1lbnRzKVxuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmdldEVsZW1lbnRzKHRoaXMuc2VsZWN0b3JDaGlsZHJlbnMpXG4gIH1cblxuICBnZXRFbGVtZW50cyhjaGlsZHJlbnMpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHt9XG4gICAgZm9yIChjb25zdCBrZXlzIGluIGNoaWxkcmVucykge1xuICAgICAgY29uc3QgdmFsdWUgPSBjaGlsZHJlbnNba2V5c11cblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIGVsZW1lbnRzW2tleXNdID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHNba2V5c10gPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSldXG4gICAgICAgIGlmIChlbGVtZW50c1trZXlzXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBlbGVtZW50c1trZXlzXSA9IG51bGxcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50c1trZXlzXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBlbGVtZW50c1trZXlzXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudHNcbiAgfVxuXG4gIGhhbmRsZUVsZW1lbnRPYmplY3Qob2JqZWN0KSB7XG4gICAgbGV0IGJ1aWxkZWRPYmplY3RzID0ge31cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV1cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBidWlsZGVkT2JqZWN0c1trZXldID0gdGhpcy5oYW5kbGVFbGVtZW50T2JqZWN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVpbGRlZE9iamVjdHNba2V5XSA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKV1cbiAgICAgICAgaWYgKGJ1aWxkZWRPYmplY3RzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYnVpbGRlZE9iamVjdHNba2V5XSA9IG51bGxcbiAgICAgICAgfSBlbHNlIGlmIChidWlsZGVkT2JqZWN0c1trZXldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGJ1aWxkZWRPYmplY3RzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWlsZGVkT2JqZWN0c1xuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuL0NvbXBvbmVudHMnXG4vL2ltcG9ydCBTbW9vdGhzY3JvbGwgZnJvbSAnLi4vdXRpbHMvU21vb3Roc2Nyb2xsJ1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7ICQsICRBbGwsICRBdHRyaWJ1dGUgfSBmcm9tICcuLi91dGlscy9zZWxlY3RvcnMnXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vYW5pbWF0aW9uL1RpdGxlJ1xuaW1wb3J0IFBhcmFncmFwaCBmcm9tICcuLi9hbmltYXRpb24vUGFyYWdyYXBoJ1xuLy9pbXBvcnQgeyBSZXNpemVPYnNlcnZlciB9IGZyb20gJ3Jlc2l6ZS1vYnNlcnZlcidcbmltcG9ydCB7IFNjYWxlIH0gZnJvbSAnLi8uLi9hbmltYXRpb24vU2NhbGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VzIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudHMpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50c1xuICAgIHRoaXMuYW5pbWF0ZU91dCA9IEdTQVAudGltZWxpbmUoKVxuICAgIHRoaXMud3JhcHBlciA9ICQoJy53cmFwcGVyJylcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zY2FsZUFuaW1hdGlvbiA9IG5ldyBTY2FsZShcIltkYXRhLWFuaW1hdGlvbj0nc2NhbGUnXVwiKVxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSdcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJ1xuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gJEFsbCgnW2RhdGEtaGlkZV0nKVxuICAgIGlmICghdGVtcGxhdGUpIHJldHVyblxuICAgIHRlbXBsYXRlLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAkQXR0cmlidXRlKHdyYXBwZXIsICdkYXRhLWhpZGUnKS5zcGxpdCgnLCcpXG4gICAgICBpZiAoIWF0dHJpYnV0ZXMpIHJldHVyblxuICAgICAgYXR0cmlidXRlcy5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9ICQoYC4ke2F0dHIudHJpbSgpfWApXG4gICAgICAgIGlmICghY29tcG9uZW50KSByZXR1cm5cbiAgICAgICAgY29tcG9uZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZUFuaW1hdGlvbigpIHtcbiAgICB0aGlzLmVsZW1lbnRzID0gbmV3IENvbXBvbmVudHModGhpcy5lbGVtZW50KS5lbGVtZW50c1xuICAgIGlmICh0aGlzLmVsZW1lbnRzICYmIHRoaXMuZWxlbWVudHMudGl0bGVzICYmIHRoaXMuZWxlbWVudHMucGFyYWdyYXBoZXMpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMudGl0bGVzLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgbmV3IFRpdGxlKHQpXG4gICAgICB9KVxuICAgICAgdGhpcy5lbGVtZW50cy5wYXJhZ3JhcGhlcy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgIG5ldyBQYXJhZ3JhcGgocClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbigpXG5cbiAgICB0aGlzLmFuaW1hdGVPdXQudG8oJCgnLndyYXBwZXInKSwge1xuICAgICAgZHVyYXRpb246IDIsXG4gICAgICBlYXNlOiAncG93ZXIxLm91dCcsXG4gICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwYWdlIHdhcyBzaG93bicpXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnNvbGUubG9nKCdoaWRkZW4gY3VycmVudCBwYWdlJylcblxuICAgIHRoaXMuYW5pbWF0ZU91dC50bygkKCcud3JhcHBlcicpLCB7XG4gICAgICBkdXJhdGlvbjogMSxcbiAgICAgIGVhc2U6ICdwb3dlcjEuaW4nLFxuICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncGFnZSB3YXMgaGlkZScpXG4gICAgICB9LFxuICAgIH0pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgcHJlbG9hZGVyOiB7XG4gICAgZWxlbWVudDogJy5wcmVsb2FkZXInLFxuICAgIHRleHQ6ICcucHJlbG9hZGVyX190ZXh0X19pdGVtJyxcbiAgICBjb250YWluZXI6ICcucHJlbG9hZGVyX190ZXh0JyxcbiAgICBsb2FkZXI6ICcucHJlbG9hZGVyX19sb2FkZXJfX2JhcicsXG4gICAgd3JhcHBlcjogJy5wcmVsb2FkZXJfX3RleHRfX3dyYXBwZXInLFxuICB9LFxuICBuYXZpZ2F0aW9uOiB7XG4gICAgaGVhZGVyOiAnLmhlYWRlcicsXG4gICAgbmF2TGlzdDogJy5tZW51X19saW5rc19faXRlbScsXG4gICAgY29udGVudDogJy5tb2JpbGUtaGVhZGVyX19jb250YWluZXInLFxuICAgIG1lbnU6ICcubWVudS1tb2JpbGUnLFxuICAgIG9wZW5NZW51OiAnLm1lbnUtYnV0dG9uLW9wZW4nLFxuICB9LFxuICBwbGF5ZXI6IHtcbiAgICBidXR0b246IHtcbiAgICAgIGV4cGFuZDogJy5wbGF5ZXJfX2J1dHRvbi5leHBhbmQnLFxuICAgICAgY2xvc2U6ICcucGxheWVyX19idXR0b24uY2xvc2UnLFxuICAgICAgcGxheTogXCJbZGF0YS1pY29uPSdyb2ItcGxheSddXCIsXG4gICAgICBuZXh0OiBcIltkYXRhLWljb249J3JvYi1mb3J3YXJkJ11cIixcbiAgICAgIHByZXY6IFwiW2RhdGEtaWNvbj0ncm9iLWJhY2t3YXJkJ11cIixcbiAgICAgIHRvZ2dsZXI6ICcucGxheWVyX19jdGEnLFxuICAgIH0sXG4gICAgY292ZXJDb250YWluZXI6ICcucGxheWVyX19jb3ZlcicsXG4gICAgY292ZXI6ICcucGxheWVyX19jb3ZlciBpbWcnLFxuICAgIHNlbGY6ICcucGxheWVyJyxcbiAgICBtZWRpYTogJy5wbGF5ZXJfX21lZGlhJyxcbiAgICBhcnRpc3Q6ICcucGxheWVyX19kZXRhaWxfX25hbWUnLFxuICAgIHRpdGxlOiAnLnBsYXllcl9fZGV0YWlsX190aXRsZScsXG4gICAgdGltZXI6IHtcbiAgICAgIHN0YXJ0VGltZTogJy5wbGF5ZXJfX3RpbWVyX190aW1lc19fc3RhcnR0aW1lJyxcbiAgICAgIGVuZFRpbWU6ICcucGxheWVyX190aW1lcl9fdGltZXNfX2VuZHRpbWUnLFxuICAgICAgcmFuZ2U6ICcucGxheWVyX190aW1lcl9fcHJvZ3Jlc3NfX3JhbmdlJyxcbiAgICAgIHByb2dyZXNzOiAnLnBsYXllcl9fdGltZXJfX3Byb2dyZXNzX19iYXInLFxuICAgICAgcHJlbG9hZDogJy5wbGF5ZXJfX3RpbWVyX19wcm9ncmVzc19fZWxhcHNlJyxcbiAgICB9LFxuICAgIHZvbHVtZToge1xuICAgICAgZ3JhcHBlcjogJy5wbGF5ZXJfX3ZvbHVtZV9fZ3JhcCcsXG4gICAgICBzbGlkZXI6ICcucGxheWVyX192b2x1bWVfX3NsaWRlcicsXG4gICAgICBjb250YWluZXI6ICcucGxheWVyX192b2x1bWUnLFxuICAgIH0sXG4gIH0sXG4gIGZvcm06IHtcbiAgICBjb25uZWN0OiB7XG4gICAgICBmb3JtOiAnLmNvbm5lY3RfX2Zvcm0nLFxuICAgICAgYnV0dG9uOiAnLmNvbm5lY3RfX2Zvcm0gLmJ1dHRvbicsXG4gICAgICBuYW1lOiAnLmlucHV0X19uYW1lJyxcbiAgICAgIG1haWw6ICcuaW5wdXRfX2VtYWlsJyxcbiAgICAgIG1lc3NhZ2U6ICcjbWVzc2FnZScsXG4gICAgICBuYW1lQWxlcnQ6ICcuY29ubmVjdF9fZm9ybSAuaW5wdXRfX2FsZXJ0LW5hbWUnLFxuICAgICAgZW1haWxBbGVydDogJy5jb25uZWN0X19mb3JtIC5pbnB1dF9fYWxlcnQtZW1haWwnLFxuICAgICAgbWVzc2FnZUFsZXJ0OiAnLmNvbm5lY3RfX2Zvcm0gLmlucHV0X19hbGVydC1tZXNzYWdlJyxcbiAgICAgIGFsZXJ0OiAnLmNvbm5lY3RfX2Zvcm0gLmlucHV0X19hbGVydCcsXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgZm9ybTogJy5tb2RhbF9fZm9ybScsXG4gICAgICBidXR0b246ICcubW9kYWxfX3N1Ym1pdF9fYnV0dG9uJyxcbiAgICAgIG5hbWU6ICcudXNlcnNQcm9qZWN0c05hbWUnLFxuICAgICAgbWFpbDogJy51c2Vyc1Byb2plY3RzRW1haWwnLFxuICAgICAgbWVzc2FnZTogJy51c2Vyc1Byb2plY3RzSWRlYScsXG4gICAgICBuYW1lQWxlcnQ6ICcubW9kYWxfX2Zvcm1fX3dyYXBwZXIgLmlucHV0X19hbGVydC1uYW1lJyxcbiAgICAgIGVtYWlsQWxlcnQ6ICcubW9kYWxfX2Zvcm1fX3dyYXBwZXIgLmlucHV0X19hbGVydC1lbWFpbCcsXG4gICAgICBtZXNzYWdlQWxlcnQ6ICcubW9kYWxfX2Zvcm1fX3dyYXBwZXIgLmlucHV0X19hbGVydC1tZXNzYWdlJyxcbiAgICAgIGFsZXJ0OiAnLm1vZGFsX19mb3JtX193cmFwcGVyIC5pbnB1dF9fYWxlcnQnLFxuICAgICAgZGF0YVNlcnZpY2VJbnB1dDogJy5tb2RhbF9fZGF0YS1zZXJ2aWNlcycsXG4gICAgfSxcbiAgICBhbGVydDogJy5hbGVydCcsXG4gIH0sXG4gIHNsaWRlcjoge1xuICAgIGJ1dHRvbjoge1xuICAgICAgcHJldjogJyNyYi1zbGlkZXItYnV0dG9uLXByZXYnLFxuICAgICAgbmV4dDogJyNyYi1zbGlkZXItYnV0dG9uLW5leHQnLFxuICAgIH0sXG4gICAgd3JhcHBlcjogJy5yYi1zbGlkZXItd3JhcHBlcicsXG4gICAgaXRlbXM6ICcucmItc2xpZGVyLWl0ZW1zJyxcbiAgICBjb250YWluZXI6ICcucmItc2xpZGVyJyxcbiAgfSxcbiAgc2VydmljZXM6IHtcbiAgICBidXR0b25zOiAnLnNlcnZpY2VzX19jdGEnLFxuICB9LFxuICBtb2RhbDoge1xuICAgIHNlbGY6ICcubW9kYWwnLFxuICAgIGRhdGFTZXJ2aWNlSW5wdXQ6ICcubW9kYWxfX2RhdGEtc2VydmljZXMnLFxuICAgIGJ1dHRvbjogJy5tb2RhbF9fYnV0dG9uIGJ1dHRvbicsXG4gIH0sXG4gIGltYWdlczogJ2ltZycsXG4gIGFib3V0OiB7XG4gICAgdGl0bGVzOiBcIltkYXRhLWFuaW1hdGlvbj0ndGl0bGUnXVwiLFxuICAgIHBhcmFncmFwaGVzOiBcIltkYXRhLWFuaW1hdGlvbj0ncGFyYWdyYXBoJ11cIixcbiAgfSxcbiAgaG9tZToge1xuICAgIHRpdGxlczogXCJbZGF0YS1hbmltYXRpb249J3RpdGxlJ11cIixcbiAgICBwYXJhZ3JhcGhlczogXCJbZGF0YS1hbmltYXRpb249J3BhcmFncmFwaCddXCIsXG4gIH0sXG4gIHByb2plY3Q6IHtcbiAgICB0aXRsZXM6IFwiW2RhdGEtYW5pbWF0aW9uPSd0aXRsZSddXCIsXG4gICAgcGFyYWdyYXBoZXM6IFwiW2RhdGEtYW5pbWF0aW9uPSdwYXJhZ3JhcGgnXVwiLFxuICB9LFxufVxuIiwiaW1wb3J0IHsgJCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxlcnQge1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZSgpXG4gICAgdGhpcy5zZWxmID0gJCgnLmFsZXJ0JylcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICB0aGlzLmRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpXG4gICAgdGhpcy5kaXYuY2xhc3NOYW1lID0gJ2FsZXJ0J1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICdzdWNjZXNzJykgdGhpcy5kaXYuY2xhc3NMaXN0LmFkZCgnYWxlcnRfX3N1Y2Nlc3MnKVxuICAgIGVsc2UgdGhpcy5kaXYuY2xhc3NMaXN0LmFkZCgnYWxlcnRfX2Vycm9yJylcblxuICAgIC8vIENyZWF0ZSBhbGVydF9fd3JhcHBlclxuICAgIGNvbnN0IHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50KCdESVYnLCAnYWxlcnRfX3dyYXBwZXInKVxuICAgIC8vIGNvbnRlbnRcbiAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlRWxlbWVudCgnRElWJywgJ2FsZXJ0X19jb250ZW50JylcbiAgICAvLyBpY29uc1xuICAgIGNvbnN0IGljb24gPSBjcmVhdGVFbGVtZW50KCdTUEFOJywgJ2FsZXJ0X19pY29uJylcbiAgICAvLyBNZXNzYWdlXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUVsZW1lbnQoJ1AnLCAnYWxlcnRfX21lc3NhZ2UnKVxuICAgIG1lc3NhZ2UuaW5uZXJUZXh0ID0gdGhpcy5tZXNzYWdlXG4gICAgLy8gQ2xvc2UgaWNvblxuICAgIGNvbnN0IGNsb3NlSWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ1NQQU4nLCAnYWxlcnRfX2Nsb3NlSWNvbicpXG4gICAgY29uc3QgaSA9IGNyZWF0ZUVsZW1lbnQoJ0knLCAncm9iLWNsb3NlJylcbiAgICBjbG9zZUljb24uYXBwZW5kKGkpXG4gICAgY2xvc2VJY29uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgICAgdGhpcy5kZXN0cm95KClcbiAgICB9XG5cbiAgICAvLyBhcHBuZWQgY2hpbGRcbiAgICBjb250ZW50LmFwcGVuZChpY29uLCBtZXNzYWdlKVxuICAgIHdyYXBwZXIuYXBwZW5kKGNvbnRlbnQsIGNsb3NlSWNvbilcbiAgICB0aGlzLmRpdi5hcHBlbmQod3JhcHBlcilcbiAgICBkb2N1bWVudC5ib2R5LnByZXBlbmQodGhpcy5kaXYpXG4gICAgdGhpcy5zZWxmID0gdGhpcy5kaXZcbiAgICB0aGlzLmhpZGUoKVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzTmFtZSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKVxuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWVcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2VsZi5zdHlsZS5yaWdodCA9ICcuNXJlbSdcbiAgICB9LCAxMDAwKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLnNlbGYuc3R5bGUucmlnaHQgPSAnLTEwMCUnXG4gICAgdGhpcy5zZWxmLnRyYW5zaXRpb24gPSAncmlnaHQgLjZzJ1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGl2KVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgeyAkQWxsIH0gZnJvbSAnLi4vdXRpbHMvc2VsZWN0b3JzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCduYXZpZ2F0aW9uJylcbiAgICAvL3RoaXMuaW5pdCgpXG4gICAgdGhpcy5ldmVudHNMaXN0ZW5lcigpXG4gIH1cblxuICBpbml0KCkge1xuICAgIGNvbnN0IGRlZmF1bHRTb3VyY2UgPSAnaW1hZ2VzL3ByZXZpZXdzL2ltZy0xJ1xuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLnByZXZpZXdJbWcuc3JjID0gYCR7ZGVmYXVsdFNvdXJjZX0ucG5nYFxuICAgIHRoaXMuc2V0QWN0aXZlTGlua1N0eWxlcygpXG4gIH1cblxuICBzZXRBY3RpdmVMaW5rU3R5bGVzKCkge1xuICAgIGNvbnN0IGxpbmtzID0gJEFsbCgnW2RhdGEtbGlua3NdJylcbiAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgIGxldCBwYXJlbnRcblxuICAgIGxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgIGlmIChsaW5rLmhyZWYgPT09IHVybCkge1xuICAgICAgICBwYXJlbnQgPSBsaW5rLnBhcmVudE5vZGVcbiAgICAgICAgcGFyZW50LmNsYXNzTGlzdC5hZGQoJ21lbnVfX2xpbmtzX19pdGVtLWFjdGl2ZScpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uTW91c2VIb3ZlckxpbmtzKGUpIHtcbiAgICBjb25zdCBzcmMgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNuYXAtaW1hZ2UnKVxuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLnByZXZpZXdJbWcuc3JjID0gYCR7c3JjfS5wbmdgXG4gIH1cblxuICBvcGVuTWVudShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5yb290Lm5hdmlnYXRpb24uY29udGVudC5jbGFzc0xpc3QudG9nZ2xlKCdtZW51LXZpc2libGUnKVxuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLm1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnbWVudS1tb2JpbGUtdmlzaWJsZScpXG4gIH1cblxuICBjbG9zZU1lbnUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLmNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbWVudS12aXNpYmxlJylcbiAgfVxuXG4gIGV2ZW50c0xpc3RlbmVyKCkge1xuICAgIC8qdGhpcy5yb290Lm5hdmlnYXRpb24ubmF2TGlzdC5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMub25Nb3VzZUhvdmVyTGlua3MuYmluZCh0aGlzKSlcbiAgICB9KSovXG5cbiAgICBpZiAoIXRoaXMucm9vdC5uYXZpZ2F0aW9uLm9wZW5NZW51KSByZXR1cm5cblxuICAgIHRoaXMucm9vdC5uYXZpZ2F0aW9uLm9wZW5NZW51LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnY2xpY2snLFxuICAgICAgdGhpcy5vcGVuTWVudS5iaW5kKHRoaXMpXG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gJ2ltYWdlc2xvYWRlZCdcbi8vaW1wb3J0IGF1dG9CaW5kIGZyb20gJ2F1dG8tYmluZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwcmVsb2FkZXInKVxuXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5zdGFydEluZGV4ID0gMVxuXG4gICAgdGhpcy5zaXplID0ge1xuICAgICAgaGVpZ2h0OiBOdW1iZXIodGhpcy5lbGVtZW50cy50ZXh0WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCksXG4gICAgICB3aWR0aDogTnVtYmVyKHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRXaWR0aCksXG4gICAgICBnYXA6IDIsXG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBjcmVhdGVQcmVsb2FkZXIoKSB7XG4gICAgaWYgKHRoaXMucm9vdC5pbWFnZXMpIHtcbiAgICAgIGNvbnN0IGltZ0xvYWQgPSBpbWFnZXNMb2FkZWQoZG9jdW1lbnQuYm9keSlcblxuICAgICAgaW1nTG9hZC5vbigncHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyhpbWdMb2FkLmltYWdlcy5sZW5ndGgpXG4gICAgICB9KVxuXG4gICAgICBpbWdMb2FkLm9uKCdkb25lJywgKCkgPT4ge1xuICAgICAgICAvLyAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5vbkxvYWQoKVxuICAgICAgICAvLyAgIH0sIDUwMDApXG4gICAgICAgIHRoaXMub25Mb2FkKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYW5pbVByZWxvYWRlclRleHQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZWxlbWVudHMud3JhcHBlci5jaGlsZHJlbi5sZW5ndGhcblxuICAgIC8vR2l2ZSB0aGUgd3JhcHBlciB0aGUgaGVpZ2h0IG9mIHRoZSB0ZXh0XG4gICAgdGhpcy5lbGVtZW50cy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5zaXplLmhlaWdodH1weGBcbiAgICB0aGlzLmVsZW1lbnRzLmNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGAke3RoaXMuc2l6ZS53aWR0aH1weGBcblxuICAgIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZS50b3AgPSBgJHtcbiAgICAgICAgICAoLXRoaXMuc2l6ZS5oZWlnaHQgLSB0aGlzLnNpemUuZ2FwKSAqIHRoaXMuc3RhcnRJbmRleFxuICAgICAgICB9cHhgXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCsrXG4gICAgICB9XG4gICAgfSwgMTAwMClcbiAgfVxuXG4gIG9uUHJvZ3Jlc3MobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggKz0gMVxuICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmxlbmd0aCAvIGxlbmd0aFxuXG4gICAgdGhpcy5lbGVtZW50cy5sb2FkZXIuc3R5bGUud2lkdGggPSBgJHtNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApfSVgXG4gIH1cblxuICBvbkxvYWQoKSB7XG4gICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKVxuICB9XG5cbiAgb25SZXNpemUoZSkge1xuICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgIGhlaWdodDogTnVtYmVyKHRoaXMuZWxlbWVudHMudGV4dFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpLFxuICAgICAgd2lkdGg6IE51bWJlcih0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50V2lkdGgpLFxuICAgICAgZ2FwOiAyLFxuICAgIH1cbiAgICB0aGlzLmFuaW1QcmVsb2FkZXJUZXh0KGUpXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgICAgdGhpcy5hbmltUHJlbG9hZGVyVGV4dC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudHMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMuZWxlbWVudClcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlcyBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2VydmljZXMnKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYnV0dG9ucyA9IFsuLi50aGlzLmVsZW1lbnRzLmJ1dHRvbnNdXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgfVxuXG4gIG9uQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGJ1dHRvbiA9IGUuY3VycmVudFRhcmdldFxuICAgIHRoaXMudHlwZSA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2VydmljZScpXG4gICAgY29uc29sZS5sb2coYnV0dG9uKVxuICAgIHRoaXMucm9vdC5tb2RhbC5kYXRhU2VydmljZUlucHV0LnZhbHVlID0gdGhpcy50eXBlXG4gICAgdGhpcy5yb290Lm1vZGFsLnNlbGYuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdmlzaWJsZScpXG4gIH1cblxuICBjbG9zZU1vZGFsKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAodGhpcy5yb290Lm1vZGFsLnNlbGYuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbC12aXNpYmxlJykpIHtcbiAgICAgIHRoaXMucm9vdC5tb2RhbC5zZWxmLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLXZpc2libGUnKVxuICAgIH1cbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLmJpbmQodGhpcykpXG4gICAgfSlcblxuICAgIHRoaXMucm9vdC5tb2RhbC5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgJEFsbCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFicyB7XG4gIF9fZGVmYXVsdHMgPSB7XG4gICAgZGVmYXVsdEluZGV4OiAwLFxuICB9XG5cbiAgX19zZWxlY3RvcnMgPSB7XG4gICAgbGlzdDoge1xuICAgICAgY29udGFpbmVyOiAnLnRhYnNfX2xpc3QnLFxuICAgICAgY2hpbGRyZW5zOiAnLnRhYnNfX2l0ZW1zJyxcbiAgICAgIGJ1dHRvbnM6ICcudGFic19faXRlbScsXG4gICAgfSxcbiAgICBwYW5lbHM6IHtcbiAgICAgIGNvbnRhaW5lcjogJy50YWJzX19wYW5lbHMnLFxuICAgICAgY2hpbGRyZW5zOiAnLnRhYnNfX3BhbmVsJyxcbiAgICB9LFxuICB9XG5cbiAgX19zdGF0ZSA9IHtcbiAgICBhY3RpdmU6ICdhY3RpdmUnLFxuICAgIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICB9XG5cbiAgX19hdHRyaWJ1YmVzID0ge1xuICAgIGJ1dHRvbjogJ2RhdGEtdGFicy1pbmRleCcsXG4gICAgcGFuZWw6ICdkYXRhLXRhYnMtcGFuZWwnLFxuICAgIGJ1dHRvblN0YXRlOiAnZGF0YS10YWJzLWluZGV4LWFjdGl2ZScsXG4gICAgcGFubmVsU3RhdGU6ICdkYXRhLXRhYnMtcGFuZWwtYWN0aXZlJyxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgZGVmYXVsdEluZGV4IH0pIHtcbiAgICB0aGlzLnByb3BzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgZGVmYXVsdEluZGV4LFxuICAgICAgfSxcbiAgICAgIHRoaXMuX19kZWZhdWx0c1xuICAgIClcblxuICAgIHRoaXMuYnV0dG9ucyA9ICRBbGwoYCR7dGhpcy5fX3NlbGVjdG9ycy5saXN0LmJ1dHRvbnN9YClcbiAgICB0aGlzLnBhbmVscyA9ICRBbGwoYCR7dGhpcy5fX3NlbGVjdG9ycy5wYW5lbHMuY2hpbGRyZW5zfWApXG5cbiAgICB0aGlzLmluaXQoKVxuICAgIHRoaXMuc2V0SW5kZXgoKVxuICAgIHRoaXMuZXZlbnRzTGlzdGVuZXJzKClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKFxuICAgICAgJ3RhYnNfX2l0ZW0tc3R5bGUtYWN0aXZlJ1xuICAgIClcblxuICAgIHRoaXMucGFuZWxzW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5wYW5uZWxTdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3RhYnNfX3BhbmVsLWFjdGl2ZScpXG4gIH1cblxuICBzZXRJbmRleCgpIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b24sIGluZGV4KVxuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSwgZmFsc2UpXG4gICAgfSlcblxuICAgIHRoaXMucGFuZWxzLmZvckVhY2goKHBhbmVsLCBpbmRleCkgPT4ge1xuICAgICAgcGFuZWwuc2V0QXR0cmlidXRlKHRoaXMuX19hdHRyaWJ1YmVzLnBhbmVsLCBpbmRleClcbiAgICAgIHBhbmVsLnNldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5wYW5uZWxTdGF0ZSwgZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIG9uQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLl9fYXR0cmlidWJlcy5idXR0b24pXG5cbiAgICAvL3Vuc2V0IHByZXZpb3VzIGFjdGl2ZSBlbGVtZW50XG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLnNldEF0dHJpYnV0ZShcbiAgICAgIHRoaXMuX19hdHRyaWJ1YmVzLnBhbm5lbFN0YXRlLFxuICAgICAgZmFsc2VcbiAgICApXG5cbiAgICB0aGlzLmJ1dHRvbnNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAndGFic19faXRlbS1zdHlsZS1hY3RpdmUnXG4gICAgKVxuXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIGZhbHNlXG4gICAgKVxuXG4gICAgdGhpcy5wYW5lbHNbdGhpcy5wcm9wcy5kZWZhdWx0SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ3RhYnNfX3BhbmVsLWFjdGl2ZScpXG5cbiAgICB0aGlzLnByb3BzLmRlZmF1bHRJbmRleCA9IGluZGV4XG5cbiAgICAvL2FjdGl2ZSBjdXJyZW50ICBidXR0b24gYW5kIHRhYnNcbiAgICB0aGlzLnBhbmVsc1t0aGlzLnByb3BzLmRlZmF1bHRJbmRleF0uc2V0QXR0cmlidXRlKFxuICAgICAgdGhpcy5fX2F0dHJpYnViZXMucGFubmVsU3RhdGUsXG4gICAgICB0cnVlXG4gICAgKVxuICAgIHRoaXMucGFuZWxzW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKCd0YWJzX19wYW5lbC1hY3RpdmUnKVxuXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLl9fYXR0cmlidWJlcy5idXR0b25TdGF0ZSxcbiAgICAgIHRydWVcbiAgICApXG4gICAgdGhpcy5idXR0b25zW3RoaXMucHJvcHMuZGVmYXVsdEluZGV4XS5jbGFzc0xpc3QuYWRkKFxuICAgICAgJ3RhYnNfX2l0ZW0tc3R5bGUtYWN0aXZlJ1xuICAgIClcbiAgfVxuXG4gIGV2ZW50c0xpc3RlbmVycygpIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSlcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgUHJlbG9hZGVyIGZyb20gJy4vUHJlbG9hZGVyJ1xuaW1wb3J0IFBsYXllciBmcm9tICcuL3dpZGdldHMvbXVzaWMtcGxheWVyL3BsYXllcidcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vTmF2aWdhdGlvbidcbmltcG9ydCBGb3JtSGFuZGxlciBmcm9tICcuLi9jb25maWcvZm9ybXMnXG5pbXBvcnQgQ2FudmFzIGZyb20gJy4uL2FuaW1hdGlvbi9jYW52YXMnXG5pbXBvcnQgU21vb3Roc2Nyb2xsIGZyb20gJy4uL3V0aWxzL1Ntb290aHNjcm9sbCdcblxuXG5leHBvcnQgeyBQcmVsb2FkZXIsIFBsYXllciwgTmF2aWdhdGlvbiwgRm9ybUhhbmRsZXIsIENhbnZhcywgU21vb3Roc2Nyb2xsIH1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uLy4uL2NsYXNzZXMvQ29tcG9uZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdzbGlkZXInKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy5pdGVtcykgcmV0dXJuXG5cbiAgICB0aGlzLmNoaWxkID0gWy4uLnRoaXMuZWxlbWVudHMuaXRlbXMuY2hpbGRyZW5dXG4gICAgdGhpcy5pbmRleCA9IDFcbiAgICB0aGlzLnBhZGRpbmcgPSAyNFxuICAgIHRoaXMuY3VycmVudFBvc2l0aW9uID0gMFxuICAgIHRoaXMudHJlc2hvbGQgPSAwXG4gICAgdGhpcy5kcmFnSW50ZXJ2YWxsID0gODBcblxuICAgIHRoaXMuc2V0Q2hpbGRXaWR0aCgpXG4gICAgdGhpcy5zZXRQb3NpdGlvbigpXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgfVxuXG4gIHNldENoaWxkV2lkdGgoKSB7XG4gICAgdGhpcy5jaGlsZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLnN0eWxlLmZsZXggPSAnbm9uZSdcbiAgICAgIGl0ZW0uc3R5bGUud2lkdGggPSBgJHt3aW5kb3cuaW5uZXJXaWR0aCAqIDAuOH1weGBcbiAgICB9KVxuICB9XG5cbiAgc2V0UG9zaXRpb24oKSB7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudHMuaXRlbXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9XG4gICAgICAtKCh0aGlzLndpZHRoIC0gd2luZG93LmlubmVyV2lkdGggLSAyNCkgLyAyKSAqIHRoaXMuaW5kZXhcbiAgICB0aGlzLmVsZW1lbnRzLml0ZW1zLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzRCgke3RoaXMuY3VycmVudFBvc2l0aW9ufXB4LCAwLCAwKWBcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UG9zaXRpb25cbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy5jaGlsZC5sZW5ndGggLSAxKSByZXR1cm5cbiAgICB0aGlzLmluZGV4KytcbiAgICBpZiAodGhpcy5pbmRleCA9PT0gMikge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudHMuaXRlbXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uID1cbiAgICAgICAgLSgodGhpcy53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoKSAvIDIpICogdGhpcy5pbmRleFxuICAgICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHtcbiAgICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gLSB0aGlzLnBhZGRpbmdcbiAgICAgIH1weCwgMCwgMClgXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UG9zaXRpb24oKVxuICAgIH1cbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgaWYgKHRoaXMuaW5kZXggPD0gMCkge1xuICAgICAgdGhpcy5pbmRleCA9IDBcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmluZGV4LS1cbiAgICBpZiAodGhpcy5pbmRleCA9PT0gMCkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudHMuaXRlbXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uID1cbiAgICAgICAgLSgodGhpcy53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoIC0gMjQpIC8gMikgKiB0aGlzLmluZGV4XG4gICAgICB0aGlzLmVsZW1lbnRzLml0ZW1zLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzRCgke3RoaXMucGFkZGluZ31weCwgMCwgMClgXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UG9zaXRpb24oKVxuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VEb3duKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJ1xuXG4gICAgdGhpcy5pc0Rvd24gPSB0cnVlXG4gICAgdGhpcy5kcmFnU3RhcnQgPSBlLnhcbiAgICB0aGlzLmRyYWdTdGFydHkgPSBlLnlcbiAgfVxuXG4gIG9uTW91c2VNb3ZlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoIXRoaXMuaXNEb3duKSByZXR1cm5cbiAgICB0aGlzLnRyZXNob2xkID0gZS54IC0gdGhpcy5kcmFnU3RhcnRcbiAgICB0aGlzLmVsZW1lbnRzLml0ZW1zLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzRCgke1xuICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gKyB0aGlzLnRyZXNob2xkXG4gICAgfXB4LCAwLCAwKWBcbiAgfVxuXG4gIG9uTW91c2VVcChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLnN0eWxlLmN1cnNvciA9ICdncmFiJ1xuICAgIGlmICh0aGlzLnRyZXNob2xkID4gMCAmJiB0aGlzLnRyZXNob2xkID49IHRoaXMuZHJhZ0ludGVydmFsbCkge1xuICAgICAgdGhpcy5wcmV2KClcbiAgICAgIGNvbnNvbGUubG9nKCdwcmV2JylcbiAgICB9IGVsc2UgaWYgKHRoaXMudHJlc2hvbGQgPCAwICYmIHRoaXMudHJlc2hvbGQgPD0gLXRoaXMuZHJhZ0ludGVydmFsbCkge1xuICAgICAgdGhpcy5uZXh0KClcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHt0aGlzLmN1cnJlbnRQb3NpdGlvbn1weCwgMCwgMClgXG4gICAgfVxuXG4gICAgdGhpcy5pc0Rvd24gPSBmYWxzZVxuICB9XG5cbiAgb25XaW5kb3dSZXNpemUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2V0Q2hpbGRXaWR0aCgpXG4gICAgdGhpcy5zZXRQb3NpdGlvbigpXG4gIH1cblxuICBldmVudExpc3RlbmVyKCkge1xuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLm5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm5leHQuYmluZCh0aGlzKSlcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wcmV2LmJpbmQodGhpcykpXG5cbiAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZWRvd24nLFxuICAgICAgdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ21vdXNlb3ZlcicsXG4gICAgICB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcylcbiAgICApXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpKVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpKVxuICB9XG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbmNvbnN0IGRhdGEgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9kYXRhcy9zb3VuZHMuanNvbicpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgY29uc3RydWN0b3Ioc3RhcnR0aW1lLCBlbmR0aW1lLCByYW5nZSwgcHJvZ3Jlc3MsIHByZWxvYWRlciwgbWVkaWEpIHtcbiAgICB0aGlzLmVsZW1lbnRzID0geyBzdGFydHRpbWUsIGVuZHRpbWUsIHJhbmdlLCBwcmVsb2FkZXIsIHByb2dyZXNzIH1cbiAgICB0aGlzLm1lZGlhID0gbWVkaWFcbiAgICB0aGlzLiNpbml0KClcbiAgfVxuXG4gICNpbml0KCkge1xuICAgIHRoaXMuI2FkZEV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgI2lzUGxheSgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLm1lZGlhLmN1cnJlbnRUaW1lKVxuICAgIGNvbnNvbGUubG9nKCdpcyBzdGFydCBwbGF5JylcbiAgfVxuXG4gICNvblBhdXNlKCkge1xuICAgIGNvbnNvbGUubG9nKCdQYXVzZScpXG4gIH1cblxuICBpc0VuZGVkKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKVxuICB9XG5cbiAgI3NldFRpbWUoKSB7XG4gICAgdGhpcy5ob3VycyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5jdXJyZW50VGltZSAvIDM2MDApXG4gICAgdGhpcy5taW51dGVzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmN1cnJlbnRUaW1lIC8gNjApXG4gICAgdGhpcy5zZWNvbmRzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmN1cnJlbnRUaW1lIC0gdGhpcy5taW51dGVzICogNjApXG5cbiAgICB0aGlzLmhvdXJzVmFsdWUgPSB0aGlzLm1pbnV0ZXNWYWx1ZSA9IHRoaXMuc2Vjb25kc1ZhbHVlID0gMFxuXG4gICAgaWYgKHRoaXMuaG91cnMgPD0gMCkge1xuICAgICAgdGhpcy5ob3Vyc1ZhbHVlID0gYDAke3RoaXMuaG91cnN9YFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhvdXJzVmFsdWUgPSB0aGlzLmhvdXJzXG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWludXRlcyA8IDEwKSB7XG4gICAgICB0aGlzLm1pbnV0ZXNWYWx1ZSA9IGAwJHt0aGlzLm1pbnV0ZXN9YFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1pbnV0ZXNWYWx1ZSA9IHRoaXMubWludXRlc1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlY29uZHMgPCAxMCkge1xuICAgICAgdGhpcy5zZWNvbmRzVmFsdWUgPSBgMCR7dGhpcy5zZWNvbmRzfWBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWNvbmRzVmFsdWUgPSB0aGlzLnNlY29uZHNcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzLnN0YXJ0dGltZS50ZXh0Q29udGVudCA9IGAke3RoaXMubWludXRlc1ZhbHVlfSA6ICR7dGhpcy5zZWNvbmRzVmFsdWV9YFxuICAgIHRoaXMuI3VwZGF0ZVByb2dyZXNzKClcbiAgfVxuXG4gICN1cGRhdGVQcm9ncmVzcygpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnJhbmdlLnZhbHVlID0gdGhpcy5tZWRpYS5jdXJyZW50VGltZVxuICAgIHRoaXMucmF0aW8gPSB0aGlzLmVsZW1lbnRzLnJhbmdlLnZhbHVlIC8gdGhpcy5lbGVtZW50cy5yYW5nZS5tYXhcbiAgICB0aGlzLmVsZW1lbnRzLnByb2dyZXNzLnN0eWxlLndpZHRoID0gYCR7dGhpcy5yYXRpbyAqIDEwMH0lYFxuICB9XG5cbiAgI3NldEZ1bGxUaW1lKCkge1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmR1cmF0aW9uIC8gMzYwMClcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmR1cmF0aW9uIC8gNjApXG4gICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IodGhpcy5tZWRpYS5kdXJhdGlvbiAtIG1pbnV0ZXMgKiA2MClcblxuICAgIGlmIChob3VycyA8PSAwKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVuZHRpbWUudGV4dENvbnRlbnQgPSBgJHtcbiAgICAgICAgbWludXRlcyA8PSA5ID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXNcbiAgICAgIH0gOiAke3NlY29uZHMgPD0gOSA/ICcwJyArIHNlY29uZHMgOiBzZWNvbmRzfWBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5lbmR0aW1lLnRleHRDb250ZW50ID0gYCR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfWBcbiAgICB9XG4gIH1cblxuICAjb25UaW1lQ2hhbmdlKCkge1xuICAgIHRoaXMubWVkaWEuY3VycmVudFRpbWUgPSB0aGlzLmVsZW1lbnRzLnJhbmdlLnZhbHVlXG4gICAgdGhpcy4jc2V0VGltZSgpXG4gIH1cblxuICAjcHJvZ3Jlc3MoKSB7XG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLm1lZGlhLmR1cmF0aW9uXG4gICAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lZGlhLmJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm1lZGlhLmJ1ZmZlcmVkLnN0YXJ0KHRoaXMubWVkaWEuYnVmZmVyZWQubGVuZ3RoIC0gMSAtIGkpIDxcbiAgICAgICAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgdGhpcy5tZWRpYS5idWZmZXJlZC5lbmQoXG4gICAgICAgICAgICAgIHRoaXMubWVkaWEuYnVmZmVyZWQubGVuZ3RoIC0gMSAtIGkgLyBkdXJhdGlvblxuICAgICAgICAgICAgKSAqIDEwMFxuICAgICAgICAgIClcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLnByZWxvYWRlci5zdHlsZS53aWR0aCA9XG4gICAgICAgICAgICAodGhpcy5tZWRpYS5idWZmZXJlZC5lbmQodGhpcy5tZWRpYS5idWZmZXJlZC5sZW5ndGggLSAxIC0gaSkgL1xuICAgICAgICAgICAgICBkdXJhdGlvbikgKlxuICAgICAgICAgICAgICAxMDAgK1xuICAgICAgICAgICAgJyUnXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICNtZXRhRGF0YUxvYWRlZCgpIHtcbiAgICB0aGlzLiNzZXRGdWxsVGltZSgpXG4gICAgdGhpcy5lbGVtZW50cy5yYW5nZS5tYXggPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuZHVyYXRpb24pXG5cbiAgICB0aGlzLmVsZW1lbnRzLnJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy4jb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgdGhpcy4jaXNQbGF5LmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIHRoaXMuI29uUGF1c2UuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5pc0VuZGVkLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy4jc2V0VGltZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgI2FkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHRoaXMuI3Byb2dyZXNzLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2xvYWRlZG1ldGFkYXRhJyxcbiAgICAgIHRoaXMuI21ldGFEYXRhTG9hZGVkLmJpbmQodGhpcylcbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uLy4uLy4uL2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBNZWRpYU1hbmFnZXIgZnJvbSAnLi9NZWRpYU1hbmFnZXInXG5pbXBvcnQgVGltZXIgZnJvbSAnLi9UaW1lcidcbmltcG9ydCBWb2x1bWUgZnJvbSAnLi92b2x1bWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigncGxheWVyJylcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmlzRXhwYW5kID0gZmFsc2VcbiAgICB0aGlzLnNyYyA9IHRoaXMuZWxlbWVudHMubWVkaWEuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgIHRoaXMubWVkaWEgPSB0aGlzLmVsZW1lbnRzLm1lZGlhXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5yYW5kb21JZCA9IDBcbiAgICB0aGlzLnNvdW5kID0gbnVsbFxuICAgIHRoaXMuaWNvbiA9IHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkucXVlcnlTZWxlY3RvcignaScpXG4gICAgdGhpcy5kZXNrdG9wID0gNzY4XG4gICAgdGhpcy5tZWRpYS52b2x1bWUgPSB0aGlzLnZvbHVtZSA9IDI2IC8gMTAwXG5cbiAgICB0aGlzLm1lZGlhTWFuYWdlciA9IG5ldyBNZWRpYU1hbmFnZXIoKVxuICAgIHRoaXMubGVuZ3RoID0gdGhpcy5tZWRpYU1hbmFnZXIuZGF0YS5sZW5ndGhcbiAgICB0aGlzLnJhbmRvbUlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5sZW5ndGgpXG5cbiAgICAvL0V2ZW50c1xuXG4gICAgdGhpcy5jbG9zZSgpXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gdGhpcy5kZXNrdG9wKSB0aGlzLnNob3coKVxuICAgIHRoaXMuY29tcG9uZW50c0hhbmRsZXIodGhpcy5yYW5kb21JZClcblxuICAgIHRoaXMudm9sdW1lSGFuZGxlcih0aGlzLm1lZGlhKVxuICAgIHRoaXMuZXZlbnRzTGlzdGVybmVyKClcbiAgfVxuXG4gIGV4cGFuZCgpIHtcbiAgICBpZiAodGhpcy5yb290LnBsYXllci5jb3ZlckNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ2lzRXhwYW5kJykpIHtcbiAgICAgIHRoaXMucm9vdC5wbGF5ZXIuYnV0dG9uLmV4cGFuZC5xdWVyeVNlbGVjdG9yKCdzcGFuJykudGV4dENvbnRlbnQgPVxuICAgICAgICAnRXhwYW5kJ1xuICAgICAgdGhpcy5yb290LnBsYXllci5jb3ZlckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdpc0V4cGFuZCcpXG4gICAgICB0aGlzLnJvb3QucGxheWVyLmNvdmVyQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcwcHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wbGF5ZXIuY292ZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaXNFeHBhbmQnKVxuICAgICAgdGhpcy5yb290LnBsYXllci5idXR0b24uZXhwYW5kLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS50ZXh0Q29udGVudCA9XG4gICAgICAgICdSZWR1Y2UnXG4gICAgICB0aGlzLnJvb3QucGxheWVyLmNvdmVyQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxODBweCdcbiAgICB9XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnNlbGYuY2xhc3NMaXN0LmFkZCgnaXNIaWRkZW4nKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnRvZ2dsZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnNlbGYuY2xhc3NMaXN0LnJlbW92ZSgnaXNIaWRkZW4nKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnRvZ2dsZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICB9XG5cbiAgY29tcG9uZW50c0hhbmRsZXIoaWQpIHtcbiAgICB0aGlzLnNvdW5kID0gdGhpcy5tZWRpYU1hbmFnZXIuZGF0YVtpZF1cbiAgICB0aGlzLm1lZGlhLnNyYyA9IHRoaXMuc291bmQubGlua1xuICAgIHRoaXMuc2V0Q29tcG9uZW50cyh0aGlzLnNvdW5kKVxuICAgIHRoaXMudGltZXJIYW5kbGVyKHRoaXMubWVkaWEpXG4gIH1cblxuICBzZXRDb21wb25lbnRzKHNvdW5kKSB7XG4gICAgdGhpcy5jb3ZlckhhbmRsZXIoc291bmQpXG4gICAgdGhpcy5zZXRTb3VuZERldGFpbHMoc291bmQpXG4gIH1cblxuICBjb3ZlckhhbmRsZXIoc291bmQpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmNvdmVyLnNyYyA9IHNvdW5kLmFsYnVtLmNvdmVyXG4gIH1cblxuICBzZXRTb3VuZERldGFpbHMoc291bmQpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmFydGlzdC5pbm5lclRleHQgPSBzb3VuZC5hcnRpc3QubmFtZVxuICAgIHRoaXMuZWxlbWVudHMudGl0bGUuaW5uZXJUZXh0ID0gc291bmQudGl0bGVcbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuZGF0YXNldC5pY29uID09PSAncm9iLXBsYXknKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ3JvYi1wYXVzZScpXG4gICAgICB0aGlzLmljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb2ItcGF1c2UnKVxuICAgICAgdGhpcy5tZWRpYS5wbGF5KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdyb2ItcGxheScpXG4gICAgICB0aGlzLmljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb2ItcGxheScpXG4gICAgICB0aGlzLm1lZGlhLnBhdXNlKClcbiAgICB9XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5kYXRhc2V0Lmljb24gPT09ICdyb2ItcGxheScpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAncm9iLXBhdXNlJylcbiAgICAgIHRoaXMuaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvYi1wYXVzZScpXG4gICAgICB0aGlzLm1lZGlhLnBhdXNlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdyb2ItcGxheScpXG4gICAgICB0aGlzLmljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb2ItcGxheScpXG4gICAgfVxuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLm1lZGlhLnBhdXNlKClcbiAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID0gMFxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAncm9iLXBsYXknKVxuICAgIHRoaXMuaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvYi1wbGF5JylcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5yYW5kb21JZCsrXG4gICAgaWYgKHRoaXMucmFuZG9tSWQgPiB0aGlzLmxlbmd0aCAtIDEpIHRoaXMucmFuZG9tSWQgPSAwXG4gICAgdGhpcy5zdG9wKClcbiAgICB0aGlzLmNvbXBvbmVudHNIYW5kbGVyKHRoaXMucmFuZG9tSWQpXG4gICAgdGhpcy5wbGF5KClcbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgdGhpcy5yYW5kb21JZC0tXG4gICAgaWYgKHRoaXMucmFuZG9tSWQgPCAwKSB0aGlzLnJhbmRvbUlkID0gdGhpcy5sZW5ndGggLSAxXG4gICAgdGhpcy5zdG9wKClcbiAgICB0aGlzLmNvbXBvbmVudHNIYW5kbGVyKHRoaXMucmFuZG9tSWQpXG4gICAgdGhpcy5wbGF5KClcbiAgfVxuXG4gIHRpbWVySGFuZGxlcihtZWRpYSkge1xuICAgIHRoaXMudGltZSA9IG5ldyBUaW1lcihcbiAgICAgIHRoaXMuZWxlbWVudHMudGltZXIuc3RhcnRUaW1lLFxuICAgICAgdGhpcy5lbGVtZW50cy50aW1lci5lbmRUaW1lLFxuICAgICAgdGhpcy5lbGVtZW50cy50aW1lci5yYW5nZSxcbiAgICAgIHRoaXMuZWxlbWVudHMudGltZXIucHJvZ3Jlc3MsXG4gICAgICB0aGlzLmVsZW1lbnRzLnRpbWVyLnByZWxvYWQsXG4gICAgICBtZWRpYVxuICAgIClcbiAgfVxuXG4gIHZvbHVtZUhhbmRsZXIoc291bmQpIHtcbiAgICB0aGlzLnZvbHVtZSA9IG5ldyBWb2x1bWUoXG4gICAgICB0aGlzLmVsZW1lbnRzLnZvbHVtZS5jb250YWluZXIsXG4gICAgICB0aGlzLmVsZW1lbnRzLnZvbHVtZS5ncmFwcGVyLFxuICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWUuc2xpZGVyLFxuICAgICAgc291bmQsXG4gICAgICB0aGlzLnZvbHVtZSAqIDEwMFxuICAgIClcbiAgfVxuXG4gIG9uV2luZG93UmVzaXplKGUpIHtcbiAgICBjb25zdCBzaXplID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoc2l6ZSA+IHRoaXMuZGVza3RvcCkge1xuICAgICAgdGhpcy5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgb25FbmRlZChlKSB7XG4gICAgdGhpcy5uZXh0KClcbiAgfVxuXG4gIGV2ZW50c0xpc3Rlcm5lcigpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5leHBhbmQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLmV4cGFuZC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLmNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKVxuICAgIC8vIENvbnRyb2xcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbGF5LmJpbmQodGhpcykpXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ubmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubmV4dC5iaW5kKHRoaXMpKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnByZXYuYmluZCh0aGlzKSlcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi50b2dnbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zaG93LmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5vbkVuZGVkLmJpbmQodGhpcykpXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpKVxuICB9XG59XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Z1bmN0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWb2x1bWUge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGdyYXBwZXIsIHNsaWRlciwgbWVkaWEsIHZvbHVtZSkge1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5ncmFwcGVyID0gZ3JhcHBlclxuICAgIHRoaXMuY29udGFpbmVyQm90dG9tID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tXG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICB0aGlzLmNvbnRhaW5lclRvcCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgIHRoaXMuc2xpZGVyID0gc2xpZGVyXG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSB2b2x1bWUgfCAyNlxuICAgIHRoaXMucG9zaXRpb24gPSB7IGN1cnJlbnQ6IDAsIHRhcmdldDogMCB9XG4gICAgdGhpcy5zdGVwID0gMC44XG4gICAgdGhpcy5zbGlkZXIuc3R5bGUuaGVpZ2h0ID0gYGNhbGMoJHt0aGlzLmluaXRpYWxWYWx1ZX0lKWBcbiAgICB0aGlzLm1lZGlhLnZvbHVtZSA9IGNsYW1wKHRoaXMuaW5pdGlhbFZhbHVlIC8gdGhpcy5jb250YWluZXJIZWlnaHQsIDAsIDEpXG5cbiAgICB0aGlzLm9uUG9pbnRlckRvd25IYW5kbGVyID0gdGhpcy5vblBvaW50ZXJEb3duLmJpbmQodGhpcylcbiAgICB0aGlzLm9uUG9pbnRlck1vdmVIYW5kbGVyID0gdGhpcy5vblBvaW50ZXJNb3ZlLmJpbmQodGhpcylcbiAgICB0aGlzLm9uUG9pbnRlclVwSGFuZGxlciA9IHRoaXMub25Qb2ludGVyVXAuYmluZCh0aGlzKVxuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKClcbiAgfVxuXG4gIG9uUG9pbnRlckRvd24oZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB0aGlzLnBvc2l0aW9uLmN1cnJlbnQgPSBlLmNsaWVudFlcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICducy1yZXNpemUnXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMub25Qb2ludGVyVXBIYW5kbGVyKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMub25Qb2ludGVyTW92ZUhhbmRsZXIpXG4gIH1cblxuICBvblBvaW50ZXJNb3ZlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICB0aGlzLnBvc2l0aW9uLnRhcmdldCA9IGUuY2xpZW50WVxuICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5wb3NpdGlvbi5jdXJyZW50IC0gdGhpcy5wb3NpdGlvbi50YXJnZXRcbiAgICBjb25zb2xlLmxvZyhkaXN0YW5jZSlcbiAgICBpZiAoZGlzdGFuY2UgIT09IDApIHtcbiAgICAgIGlmIChkaXN0YW5jZSA+IDApIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVmFsdWUgKz0gdGhpcy5zdGVwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSAtPSB0aGlzLnN0ZXBcbiAgICAgIH1cblxuICAgICAgdGhpcy5zbGlkZXIuc3R5bGUuaGVpZ2h0ID0gYGNhbGMoJHtjbGFtcCh0aGlzLmluaXRpYWxWYWx1ZSwgMCwgMTAwKX0lKWBcbiAgICAgIHRoaXMubWVkaWEudm9sdW1lID0gY2xhbXAodGhpcy5pbml0aWFsVmFsdWUgLyB0aGlzLmNvbnRhaW5lckhlaWdodCwgMCwgMSlcbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uLmN1cnJlbnQgPSB0aGlzLnBvc2l0aW9uLnRhcmdldFxuICB9XG5cbiAgb25Qb2ludGVyVXAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB0aGlzLnBvc2l0aW9uLmN1cnJlbnQgPSBlLmNsaWVudFlcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0J1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMub25Qb2ludGVyRG93bkhhbmRsZXIpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5vblBvaW50ZXJNb3ZlSGFuZGxlcilcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLm9uUG9pbnRlckRvd25IYW5kbGVyKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vY29tcG9uZW50cy9BbGVydCdcbmltcG9ydCB7IHZhbGlkRW1haWwgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybUhhbmRsZXIgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IodHlwZSwgdXJsLCBtZXRob2QpIHtcbiAgICBzdXBlcignZm9ybScpXG4gICAgdGhpcy5mb3JtVHlwZSA9IHR5cGVcbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZFxuICAgIHRoaXMudXJsID0gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vJHt1cmx9YFxuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzW3RoaXMuZm9ybVR5cGVdXG4gICAgdGhpcy52YWwgPSAwXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgfVxuXG4gIC8vIFNlbmRUb0RiICgpIHt9XG5cbiAgYXN5bmMgZmV0Y2godXJsLCBtZXRob2QsIGRhdGEpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgbW9kZTogJ25vLWNvcnMnLFxuICAgICAgYm9keTogZGF0YSxcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKVxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIHJlcy5qc29uKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLmFsZXJ0ID0gbmV3IEFsZXJ0KGRhdGEudGV4dCwgZGF0YS50eXBlKVxuICAgICAgICB0aGlzLmFsZXJ0LnNob3coKVxuICAgICAgICB0aGlzLmVsZW1lbnRzLmZvcm0ucmVzZXQoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXJyb3JcbiAgICAgIHJlcy5qc29uKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLmFsZXJ0ID0gbmV3IEFsZXJ0KGRhdGEudGV4dCwgZGF0YS50eXBlKVxuICAgICAgICB0aGlzLmFsZXJ0LnNob3coKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBzZW5kRGF0YShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdmFsaWROdW1iZXIgPSB0aGlzLnZlcmlmeURhdGEoXG4gICAgICB0aGlzLmVsZW1lbnRzLm1haWwsXG4gICAgICB0aGlzLmVsZW1lbnRzLm5hbWUsXG4gICAgICB0aGlzLmVsZW1lbnRzLm1lc3NhZ2VcbiAgICApXG4gICAgaWYgKCF2YWxpZE51bWJlcikgcmV0dXJuXG4gICAgdGhpcy5lbGVtZW50cy5hbGVydC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgZWwuaW5uZXJUZXh0ID0gJydcbiAgICB9KVxuICAgIGNvbnN0IGZvcm1FbGVtZW50cyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IEZvcm1EYXRhKHRoaXMuZWxlbWVudHMuZm9ybSkpXG4gICAgdGhpcy5mZXRjaCh0aGlzLnVybCwgdGhpcy5tZXRob2QsIGZvcm1FbGVtZW50cylcbiAgfVxuXG4gIHZlcmlmeURhdGEobWFpbCwgbmFtZSwgbWVzc2FnZSkge1xuICAgIHRoaXMudmFsID0gMFxuICAgIC8vIGVtYWlsXG4gICAgaWYgKHZhbGlkRW1haWwobWFpbC52YWx1ZSkpIHtcbiAgICAgIHRoaXMudmFsKytcbiAgICB9IGVsc2UgaWYgKG1haWwudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVtYWlsQWxlcnQuaW5uZXJUZXh0ID0gJ1JlcXVpcmVkKidcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5lbWFpbEFsZXJ0LmlubmVyVGV4dCA9ICdUaGlzIGVtYWlsIGlzIG5vdCB2YWxpZCdcbiAgICB9XG5cbiAgICAvLyBuYW1lXG4gICAgaWYgKG5hbWUudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLm5hbWVBbGVydC5pbm5lclRleHQgPSAnUmVxdWlyZWQqJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbCsrXG4gICAgfVxuXG4gICAgLy8gbWVzc2FnZVxuICAgIGlmIChtZXNzYWdlLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50cy5tZXNzYWdlQWxlcnQuaW5uZXJUZXh0ID0gJ1JlcXVpcmVkKidcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWwrK1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnZhbCA9PT0gM1xuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcigpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMuYnV0dG9uKSByZXR1cm5cbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2VuZERhdGEuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUGFnZXMgZnJvbSAnLi4vcGFnZXMvaW5kZXgnXG5cbmxldCBQQUdFUyA9IHt9XG5cbmZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhQYWdlcykpIHtcbiAgUEFHRVNba2V5XSA9IHZhbHVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VGYWN0b3J5IHtcbiAgIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShjbGFzc05hbWUsIGRhdGFzKSB7XG4gICAgY29uc3QgZWxlbWVudE5hbWUgPSBQQUdFU1tjbGFzc05hbWVdXG4gICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnROYW1lID8gbmV3IGVsZW1lbnROYW1lKGRhdGFzID8gZGF0YXMgOiB2b2lkIDApIDogbnVsbFxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxufVxuXG5QYWdlRmFjdG9yeS5jcmVhdGVJbnN0YW5jZSgnSG9tZScpXG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vY2xhc3Nlcy9QYWdlcydcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0IGV4dGVuZHMgUGFnZXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignYWJvdXQnKVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG4gIH1cbn1cbiIsImltcG9ydCBQYWdlcyBmcm9tICcuLi9jbGFzc2VzL1BhZ2VzJ1xuaW1wb3J0IFNsaWRlciBmcm9tICcuLi9jb21wb25lbnRzL3NsaWRlci9TbGlkZXInXG5pbXBvcnQgU2VydmljZXMgZnJvbSAnLi4vY29tcG9uZW50cy9TZXJ2aWNlcydcbmltcG9ydCBGb3JtSGFuZGxlciBmcm9tICcuLi9jb25maWcvZm9ybXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUgZXh0ZW5kcyBQYWdlcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdob21lJylcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKVxuICAgIG5ldyBTbGlkZXIoKVxuICAgIG5ldyBTZXJ2aWNlcygpXG4gICAgbmV3IEZvcm1IYW5kbGVyKCdtb2RhbCcsICdwcm9qZWN0cy91c2Vyc1Byb2plY3RzJywgJ1BPU1QnKVxuICB9XG59XG4iLCJpbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUnXG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9hYm91dCdcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vcHJvamVjdCdcbmltcG9ydCBQaG90b2dyYXBoaWVzIGZyb20gJy4vcGhvdG9ncmFwaGllcydcblxuXG5leHBvcnQgeyBIb21lICwgQWJvdXQsIFByb2plY3QsIFBob3RvZ3JhcGhpZXN9XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vY2xhc3Nlcy9QYWdlcydcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBob3RvZ3JhcGhpZXMgZXh0ZW5kcyBQYWdlcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwaG90b2dyYXBoaWVzJylcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zb2xlLmxvZygncGhvdG9ncmFwaGllcyBwYWdlJylcbiAgICBzdXBlci5jcmVhdGUoKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vY2xhc3Nlcy9QYWdlcydcbmltcG9ydCBUYWJzIGZyb20gJy4uL2NvbXBvbmVudHMvVGFicydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdCBleHRlbmRzIFBhZ2VzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3Byb2plY3QnKVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHRoaXMudGFicyA9IG5ldyBUYWJzKHsgZGVmYXVsdEluZGV4OiAxIH0pXG4gICAgc3VwZXIuY3JlYXRlKClcbiAgfVxufVxuIiwiaW1wb3J0IHsgbGVycCwgY2xhbXAgfSBmcm9tICcuL2Z1bmN0aW9uJ1xuaW1wb3J0IG5vcm1hbGl6ZVdoZWVsIGZyb20gJ25vcm1hbGl6ZS13aGVlbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU21vb3Roc2Nyb2xsIHtcbiAgX19kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBkaXJlY3Rpb246ICd2JywgLy8gdjogdmVydGljYWwgb3IgIHYtIDogdmVydGljYWwgYm90dG9tIHRvIHRvcDsgIGg6IEhvcml6b250YWwgb3IgaC0gaG9yaXpvbnRhbCByaWdodCB0byBsZWZ0XG4gICAgc21vb3RoOiAwLjEsIC8vIFNtb290aCBhbW91bnQgLT4gTGVycCBmdW5jdGlvblxuICAgIHN0YXJ0ZWRQb2ludDogMCxcbiAgfVxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRzKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMuX19kZWZhdWx0T3B0aW9ucy5zdGFydGVkUG9pbnQgPSBvcHRzLnN0YXJ0ZWRQb2ludCB8fCAwXG4gICAgdGhpcy5zbW9vdGhPcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLl9fZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgfSlcblxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgY3VycmVudDogMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIGxpbWl0OiAwLFxuICAgIH1cblxuICAgIHRoaXMub2Zmc2V0SGVpZ2h0ID0gMFxuXG4gICAgdGhpcy5kaW1lbnNpb25IYW5kbGVyKClcbiAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC5saW1pdClcbiAgICB0aGlzLmFkZExpc3RlbmVyKClcbiAgfVxuXG4gIGRpbWVuc2lvbkhhbmRsZXIoKSB7XG4gICAgdGhpcy5vZmZzZXRIZWlnaHQgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gICAgdGhpcy5zY3JvbGwubGltaXQgPVxuICAgICAgdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArXG4gICAgICB0aGlzLm9mZnNldEhlaWdodCAtXG4gICAgICB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgfVxuXG4gIG9uTW91c2VXaGVlbChlKSB7XG4gICAgY29uc3QgZXZlbnQgPSBub3JtYWxpemVXaGVlbChlKVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3YnIHx8XG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuZGlyZWN0aW9uID09PSAndi0nXG4gICAgKSB7XG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gZXZlbnQucGl4ZWxZXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRoaXMuc21vb3RoT3B0aW9ucy5kaXJlY3Rpb24gPT09ICdoJyB8fFxuICAgICAgdGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2gtJ1xuICAgICkge1xuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IGV2ZW50LnBpeGVsWFxuICAgIH1cbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuICAgIHRoaXMub2Zmc2V0SGVpZ2h0ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID1cbiAgICAgIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgKyB0aGlzLm9mZnNldEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICB9XG5cbiAgYWRkTGlzdGVuZXIoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbk1vdXNlV2hlZWwuYmluZCh0aGlzKSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuc2Nyb2xsLmxpbWl0KVxuXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gY2xhbXAodGhpcy5zY3JvbGwudGFyZ2V0LCAwLCB0aGlzLnNjcm9sbC5saW1pdClcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gbGVycChcbiAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQsXG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXQsXG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuc21vb3RoXG4gICAgKVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPCAwLjAxKSB7XG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gMFxuICAgIH1cblxuICAgIHRoaXMudHJhbnNsYXRlQnlDYXNlKClcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpXG4gIH1cblxuICB0cmFuc2xhdGVCeUNhc2UoKSB7XG4gICAgc3dpdGNoICh0aGlzLnNtb290aE9wdGlvbnMuZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICd2JzpcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzRCgwLCAtJHtNYXRoLmZsb29yKFxuICAgICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnRcbiAgICAgICAgKX1weCAsIDApYFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICd2LSc6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoMCwgJHtNYXRoLmZsb29yKFxuICAgICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnRcbiAgICAgICAgKX1weCwgMClgXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ2gnOlxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoLSR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ2gtJzpcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY29uc3QgbGVycCA9IChzdGFydCwgZW5kLCBhbW91bnQpID0+IHtcbiAgcmV0dXJuICgxIC0gYW1vdW50KSAqIHN0YXJ0ICsgYW1vdW50ICogZW5kXG59XG5cbmV4cG9ydCBjb25zdCBjbGFtcCA9ICh2YWx1ZSwgbWluLCBtYXgpID0+IHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpXG59XG5cbi8qKlxuICogVsOpcmlmaWUgc2kgdW4gZmljaGllciBlc3QgZGUgdHlwZSBQREYsICBET0MgZXQgRE9YIGMnZXN0IMOgIGRpcmVcbiAqIHVuIGRvY3VtZW50IHRleHRlXG4gKiBAcGFyYW0ge0ZJTEV9IGZpbGUgLSBsZSBmaWNoaWVyIHF1aSBkb2l0IMOqdHJlIHbDqXJpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBsZSB0eXBlIGRlIGZpY2hpZXIgZG9jdW1lbnQgfCBpbWFnZVxuICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW5cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkRmlsZVR5cGUgPSAoZmlsZSwgdHlwZSkgPT4ge1xuICBjb25zdCBkb2N1bWVudHMgPSBbXG4gICAgJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgJ2FwcGxpY2F0aW9uL2RvYycsXG4gICAgJ2FwcGxpY2F0aW9uL2RvY3gnLFxuICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsXG4gICAgJ2FwcGxpY2F0aW9uL21zd29yZCcsXG4gIF1cblxuICBjb25zdCBpbWFnZXMgPSBbXG4gICAgJ2ltYWdlL3BuZycsXG4gICAgJ2ltYWdlL2pwZWcnLFxuICAgICdpbWFnZS9qcGcnLFxuICAgICdpbWFnZS93ZWJwJyxcbiAgICAnaW1hZ2UvYm1wJyxcbiAgXVxuXG4gIGlmICh0eXBlID09PSAnZG9jdW1lbnRzJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZmlsZS50eXBlID09PSBkb2N1bWVudHNbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnaW1hZ2VzJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZmlsZS50eXBlID09PSBpbWFnZXNbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFbDqXJpZmllIHNpIHVuZSBVcmwgcG9pbnRlIHZlcnMgdW5lIHBhZ2UgdmFsaWRlXG4gKlxuICogQGFzeW5jXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gbGUgbGllbiBkZSBsYSBwYWdlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gQm9vbGVhblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gVXJsRXhpc3QodXJsKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbW9kZTogJ25vLWNvcnMnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgfSxcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucylcbiAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyAhPT0gJzQwNCdcbn1cblxuLyoqXG4gKiBWZXJpZmllIHNpIHVuIGVtYWlsIGVzdCB2YWxpZGVcbiAqIEBwYXJhbSBlbWFpbFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkRW1haWwoZW1haWwpIHtcbiAgY29uc3QgcmVnZXggPVxuICAgIC9eW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOS1dKyg/OlxcLlthLXpBLVowLTktXSspKiQvXG5cbiAgaWYgKHJlZ2V4LnRlc3QoZW1haWwpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG4vKipcbiAqIENhcGl0YWxpc2UgYSBnaXZlbiBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gQSBzdHJpbmcgdG8gY2FwaXRhbGl6ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgY29uc3Qgc3RyID0gc3RyaW5nXG4gIGNvbnN0IGMgPSBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcblxuICByZXR1cm4gY1xufVxuXG4vL2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NdXRhdGlvbk9ic2VydmVyXG4vKipcbiAqIE9ic2VydmUgZXQgZXhlY3VzZSB1biBjYWxsYmFjayBsb3JzcXVlIGxlcyBub2V1ZHMgZW5mYW50cyhET00pIGRlIGxhIGNpYmxlIG9udCDDqXTDqSBtb2RpZmllclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZSAtIExlIG5vZXVkIERPTSDDoCBvYnNlcnbDqVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBsYSBmb25jdGlvbiDDoCDDqXjDqWN1dGVyIGxvcnNxdWUgbGUgRE9NIGRlIGxhIGNpYmxlIMOgIGNoYW5nw6lcbiAqIEBwYXJhbSB7c2VsZWN0b3J9IHNlbGVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBPYnNlcnZlTm9kZURvbUNoYW5nZShub2RlLCBjYiwgc2VsZWN0b3IpIHtcbiAgLy8gU2VsZWN0IHRoZSBub2RlIHRoYXQgd2lsbCBiZSBvYnNlcnZlZCBmb3IgbXV0YXRpb25zXG4gIGNvbnN0IHRhcmdldE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtub2RlfWApXG5cbiAgLy8gT3B0aW9ucyBmb3IgdGhlIG9ic2VydmVyICh3aGljaCBtdXRhdGlvbnMgdG8gb2JzZXJ2ZSlcbiAgY29uc3QgY29uZmlnID0geyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfVxuXG4gIC8vQ2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIG11dGF0aW9ucyBhcmUgb2JzZXJ2ZWRcbiAgY29uc3QgY2FsbGJhY2sgPSAobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgIC8vIFVzZSB0cmFkaXRpb25hbCAnZm9yIGxvb3BzJyBmb3IgSUUgMTFcbiAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9uc0xpc3QpIHtcbiAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICBjYihzZWxlY3RvcilcbiAgICAgIH0gZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XG4gICAgICAgIGNiKHNlbGVjdG9yKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBsaW5rZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spXG5cbiAgLy8gU3RhcnQgb2JzZXJ2aW5nIHRoZSB0YXJnZXQgbm9kZSBmb3IgY29uZmlndXJlZCBtdXRhdGlvbnNcbiAgdGFyZ2V0Tm9kZSA/IG9ic2VydmVyLm9ic2VydmUodGFyZ2V0Tm9kZSwgY29uZmlnKSA6IHZvaWQgMFxuICAvL29ic2VydmVyLm9ic2VydmUodGFyZ2V0Tm9kZSwgY29uZmlnKTtcblxuICAvLyBMYXRlciwgeW91IGNhbiBzdG9wIG9ic2VydmluZ1xuICAvL29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbn1cbiIsIi8qKlxuICogU2VsZWN0IGVsZW1lbnQgaW4gRE9NIEhUTUxcbiAqIEBwYXJhbSB7Kn0gZWxlbWVudCAtIFRoZSBjc3Mgc2VsZWN0b3Igb2YgdGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXRcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0ICQgPSAoZWxlbWVudCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtlbGVtZW50fWApXG59XG5cbi8qKlxuICogU2VsZWN0IGVsZW1lbnRzIGluIERPTSBIVE1MXG4gKiBAcGFyYW0geyp9IGVsZW1lbnRzIC0gVGhlIGNzcyBzZWxlY3RvciBvZiB0aGUgSFRNTCBlbGVtZW50cyB0byB0YXJnZXRcbiAqIEByZXR1cm5zIHtOb2RlTGlzdH1cbiAqL1xuZXhwb3J0IGNvbnN0ICRBbGwgPSAoZWxlbWVudHMpID0+IHtcbiAgcmV0dXJuIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke2VsZW1lbnRzfWApXVxufVxuXG4vKipcbiAqIEdldCBBdHRyaWJ1dGUgb2YgRWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIEhUTUwgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbmFtZSAtIE5hbWUgb2YgYXR0cmlidXRlIChleCA6IGRhdGEtYW5pbWF0aW9uKVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0ICRBdHRyaWJ1dGUgPSAoZWxlbWVudCwgbmFtZSkgPT4ge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSlcbn1cbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBzcGxpdHMgdGV4dCBmcm9tIGlubmVySFRNTCBiYXNlZCBvbiByZWdleC4gVGhlbiwgaXQgd3JhcCBzcGFyYXRlZCB3b3JkcyB3aXRoIDxzcGFuPiBleGNlcHQgPGJyPlxuICogRmluYWxseSwgaXQgcmV0dXJucyBhcnJheSBvZiBzcGFuXG4gKiBAcGFyYW0ge0hUTUwgZWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNwbGl0IFRoaXMgaXMgc2VwYXJhdG9yIGZvciB0ZXh0IChyZWdleClcbiAqIEByZXR1cm4ge0FycmF5LjxIVE1MIGVsZW1lbnQ+fSBBcnJheSBvZiBzcGFuIGh0bWwgZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZWxlbWVudCwgc3BsaXQpIHtcbiAgdmFyIHdvcmRzID0gc3BsaXRUZXh0KGVsZW1lbnQuaW5uZXJIVE1MLnRvU3RyaW5nKCksIHNwbGl0KVxuICB2YXIgc3RyID0gJydcbiAgd29yZHMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgIGlmIChsaW5lLmluZGV4T2YoJzxicj4nKSA+IC0xKSB7XG4gICAgICB2YXIgbGluZXMgPSBsaW5lLnNwbGl0KCc8YnI+JylcbiAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGlkKSB7XG4gICAgICAgIHN0ciArPSBpZCA+IDAgPyAnPGJyPicgKyBwYXJzZUxpbmUobGluZSkgOiBwYXJzZUxpbmUobGluZSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSBwYXJzZUxpbmUobGluZSlcbiAgICB9XG4gIH0pXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gc3RyXG4gIHJldHVybiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4nKVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gc3BsaXQgdGV4dCBpbnRvIGFycmF5IGluY2x1ZGluZyA8YnI+XG4gKiBAcGFyYW1zIHtzdHJpbmd9IHR4dCBUaGlzIGlzIHRleHQgdGhhdCByZXRyaWV2ZWQgZnJvbSBodG1sIGVsZW1lbnRcbiAqIEBwYXJhbXMge3N0cmluZ30gc3BsaXQgSXQgaXMgc2VwYXJhdG9yIGZvciB0ZXh0IChyZWdleClcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSByZXN1bHQgb2Ygc3BsaXQgdXNpbmcgc2VwYXJhdG9yIGluY2x1ZGluZyA8YnI+XG4gKi9cbmZ1bmN0aW9uIHNwbGl0VGV4dCh0eHQsIHNwbGl0KSB7XG4gIHZhciBzcGxpdHMgPSB0eHQuc3BsaXQoJzxicj4nKVxuICB2YXIgYXJyID0gW11cbiAgc3BsaXRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGlkKSB7XG4gICAgaWYgKGlkID4gMCkgYXJyLnB1c2goJzxicj4nKVxuICAgIGFyciA9IGFyci5jb25jYXQoaXRlbS5zcGxpdChzcGxpdCkpXG4gIH0pXG4gIHJldHVybiBhcnJcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHdyYXAgcGFzc2VkIGFyZ3VtZW50IHdpdGggPHNwYW4+IGlmIHBhc3NlZCBhcmd1bWVudCBpcyBub3QgZW1wdHksIHNwYWNlLCBvciA8YnI+XG4gKiBAcGFyYW1zIHtzdHJpbmd9IGxpbmUgSXQgaXMgd29yZHMgdGhhdCBhcmUgc2VwYXJhdGVkIGJ5IHNlcHJhdG9yXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGl0IGlzIGVpdGhlciAnJywgJyAnLCA8YnI+ICwgb3IgPHNwYW4+bGluZTxzcGFuPlxuICovXG5mdW5jdGlvbiBwYXJzZUxpbmUobGluZSkge1xuICBpZiAobGluZSA9PT0gJycgfHwgbGluZSA9PT0gJyAnKSB7XG4gICAgcmV0dXJuIGxpbmVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGluZSA9PT0gJzxicj4nXG4gICAgICA/ICc8YnI+J1xuICAgICAgOiAnPHNwYW4+JyArIGxpbmUgKyAnPC9zcGFuPicgKyAobGluZS5sZW5ndGggPiAxID8gJyAnIDogJycpXG4gIH1cbn1cbiIsIi8qKlxuICogRXZFbWl0dGVyIHYyLjEuMVxuICogTGlsJyBldmVudCBlbWl0dGVyXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxubGV0IHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHJldHVybiB0aGlzO1xuXG4gIC8vIHNldCBldmVudHMgaGFzaFxuICBsZXQgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIGxldCBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoICFsaXN0ZW5lcnMuaW5jbHVkZXMoIGxpc3RlbmVyICkgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHJldHVybiB0aGlzO1xuXG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICBsZXQgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgbGV0IG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIGxldCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGFyZ3MgKSB7XG4gIGxldCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKCAwICk7XG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAvLyBvbmNlIHN0dWZmXG4gIGxldCBvbmNlTGlzdGVuZXJzID0gdGhpcy5fb25jZUV2ZW50cyAmJiB0aGlzLl9vbmNlRXZlbnRzWyBldmVudE5hbWUgXTtcblxuICBmb3IgKCBsZXQgbGlzdGVuZXIgb2YgbGlzdGVuZXJzICkge1xuICAgIGxldCBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgaWYgKCBpc09uY2UgKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgICAgIC8vIHVuc2V0IG9uY2UgZmxhZ1xuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgbGlzdGVuZXJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG4gIHJldHVybiB0aGlzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSApICk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMS4zXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gdGFyZ2V0Ll9nc2FwLnggPyB0YXJnZXQuX2dzYXBbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldC5fZ3NhcC5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICBjYWNoZVtwXSA9IHRoaXMudGZtW3BdO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmIChpICYmICFpLmlzU3RhcnQgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIGVudmlyb25tZW50cyB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSB3aGVuIGNyZWF0ZWQgd2l0aCBhIG5hbWVzcGFjZSBpbiB3aGljaCBjYXNlIHdlIGRlZmF1bHQgdG8gdGhlIHN0YW5kYXJkIGNyZWF0ZUVsZW1lbnQoKSB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUuIEFsc28gbm90ZSB0aGF0IHdoZW4gR1NBUCBpcyBlbWJlZGRlZCBkaXJlY3RseSBpbnNpZGUgYW4gU1ZHIGZpbGUsIGNyZWF0ZUVsZW1lbnQoKSB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIHN0eWxlIG9iamVjdCBpbiBGaXJlZm94IChzZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5zdWJzdHIoMCwgMikgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzI0NTgzLWhvdy10by1yZXR1cm4tY29sb3JzLXRoYXQtaS1oYWQtYWZ0ZXItcmV2ZXJzZS9cbiAgICB9XG4gIH1cblxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgYSxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0VmFsdWVzLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBjb2xvcixcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgZW5kVW5pdCxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFZhbHVlcztcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvLyBlbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZCA9PT0gXCJhdXRvXCIpIHtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gc3RhcnQ7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pO1xuICB9IGVsc2UgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXggJiYgKGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYykpIHtcbiAgICAvL2lmIGl0J3MgemVybyAobGlrZSBpZiBzY2FsZVggYW5kIHNjYWxlWSBhcmUgemVybyksIHNraXAgaXQgdG8gYXZvaWQgZXJyb3JzIHdpdGggZGl2aWRpbmcgYnkgemVyby5cbiAgICB4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArIChjICogdHkgLSBkICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHhPcmlnaW4gPSB4O1xuICAgIHlPcmlnaW4gPSB5O1xuICB9XG5cbiAgaWYgKHNtb290aCB8fCBzbW9vdGggIT09IGZhbHNlICYmIGNhY2hlLnNtb290aCkge1xuICAgIHR4ID0geE9yaWdpbiAtIHhPcmlnaW5PbGQ7XG4gICAgdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcbiAgICBjYWNoZS54T2Zmc2V0ID0geE9mZnNldE9sZCArICh0eCAqIGEgKyB0eSAqIGMpIC0gdHg7XG4gICAgY2FjaGUueU9mZnNldCA9IHlPZmZzZXRPbGQgKyAodHggKiBiICsgdHkgKiBkKSAtIHR5O1xuICB9IGVsc2Uge1xuICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGNhY2hlLnhPcmlnaW4gPSB4T3JpZ2luO1xuICBjYWNoZS55T3JpZ2luID0geU9yaWdpbjtcbiAgY2FjaGUuc21vb3RoID0gISFzbW9vdGg7XG4gIGNhY2hlLm9yaWdpbiA9IG9yaWdpbjtcbiAgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSA9ICEhb3JpZ2luSXNBYnNvbHV0ZTtcbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiMHB4IDBweFwiOyAvL290aGVyd2lzZSwgaWYgc29tZW9uZSBzZXRzICBhbiBvcmlnaW4gdmlhIENTUywgaXQgd2lsbCBsaWtlbHkgaW50ZXJmZXJlIHdpdGggdGhlIFNWRyB0cmFuc2Zvcm0gYXR0cmlidXRlIG9uZXMgKGJlY2F1c2UgcmVtZW1iZXIsIHdlJ3JlIGJha2luZyB0aGUgb3JpZ2luIGludG8gdGhlIG1hdHJpeCgpIHZhbHVlKS5cblxuICBpZiAocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9yaWdpblwiLCB4T3JpZ2luT2xkLCB4T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T3JpZ2luXCIsIHlPcmlnaW5PbGQsIHlPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPZmZzZXRcIiwgeE9mZnNldE9sZCwgY2FjaGUueE9mZnNldCk7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9mZnNldFwiLCB5T2Zmc2V0T2xkLCBjYWNoZS55T2Zmc2V0KTtcbiAgfVxuXG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgeE9yaWdpbiArIFwiIFwiICsgeU9yaWdpbik7XG59LFxuICAgIF9wYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IG5ldyBHU0NhY2hlKHRhcmdldCk7XG5cbiAgaWYgKFwieFwiIGluIGNhY2hlICYmICF1bmNhY2hlICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgaW52ZXJ0ZWRTY2FsZVggPSBjYWNoZS5zY2FsZVggPCAwLFxuICAgICAgcHggPSBcInB4XCIsXG4gICAgICBkZWcgPSBcImRlZ1wiLFxuICAgICAgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG5cbiAgaWYgKGNzLnRyYW5zbGF0ZSkge1xuICAgIC8vIGFjY29tbW9kYXRlIGluZGVwZW5kZW50IHRyYW5zZm9ybXMgYnkgY29tYmluaW5nIHRoZW0gaW50byBub3JtYWwgb25lcy5cbiAgICBpZiAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiB8fCBjcy5zY2FsZSAhPT0gXCJub25lXCIgfHwgY3Mucm90YXRlICE9PSBcIm5vbmVcIikge1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgPyBcInRyYW5zbGF0ZTNkKFwiICsgKGNzLnRyYW5zbGF0ZSArIFwiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwgMykuam9pbihcIiwgXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3Mucm90YXRlICE9PSBcIm5vbmVcIiA/IFwicm90YXRlKFwiICsgY3Mucm90YXRlICsgXCIpIFwiIDogXCJcIikgKyAoY3Muc2NhbGUgIT09IFwibm9uZVwiID8gXCJzY2FsZShcIiArIGNzLnNjYWxlLnNwbGl0KFwiIFwiKS5qb2luKFwiLFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJub25lXCIgPyBjc1tfdHJhbnNmb3JtUHJvcF0gOiBcIlwiKTtcbiAgICB9XG5cbiAgICBzdHlsZS5zY2FsZSA9IHN0eWxlLnJvdGF0ZSA9IHN0eWxlLnRyYW5zbGF0ZSA9IFwibm9uZVwiO1xuICB9XG5cbiAgbWF0cml4ID0gX2dldE1hdHJpeCh0YXJnZXQsIGNhY2hlLnN2Zyk7XG5cbiAgaWYgKGNhY2hlLnN2Zykge1xuICAgIGlmIChjYWNoZS51bmNhY2hlKSB7XG4gICAgICAvLyBpZiBjYWNoZS51bmNhY2hlIGlzIHRydWUgKGFuZCBtYXliZSBpZiBvcmlnaW4gaXMgMCwwKSwgd2UgbmVlZCB0byBzZXQgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAoY2FjaGUueE9yaWdpbiAtIGJib3gueCkgKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSBiYm94LnkpICsgXCJweFwiLiBQcmV2aW91c2x5IHdlIGxldCB0aGUgZGF0YS1zdmctb3JpZ2luIHN0YXkgaW5zdGVhZCwgYnV0IHdoZW4gaW50cm9kdWNpbmcgcmV2ZXJ0KCksIGl0IGNvbXBsaWNhdGVkIHRoaW5ncy5cbiAgICAgIHQyID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgIG9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gLSB0Mi54ICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gdDIueSkgKyBcInB4XCI7XG4gICAgICB0MSA9IFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQxID0gIXVuY2FjaGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTsgLy8gIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuICAgIH1cblxuICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIHQxIHx8IG9yaWdpbiwgISF0MSB8fCBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlLCBjYWNoZS5zbW9vdGggIT09IGZhbHNlLCBtYXRyaXgpO1xuICB9XG5cbiAgeE9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gfHwgMDtcbiAgeU9yaWdpbiA9IGNhY2hlLnlPcmlnaW4gfHwgMDtcblxuICBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuICAgIGEgPSBtYXRyaXhbMF07IC8vYTExXG5cbiAgICBiID0gbWF0cml4WzFdOyAvL2EyMVxuXG4gICAgYyA9IG1hdHJpeFsyXTsgLy9hMzFcblxuICAgIGQgPSBtYXRyaXhbM107IC8vYTQxXG5cbiAgICB4ID0gYTEyID0gbWF0cml4WzRdO1xuICAgIHkgPSBhMjIgPSBtYXRyaXhbNV07IC8vMkQgbWF0cml4XG5cbiAgICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgICAgc2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuICAgICAgcm90YXRpb24gPSBhIHx8IGIgPyBfYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IDA7IC8vbm90ZTogaWYgc2NhbGVYIGlzIDAsIHdlIGNhbm5vdCBhY2N1cmF0ZWx5IG1lYXN1cmUgcm90YXRpb24uIFNhbWUgZm9yIHNrZXdYIHdpdGggYSBzY2FsZVkgb2YgMC4gVGhlcmVmb3JlLCB3ZSBkZWZhdWx0IHRvIHRoZSBwcmV2aW91c2x5IHJlY29yZGVkIHZhbHVlIChvciB6ZXJvIGlmIHRoYXQgZG9lc24ndCBleGlzdCkuXG5cbiAgICAgIHNrZXdYID0gYyB8fCBkID8gX2F0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IDA7XG4gICAgICBza2V3WCAmJiAoc2NhbGVZICo9IE1hdGguYWJzKE1hdGguY29zKHNrZXdYICogX0RFRzJSQUQpKSk7XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICB5IC09IHlPcmlnaW4gLSAoeE9yaWdpbiAqIGIgKyB5T3JpZ2luICogZCk7XG4gICAgICB9IC8vM0QgbWF0cml4XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgYTQyID0gbWF0cml4WzddO1xuICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgYTMzID0gbWF0cml4WzEwXTtcbiAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgIHkgPSBtYXRyaXhbMTNdO1xuICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICByb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHOyAvL3JvdGF0aW9uWFxuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICB0MyA9IGEzMiAqIGNvcyArIGEzMyAqIHNpbjtcbiAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgYTMzID0gYTMyICogLXNpbiArIGEzMyAqIGNvcztcbiAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYTEyID0gdDE7XG4gICAgICAgIGEyMiA9IHQyO1xuICAgICAgICBhMzIgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvbllcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgIHJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBjICogY29zIC0gYTMzICogc2luO1xuICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGIgPSB0MjtcbiAgICAgICAgYyA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWlxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgcm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICBiID0gYiAqIGNvcyAtIGEgKiBzaW47XG4gICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBhMTIgPSB0MjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG4gICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgfVxuXG4gICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGExMiwgYTIyKTtcbiAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAvL3NlbnNlIGlmIHRoZXJlIGFyZSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9uIGFuIFNWRyBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB3aGVuIHJlbmRlcmluZy4gVGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaXMgbW9yZSByZWxpYWJsZSBjcm9zcy1icm93c2VyLCBidXQgd2UgY2FuJ3QganVzdCByZW1vdmUgdGhlIENTUyBvbmVzIGJlY2F1c2UgdGhleSBtYXkgYmUgYXBwbGllZCBpbiBhIENTUyBydWxlIHNvbWV3aGVyZSAobm90IGp1c3QgaW5saW5lKS5cbiAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICB0MSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHQxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG4gICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICBzY2FsZVggKj0gLTE7XG4gICAgICBza2V3WCArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVkgKj0gLTE7XG4gICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9XG4gIH1cblxuICB1bmNhY2hlID0gdW5jYWNoZSB8fCBjYWNoZS51bmNhY2hlO1xuICBjYWNoZS54ID0geCAtICgoY2FjaGUueFBlcmNlbnQgPSB4ICYmICghdW5jYWNoZSAmJiBjYWNoZS54UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldFdpZHRoICogY2FjaGUueFBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS55ID0geSAtICgoY2FjaGUueVBlcmNlbnQgPSB5ICYmICghdW5jYWNoZSAmJiBjYWNoZS55UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgPT09IE1hdGgucm91bmQoLXkpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRIZWlnaHQgKiBjYWNoZS55UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnogPSB6ICsgcHg7XG4gIGNhY2hlLnNjYWxlWCA9IF9yb3VuZChzY2FsZVgpO1xuICBjYWNoZS5zY2FsZVkgPSBfcm91bmQoc2NhbGVZKTtcbiAgY2FjaGUucm90YXRpb24gPSBfcm91bmQocm90YXRpb24pICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblggPSBfcm91bmQocm90YXRpb25YKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25ZID0gX3JvdW5kKHJvdGF0aW9uWSkgKyBkZWc7XG4gIGNhY2hlLnNrZXdYID0gc2tld1ggKyBkZWc7XG4gIGNhY2hlLnNrZXdZID0gc2tld1kgKyBkZWc7XG4gIGNhY2hlLnRyYW5zZm9ybVBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmUgKyBweDtcblxuICBpZiAoY2FjaGUuek9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luLnNwbGl0KFwiIFwiKVsyXSkgfHwgMCkge1xuICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgfVxuXG4gIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtID0gY2FjaGUuc3ZnID8gX3JlbmRlclNWR1RyYW5zZm9ybXMgOiBfc3VwcG9ydHMzRCA/IF9yZW5kZXJDU1NUcmFuc2Zvcm1zIDogX3JlbmRlck5vbjNEVHJhbnNmb3JtcztcbiAgY2FjaGUudW5jYWNoZSA9IDA7XG4gIHJldHVybiBjYWNoZTtcbn0sXG4gICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xufSxcbiAgICAvL2ZvciBoYW5kbGluZyB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLCBzdHJpcHBpbmcgb3V0IHRoZSAzcmQgZGltZW5zaW9uXG5fYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgcmV0dXJuIF9yb3VuZChwYXJzZUZsb2F0KHN0YXJ0KSArIHBhcnNlRmxvYXQoX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgdmFsdWUgKyBcInB4XCIsIHVuaXQpKSkgKyB1bml0O1xufSxcbiAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgY2FjaGUueiA9IFwiMHB4XCI7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgIF96ZXJvUHggPSBcIjBweFwiLFxuICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueSxcbiAgICAgIHogPSBfcmVmLnosXG4gICAgICByb3RhdGlvbiA9IF9yZWYucm90YXRpb24sXG4gICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgc2tld1ggPSBfcmVmLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgIHVzZTNEID0gZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgcmF0aW8gJiYgcmF0aW8gIT09IDEgfHwgZm9yY2UzRCA9PT0gdHJ1ZTsgLy8gU2FmYXJpIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBpdCBub3QgdG8gcmVuZGVyIDNEIHRyYW5zZm9ybS1vcmlnaW4gdmFsdWVzIHByb3Blcmx5LCBzbyB3ZSBmb3JjZSB0aGUgeiBvcmlnaW4gdG8gMCwgcmVjb3JkIGl0IGluIHRoZSBjYWNoZSwgYW5kIHRoZW4gZG8gdGhlIG1hdGggaGVyZSB0byBvZmZzZXQgdGhlIHRyYW5zbGF0ZSB2YWx1ZXMgYWNjb3JkaW5nbHkgKGJhc2ljYWxseSBkbyB0aGUgM0QgdHJhbnNmb3JtLW9yaWdpbiBwYXJ0IG1hbnVhbGx5KVxuXG5cbiAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICB2YXIgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWSkgKiBfREVHMlJBRCxcbiAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIGNvcztcblxuICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHggPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB4LCBhMTMgKiBjb3MgKiAtek9yaWdpbik7XG4gICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gIH1cblxuICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xufSxcbiAgICBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJTVkdUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZjIueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZjIueCxcbiAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgcm90YXRpb24gPSBfcmVmMi5yb3RhdGlvbixcbiAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgeE9yaWdpbiA9IF9yZWYyLnhPcmlnaW4sXG4gICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgeU9mZnNldCA9IF9yZWYyLnlPZmZzZXQsXG4gICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgdHkgPSBwYXJzZUZsb2F0KHkpLFxuICAgICAgYTExLFxuICAgICAgYTIxLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdGVtcDtcblxuICByb3RhdGlvbiA9IHBhcnNlRmxvYXQocm90YXRpb24pO1xuICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gIGlmIChza2V3WSkge1xuICAgIC8vZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcy4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIDEwIGRlZ3JlZXMuXG4gICAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcbiAgICBza2V3WCArPSBza2V3WTtcbiAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgIHNrZXdYICo9IF9ERUcyUkFEO1xuICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTEyID0gTWF0aC5zaW4ocm90YXRpb24gLSBza2V3WCkgKiAtc2NhbGVZO1xuICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgaWYgKHNrZXdYKSB7XG4gICAgICBza2V3WSAqPSBfREVHMlJBRDtcbiAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgIGExMiAqPSB0ZW1wO1xuICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgIGlmIChza2V3WSkge1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1kpO1xuICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICBhMjEgKj0gdGVtcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhMTEgPSBfcm91bmQoYTExKTtcbiAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICBhMjIgPSBfcm91bmQoYTIyKTtcbiAgfSBlbHNlIHtcbiAgICBhMTEgPSBzY2FsZVg7XG4gICAgYTIyID0gc2NhbGVZO1xuICAgIGEyMSA9IGExMiA9IDA7XG4gIH1cblxuICBpZiAodHggJiYgIX4oeCArIFwiXCIpLmluZGV4T2YoXCJweFwiKSB8fCB0eSAmJiAhfih5ICsgXCJcIikuaW5kZXhPZihcInB4XCIpKSB7XG4gICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgfVxuXG4gIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeU9yaWdpbiAtICh4T3JpZ2luICogYTIxICsgeU9yaWdpbiAqIGEyMikgKyB5T2Zmc2V0KTtcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIC8vVGhlIFNWRyBzcGVjIGRvZXNuJ3Qgc3VwcG9ydCBwZXJjZW50YWdlLWJhc2VkIHRyYW5zbGF0aW9uIGluIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgc28gd2UgbWVyZ2UgaXQgaW50byB0aGUgdHJhbnNsYXRpb24gdG8gc2ltdWxhdGUgaXQuXG4gICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgdHggPSBfcm91bmQodHggKyB4UGVyY2VudCAvIDEwMCAqIHRlbXAud2lkdGgpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gIH1cblxuICB0ZW1wID0gXCJtYXRyaXgoXCIgKyBhMTEgKyBcIixcIiArIGEyMSArIFwiLFwiICsgYTEyICsgXCIsXCIgKyBhMjIgKyBcIixcIiArIHR4ICsgXCIsXCIgKyB0eSArIFwiKVwiO1xuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApOyAvL3NvbWUgYnJvd3NlcnMgcHJpb3JpdGl6ZSBDU1MgdHJhbnNmb3JtcyBvdmVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLiBXaGVuIHdlIHNlbnNlIHRoYXQgdGhlIHVzZXIgaGFzIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQsIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gdGhpcyB3YXkgKG90aGVyd2lzZSBzb21lIGJyb3dzZXIgc2ltcGx5IHdvbid0IHJlbmRlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIDAsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCAwLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChwIGluIHN0eWxlID8gaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjIsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgY2hpbGQuX2luaXR0ZWQgJiYgIWNoaWxkLl9kdXIpIHtcbiAgICAvL2luIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZC4gSW1hZ2luZSBpdCdzIGF0IGl0cyBlbmQgc3RhdGUsIHRoZW4gdGhlIHN0YXJ0VGltZSBpcyBtb3ZlZCBXQVkgbGF0ZXIgKGFmdGVyIHRoZSBlbmQgb2YgdGhpcyB0aW1lbGluZSksIGl0IHNob3VsZCByZW5kZXIgYXQgaXRzIGJlZ2lubmluZy5cbiAgICB0ID0gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZWxpbmUucmF3VGltZSgpLCBjaGlsZCk7XG5cbiAgICBpZiAoIWNoaWxkLl9kdXIgfHwgX2NsYW1wKDAsIGNoaWxkLnRvdGFsRHVyYXRpb24oKSwgdCkgLSBjaGlsZC5fdFRpbWUgPiBfdGlueU51bSkge1xuICAgICAgY2hpbGQucmVuZGVyKHQsIHRydWUpO1xuICAgIH1cbiAgfSAvL2lmIHRoZSB0aW1lbGluZSBoYXMgYWxyZWFkeSBlbmRlZCBidXQgdGhlIGluc2VydGVkIHR3ZWVuL3RpbWVsaW5lIGV4dGVuZHMgdGhlIGR1cmF0aW9uLCB3ZSBzaG91bGQgZW5hYmxlIHRoaXMgdGltZWxpbmUgYWdhaW4gc28gdGhhdCBpdCByZW5kZXJzIHByb3Blcmx5LiBXZSBzaG91bGQgYWxzbyBhbGlnbiB0aGUgcGxheWhlYWQgd2l0aCB0aGUgcGFyZW50IHRpbWVsaW5lJ3Mgd2hlbiBhcHByb3ByaWF0ZS5cblxuXG4gIGlmIChfdW5jYWNoZSh0aW1lbGluZSwgY2hpbGQpLl9kcCAmJiB0aW1lbGluZS5faW5pdHRlZCAmJiB0aW1lbGluZS5fdGltZSA+PSB0aW1lbGluZS5fZHVyICYmIHRpbWVsaW5lLl90cykge1xuICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9ycyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQuLi5cbiAgICBpZiAodGltZWxpbmUuX2R1ciA8IHRpbWVsaW5lLmR1cmF0aW9uKCkpIHtcbiAgICAgIHQgPSB0aW1lbGluZTtcblxuICAgICAgd2hpbGUgKHQuX2RwKSB7XG4gICAgICAgIHQucmF3VGltZSgpID49IDAgJiYgdC50b3RhbFRpbWUodC5fdFRpbWUpOyAvL21vdmVzIHRoZSB0aW1lbGluZSAoc2hpZnRzIGl0cyBzdGFydFRpbWUpIGlmIG5lY2Vzc2FyeSwgYW5kIGFsc28gZW5hYmxlcyBpdC4gSWYgaXQncyBjdXJyZW50bHkgemVybywgdGhvdWdoLCBpdCBtYXkgbm90IGJlIHNjaGVkdWxlZCB0byByZW5kZXIgdW50aWwgbGF0ZXIgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIGl0IHRvIGFsaWduIHdpdGggdGhlIGN1cnJlbnQgcGxheWhlYWQgcG9zaXRpb24uIE9ubHkgbW92ZSB0byBjYXRjaCB1cCB3aXRoIHRoZSBwbGF5aGVhZC5cblxuICAgICAgICB0ID0gdC5fZHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGltZWxpbmUuX3pUaW1lID0gLV90aW55TnVtOyAvLyBoZWxwcyBlbnN1cmUgdGhhdCB0aGUgbmV4dCByZW5kZXIoKSB3aWxsIGJlIGZvcmNlZCAoY3Jvc3NpbmdTdGFydCA9IHRydWUgaW4gcmVuZGVyKCkpLCBldmVuIGlmIHRoZSBkdXJhdGlvbiBoYXNuJ3QgY2hhbmdlZCAod2UncmUgYWRkaW5nIGEgY2hpbGQgd2hpY2ggd291bGQgbmVlZCB0byBnZXQgcmVuZGVyZWQpLiBEZWZpbml0ZWx5IGFuIGVkZ2UgY2FzZS4gTm90ZTogd2UgTVVTVCBkbyB0aGlzIEFGVEVSIHRoZSBsb29wIGFib3ZlIHdoZXJlIHRoZSB0b3RhbFRpbWUoKSBtaWdodCB0cmlnZ2VyIGEgcmVuZGVyKCkgYmVjYXVzZSB0aGlzIF9hZGRUb1RpbWVsaW5lKCkgbWV0aG9kIGdldHMgY2FsbGVkIGZyb20gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgQkVGT1JFIHR3ZWVucyBldmVuIHJlY29yZCB0aGVpciB0YXJnZXRzLCBldGMuIHNvIHdlIHdvdWxkbid0IHdhbnQgdGhpbmdzIHRvIGdldCB0cmlnZ2VyZWQgaW4gdGhlIHdyb25nIG9yZGVyLlxuICB9XG59LFxuICAgIF9hZGRUb1RpbWVsaW5lID0gZnVuY3Rpb24gX2FkZFRvVGltZWxpbmUodGltZWxpbmUsIGNoaWxkLCBwb3NpdGlvbiwgc2tpcENoZWNrcykge1xuICBjaGlsZC5wYXJlbnQgJiYgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICBjaGlsZC5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICBjaGlsZC5fZW5kID0gX3JvdW5kUHJlY2lzZShjaGlsZC5fc3RhcnQgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gTWF0aC5hYnMoY2hpbGQudGltZVNjYWxlKCkpIHx8IDApKTtcblxuICBfYWRkTGlua2VkTGlzdEl0ZW0odGltZWxpbmUsIGNoaWxkLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRpbWVsaW5lLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuXG4gIF9pc0Zyb21PckZyb21TdGFydChjaGlsZCkgfHwgKHRpbWVsaW5lLl9yZWNlbnQgPSBjaGlsZCk7XG4gIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgdGltZWxpbmUuX3RzIDwgMCAmJiBfYWxpZ25QbGF5aGVhZCh0aW1lbGluZSwgdGltZWxpbmUuX3RUaW1lKTsgLy8gaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgbmV3IGNoaWxkIG1ha2VzIGl0IGxvbmdlciwgd2UgbWF5IG5lZWQgdG8gYWRqdXN0IHRoZSBwYXJlbnQncyBfc3RhcnQgKHB1c2ggaXQgYmFjaylcblxuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpIHtcbiAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICFfcmV2ZXJ0aW5nICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgdHdlZW4uX3lveW8gJiYgaXRlcmF0aW9uICYgMSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuXG4gICAgaWYgKGl0ZXJhdGlvbiAhPT0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpKSB7XG4gICAgICAvLyBpZiBpdGVyYXRpb24gY2hhbmdlZFxuICAgICAgcHJldlJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBfcmV2ZXJ0aW5nIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhX3JldmVydGluZykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgJiYgX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcyk7XG4gIGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICB9IDogY29uZmlnLFxuICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgcmF3VmFyczogMFxuICB9LFxuICAgICAgc3RhdGljcyA9IHtcbiAgICB0YXJnZXRUZXN0OiAwLFxuICAgIGdldDogMCxcbiAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgYWxpYXNlczoge30sXG4gICAgcmVnaXN0ZXI6IDBcbiAgfTtcblxuICBfd2FrZSgpO1xuXG4gIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgfVxuXG4gICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICB9XG5cbiAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmFmID0gX3dpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBfd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgX3RpY2tlckFjdGl2ZSA9IDA7XG4gICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICB9LFxuICAgIGxhZ1Ntb290aGluZzogZnVuY3Rpb24gbGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMSAvIF90aW55TnVtOyAvL3plcm8gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2ljYWxseSB1bmxpbWl0ZWRcblxuICAgICAgX2FkanVzdGVkTGFnID0gTWF0aC5taW4oYWRqdXN0ZWRMYWcsIF9sYWdUaHJlc2hvbGQsIDApO1xuICAgIH0sXG4gICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgX2dhcCA9IDEwMDAgLyAoX2ZwcyB8fCAyNDApO1xuICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoY2FsbGJhY2ssIG9uY2UsIHByaW9yaXRpemUpIHtcbiAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgIF9zZWxmLnJlbW92ZShmdW5jKTtcbiAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgX2xpc3RlbmVyc1twcmlvcml0aXplID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIl0oZnVuYyk7XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX2N0eCA9IF9jb250ZXh0O1xuXG4gICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgfVxuXG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgIHBhcmVudC50b3RhbFRpbWUocGFyZW50Ll90VGltZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCwgcHV0IGl0IGJhY2sgaW50byBpdHMgbGFzdCBwYXJlbnQgKHJlY29yZGVkIGFzIF9kcCBmb3IgZXhhY3RseSBjYXNlcyBsaWtlIHRoaXMpLiBMaW1pdCB0byBwYXJlbnRzIHdpdGggYXV0b1JlbW92ZUNoaWxkcmVuIChsaWtlIGdsb2JhbFRpbWVsaW5lKSBzbyB0aGF0IGlmIHRoZSB1c2VyIG1hbnVhbGx5IHJlbW92ZXMgYW4gYW5pbWF0aW9uIGZyb20gYSB0aW1lbGluZSBhbmQgdGhlbiBhbHRlcnMgaXRzIHBsYXloZWFkLCBpdCBkb2Vzbid0IGdldCBhZGRlZCBiYWNrIGluLlxuICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAvLyBjaGVjayBmb3IgX3B0TG9va3VwIG9uIGEgVHdlZW4gaW5zdGFuY2UgdG8gZW5zdXJlIGl0IGhhcyBhY3R1YWxseSBmaW5pc2hlZCBiZWluZyBpbnN0YW50aWF0ZWQsIG90aGVyd2lzZSBpZiB0aGlzLnJldmVyc2UoKSBnZXRzIGNhbGxlZCBpbiB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBpdCBjb3VsZCB0cmlnZ2VyIGEgcmVuZGVyKCkgaGVyZSBldmVuIHRob3VnaCB0aGUgX3RhcmdldHMgd2VyZW4ndCBwb3B1bGF0ZWQsIHRodXMgd2hlbiBfaW5pdCgpIGlzIGNhbGxlZCB0aGVyZSB3b24ndCBiZSBhbnkgUHJvcFR3ZWVucyAoaXQnbGwgYWN0IGxpa2UgdGhlIHR3ZWVuIGlzIG5vbi1mdW5jdGlvbmFsKVxuICAgICAgdGhpcy5fdHMgfHwgKHRoaXMuX3BUaW1lID0gX3RvdGFsVGltZSk7IC8vIG90aGVyd2lzZSwgaWYgYW4gYW5pbWF0aW9uIGlzIHBhdXNlZCwgdGhlbiB0aGUgcGxheWhlYWQgaXMgbW92ZWQgYmFjayB0byB6ZXJvLCB0aGVuIHJlc3VtZWQsIGl0J2QgcmV2ZXJ0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHRpbWUgYXQgdGhlIHBhdXNlXG4gICAgICAvL2lmICghdGhpcy5fbG9jaykgeyAvLyBhdm9pZCBlbmRsZXNzIHJlY3Vyc2lvbiAobm90IHN1cmUgd2UgbmVlZCB0aGlzIHlldCBvciBpZiBpdCdzIHdvcnRoIHRoZSBwZXJmb3JtYW5jZSBoaXQpXG4gICAgICAvLyAgIHRoaXMuX2xvY2sgPSAxO1xuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpOyAvLyAgIHRoaXMuX2xvY2sgPSAwO1xuICAgICAgLy99XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gZnV0dXJlIGFkZGl0aW9uPyBVcCBzaWRlOiBmYXN0IGFuZCBtaW5pbWFsIGZpbGUgc2l6ZS4gRG93biBzaWRlOiBvbmx5IHdvcmtzIG9uIHRoaXMgYW5pbWF0aW9uOyBpZiBhIHRpbWVsaW5lIGlzIHJldmVyc2VkLCBmb3IgZXhhbXBsZSwgaXRzIGNoaWxkcmVucycgb25SZXZlcnNlIHdvdWxkbid0IGdldCBjYWxsZWQuXG4gICAgLy8oK3ZhbHVlIDwgMCAmJiB0aGlzLl9ydHMgPj0gMCkgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXZlcnNlXCIsIHRydWUpO1xuICAgIC8vIHByaW9yaXRpemUgcmVuZGVyaW5nIHdoZXJlIHRoZSBwYXJlbnQncyBwbGF5aGVhZCBsaW5lcyB1cCBpbnN0ZWFkIG9mIHRoaXMuX3RUaW1lIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgYSB0d2VlbiB0aGF0J3MgYW5pbWF0aW5nIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgaW4gdGhlIHNhbWUgcmVuZGVyaW5nIGxvb3AgKHNhbWUgcGFyZW50KSwgdGh1cyBpZiB0aGUgdGltZVNjYWxlIHR3ZWVuIHJlbmRlcnMgZmlyc3QsIGl0IHdvdWxkIGFsdGVyIF9zdGFydCBCRUZPUkUgX3RUaW1lIHdhcyBzZXQgb24gdGhhdCB0aWNrIChpbiB0aGUgcmVuZGVyaW5nIGxvb3ApLCBlZmZlY3RpdmVseSBmcmVlemluZyBpdCB1bnRpbCB0aGUgdGltZVNjYWxlIHR3ZWVuIGZpbmlzaGVzLlxuXG4gICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSB3aGljaCB3b3VsZCBiZSAwIGlmIHRoZSBhbmltYXRpb24gaXMgcGF1c2VkLlxuXG4gICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC10aGlzLl9kZWxheSwgdGhpcy5fdER1ciwgdFRpbWUpLCB0cnVlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICBpZiAodGhpcy5faW5pdHRlZCB8fCB0aGlzLl9zdGFydEF0KSB7XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtMSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIFJlY29yZGluZy5yZXZlcnQoKSlcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgb25VcGRhdGVQYXJhbXMgPSB2YXJzLm9uVXBkYXRlUGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZSA9IHZhcnMuY2FsbGJhY2tTY29wZSxcbiAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgeW95b0Vhc2UgPSB2YXJzLnlveW9FYXNlLFxuICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgZHVyID0gdHdlZW4uX2R1cixcbiAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwYXJlbnQgPSB0d2Vlbi5wYXJlbnQsXG4gICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgdGwgPSB0d2Vlbi50aW1lbGluZSxcbiAgICAgIGNsZWFuVmFycyxcbiAgICAgIGksXG4gICAgICBwLFxuICAgICAgcHQsXG4gICAgICB0YXJnZXQsXG4gICAgICBoYXNQcmlvcml0eSxcbiAgICAgIGdzRGF0YSxcbiAgICAgIGhhcm5lc3MsXG4gICAgICBwbHVnaW4sXG4gICAgICBwdExvb2t1cCxcbiAgICAgIGluZGV4LFxuICAgICAgaGFybmVzc1ZhcnMsXG4gICAgICBvdmVyd3JpdHRlbjtcbiAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICB0d2Vlbi5fZWFzZSA9IF9wYXJzZUVhc2UoZWFzZSwgX2RlZmF1bHRzLmVhc2UpO1xuICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vdGhlcmUgbXVzdCBoYXZlIGJlZW4gYSBwYXJlbnQgdGltZWxpbmUgd2l0aCB5b3lvOnRydWUgdGhhdCBpcyBjdXJyZW50bHkgaW4gaXRzIHlveW8gcGhhc2UsIHNvIGZsaXAgdGhlIGVhc2VzLlxuICAgIHlveW9FYXNlID0gdHdlZW4uX3lFYXNlO1xuICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gIH1cblxuICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzOyAvL25lc3RlZCB0aW1lbGluZXMgc2hvdWxkIG5ldmVyIHJ1biBiYWNrd2FyZHMgLSB0aGUgYmFja3dhcmRzLW5lc3MgaXMgaW4gdGhlIGNoaWxkIHR3ZWVucy5cblxuICBpZiAoIXRsIHx8IGtleWZyYW1lcyAmJiAhdmFycy5zdGFnZ2VyKSB7XG4gICAgLy9pZiB0aGVyZSdzIGFuIGludGVybmFsIHRpbWVsaW5lLCBza2lwIGFsbCB0aGUgcGFyc2luZyBiZWNhdXNlIHdlIHBhc3NlZCB0aGF0IHRhc2sgZG93biB0aGUgY2hhaW4uXG4gICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTsgLy9zb21lb25lIG1heSBuZWVkIHRvIHNwZWNpZnkgQ1NTLXNwZWNpZmljIHZhbHVlcyBBTkQgbm9uLUNTUyB2YWx1ZXMsIGxpa2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIFwieFwiIHByb3BlcnR5IHBsdXMgaXQncyBhIHN0YW5kYXJkIERPTSBlbGVtZW50LiBXZSBhbGxvdyBwZW9wbGUgdG8gZGlzdGluZ3Vpc2ggYnkgd3JhcHBpbmcgcGx1Z2luLXNwZWNpZmljIHN0dWZmIGluIGEgY3NzOnt9IG9iamVjdCBmb3IgZXhhbXBsZS5cblxuICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgcHJldlN0YXJ0QXQuX3pUaW1lIDwgMCAmJiBwcmV2U3RhcnRBdC5wcm9ncmVzcygxKTsgLy8gaW4gY2FzZSBpdCdzIGEgbGF6eSBzdGFydEF0IHRoYXQgaGFzbid0IHJlbmRlcmVkIHlldC5cblxuICAgICAgdGltZSA8IDAgJiYgcnVuQmFja3dhcmRzICYmIGltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCA/IHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkgOiBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWdOb0tpbGwgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSEgTGlrZSB3aGVuIHJldmVydCgpIGlzIGNhbGxlZCBhbmQgdG90YWxUaW1lKCkgZ2V0cyBzZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgLy8gY2hlY2sgdFRpbWUgaGVyZSBiZWNhdXNlIGluIHRoZSBjYXNlIG9mIGEgeW95byB0d2VlbiB3aG9zZSBwbGF5aGVhZCBnZXRzIHB1c2hlZCB0byB0aGUgZW5kIGxpa2UgdHdlZW4ucHJvZ3Jlc3MoMSksIHdlIHNob3VsZCBhbGxvdyBpdCB0aHJvdWdoIHNvIHRoYXQgdGhlIG9uQ29tcGxldGUgZ2V0cyBmaXJlZCBwcm9wZXJseS5cbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG4gICAgICAgICAgc3RhZ2dlcjogMCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCAvL2Vuc3VyZXMgdGhhdCBuZXN0ZWQgdHdlZW5zIHRoYXQgaGFkIGEgc3RhZ2dlciBhcmUgaGFuZGxlZCBwcm9wZXJseSwgbGlrZSBnc2FwLmZyb20oXCIuY2xhc3NcIiwge3k6Z3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pfSlcblxuICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICBoYXJuZXNzVmFycyAmJiAocFtoYXJuZXNzLnByb3BdID0gaGFybmVzc1ZhcnMpOyAvLyBpbiBjYXNlIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSAuZnJvbSguLi4sIHtjc3M6e319KVxuXG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lIVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAvLyBpZiBwcmV2VGltZSBhbmQgdFRpbWUgYXJlIHplcm8sIHdlIHNob3VsZG4ndCBmaXJlIHRoZSBvblJldmVyc2VDb21wbGV0ZS4gVGhpcyBjb3VsZCBoYXBwZW4gaWYgeW91IGdzYXAudG8oLi4uIHtwYXVzZWQ6dHJ1ZX0pLnBsYXkoKTtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9O1xuXG4gIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIC8vIFwic29mdFwiIGdpdmVzIHVzIGEgd2F5IHRvIGNsZWFyIG91dCBldmVyeXRoaW5nIEVYQ0VQVCB0aGUgcmVjb3JkZWQgcHJlLVwiZnJvbVwiIHBvcnRpb24gb2YgZnJvbSgpIHR3ZWVucy4gT3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgaWYgeW91IHR3ZWVuLnByb2dyZXNzKDEpLnJlbmRlcigwLCB0cnVlIHRydWUpLmludmFsaWRhdGUoKSwgdGhlIFwiZnJvbVwiIHZhbHVlcyB3b3VsZCBwZXJzaXN0IGFuZCB0aGVuIG9uIHRoZSBuZXh0IHJlbmRlciwgdGhlIGZyb20oKSB0d2VlbnMgd291bGQgaW5pdGlhbGl6ZSBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgd291bGQgbWF0Y2ggdGhlIFwiZnJvbVwiIHZhbHVlcywgdGh1cyBhbmltYXRlIGZyb20gdGhlIHNhbWUgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUgKG5vIGFuaW1hdGlvbikuIFdlIHRhcCBpbnRvIHRoaXMgaW4gU2Nyb2xsVHJpZ2dlcidzIHJlZnJlc2goKSB3aGVyZSB3ZSBtdXN0IHB1c2ggYSB0d2VlbiB0byBjb21wbGV0aW9uIGFuZCB0aGVuIGJhY2sgYWdhaW4gYnV0IGhvbm9yIGl0cyBpbml0IHN0YXRlIGluIGNhc2UgdGhlIHR3ZWVuIGlzIGRlcGVuZGVudCBvbiBhbm90aGVyIHR3ZWVuIGZ1cnRoZXIgdXAgb24gdGhlIHBhZ2UuXG4gICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICB0aGlzLl9wdExvb2t1cCA9IFtdO1xuICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjKTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICBzY29wZSA9IGZ1bmM7XG4gICAgICBmdW5jID0gbmFtZTtcbiAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgdmFyIHByZXYgPSBfY29udGV4dCxcbiAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgIHJlc3VsdDtcbiAgICAgIHByZXYgJiYgcHJldiAhPT0gc2VsZiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZikgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVucygpO1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICB0OiB0XG4gICAgICAgIH07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLTE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aHkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5pbmRleE9mKHRoaXMpO1xuXG4gICAgICAhIX5pICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMS4zXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIi8qIVxuICogaW1hZ2VzTG9hZGVkIHY1LjAuMFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCB3aW5kb3csIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmltYWdlc0xvYWRlZCA9IGZhY3RvcnkoIHdpbmRvdywgd2luZG93LkV2RW1pdHRlciApO1xuICB9XG5cbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG5sZXQgJCA9IHdpbmRvdy5qUXVlcnk7XG5sZXQgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSByZXR1cm4gb2JqO1xuXG4gIGxldCBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgaWYgKCBpc0FycmF5TGlrZSApIHJldHVybiBbIC4uLm9iaiBdO1xuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtbQXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmddfSBlbGVtXG4gKiBAcGFyYW0ge1tPYmplY3QsIEZ1bmN0aW9uXX0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtJbWFnZXNMb2FkZWR9XG4gKi9cbmZ1bmN0aW9uIEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKSB7XG4gIC8vIGNvZXJjZSBJbWFnZXNMb2FkZWQoKSB3aXRob3V0IG5ldywgdG8gYmUgbmV3IEltYWdlc0xvYWRlZCgpXG4gIGlmICggISggdGhpcyBpbnN0YW5jZW9mIEltYWdlc0xvYWRlZCApICkge1xuICAgIHJldHVybiBuZXcgSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICB9XG4gIC8vIHVzZSBlbGVtIGFzIHNlbGVjdG9yIHN0cmluZ1xuICBsZXQgcXVlcnlFbGVtID0gZWxlbTtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICBxdWVyeUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBiYWQgZWxlbWVudFxuICBpZiAoICFxdWVyeUVsZW0gKSB7XG4gICAgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIGltYWdlc0xvYWRlZCAke3F1ZXJ5RWxlbSB8fCBlbGVtfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoIHF1ZXJ5RWxlbSApO1xuICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIG5vIG9wdGlvbnMgc2V0XG4gIGlmICggdHlwZW9mIG9wdGlvbnMgPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRpb25zICk7XG4gIH1cblxuICBpZiAoIG9uQWx3YXlzICkgdGhpcy5vbiggJ2Fsd2F5cycsIG9uQWx3YXlzICk7XG5cbiAgdGhpcy5nZXRJbWFnZXMoKTtcbiAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgaWYgKCAkICkgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcblxuICAvLyBIQUNLIGNoZWNrIGFzeW5jIHRvIGFsbG93IHRpbWUgdG8gYmluZCBsaXN0ZW5lcnNcbiAgc2V0VGltZW91dCggdGhpcy5jaGVjay5iaW5kKCB0aGlzICkgKTtcbn1cblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICB0aGlzLmVsZW1lbnRzLmZvckVhY2goIHRoaXMuYWRkRWxlbWVudEltYWdlcywgdGhpcyApO1xufTtcblxuY29uc3QgZWxlbWVudE5vZGVUeXBlcyA9IFsgMSwgOSwgMTEgXTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1cbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpbHRlciBzaWJsaW5nc1xuICBpZiAoIGVsZW0ubm9kZU5hbWUgPT09ICdJTUcnICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcbiAgfVxuICAvLyBnZXQgYmFja2dyb3VuZCBpbWFnZSBvbiBlbGVtZW50XG4gIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggZWxlbSApO1xuICB9XG5cbiAgLy8gZmluZCBjaGlsZHJlblxuICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xuICBsZXQgeyBub2RlVHlwZSB9ID0gZWxlbTtcbiAgaWYgKCAhbm9kZVR5cGUgfHwgIWVsZW1lbnROb2RlVHlwZXMuaW5jbHVkZXMoIG5vZGVUeXBlICkgKSByZXR1cm47XG5cbiAgbGV0IGNoaWxkSW1ncyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gIGZvciAoIGxldCBpbWcgb2YgY2hpbGRJbWdzICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGltZyApO1xuICB9XG5cbiAgLy8gZ2V0IGNoaWxkIGJhY2tncm91bmQgaW1hZ2VzXG4gIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xuICAgIGxldCBjaGlsZHJlbiA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgKTtcbiAgICBmb3IgKCBsZXQgY2hpbGQgb2YgY2hpbGRyZW4gKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBjaGlsZCApO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVVUkwgPSAvdXJsXFwoKFsnXCJdKT8oLio/KVxcMVxcKS9naTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGlmIGluIGEgaGlkZGVuIGlmcmFtZSBodHRwczovL2J1Z3ppbC5sYS81NDgzOTdcbiAgaWYgKCAhc3R5bGUgKSByZXR1cm47XG5cbiAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXG4gIGxldCBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcbiAgICBsZXQgdXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICAgIGlmICggdXJsICkge1xuICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgICB9XG4gICAgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZ1xuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oIGltZyApIHtcbiAgbGV0IGxvYWRpbmdJbWFnZSA9IG5ldyBMb2FkaW5nSW1hZ2UoIGltZyApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkQmFja2dyb3VuZCA9IGZ1bmN0aW9uKCB1cmwsIGVsZW0gKSB7XG4gIGxldCBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGUgKi9cbiAgbGV0IG9uUHJvZ3Jlc3MgPSAoIGltYWdlLCBlbGVtLCBtZXNzYWdlICkgPT4ge1xuICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXG4gICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgdGhpcy5wcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKTtcbiAgICB9ICk7XG4gIH07XG5cbiAgdGhpcy5pbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxvYWRpbmdJbWFnZSApIHtcbiAgICBsb2FkaW5nSW1hZ2Uub25jZSggJ3Byb2dyZXNzJywgb25Qcm9ncmVzcyApO1xuICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICB9ICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCsrO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcbiAgLy8gcHJvZ3Jlc3MgZXZlbnRcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgaW1hZ2UsIGVsZW0gXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xuICAgIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkoIHRoaXMsIGltYWdlICk7XG4gIH1cbiAgLy8gY2hlY2sgaWYgY29tcGxldGVkXG4gIGlmICggdGhpcy5wcm9ncmVzc2VkQ291bnQgPT09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiBjb25zb2xlICkge1xuICAgIGNvbnNvbGUubG9nKCBgcHJvZ3Jlc3M6ICR7bWVzc2FnZX1gLCBpbWFnZSwgZWxlbSApO1xuICB9XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0RXZlbnQoIGV2ZW50TmFtZSwgWyB0aGlzIF0gKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdhbHdheXMnLCBbIHRoaXMgXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCApIHtcbiAgICBsZXQganFNZXRob2QgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gTG9hZGluZ0ltYWdlKCBpbWcgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xufVxuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICB0aGlzLnByb3h5SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgLy8gYWRkIGNyb3NzT3JpZ2luIGF0dHJpYnV0ZS4gIzIwNFxuICBpZiAoIHRoaXMuaW1nLmNyb3NzT3JpZ2luICkge1xuICAgIHRoaXMucHJveHlJbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuaW1nLmNyb3NzT3JpZ2luO1xuICB9XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5jdXJyZW50U3JjIHx8IHRoaXMuaW1nLnNyYztcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGZvciBub24temVybywgbm9uLXVuZGVmaW5lZCBuYXR1cmFsV2lkdGhcbiAgLy8gZml4ZXMgU2FmYXJpK0luZmluaXRlU2Nyb2xsK01hc29ucnkgYnVnIGluZmluaXRlLXNjcm9sbCM2NzFcbiAgcmV0dXJuIHRoaXMuaW1nLmNvbXBsZXRlICYmIHRoaXMuaW1nLm5hdHVyYWxXaWR0aDtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICBsZXQgeyBwYXJlbnROb2RlIH0gPSB0aGlzLmltZztcbiAgLy8gZW1pdCBwcm9ncmVzcyB3aXRoIHBhcmVudCA8cGljdHVyZT4gb3Igc2VsZiA8aW1nPlxuICBsZXQgZWxlbSA9IHBhcmVudE5vZGUubm9kZU5hbWUgPT09ICdQSUNUVVJFJyA/IHBhcmVudE5vZGUgOiB0aGlzLmltZztcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgZWxlbSwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIHRydWUsICdvbmxvYWQnICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCBmYWxzZSwgJ29uZXJyb3InICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBCYWNrZ3JvdW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEJhY2tncm91bmQoIHVybCwgZWxlbWVudCApIHtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG59XG5cbi8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMb2FkaW5nSW1hZ2UucHJvdG90eXBlICk7XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnNyYyA9IHRoaXMudXJsO1xuICAvLyBjaGVjayBpZiBpbWFnZSBpcyBhbHJlYWR5IGNvbXBsZXRlXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gIH1cbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmVsZW1lbnQsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgalF1ZXJ5ID0galF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG4gIGlmICggIWpRdWVyeSApIHJldHVybjtcblxuICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcbiAgJCA9IGpRdWVyeTtcbiAgLy8gJCgpLmltYWdlc0xvYWRlZCgpXG4gICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAgIGxldCBpbnN0YW5jZSA9IG5ldyBJbWFnZXNMb2FkZWQoIHRoaXMsIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSggJCggdGhpcyApICk7XG4gIH07XG59O1xuLy8gdHJ5IG1ha2luZyBwbHVnaW5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5yZXR1cm4gSW1hZ2VzTG9hZGVkO1xuXG59ICk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3JjL25vcm1hbGl6ZVdoZWVsLmpzJyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFeGVjdXRpb25FbnZpcm9ubWVudFxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5kb2N1bWVudCAmJlxuICB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuICAgIGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDA0LXByZXNlbnQgRmFjZWJvb2suIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFVzZXJBZ2VudF9ERVBSRUNBVEVEXG4gKi9cblxuLyoqXG4gKiAgUHJvdmlkZXMgZW50aXJlbHkgY2xpZW50LXNpZGUgVXNlciBBZ2VudCBhbmQgT1MgZGV0ZWN0aW9uLiBZb3Ugc2hvdWxkIHByZWZlclxuICogIHRoZSBub24tZGVwcmVjYXRlZCBVc2VyQWdlbnQgbW9kdWxlIHdoZW4gcG9zc2libGUsIHdoaWNoIGV4cG9zZXMgb3VyXG4gKiAgYXV0aG9yaXRhdGl2ZSBzZXJ2ZXItc2lkZSBQSFAtYmFzZWQgZGV0ZWN0aW9uIHRvIHRoZSBjbGllbnQuXG4gKlxuICogIFVzYWdlIGlzIHN0cmFpZ2h0Zm9yd2FyZDpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSkge1xuICogICAgICAvLyAgSUVcbiAqICAgIH1cbiAqXG4gKiAgWW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY2hlY2tzOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpID49IDcpIHtcbiAqICAgICAgLy8gIElFNyBvciBiZXR0ZXJcbiAqICAgIH1cbiAqXG4gKiAgVGhlIGJyb3dzZXIgZnVuY3Rpb25zIHdpbGwgcmV0dXJuIE5hTiBpZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBtYXRjaCwgc29cbiAqICB5b3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjb21wYXJlcyB0aGUgb3RoZXIgd2F5OlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpIDwgNykge1xuICogICAgICAvLyAgSUU2IG9yIHdvcnNlXG4gKiAgICB9XG4gKlxuICogIE5vdGUgdGhhdCB0aGUgdmVyc2lvbiBpcyBhIGZsb2F0IGFuZCBtYXkgaW5jbHVkZSBhIG1pbm9yIHZlcnNpb24gbnVtYmVyLFxuICogIHNvIHlvdSBzaG91bGQgYWx3YXlzIHVzZSByYW5nZSBvcGVyYXRvcnMgdG8gcGVyZm9ybSBjb21wYXJpc29ucywgbm90XG4gKiAgc3RyaWN0IGVxdWFsaXR5LlxuICpcbiAqICAqKk5vdGU6KiogWW91IHNob3VsZCAqKnN0cm9uZ2x5KiogcHJlZmVyIGNhcGFiaWxpdHkgZGV0ZWN0aW9uIHRvIGJyb3dzZXJcbiAqICB2ZXJzaW9uIGRldGVjdGlvbiB3aGVyZSBpdCdzIHJlYXNvbmFibGU6XG4gKlxuICogICAgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9zdXBwb3J0Lmh0bWxcbiAqXG4gKiAgRnVydGhlciwgd2UgaGF2ZSBhIGxhcmdlIG51bWJlciBvZiBtYXR1cmUgd3JhcHBlciBmdW5jdGlvbnMgYW5kIGNsYXNzZXNcbiAqICB3aGljaCBhYnN0cmFjdCBhd2F5IG1hbnkgYnJvd3NlciBpcnJlZ3VsYXJpdGllcy4gQ2hlY2sgdGhlIGRvY3VtZW50YXRpb24sXG4gKiAgZ3JlcCBmb3IgdGhpbmdzLCBvciBhc2sgb24gamF2YXNjcmlwdEBsaXN0cy5mYWNlYm9vay5jb20gYmVmb3JlIHdyaXRpbmcgeWV0XG4gKiAgYW5vdGhlciBjb3B5IG9mIFwiZXZlbnQgfHwgd2luZG93LmV2ZW50XCIuXG4gKlxuICovXG5cbnZhciBfcG9wdWxhdGVkID0gZmFsc2U7XG5cbi8vIEJyb3dzZXJzXG52YXIgX2llLCBfZmlyZWZveCwgX29wZXJhLCBfd2Via2l0LCBfY2hyb21lO1xuXG4vLyBBY3R1YWwgSUUgYnJvd3NlciBmb3IgY29tcGF0aWJpbGl0eSBtb2RlXG52YXIgX2llX3JlYWxfdmVyc2lvbjtcblxuLy8gUGxhdGZvcm1zXG52YXIgX29zeCwgX3dpbmRvd3MsIF9saW51eCwgX2FuZHJvaWQ7XG5cbi8vIEFyY2hpdGVjdHVyZXNcbnZhciBfd2luNjQ7XG5cbi8vIERldmljZXNcbnZhciBfaXBob25lLCBfaXBhZCwgX25hdGl2ZTtcblxudmFyIF9tb2JpbGU7XG5cbmZ1bmN0aW9uIF9wb3B1bGF0ZSgpIHtcbiAgaWYgKF9wb3B1bGF0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBfcG9wdWxhdGVkID0gdHJ1ZTtcblxuICAvLyBUbyB3b3JrIGFyb3VuZCBidWdneSBKUyBsaWJyYXJpZXMgdGhhdCBjYW4ndCBoYW5kbGUgbXVsdGktZGlnaXRcbiAgLy8gdmVyc2lvbiBudW1iZXJzLCBPcGVyYSAxMCdzIHVzZXIgYWdlbnQgc3RyaW5nIGNsYWltcyBpdCdzIE9wZXJhXG4gIC8vIDksIHRoZW4gbGF0ZXIgaW5jbHVkZXMgYSBWZXJzaW9uL1guWSBmaWVsZDpcbiAgLy9cbiAgLy8gT3BlcmEvOS44MCAoZm9vKSBQcmVzdG8vMi4yLjE1IFZlcnNpb24vMTAuMTBcbiAgdmFyIHVhcyA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBhZ2VudCA9IC8oPzpNU0lFLihcXGQrXFwuXFxkKykpfCg/Oig/OkZpcmVmb3h8R3JhblBhcmFkaXNvfEljZXdlYXNlbCkuKFxcZCtcXC5cXGQrKSl8KD86T3BlcmEoPzouK1ZlcnNpb24ufC4pKFxcZCtcXC5cXGQrKSl8KD86QXBwbGVXZWJLaXQuKFxcZCsoPzpcXC5cXGQrKT8pKXwoPzpUcmlkZW50XFwvXFxkK1xcLlxcZCsuKnJ2OihcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gIHZhciBvcyAgICA9IC8oTWFjIE9TIFgpfChXaW5kb3dzKXwoTGludXgpLy5leGVjKHVhcyk7XG5cbiAgX2lwaG9uZSA9IC9cXGIoaVBob25lfGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9pcGFkID0gL1xcYihpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfYW5kcm9pZCA9IC9BbmRyb2lkL2kuZXhlYyh1YXMpO1xuICBfbmF0aXZlID0gL0ZCQU5cXC9cXHcrOy9pLmV4ZWModWFzKTtcbiAgX21vYmlsZSA9IC9Nb2JpbGUvaS5leGVjKHVhcyk7XG5cbiAgLy8gTm90ZSB0aGF0IHRoZSBJRSB0ZWFtIGJsb2cgd291bGQgaGF2ZSB5b3UgYmVsaWV2ZSB5b3Ugc2hvdWxkIGJlIGNoZWNraW5nXG4gIC8vIGZvciAnV2luNjQ7IHg2NCcuICBCdXQgTVNETiB0aGVuIHJldmVhbHMgdGhhdCB5b3UgY2FuIGFjdHVhbGx5IGJlIGNvbWluZ1xuICAvLyBmcm9tIGVpdGhlciB4NjQgb3IgaWE2NDsgIHNvIHVsdGltYXRlbHksIHlvdSBzaG91bGQganVzdCBjaGVjayBmb3IgV2luNjRcbiAgLy8gYXMgaW4gaW5kaWNhdG9yIG9mIHdoZXRoZXIgeW91J3JlIGluIDY0LWJpdCBJRS4gIDMyLWJpdCBJRSBvbiA2NC1iaXRcbiAgLy8gV2luZG93cyB3aWxsIHNlbmQgJ1dPVzY0JyBpbnN0ZWFkLlxuICBfd2luNjQgPSAhISgvV2luNjQvLmV4ZWModWFzKSk7XG5cbiAgaWYgKGFnZW50KSB7XG4gICAgX2llID0gYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IChcbiAgICAgICAgICBhZ2VudFs1XSA/IHBhcnNlRmxvYXQoYWdlbnRbNV0pIDogTmFOKTtcbiAgICAvLyBJRSBjb21wYXRpYmlsaXR5IG1vZGVcbiAgICBpZiAoX2llICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSkge1xuICAgICAgX2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgIH1cbiAgICAvLyBncmFiIHRoZSBcInRydWVcIiBpZSB2ZXJzaW9uIGZyb20gdGhlIHRyaWRlbnQgdG9rZW4gaWYgYXZhaWxhYmxlXG4gICAgdmFyIHRyaWRlbnQgPSAvKD86VHJpZGVudFxcLyhcXGQrLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgIF9pZV9yZWFsX3ZlcnNpb24gPSB0cmlkZW50ID8gcGFyc2VGbG9hdCh0cmlkZW50WzFdKSArIDQgOiBfaWU7XG5cbiAgICBfZmlyZWZveCA9IGFnZW50WzJdID8gcGFyc2VGbG9hdChhZ2VudFsyXSkgOiBOYU47XG4gICAgX29wZXJhICAgPSBhZ2VudFszXSA/IHBhcnNlRmxvYXQoYWdlbnRbM10pIDogTmFOO1xuICAgIF93ZWJraXQgID0gYWdlbnRbNF0gPyBwYXJzZUZsb2F0KGFnZW50WzRdKSA6IE5hTjtcbiAgICBpZiAoX3dlYmtpdCkge1xuICAgICAgLy8gV2UgZG8gbm90IGFkZCB0aGUgcmVnZXhwIHRvIHRoZSBhYm92ZSB0ZXN0LCBiZWNhdXNlIGl0IHdpbGwgYWx3YXlzXG4gICAgICAvLyBtYXRjaCAnc2FmYXJpJyBvbmx5IHNpbmNlICdBcHBsZVdlYktpdCcgYXBwZWFycyBiZWZvcmUgJ0Nocm9tZScgaW5cbiAgICAgIC8vIHRoZSB1c2VyQWdlbnQgc3RyaW5nLlxuICAgICAgYWdlbnQgPSAvKD86Q2hyb21lXFwvKFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICAgIF9jaHJvbWUgPSBhZ2VudCAmJiBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogTmFOO1xuICAgIH0gZWxzZSB7XG4gICAgICBfY2hyb21lID0gTmFOO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBfaWUgPSBfZmlyZWZveCA9IF9vcGVyYSA9IF9jaHJvbWUgPSBfd2Via2l0ID0gTmFOO1xuICB9XG5cbiAgaWYgKG9zKSB7XG4gICAgaWYgKG9zWzFdKSB7XG4gICAgICAvLyBEZXRlY3QgT1MgWCB2ZXJzaW9uLiAgSWYgbm8gdmVyc2lvbiBudW1iZXIgbWF0Y2hlcywgc2V0IF9vc3ggdG8gdHJ1ZS5cbiAgICAgIC8vIFZlcnNpb24gZXhhbXBsZXM6ICAxMCwgMTBfNl8xLCAxMC43XG4gICAgICAvLyBQYXJzZXMgdmVyc2lvbiBudW1iZXIgYXMgYSBmbG9hdCwgdGFraW5nIG9ubHkgZmlyc3QgdHdvIHNldHMgb2ZcbiAgICAgIC8vIGRpZ2l0cy4gIElmIG9ubHkgb25lIHNldCBvZiBkaWdpdHMgaXMgZm91bmQsIHJldHVybnMganVzdCB0aGUgbWFqb3JcbiAgICAgIC8vIHZlcnNpb24gbnVtYmVyLlxuICAgICAgdmFyIHZlciA9IC8oPzpNYWMgT1MgWCAoXFxkKyg/OlsuX11cXGQrKT8pKS8uZXhlYyh1YXMpO1xuXG4gICAgICBfb3N4ID0gdmVyID8gcGFyc2VGbG9hdCh2ZXJbMV0ucmVwbGFjZSgnXycsICcuJykpIDogdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgX29zeCA9IGZhbHNlO1xuICAgIH1cbiAgICBfd2luZG93cyA9ICEhb3NbMl07XG4gICAgX2xpbnV4ICAgPSAhIW9zWzNdO1xuICB9IGVsc2Uge1xuICAgIF9vc3ggPSBfd2luZG93cyA9IF9saW51eCA9IGZhbHNlO1xuICB9XG59XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHtcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgaWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHdlJ3JlIGluIEludGVybmV0IEV4cGxvcmVyIGNvbXBhdGliaWxpdHkgbW9kZS5cbiAgICpcbiAgICogQHJldHVybiBib29sIHRydWUgaWYgaW4gY29tcGF0aWJpbGl0eSBtb2RlLCBmYWxzZSBpZlxuICAgKiBub3QgY29tcGF0aWJpbGl0eSBtb2RlIG9yIG5vdCBpZVxuICAgKi9cbiAgaWVDb21wYXRpYmlsaXR5TW9kZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaWVfcmVhbF92ZXJzaW9uID4gX2llKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBicm93c2VyIGlzIDY0LWJpdCBJRS4gIFJlYWxseSwgdGhpcyBpcyBraW5kIG9mIHdlYWsgc2F1Y2U7ICB3ZVxuICAgKiBvbmx5IG5lZWQgdGhpcyBiZWNhdXNlIFNreXBlIGNhbid0IGhhbmRsZSA2NC1iaXQgSUUgeWV0LiAgV2UgbmVlZCB0byByZW1vdmVcbiAgICogdGhpcyB3aGVuIHdlIGRvbid0IG5lZWQgaXQgLS0gdHJhY2tlZCBieSAjNjAxOTU3LlxuICAgKi9cbiAgaWU2NDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgJiYgX3dpbjY0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEZpcmVmb3guXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGZpcmVmb3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfZmlyZWZveDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIE9wZXJhLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBvcGVyYTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vcGVyYTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIFdlYktpdC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgd2Via2l0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX3dlYmtpdDtcbiAgfSxcblxuICAvKipcbiAgICogIEZvciBQdXNoXG4gICAqICBXSUxMIEJFIFJFTU9WRUQgVkVSWSBTT09OLiBVc2UgVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0XG4gICAqL1xuICBzYWZhcmk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXQoKTtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBhIENocm9tZSBicm93c2VyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBjaHJvbWUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2Nocm9tZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBXaW5kb3dzLlxuICAgKlxuICAgKiAgQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlcidzIE9TIGlzIFdpbmRvd3MuXG4gICAqL1xuICB3aW5kb3dzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX3dpbmRvd3M7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTWFjIE9TIFguXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fGJvb2wgICBSZXR1cm5zIGEgZmxvYXQgaWYgYSB2ZXJzaW9uIG51bWJlciBpcyBkZXRlY3RlZCxcbiAgICogICAgICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSB0cnVlL2ZhbHNlLlxuICAgKi9cbiAgb3N4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29zeDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBMaW51eC5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlcidzIE9TIGlzIHNvbWUgZmxhdm9yIG9mIExpbnV4LlxuICAgKi9cbiAgbGludXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbGludXg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgb24gYW4gaVBob25lIG9yIGlQb2QgcGxhdGZvcm0uXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBzb21lIGZsYXZvciBvZiB0aGVcbiAgICogICAgaVBob25lIE9TLlxuICAgKi9cbiAgaXBob25lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwaG9uZTtcbiAgfSxcblxuICBtb2JpbGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2lwaG9uZSB8fCBfaXBhZCB8fCBfYW5kcm9pZCB8fCBfbW9iaWxlKTtcbiAgfSxcblxuICBuYXRpdmVBcHA6IGZ1bmN0aW9uKCkge1xuICAgIC8vIHdlYnZpZXdzIGluc2lkZSBvZiB0aGUgbmF0aXZlIGFwcHNcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX25hdGl2ZTtcbiAgfSxcblxuICBhbmRyb2lkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2FuZHJvaWQ7XG4gIH0sXG5cbiAgaXBhZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGFkO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJBZ2VudF9ERVBSRUNBVEVEO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIHVzZUhhc0ZlYXR1cmU7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHVzZUhhc0ZlYXR1cmUgPVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcbiAgICAgIGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50U3VwcG9ydGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbm9ybWFsaXplV2hlZWxcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSByZXF1aXJlKCcuL1VzZXJBZ2VudF9ERVBSRUNBVEVEJyk7XG5cbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG5cblxuLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xudmFyIFBJWEVMX1NURVAgID0gMTA7XG52YXIgTElORV9IRUlHSFQgPSA0MDtcbnZhciBQQUdFX0hFSUdIVCA9IDgwMDtcblxuLyoqXG4gKiBNb3VzZSB3aGVlbCAoYW5kIDItZmluZ2VyIHRyYWNrcGFkKSBzdXBwb3J0IG9uIHRoZSB3ZWIgc3Vja3MuICBJdCBpc1xuICogY29tcGxpY2F0ZWQsIHRodXMgdGhpcyBkb2MgaXMgbG9uZyBhbmQgKGhvcGVmdWxseSkgZGV0YWlsZWQgZW5vdWdoIHRvIGFuc3dlclxuICogeW91ciBxdWVzdGlvbnMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gcmVhY3QgdG8gdGhlIG1vdXNlIHdoZWVsIGluIGEgcHJlZGljdGFibGUgd2F5LCB0aGlzIGNvZGUgaXNcbiAqIGxpa2UgeW91ciBiZXN0ZXN0IGZyaWVuZC4gKiBodWdzICpcbiAqXG4gKiBBcyBvZiB0b2RheSwgdGhlcmUgYXJlIDQgRE9NIGV2ZW50IHR5cGVzIHlvdSBjYW4gbGlzdGVuIHRvOlxuICpcbiAqICAgJ3doZWVsJyAgICAgICAgICAgICAgICAtLSBDaHJvbWUoMzErKSwgRkYoMTcrKSwgSUUoOSspXG4gKiAgICdtb3VzZXdoZWVsJyAgICAgICAgICAgLS0gQ2hyb21lLCBJRSg2KyksIE9wZXJhLCBTYWZhcmlcbiAqICAgJ01vek1vdXNlUGl4ZWxTY3JvbGwnICAtLSBGRigzLjUgb25seSEpICgyMDEwLTIwMTMpIC0tIGRvbid0IGJvdGhlciFcbiAqICAgJ0RPTU1vdXNlU2Nyb2xsJyAgICAgICAtLSBGRigwLjkuNyspIHNpbmNlIDIwMDNcbiAqXG4gKiBTbyB3aGF0IHRvIGRvPyAgVGhlIGlzIHRoZSBiZXN0OlxuICpcbiAqICAgbm9ybWFsaXplV2hlZWwuZ2V0RXZlbnRUeXBlKCk7XG4gKlxuICogSW4geW91ciBldmVudCBjYWxsYmFjaywgdXNlIHRoaXMgY29kZSB0byBnZXQgc2FuZSBpbnRlcnByZXRhdGlvbiBvZiB0aGVcbiAqIGRlbHRhcy4gIFRoaXMgY29kZSB3aWxsIHJldHVybiBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgc3BpblggICAtLSBub3JtYWxpemVkIHNwaW4gc3BlZWQgKHVzZSBmb3Igem9vbSkgLSB4IHBsYW5lXG4gKiAgIHNwaW5ZICAgLS0gXCIgLSB5IHBsYW5lXG4gKiAgIHBpeGVsWCAgLS0gbm9ybWFsaXplZCBkaXN0YW5jZSAodG8gcGl4ZWxzKSAtIHggcGxhbmVcbiAqICAgcGl4ZWxZICAtLSBcIiAtIHkgcGxhbmVcbiAqXG4gKiBXaGVlbCB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IHRoZSBicm93c2VyIGFzc3VtaW5nIHlvdSBhcmUgdXNpbmcgdGhlIHdoZWVsIHRvXG4gKiBzY3JvbGwgYSB3ZWIgcGFnZSBieSBhIG51bWJlciBvZiBsaW5lcyBvciBwaXhlbHMgKG9yIHBhZ2VzKS4gIFZhbHVlcyBjYW4gdmFyeVxuICogc2lnbmlmaWNhbnRseSBvbiBkaWZmZXJlbnQgcGxhdGZvcm1zIGFuZCBicm93c2VycywgZm9yZ2V0dGluZyB0aGF0IHlvdSBjYW5cbiAqIHNjcm9sbCBhdCBkaWZmZXJlbnQgc3BlZWRzLiAgU29tZSBkZXZpY2VzIChsaWtlIHRyYWNrcGFkcykgZW1pdCBtb3JlIGV2ZW50c1xuICogYXQgc21hbGxlciBpbmNyZW1lbnRzIHdpdGggZmluZSBncmFudWxhcml0eSwgYW5kIHNvbWUgZW1pdCBtYXNzaXZlIGp1bXBzIHdpdGhcbiAqIGxpbmVhciBzcGVlZCBvciBhY2NlbGVyYXRpb24uXG4gKlxuICogVGhpcyBjb2RlIGRvZXMgaXRzIGJlc3QgdG8gbm9ybWFsaXplIHRoZSBkZWx0YXMgZm9yIHlvdTpcbiAqXG4gKiAgIC0gc3BpbiBpcyB0cnlpbmcgdG8gbm9ybWFsaXplIGhvdyBmYXIgdGhlIHdoZWVsIHdhcyBzcHVuIChvciB0cmFja3BhZFxuICogICAgIGRyYWdnZWQpLiAgVGhpcyBpcyBzdXBlciB1c2VmdWwgZm9yIHpvb20gc3VwcG9ydCB3aGVyZSB5b3Ugd2FudCB0b1xuICogICAgIHRocm93IGF3YXkgdGhlIGNodW5reSBzY3JvbGwgc3RlcHMgb24gdGhlIFBDIGFuZCBtYWtlIHRob3NlIGVxdWFsIHRvXG4gKiAgICAgdGhlIHNsb3cgYW5kIHNtb290aCB0aW55IHN0ZXBzIG9uIHRoZSBNYWMuIEtleSBkYXRhOiBUaGlzIGNvZGUgdHJpZXMgdG9cbiAqICAgICByZXNvbHZlIGEgc2luZ2xlIHNsb3cgc3RlcCBvbiBhIHdoZWVsIHRvIDEuXG4gKlxuICogICAtIHBpeGVsIGlzIG5vcm1hbGl6aW5nIHRoZSBkZXNpcmVkIHNjcm9sbCBkZWx0YSBpbiBwaXhlbCB1bml0cy4gIFlvdSdsbFxuICogICAgIGdldCB0aGUgY3JhenkgZGlmZmVyZW5jZXMgYmV0d2VlbiBicm93c2VycywgYnV0IGF0IGxlYXN0IGl0J2xsIGJlIGluXG4gKiAgICAgcGl4ZWxzIVxuICpcbiAqICAgLSBwb3NpdGl2ZSB2YWx1ZSBpbmRpY2F0ZXMgc2Nyb2xsaW5nIERPV04vUklHSFQsIG5lZ2F0aXZlIFVQL0xFRlQuICBUaGlzXG4gKiAgICAgc2hvdWxkIHRyYW5zbGF0ZSB0byBwb3NpdGl2ZSB2YWx1ZSB6b29taW5nIElOLCBuZWdhdGl2ZSB6b29taW5nIE9VVC5cbiAqICAgICBUaGlzIG1hdGNoZXMgdGhlIG5ld2VyICd3aGVlbCcgZXZlbnQuXG4gKlxuICogV2h5IGFyZSB0aGVyZSBzcGluWCwgc3BpblkgKG9yIHBpeGVscyk/XG4gKlxuICogICAtIHNwaW5YIGlzIGEgMi1maW5nZXIgc2lkZSBkcmFnIG9uIHRoZSB0cmFja3BhZCwgYW5kIGEgc2hpZnQgKyB3aGVlbCB0dXJuXG4gKiAgICAgd2l0aCBhIG1vdXNlLiAgSXQgcmVzdWx0cyBpbiBzaWRlLXNjcm9sbGluZyBpbiB0aGUgYnJvd3NlciBieSBkZWZhdWx0LlxuICpcbiAqICAgLSBzcGluWSBpcyB3aGF0IHlvdSBleHBlY3QgLS0gaXQncyB0aGUgY2xhc3NpYyBheGlzIG9mIGEgbW91c2Ugd2hlZWwuXG4gKlxuICogICAtIEkgZHJvcHBlZCBzcGluWi9waXhlbFouICBJdCBpcyBzdXBwb3J0ZWQgYnkgdGhlIERPTSAzICd3aGVlbCcgZXZlbnQgYW5kXG4gKiAgICAgcHJvYmFibHkgaXMgYnkgYnJvd3NlcnMgaW4gY29uanVuY3Rpb24gd2l0aCBmYW5jeSAzRCBjb250cm9sbGVycyAuLiBidXRcbiAqICAgICB5b3Uga25vdy5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBpbmZvOlxuICpcbiAqIEV4YW1wbGVzIG9mICd3aGVlbCcgZXZlbnQgaWYgeW91IHNjcm9sbCBzbG93bHkgKGRvd24pIGJ5IG9uZSBzdGVwIHdpdGggYW5cbiAqIGF2ZXJhZ2UgbW91c2U6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAobW91c2UpICAgICAtICAgIDQgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqICAgT1MgWCArIFNhZmFyaSAgKG1vdXNlKSAgICAgLSAgTi9BICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICAtMTIpXG4gKiAgIE9TIFggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMC4xIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAgTi9BKVxuICogICBXaW44ICsgQ2hyb21lICAobW91c2UpICAgICAtICAxMDAgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqICAgV2luOCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAzICAgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKlxuICogT24gdGhlIHRyYWNrcGFkOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKHRyYWNrcGFkKSAgLSAgICAyICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICAgLTYpXG4gKiAgIE9TIFggKyBGaXJlZm94ICh0cmFja3BhZCkgIC0gICAgMSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgTi9BKVxuICpcbiAqIE9uIG90aGVyL29sZGVyIGJyb3dzZXJzLi4gaXQncyBtb3JlIGNvbXBsaWNhdGVkIGFzIHRoZXJlIGNhbiBiZSBtdWx0aXBsZSBhbmRcbiAqIGFsc28gbWlzc2luZyBkZWx0YSB2YWx1ZXMuXG4gKlxuICogVGhlICd3aGVlbCcgZXZlbnQgaXMgbW9yZSBzdGFuZGFyZDpcbiAqXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy13aGVlbGV2ZW50c1xuICpcbiAqIFRoZSBiYXNpY3MgaXMgdGhhdCBpdCBpbmNsdWRlcyBhIHVuaXQsIGRlbHRhTW9kZSAocGl4ZWxzLCBsaW5lcywgcGFnZXMpLCBhbmRcbiAqIGRlbHRhWCwgZGVsdGFZIGFuZCBkZWx0YVouICBTb21lIGJyb3dzZXJzIHByb3ZpZGUgb3RoZXIgdmFsdWVzIHRvIG1haW50YWluXG4gKiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgZXZlbnRzLiAgVGhvc2Ugb3RoZXIgdmFsdWVzIGhlbHAgdXNcbiAqIGJldHRlciBub3JtYWxpemUgc3BpbiBzcGVlZC4gIEV4YW1wbGUgb2Ygd2hhdCB0aGUgYnJvd3NlcnMgcHJvdmlkZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCBldmVudC53aGVlbERlbHRhIHwgZXZlbnQuZGV0YWlsXG4gKiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLVxuICogICAgICAgICAgU2FmYXJpIHY1L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgIFNhZmFyaSB2NS9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgICAgICAgIElFOS9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgIHVuZGVmaW5lZFxuICogICAgICAgICBGaXJlZm94IHY0L09TIFggIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDFcbiAqICAgICAgICAgRmlyZWZveCB2NC9XaW43ICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAzXG4gKlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVXaGVlbCgvKm9iamVjdCovIGV2ZW50KSAvKm9iamVjdCovIHtcbiAgdmFyIHNYID0gMCwgc1kgPSAwLCAgICAgICAvLyBzcGluWCwgc3BpbllcbiAgICAgIHBYID0gMCwgcFkgPSAwOyAgICAgICAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gIC8vIExlZ2FjeVxuICBpZiAoJ2RldGFpbCcgICAgICBpbiBldmVudCkgeyBzWSA9IGV2ZW50LmRldGFpbDsgfVxuICBpZiAoJ3doZWVsRGVsdGEnICBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhIC8gMTIwOyB9XG4gIGlmICgnd2hlZWxEZWx0YVknIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGFZIC8gMTIwOyB9XG4gIGlmICgnd2hlZWxEZWx0YVgnIGluIGV2ZW50KSB7IHNYID0gLWV2ZW50LndoZWVsRGVsdGFYIC8gMTIwOyB9XG5cbiAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICBpZiAoICdheGlzJyBpbiBldmVudCAmJiBldmVudC5heGlzID09PSBldmVudC5IT1JJWk9OVEFMX0FYSVMgKSB7XG4gICAgc1ggPSBzWTtcbiAgICBzWSA9IDA7XG4gIH1cblxuICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgcFkgPSBzWSAqIFBJWEVMX1NURVA7XG5cbiAgaWYgKCdkZWx0YVknIGluIGV2ZW50KSB7IHBZID0gZXZlbnQuZGVsdGFZOyB9XG4gIGlmICgnZGVsdGFYJyBpbiBldmVudCkgeyBwWCA9IGV2ZW50LmRlbHRhWDsgfVxuXG4gIGlmICgocFggfHwgcFkpICYmIGV2ZW50LmRlbHRhTW9kZSkge1xuICAgIGlmIChldmVudC5kZWx0YU1vZGUgPT0gMSkgeyAgICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gIGlmIChwWCAmJiAhc1gpIHsgc1ggPSAocFggPCAxKSA/IC0xIDogMTsgfVxuICBpZiAocFkgJiYgIXNZKSB7IHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7IH1cblxuICByZXR1cm4geyBzcGluWCAgOiBzWCxcbiAgICAgICAgICAgc3BpblkgIDogc1ksXG4gICAgICAgICAgIHBpeGVsWCA6IHBYLFxuICAgICAgICAgICBwaXhlbFkgOiBwWSB9O1xufVxuXG5cbi8qKlxuICogVGhlIGJlc3QgY29tYmluYXRpb24gaWYgeW91IHByZWZlciBzcGluWCArIHNwaW5ZIG5vcm1hbGl6YXRpb24uICBJdCBmYXZvcnNcbiAqIHRoZSBvbGRlciBET01Nb3VzZVNjcm9sbCBmb3IgRmlyZWZveCwgYXMgRkYgZG9lcyBub3QgaW5jbHVkZSB3aGVlbERlbHRhIHdpdGhcbiAqICd3aGVlbCcgZXZlbnQsIG1ha2luZyBzcGluIHNwZWVkIGRldGVybWluYXRpb24gaW1wb3NzaWJsZS5cbiAqL1xubm9ybWFsaXplV2hlZWwuZ2V0RXZlbnRUeXBlID0gZnVuY3Rpb24oKSAvKnN0cmluZyovIHtcbiAgcmV0dXJuIChVc2VyQWdlbnRfREVQUkVDQVRFRC5maXJlZm94KCkpXG4gICAgICAgICAgID8gJ0RPTU1vdXNlU2Nyb2xsJ1xuICAgICAgICAgICA6IChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKVxuICAgICAgICAgICAgICAgPyAnd2hlZWwnXG4gICAgICAgICAgICAgICA6ICdtb3VzZXdoZWVsJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplV2hlZWw7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnXG5cbi8vQ29tcG9uZW50c1xuaW1wb3J0IHtcbiAgUHJlbG9hZGVyLFxuICBQbGF5ZXIsXG4gIE5hdmlnYXRpb24sXG4gIEZvcm1IYW5kbGVyLFxuICBDYW52YXMsXG4gIFNtb290aHNjcm9sbCxcbn0gZnJvbSAnLi9jb21wb25lbnRzJ1xuXG4vL0hlbHBlcnNcbmltcG9ydCB7ICRBbGwsICQgfSBmcm9tICcuL3V0aWxzL3NlbGVjdG9ycydcblxuLy9Db25maWdcbmltcG9ydCAqIGFzIFBhZ2VzIGZyb20gJy4vcGFnZXMvaW5kZXgnXG5pbXBvcnQgUGFnZUZhY3RvcnkgZnJvbSAnLi9mYWN0b3JpZXMvcGFnZXNGYWN0b3J5J1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4vdXRpbHMvZnVuY3Rpb24nXG5cbmNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3JlYXRlUHJlbG9hZGVyKClcbiAgICB0aGlzLmluaXROYXZpZ2F0aW9uKClcbiAgICB0aGlzLmluaXQoKVxuICAgIHRoaXMuZ2V0Q29udGVudCgpXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcigpXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKClcbiAgfVxuXG4gIGNyZWF0ZVByZWxvYWRlcigpIHtcbiAgICB0aGlzLnByZWxvYWRlciA9IG5ldyBQcmVsb2FkZXIoKVxuICAgIHRoaXMucHJlbG9hZGVyLm9uY2UoJ2NvbXBsZXRlZCcsICgpID0+IHRoaXMub25QcmVsb2FkRW5kKCkpXG4gIH1cblxuICBvblByZWxvYWRFbmQoKSB7XG4gICAgdGhpcy5wcmVsb2FkZXIuZGVzdHJveSgpXG4gICAgdGhpcy5pbml0UGFnZXMoKVxuICAgIHRoaXMuY29uZmlnKClcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgZ2V0Q29udGVudCgpIHtcbiAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpXG4gICAgdGhpcy50ZW1wbGF0ZSA9IGNhcGl0YWxpemUodGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpKVxuICB9XG5cbiAgaW5pdFBhZ2VzKCkge1xuICAgIHRoaXMucGFnZXMgPSB7fVxuXG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKFBhZ2VzKSkge1xuICAgICAgdGhpcy5wYWdlc1trZXldID0gUGFnZUZhY3RvcnkuY3JlYXRlSW5zdGFuY2Uoa2V5KVxuICAgIH1cblxuICAgIC8vICB0aGlzLnBhZ2VzID0ge1xuICAgIC8vICAgIGhvbWU6IG5ldyBIb21lKCksXG4gICAgLy8gICAgYWJvdXQ6IG5ldyBBYm91dCgpLFxuICAgIC8vICAgIHByb2plY3Q6IG5ldyBQcm9qZWN0KCksXG4gICAgLy8gICAgcGhvdG9ncmFwaGllczogbmV3IFBob3RvZ3JhcGhpZXMoKSxcbiAgICAvLyAgfVxuXG4gICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuXG4gICAgY29uc29sZS5sb2codGhpcy5wYWdlKVxuICAgIHRoaXMucGFnZS5pbml0KClcbiAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICB0aGlzLnBhZ2Uuc2hvdygpXG4gIH1cblxuICBpbml0TmF2aWdhdGlvbigpIHtcbiAgICB0aGlzLm5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpXG4gIH1cblxuICBjb25maWcoKSB7XG4gICAgdGhpcy5mb3JtSGFuZGxlciA9IG5ldyBGb3JtSGFuZGxlcignY29ubmVjdCcsICdjb25uZWN0JywgJ1BPU1QnKVxuICB9XG5cbiAgb2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coZW50cnkpXG4gICAgICAgIG5ldyBTbW9vdGhzY3JvbGwoJCgnLndyYXBwZXInKSwge1xuICAgICAgICAgIGRpcmVjdGlvbjogJ3YnLFxuICAgICAgICAgIHNtb290aDogMC4xLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpXG4gIH1cblxuICBhc3luYyBvbkNoYW5nZSh7IHVybCB9KSB7XG4gICAgYXdhaXQgdGhpcy5wYWdlLmhpZGUoKVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgd2luZG93LmZldGNoKHVybClcblxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXMudGV4dCgpXG5cbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHVybClcblxuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXG5cbiAgICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuICAgICAgdGhpcy50ZW1wbGF0ZSA9IGNhcGl0YWxpemUoZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKSlcbiAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTFxuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKVxuXG4gICAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICAgIHRoaXMucGFnZS5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignZXJyb3I6ICcgKyByZXMpXG4gICAgfVxuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBsaW5rcyA9ICRBbGwoJ1tkYXRhLWxpbmtzXScpXG4gICAgY29uc3QgbGlua3NJdGVtID0gJEFsbCgnLmhlYWRlcl9fbGlua3NfX2l0ZW1fX2xpbmsnKVxuXG4gICAgaWYgKCFsaW5rcyB8fCAhbGlua3NJdGVtKSByZXR1cm5cbiAgICBsaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICBjb25zdCB7IGhyZWYgfSA9IGxpbmtcbiAgICAgIGNvbnN0IGxpbmtEYXRhID0gaHJlZi5zcGxpdCgnIycpXG4gICAgICBjb25zdCBbdXJsXSA9IGxpbmtEYXRhXG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBsaW5rLmdldEF0dHJpYnV0ZSgnZGF0YS1saW5rcy1kaXNhYmxlZCcpXG4gICAgICBjb25zdCBpc0Rpc2FibGVkID0gYXR0cmlidXRlID09PSAndHJ1ZSdcblxuICAgICAgbGluay5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHJldHVyblxuXG4gICAgICAgIGlmIChsaW5rLmNsYXNzTGlzdC5jb250YWlucygnbWVudV9fbGlua3NfX2l0ZW0tYWN0aXZlJykpIHtcbiAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5yZW1vdmUoJ21lbnVfX2xpbmtzX19pdGVtLWFjdGl2ZScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKCdtZW51X19saW5rc19faXRlbS1hY3RpdmUnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybCA9PT0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHJldHVyblxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHsgdXJsOiBocmVmIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG5uZXcgQXBwKClcbiJdLCJuYW1lcyI6WyJBbmltYXRpb24iLCJzcGxpdHRleHQiLCJHU0FQIiwiUGFyYWdyYXBoIiwiY29uc3RydWN0b3IiLCJlbGVtZW50Iiwic3BhbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYW5pbWF0ZUluIiwidG8iLCJkdXJhdGlvbiIsIm9wYWNpdHkiLCJkZWxheSIsInN0YWdnZXIiLCJlYXNlIiwieSIsImFuaW1hdGVPdXQiLCJzZXQiLCIkQWxsIiwiU2NhbGUiLCJlbGVtZW50cyIsImluaXQiLCJldmVudExpc3RlbmVyIiwic2NhbGVVcCIsImUiLCJjdXJyZW50VGFyZ2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJzY2FsZURvd24iLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJTaGFwZXMiLCJwb3NpdGlvbiIsImhlaWdodCIsIndpZHRoIiwiYmx1ciIsImJhY2tncm91bmQiLCJzcmMiLCJ0b3AiLCJ1bmRlZmluZWQiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ3aW5kb3dXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJjcmVhdGVTaGFwZSIsIm9uV2luZG93UmVzaXplIiwiZXZlbnRzIiwic2hhcGVGcmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlkIiwidGVzdEJyZWFrcG9pbnQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVNoYXBlSW1nIiwic2hhcGVGcmFtZUltZyIsInNldEF0dHJpYnV0ZSIsIm9iamVjdEZpdCIsImFuaW1zaGFwZXMiLCJhbmltYXRpb25BcnIiLCJpbmRleCIsImFuaW1GbG93Iiwic2V0SW50ZXJ2YWwiLCJsZW5ndGgiLCJmaWx0ZXIiLCJtb3VudFNoYXBlIiwicGFyZW50IiwiYXBwZW5kIiwiVGl0bGUiLCJDb21wb25lbnRzIiwiJCIsIkNhbnZhcyIsImlzTW91bnRlZCIsInNoYXBlR3JhZGllbnQiLCJtb3VudEZyYW1lIiwiY3JlYXRlRnJhbWUiLCJmcmFtZSIsImlubmVySGVpZ2h0IiwiekluZGV4Iiwic2l6ZSIsInNoYXBlMSIsInNoYXBlMiIsImJvZHkiLCJvblJlc2l6ZSIsInByZXZlbnREZWZhdWx0IiwibW91bnRlZEZyYW1lIiwiY3JlYXRlT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiRXZlbnRFbWl0dGVyIiwiY29tcG9uZW50TmFtZSIsInNlbGVjdG9yQ2hpbGRyZW5zIiwicm9vdCIsImhhbmRsZUVsZW1lbnRPYmplY3QiLCJnZXRFbGVtZW50cyIsImNoaWxkcmVucyIsImtleXMiLCJ2YWx1ZSIsIk9iamVjdCIsInF1ZXJ5U2VsZWN0b3IiLCJvYmplY3QiLCJidWlsZGVkT2JqZWN0cyIsImtleSIsIiRBdHRyaWJ1dGUiLCJQYWdlcyIsInRpbWVsaW5lIiwid3JhcHBlciIsInNjYWxlQW5pbWF0aW9uIiwib3ZlcmZsb3ciLCJjcmVhdGUiLCJ0ZW1wbGF0ZSIsImF0dHJpYnV0ZXMiLCJzcGxpdCIsImF0dHIiLCJjb21wb25lbnQiLCJ0cmltIiwiZGlzcGxheSIsImNyZWF0ZUFuaW1hdGlvbiIsInRpdGxlcyIsInBhcmFncmFwaGVzIiwidCIsInAiLCJzaG93IiwiYXV0b0FscGhhIiwib25Db21wbGV0ZSIsImNvbnNvbGUiLCJsb2ciLCJoaWRlIiwicHJlbG9hZGVyIiwidGV4dCIsImNvbnRhaW5lciIsImxvYWRlciIsIm5hdmlnYXRpb24iLCJoZWFkZXIiLCJuYXZMaXN0IiwiY29udGVudCIsIm1lbnUiLCJvcGVuTWVudSIsInBsYXllciIsImJ1dHRvbiIsImV4cGFuZCIsImNsb3NlIiwicGxheSIsIm5leHQiLCJwcmV2IiwidG9nZ2xlciIsImNvdmVyQ29udGFpbmVyIiwiY292ZXIiLCJzZWxmIiwibWVkaWEiLCJhcnRpc3QiLCJ0aXRsZSIsInRpbWVyIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInJhbmdlIiwicHJvZ3Jlc3MiLCJwcmVsb2FkIiwidm9sdW1lIiwiZ3JhcHBlciIsInNsaWRlciIsImZvcm0iLCJjb25uZWN0IiwibmFtZSIsIm1haWwiLCJtZXNzYWdlIiwibmFtZUFsZXJ0IiwiZW1haWxBbGVydCIsIm1lc3NhZ2VBbGVydCIsImFsZXJ0IiwibW9kYWwiLCJkYXRhU2VydmljZUlucHV0IiwiaXRlbXMiLCJzZXJ2aWNlcyIsImJ1dHRvbnMiLCJpbWFnZXMiLCJhYm91dCIsImhvbWUiLCJwcm9qZWN0IiwiQWxlcnQiLCJ0eXBlIiwiZGl2IiwiY2xhc3NMaXN0IiwiYWRkIiwiaWNvbiIsImlubmVyVGV4dCIsImNsb3NlSWNvbiIsImkiLCJvbmNsaWNrIiwiZGVzdHJveSIsInByZXBlbmQiLCJ0YWciLCJzZXRUaW1lb3V0IiwidHJhbnNpdGlvbiIsInJlbW92ZUNoaWxkIiwiTmF2aWdhdGlvbiIsImV2ZW50c0xpc3RlbmVyIiwiZGVmYXVsdFNvdXJjZSIsInByZXZpZXdJbWciLCJzZXRBY3RpdmVMaW5rU3R5bGVzIiwibGlua3MiLCJ1cmwiLCJsb2NhdGlvbiIsImhyZWYiLCJsaW5rIiwicGFyZW50Tm9kZSIsIm9uTW91c2VIb3ZlckxpbmtzIiwiZ2V0QXR0cmlidXRlIiwidG9nZ2xlIiwiY2xvc2VNZW51IiwicmVtb3ZlIiwiaW1hZ2VzTG9hZGVkIiwiUHJlbG9hZGVyIiwic3RhcnRJbmRleCIsIk51bWJlciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFdpZHRoIiwiZ2FwIiwiY3JlYXRlUHJlbG9hZGVyIiwiaW1nTG9hZCIsIm9uIiwib25Qcm9ncmVzcyIsIm9uTG9hZCIsImFuaW1QcmVsb2FkZXJUZXh0IiwiY2hpbGRyZW4iLCJwZXJjZW50IiwiTWF0aCIsInJvdW5kIiwiZW1pdCIsIlNlcnZpY2VzIiwib25DbGljayIsImNsb3NlTW9kYWwiLCJjb250YWlucyIsIlRhYnMiLCJfX2RlZmF1bHRzIiwiZGVmYXVsdEluZGV4IiwiX19zZWxlY3RvcnMiLCJsaXN0IiwicGFuZWxzIiwiX19zdGF0ZSIsImFjdGl2ZSIsInNlbGVjdGVkIiwiX19hdHRyaWJ1YmVzIiwicGFuZWwiLCJidXR0b25TdGF0ZSIsInBhbm5lbFN0YXRlIiwicHJvcHMiLCJhc3NpZ24iLCJzZXRJbmRleCIsImV2ZW50c0xpc3RlbmVycyIsInRhcmdldCIsIlBsYXllciIsIkZvcm1IYW5kbGVyIiwiU21vb3Roc2Nyb2xsIiwiU2xpZGVyIiwiY2hpbGQiLCJwYWRkaW5nIiwiY3VycmVudFBvc2l0aW9uIiwidHJlc2hvbGQiLCJkcmFnSW50ZXJ2YWxsIiwic2V0Q2hpbGRXaWR0aCIsInNldFBvc2l0aW9uIiwiaXRlbSIsImZsZXgiLCJvbk1vdXNlRG93biIsImN1cnNvciIsImlzRG93biIsImRyYWdTdGFydCIsIngiLCJkcmFnU3RhcnR5Iiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJkYXRhIiwicmVxdWlyZSIsIk1lZGlhTWFuYWdlciIsIlRpbWVyIiwic3RhcnR0aW1lIiwiZW5kdGltZSIsImlzUGxheSIsImN1cnJlbnRUaW1lIiwib25QYXVzZSIsImlzRW5kZWQiLCJzZXRUaW1lIiwiaG91cnMiLCJmbG9vciIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiaG91cnNWYWx1ZSIsIm1pbnV0ZXNWYWx1ZSIsInNlY29uZHNWYWx1ZSIsInRleHRDb250ZW50IiwidXBkYXRlUHJvZ3Jlc3MiLCJyYXRpbyIsIm1heCIsInNldEZ1bGxUaW1lIiwib25UaW1lQ2hhbmdlIiwiYnVmZmVyZWQiLCJzdGFydCIsImVuZCIsIm1ldGFEYXRhTG9hZGVkIiwiVm9sdW1lIiwiaXNFeHBhbmQiLCJyYW5kb21JZCIsInNvdW5kIiwiZGVza3RvcCIsIm1lZGlhTWFuYWdlciIsInJhbmRvbSIsImNvbXBvbmVudHNIYW5kbGVyIiwidm9sdW1lSGFuZGxlciIsImV2ZW50c0xpc3Rlcm5lciIsInNldENvbXBvbmVudHMiLCJ0aW1lckhhbmRsZXIiLCJjb3ZlckhhbmRsZXIiLCJzZXRTb3VuZERldGFpbHMiLCJhbGJ1bSIsImRhdGFzZXQiLCJwYXVzZSIsInN0b3AiLCJ0aW1lIiwib25FbmRlZCIsImNsYW1wIiwiY29udGFpbmVyQm90dG9tIiwiY29udGFpbmVySGVpZ2h0IiwiY29udGFpbmVyVG9wIiwiaW5pdGlhbFZhbHVlIiwiY3VycmVudCIsInN0ZXAiLCJvblBvaW50ZXJEb3duSGFuZGxlciIsIm9uUG9pbnRlckRvd24iLCJvblBvaW50ZXJNb3ZlSGFuZGxlciIsIm9uUG9pbnRlck1vdmUiLCJvblBvaW50ZXJVcEhhbmRsZXIiLCJvblBvaW50ZXJVcCIsInN0b3BQcm9wYWdhdGlvbiIsImNsaWVudFkiLCJkaXN0YW5jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ2YWxpZEVtYWlsIiwibWV0aG9kIiwiZm9ybVR5cGUiLCJvcmlnaW4iLCJ2YWwiLCJmZXRjaCIsIm9wdGlvbnMiLCJtb2RlIiwicmVzIiwic3RhdHVzIiwianNvbiIsInRoZW4iLCJyZXNldCIsInNlbmREYXRhIiwidmFsaWROdW1iZXIiLCJ2ZXJpZnlEYXRhIiwiZWwiLCJmb3JtRWxlbWVudHMiLCJVUkxTZWFyY2hQYXJhbXMiLCJGb3JtRGF0YSIsIlBBR0VTIiwiUGFnZUZhY3RvcnkiLCJjcmVhdGVJbnN0YW5jZSIsImRhdGFzIiwiZWxlbWVudE5hbWUiLCJBYm91dCIsIkhvbWUiLCJQcm9qZWN0IiwiUGhvdG9ncmFwaGllcyIsInRhYnMiLCJsZXJwIiwibm9ybWFsaXplV2hlZWwiLCJfX2RlZmF1bHRPcHRpb25zIiwiZGlyZWN0aW9uIiwic21vb3RoIiwic3RhcnRlZFBvaW50Iiwib3B0cyIsInNtb290aE9wdGlvbnMiLCJzY3JvbGwiLCJsaW1pdCIsIm9mZnNldEhlaWdodCIsImRpbWVuc2lvbkhhbmRsZXIiLCJhZGRMaXN0ZW5lciIsIm9uTW91c2VXaGVlbCIsImV2ZW50IiwicGl4ZWxZIiwicGl4ZWxYIiwiY2xpZW50SGVpZ2h0IiwidXBkYXRlIiwidHJhbnNsYXRlQnlDYXNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW1vdW50IiwibWluIiwidmFsaWRGaWxlVHlwZSIsImZpbGUiLCJkb2N1bWVudHMiLCJVcmxFeGlzdCIsImhlYWRlcnMiLCJyZXNwb25zZSIsImVtYWlsIiwicmVnZXgiLCJ0ZXN0IiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsInN0ciIsImMiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiT2JzZXJ2ZU5vZGVEb21DaGFuZ2UiLCJub2RlIiwiY2IiLCJzZWxlY3RvciIsInRhcmdldE5vZGUiLCJjb25maWciLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2FsbGJhY2siLCJtdXRhdGlvbnNMaXN0IiwibXV0YXRpb24iLCJNdXRhdGlvbk9ic2VydmVyIiwid29yZHMiLCJzcGxpdFRleHQiLCJpbm5lckhUTUwiLCJ0b1N0cmluZyIsImxpbmUiLCJpbmRleE9mIiwibGluZXMiLCJwYXJzZUxpbmUiLCJ0eHQiLCJzcGxpdHMiLCJhcnIiLCJwdXNoIiwiY29uY2F0IiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJFdkVtaXR0ZXIiLCJwcm90byIsInByb3RvdHlwZSIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsImluY2x1ZGVzIiwib25jZSIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsIm9uY2VMaXN0ZW5lcnMiLCJvZmYiLCJzcGxpY2UiLCJlbWl0RXZlbnQiLCJhcmdzIiwiaXNPbmNlIiwiYXBwbHkiLCJhbGxPZmYiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwiRnVuY3Rpb24iLCJjYWxsIiwiUmVmbGVjdE93bktleXMiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIlByb2Nlc3NFbWl0V2FybmluZyIsIndhcm5pbmciLCJ3YXJuIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsIlR5cGVFcnJvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImFyZyIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsIm4iLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsImdldE1heExpc3RlbmVycyIsImFyZ3VtZW50cyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwiRXJyb3IiLCJlcnIiLCJjb250ZXh0IiwiaGFuZGxlciIsImxlbiIsImFycmF5Q2xvbmUiLCJfYWRkTGlzdGVuZXIiLCJtIiwiZXhpc3RpbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiU3RyaW5nIiwiZW1pdHRlciIsImNvdW50IiwicHJlcGVuZExpc3RlbmVyIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsInJlbW92ZUxpc3RlbmVyIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJjb3B5IiwiQXJyYXkiLCJwb3AiLCJyZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJyZXNvbHZlciIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyIiwiZmxhZ3MiLCJ3cmFwTGlzdGVuZXIiLCJnc2FwIiwiX2dldFByb3BlcnR5IiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsImdldFVuaXQiLCJfaXNTdHJpbmciLCJfaXNVbmRlZmluZWQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIl9yZWxFeHAiLCJfZm9yRWFjaE5hbWUiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfcGx1Z2lucyIsIkdTQ2FjaGUiLCJQcm9wVHdlZW4iLCJfY29uZmlnIiwiX3RpY2tlciIsIl9yb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX2dldFNldHRlciIsIl9nZXRDYWNoZSIsIl9jb2xvckV4cCIsIl9wYXJzZVJlbGF0aXZlIiwiX3NldERlZmF1bHRzIiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfdGVtcERpdlN0eWxlciIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfcmV2ZXJ0aW5nIiwiX3dpbmRvd0V4aXN0cyIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiUEkiLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2JpZ051bSIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJzIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwiX3RoaXMiLCJ0Zm0iLCJhIiwiX2dldCIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwicmV2ZXJ0Iiwic2F2ZSIsIl9zdXBwb3J0czNEIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJzdWJzdHIiLCJfaW5pdENvcmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjc3NUZXh0IiwiY29yZSIsInJldmVydGluZyIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50Iiwib2xkU2libGluZyIsIm5leHRTaWJsaW5nIiwib2xkQ1NTIiwiYmJveCIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiaGFzQXR0cmlidXRlIiwiX2dldEJCb3giLCJib3VuZHMiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYWRkTm9uVHdlZW5pbmdQVCIsInBsdWdpbiIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsInB0IiwiX3B0IiwiX3Byb3BzIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX25vblN0YW5kYXJkTGF5b3V0cyIsImdyaWQiLCJfY29udmVydFRvVW5pdCIsInVuaXQiLCJjdXJWYWx1ZSIsInBhcnNlRmxvYXQiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsInRhZ05hbWUiLCJtZWFzdXJlUHJvcGVydHkiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsInB4IiwiaXNTVkciLCJfcGFyc2VUcmFuc2Zvcm0iLCJfZmlyc3RUd29Pbmx5Iiwiek9yaWdpbiIsIl9zcGVjaWFsUHJvcHMiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwicHJvcCIsIm1hdGNoSW5kZXgiLCJyZXN1bHQiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwiY29sb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJlbmRWYWx1ZXMiLCJtYXRjaCIsImV4ZWMiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXgiLCJ1bml0cyIsIl9uZXh0IiwiciIsIl9rZXl3b3JkVG9QZXJjZW50IiwiY2VudGVyIiwiX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMiLCJqb2luIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJtYXAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsIm1hdHJpeCIsInRlbXAiLCJhZGRlZFRvRE9NIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiZCIsImYiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwiZGV0ZXJtaW5hbnQiLCJpbnZlcnRlZFNjYWxlWCIsInoiLCJyb3RhdGlvbiIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJwZXJzcGVjdGl2ZSIsImFuZ2xlIiwiY29zIiwic2luIiwiYTEyIiwiYTIyIiwidDEiLCJ0MiIsInQzIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTQyIiwiYTQzIiwiYTMyIiwicm90YXRlIiwic3FydCIsImFicyIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJfcmVmIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiX3JlZjIiLCJhMTEiLCJhMjEiLCJ0YW4iLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImNhcCIsImlzU3RyaW5nIiwiY2hhbmdlIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwic3RhcnRDYWNoZSIsImV4Y2x1ZGUiLCJlbmRDYWNoZSIsImwiLCJzaWRlIiwidmFycyIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInN0YXJ0QXQiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsInJlbmRlciIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJ1dGlscyIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsInBvc2l0aW9uQW5kU2NhbGUiLCJvdGhlcnMiLCJhbGwiLCJyZWdpc3RlclBsdWdpbiIsImRlZmF1bHQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsImF1dG9TbGVlcCIsIm51bGxUYXJnZXRXYXJuIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsIm92ZXJ3cml0ZSIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfY29udGV4dCIsIl90aW55TnVtIiwiXzJQSSIsIl9IQUxGX1BJIiwiX2dzSUQiLCJfc3FydCIsIl9jb3MiLCJfc2luIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNPYmplY3QiLCJfaXNOb3RGYWxzZSIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9kZWxpbWl0ZWRWYWx1ZUV4cCIsIl91bml0RXhwIiwiX2dsb2JhbFRpbWVsaW5lIiwiX2NvcmVJbml0dGVkIiwiX2dsb2JhbHMiLCJfaW5zdGFsbFNjb3BlIiwiX2NvcmVSZWFkeSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJfd2FybiIsInN1cHByZXNzIiwiX2FkZEdsb2JhbCIsIm9iaiIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwia2lsbCIsIl9yZXZlcnRDb25maWdOb0tpbGwiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwiaGFybmVzc1BsdWdpbiIsImhhcm5lc3MiLCJ0b0FycmF5IiwidiIsIm5hbWVzIiwiZnVuYyIsIl9yb3VuZFByZWNpc2UiLCJvcGVyYXRvciIsIl9hcnJheUNvbnRhaW5zQW55IiwidG9TZWFyY2giLCJ0b0ZpbmQiLCJfbGF6eVJlbmRlciIsIl9sYXp5IiwiX2xhenlTYWZlUmVuZGVyIiwiYW5pbWF0aW9uIiwiZm9yY2UiLCJfaW5pdHRlZCIsIl9zdGFydEF0IiwiX251bWVyaWNJZlBvc3NpYmxlIiwiX3Bhc3NUaHJvdWdoIiwiZGVmYXVsdHMiLCJfc2V0S2V5ZnJhbWVEZWZhdWx0cyIsImV4Y2x1ZGVEdXJhdGlvbiIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiX2luaGVyaXREZWZhdWx0cyIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfYXJyYXlzTWF0Y2giLCJhMSIsImEyIiwiX2FkZExpbmtlZExpc3RJdGVtIiwiZmlyc3RQcm9wIiwibGFzdFByb3AiLCJzb3J0QnkiLCJfcHJldiIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3REdXIiLCJfc2V0RW5kIiwiX3J0cyIsIl9hbGlnblBsYXloZWFkIiwic21vb3RoQ2hpbGRUaW1pbmciLCJfcG9zdEFkZENoZWNrcyIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInNraXBDaGVja3MiLCJfcGFyc2VQb3NpdGlvbiIsIl9kZWxheSIsInRpbWVTY2FsZSIsIl9zb3J0IiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwidHJpZ2dlciIsIlNjcm9sbFRyaWdnZXIiLCJfYXR0ZW1wdEluaXRUd2VlbiIsIl9pbml0VHdlZW4iLCJsYXp5IiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9sb2NrIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicHJldlJhdGlvIiwicmVwZWF0RGVsYXkiLCJpdGVyYXRpb24iLCJwcmV2SXRlcmF0aW9uIiwiX3lveW8iLCJyZXBlYXRSZWZyZXNoIiwiaW52YWxpZGF0ZSIsIl9mcm9tIiwiX29uVXBkYXRlIiwiX2NhbGxiYWNrIiwiX3Byb20iLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwicHJldlRpbWUiLCJfZmlyc3QiLCJfbGFzdCIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwicGVyY2VudEFuaW1hdGlvbiIsImxhYmVscyIsInJlY2VudCIsImNsaXBwZWREdXJhdGlvbiIsIm9mZnNldCIsImlzUGVyY2VudCIsIl9jcmVhdGVUd2VlblR5cGUiLCJwYXJhbXMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsImlyVmFycyIsInJ1bkJhY2t3YXJkcyIsIlR3ZWVuIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwiX3NsaWNlIiwiX2lzQXJyYXlMaWtlIiwibm9uRW1wdHkiLCJfZmxhdHRlbiIsImFyIiwibGVhdmVTdHJpbmdzIiwiYWNjdW11bGF0b3IiLCJfYWNjdW11bGF0b3IiLCJfd2FrZSIsIm5hdGl2ZUVsZW1lbnQiLCJzaHVmZmxlIiwic29ydCIsImRpc3RyaWJ1dGUiLCJlYWNoIiwiX3BhcnNlRWFzZSIsImZyb20iLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJheGlzIiwicmF0aW9YIiwicmF0aW9ZIiwiZWRnZXMiLCJkaXN0YW5jZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsImoiLCJ3cmFwQXQiLCJfaW52ZXJ0RWFzZSIsIl9yb3VuZE1vZGlmaWVyIiwicG93IiwicmF3Iiwic25hcCIsInNuYXBUbyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJjbG9zZXN0IiwiZHgiLCJkeSIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJwaXBlIiwiX2xlbiIsImZ1bmN0aW9ucyIsIl9rZXkiLCJyZWR1Y2UiLCJ1bml0aXplIiwibm9ybWFsaXplIiwibWFwUmFuZ2UiLCJfd3JhcEFycmF5Iiwid3JhcCIsIndyYXBZb3lvIiwidG90YWwiLCJudW1zIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwibWFzdGVyIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiX2FkZFByb3BUd2VlbiIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwibGFiZWwiLCJleGVjdXRlTGF6eUZpcnN0IiwicHJldkNvbnRleHQiLCJfY3R4IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwiX3F1aWNrVHdlZW4iLCJfY3JlYXRlUGx1Z2luIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwiaCIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsInBhcnNlSW50IiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwiY29sb3JzIiwic2hlbGwiLCJSZWdFeHAiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJfdGlja2VyQWN0aXZlIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2xhZ1RocmVzaG9sZCIsIl9hZGp1c3RlZExhZyIsIl9zdGFydFRpbWUiLCJfbGFzdFVwZGF0ZSIsIl9nYXAiLCJfbmV4dFRpbWUiLCJfaWQiLCJfcmVxIiwiX3JhZiIsIl9zZWxmIiwiX2RlbHRhIiwiX2kiLCJfdGljayIsImVsYXBzZWQiLCJtYW51YWwiLCJvdmVybGFwIiwiZGlzcGF0Y2giLCJ0aWNrIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJnc2FwVmVyc2lvbnMiLCJ2ZXJzaW9uIiwiR3JlZW5Tb2NrR2xvYmFscyIsInNsZWVwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJsYWdTbW9vdGhpbmciLCJ0aHJlc2hvbGQiLCJhZGp1c3RlZExhZyIsIl9mcHMiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3ZhbHVlSW5QYXJlbnRoZXNlcyIsIm9wZW4iLCJuZXN0ZWQiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfQ0UiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJ5b3lvRWFzZSIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwibjEiLCJuMiIsIm4zIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiSW5maW5pdHkiLCJ5b3lvIiwiX3Byb3RvIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIl9wcyIsInBhdXNlZCIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJyZXZlcnNlZCIsInJldmVyc2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpc0FjdGl2ZSIsImV2ZW50Q2FsbGJhY2siLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfQW5pbWF0aW9uIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsImZyb21UbyIsImZyb21WYXJzIiwidG9WYXJzIiwiZGVsYXllZENhbGwiLCJzdGFnZ2VyVG8iLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGVQYXJhbXMiLCJzdGFnZ2VyRnJvbSIsInN0YWdnZXJGcm9tVG8iLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicmV3aW5kaW5nIiwiZG9lc1dyYXAiLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwib25VcGRhdGUiLCJhZGp1c3RlZFRpbWUiLCJfdGhpczIiLCJhZGRMYWJlbCIsImdldENoaWxkcmVuIiwidHdlZW5zIiwidGltZWxpbmVzIiwiaWdub3JlQmVmb3JlVGltZSIsImdldEJ5SWQiLCJhbmltYXRpb25zIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJfdGFyZ2V0cyIsInR3ZWVuVG8iLCJ0bCIsIl92YXJzIiwiX29uU3RhcnQiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsImluaXR0ZWQiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJzb2Z0IiwiY2xlYXIiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiaGFzUmFuZG9tIiwiZnAiLCJvcHRpb25hbCIsImN1cnJlbnRWYWx1ZSIsInBhcnNlZFN0YXJ0IiwiX3NldHRlclBsYWluIiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9mb3JjZUFsbFByb3BUd2VlbnMiLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9wcm9jZXNzVmFycyIsIl9wYXJzZUZ1bmNPclN0cmluZyIsInB0TG9va3VwIiwicHJpb3JpdHkiLCJvblVwZGF0ZVBhcmFtcyIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJfcHRDYWNoZSIsIl9vcCIsIl9vbkluaXQiLCJfdXBkYXRlUHJvcFR3ZWVucyIsInN0YXJ0SXNSZWxhdGl2ZSIsInB0Q2FjaGUiLCJyb290UFQiLCJsb29rdXAiLCJfYWRkQWxpYXNlc1RvVmFycyIsInByb3BlcnR5QWxpYXNlcyIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiX3RoaXMzJHZhcnMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJyZXNldFRvIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsImxhc3QiLCJyZW5kZXJlciIsIl9wcm90bzQiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwiYW55TWF0Y2giLCJ0b2dnbGVkIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwiY29uZCIsIm1xIiwiX2xlbjIiLCJfa2V5MiIsImdldFByb3BlcnR5IiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsImdldENhY2hlIiwidG9BZGQiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJfZ2V0UGx1Z2luUHJvcFR3ZWVuIiwiX2FkZE1vZGlmaWVycyIsIm1vZGlmaWVycyIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZ3NhcFdpdGhDU1MiLCJUd2Vlbk1heFdpdGhDU1MiLCJqUXVlcnkiLCJtYWtlQXJyYXkiLCJpc0FycmF5TGlrZSIsIkltYWdlc0xvYWRlZCIsImVsZW0iLCJvbkFsd2F5cyIsInF1ZXJ5RWxlbSIsImdldEltYWdlcyIsImpxRGVmZXJyZWQiLCJEZWZlcnJlZCIsImNoZWNrIiwiYWRkRWxlbWVudEltYWdlcyIsImVsZW1lbnROb2RlVHlwZXMiLCJub2RlTmFtZSIsImFkZEltYWdlIiwiYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMiLCJjaGlsZEltZ3MiLCJpbWciLCJyZVVSTCIsImJhY2tncm91bmRJbWFnZSIsImFkZEJhY2tncm91bmQiLCJsb2FkaW5nSW1hZ2UiLCJMb2FkaW5nSW1hZ2UiLCJCYWNrZ3JvdW5kIiwicHJvZ3Jlc3NlZENvdW50IiwiaGFzQW55QnJva2VuIiwiY29tcGxldGUiLCJpbWFnZSIsImlzTG9hZGVkIiwibm90aWZ5IiwiZGVidWciLCJpc0NvbXBsZXRlIiwianFNZXRob2QiLCJnZXRJc0ltYWdlQ29tcGxldGUiLCJjb25maXJtIiwibmF0dXJhbFdpZHRoIiwicHJveHlJbWFnZSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJjdXJyZW50U3JjIiwiaGFuZGxlRXZlbnQiLCJvbmxvYWQiLCJ1bmJpbmRFdmVudHMiLCJvbmVycm9yIiwibWFrZUpRdWVyeVBsdWdpbiIsImZuIiwiaW5zdGFuY2UiLCJwcm9taXNlIiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsIl9wb3B1bGF0ZWQiLCJfaWUiLCJfZmlyZWZveCIsIl9vcGVyYSIsIl93ZWJraXQiLCJfY2hyb21lIiwiX2llX3JlYWxfdmVyc2lvbiIsIl9vc3giLCJfd2luZG93cyIsIl9saW51eCIsIl9hbmRyb2lkIiwiX3dpbjY0IiwiX2lwaG9uZSIsIl9pcGFkIiwiX25hdGl2ZSIsIl9tb2JpbGUiLCJfcG9wdWxhdGUiLCJ1YXMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhZ2VudCIsIm9zIiwiTmFOIiwiZG9jdW1lbnRNb2RlIiwidHJpZGVudCIsInZlciIsIlVzZXJBZ2VudF9ERVBSRUNBVEVEIiwiaWUiLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiaWU2NCIsImZpcmVmb3giLCJvcGVyYSIsIndlYmtpdCIsInNhZmFyaSIsImNocm9tZSIsIndpbmRvd3MiLCJvc3giLCJsaW51eCIsImlwaG9uZSIsIm1vYmlsZSIsIm5hdGl2ZUFwcCIsImFuZHJvaWQiLCJpcGFkIiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJldmVudE5hbWVTdWZmaXgiLCJjYXB0dXJlIiwiaXNTdXBwb3J0ZWQiLCJQSVhFTF9TVEVQIiwiTElORV9IRUlHSFQiLCJQQUdFX0hFSUdIVCIsInNYIiwic1kiLCJwWCIsInBZIiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwiZ2V0RXZlbnRUeXBlIiwiQXBwIiwiaW5pdE5hdmlnYXRpb24iLCJnZXRDb250ZW50IiwiY2FudmFzIiwib25QcmVsb2FkRW5kIiwiaW5pdFBhZ2VzIiwicGFnZXMiLCJwYWdlIiwiZm9ybUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm9uQ2hhbmdlIiwiaHRtbCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkaXZDb250ZW50IiwibGlua3NJdGVtIiwibGlua0RhdGEiLCJhdHRyaWJ1dGUiLCJpc0Rpc2FibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==