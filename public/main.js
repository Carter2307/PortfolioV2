/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/animation/Shapes.js":
/*!*********************************!*\
  !*** ./app/animation/Shapes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Shapes)
/* harmony export */ });
class Shapes {
  constructor({
    position,
    height,
    width,
    blur,
    background
  }) {
    this.top = position.top === -1 ? undefined : position.top;
    this.left = position.left === -1 ? undefined : position.left;
    this.right = position.right === -1 ? undefined : position.right;
    this.bottom = position.bottom === -1 ? undefined : position.bottom;
    this.height = height;
    this.width = width;
    this.blur = blur;
    this.background = background;
    this.windowWidth = window.innerWidth;
    this.init();
  }

  init() {
    this.createShape();
    this.onWindowResize();
    this.events();
  }

  createShape() {
    this.shapeFrame = document.createElement('DIV');
    this.shapeFrame.className = 'shapes';
    this.id = 'shapes';
    this.testBreakpoint(); // style

    this.shapeFrame.style.borderRadius = this.height[2] + 'px';
    this.shapeFrame.style.backgroundColor = this.background; // this.shapeFrame.style.transition = 'all 8s'

    this.shapeFrame.style.position = 'absolute'; // set shape position

    this.shapeFrame.style.top = this.top + 'px';
    this.shapeFrame.style.left = this.left + 'px';
    this.shapeFrame.style.right = this.right + 'px';
    this.shapeFrame.style.bottom = this.bottom + 'px';
  }

  animshapes(animationArr) {
    let index = 0;
    let animFlow = null;
    setInterval(() => {
      if (index >= animationArr.length) index = 0;
      animFlow = animationArr[index];
      this.shapeFrame.style.top = animFlow.to.top + 'px';
      this.shapeFrame.style.left = animFlow.to.left + 'px';
      this.shapeFrame.style.bottom = animFlow.to.bottom + 'px';
      this.shapeFrame.style.right = animFlow.to.right + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur}px)`;
      index++;
    }, 4000);
  }

  mountShape(parent) {
    parent.append(this.shapeFrame);
  }

  onWindowResize() {
    this.windowWidth = window.innerWidth;
    this.testBreakpoint();
  }

  testBreakpoint() {
    if (this.windowWidth >= 640 && this.windowWidth < 1024) {
      this.shapeFrame.style.height = this.height[1] + 'px';
      this.shapeFrame.style.width = this.width[1] + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur[0]}px)`;
    } else if (this.windowWidth >= 1024) {
      this.shapeFrame.style.height = this.height[2] + 'px';
      this.shapeFrame.style.width = this.width[2] + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur[1]}px)`;
    } else {
      this.shapeFrame.style.height = this.height[0] + 'px';
      this.shapeFrame.style.width = this.width[0] + 'px';
      this.shapeFrame.style.filter = `blur(${this.blur[0]}px)`;
    }
  }

  events() {
    addEventListener('resize', this.onWindowResize.bind(this));
  }

}

/***/ }),

/***/ "./app/animation/canvas.js":
/*!*********************************!*\
  !*** ./app/animation/canvas.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");
/* harmony import */ var _Shapes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shapes */ "./app/animation/Shapes.js");



class Canvas extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.isMounted = false;
    this.shapeGradient = '#066D5B';
    this.init();
  }

  init() {
    this.mountFrame();
    if (!this.isMounted) return;
    const shape1 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -1,
        right: -1,
        left: -100,
        bottom: -100
      },
      height: [400, 500, 600],
      width: [400, 500, 600],
      blur: [50, 100],
      background: this.shapeGradient
    });
    const shape2 = new _Shapes__WEBPACK_IMPORTED_MODULE_2__["default"]({
      position: {
        top: -200,
        right: -100,
        left: -1,
        bottom: -1
      },
      height: [400, 500, 600],
      width: [400, 500, 600],
      blur: [50, 100],
      background: this.shapeGradient
    });
    shape1.mountShape((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame'));
    shape2.mountShape((0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame'));
  }

  createFrame() {
    this.frame = document.createElement('DIV');
    this.frame.className = 'frame';
    this.frame.style.position = 'fixed';
    this.frame.style.top = 0;
    this.frame.style.left = 0;
    this.frame.style.width = `${window.innerWidth}px`;
    this.frame.style.height = `${window.innerHeight}px`;
    this.frame.style.zIndex = '-1';
    this.frame.id = 'frame';
  }

  mountFrame() {
    this.createFrame();
    document.body.append(this.frame);
    this.eventListener();
    this.isMounted = true;
  }

  onResize(e) {
    e.preventDefault();
    this.mountedFrame = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#frame');
    this.mountedFrame.style.width = `${window.innerWidth}px`;
    this.mountedFrame.style.height = `${window.innerHeight}px`;
  }

  eventListener() {
    window.addEventListener('resize', this.onResize.bind(this));
  }

}

/***/ }),

/***/ "./app/classes/Components.js":
/*!***********************************!*\
  !*** ./app/classes/Components.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Components)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");


class Components extends (events__WEBPACK_IMPORTED_MODULE_0___default()) {
  constructor(componentName) {
    super();
    this.selectors = {
      preloader: {
        element: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.preloader'),
        text: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.preloader__text__item'),
        container: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.preloader__text'),
        loader: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.preloader__loader__bar'),
        wrapper: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.preloader__text__wrapper')
      },
      navigation: {
        header: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.header'),
        navList: [...(0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('.menu__links__item')],
        previewImg: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.menu__links__media__image'),
        content: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.menu__content'),
        openMenu: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.button-open'),
        closeMenu: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.button-close')
      },
      player: {
        button: {
          expand: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__button.expand'),
          close: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__button.close'),
          play: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('[data-icon="rob-play"]'),
          next: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('[data-icon="rob-forward"]'),
          prev: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('[data-icon="rob-backward"]')
        },
        coverContainer: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__cover'),
        cover: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__cover img'),
        self: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player'),
        media: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__media'),
        artist: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__detail__name'),
        title: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__detail__title'),
        timer: {
          startTime: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__timer__times__starttime'),
          endTime: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__timer__times__endtime'),
          range: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__timer__progress__range'),
          progress: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__timer__progress__bar'),
          preload: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__timer__progress__elapse')
        },
        volume: {
          grapper: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__volume__grap'),
          slider: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__volume__slider'),
          container: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.player__volume__wrapper')
        }
      },
      form: {
        connect: {
          form: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.connect__form'),
          button: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.connect__form .button'),
          name: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.input__name'),
          mail: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.input__email'),
          message: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#message'),
          nameAlert: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.input__alert-name'),
          emailAlert: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.input__alert-email'),
          messageAlert: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.input__alert-message'),
          alert: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('.input__alert')
        },
        modal: {
          form: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.modal__form'),
          button: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.modal__form .button')
        },
        alert: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.alert')
      },
      slider: {
        button: {
          prev: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#rb-slider-button-prev'),
          next: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('#rb-slider-button-next')
        },
        wrapper: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.rb-slider-wrapper'),
        items: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.rb-slider-items'),
        container: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.rb-slider')
      },
      services: {
        buttons: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('.services__cta')
      },
      modal: {
        self: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.modal'),
        button: (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$)('.modal__button button')
      },
      images: [...(0,_utils_selectors__WEBPACK_IMPORTED_MODULE_1__.$All)('img')]
    };
    this.elements = this.selectors[componentName];
  }

}

/***/ }),

/***/ "./app/classes/Pages.js":
/*!******************************!*\
  !*** ./app/classes/Pages.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pages)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components */ "./app/classes/Components.js");
/* harmony import */ var _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Smoothscroll */ "./app/utils/Smoothscroll.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");




class Pages extends _Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(elements) {
    super(elements);
    this.wrapper = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_2__.$)('.wrapper');
    this.device = {
      mobile: /mobile/i.test(navigator.userAgent),
      tablet: !/ipad|tablet/i.test(navigator.userAgent)
    };
  }

  create() {
    if (this.device.mobile && this.device.tablet) {
      document.body.style.overflow = 'visible';
      document.body.style.position = 'relative';
    } else {
      this.smootscroll = new _utils_Smoothscroll__WEBPACK_IMPORTED_MODULE_1__["default"](this.wrapper, {
        direction: 'v',
        smooth: 0.1
      });
    }
  }

  show() {
    console.log('show');
  }

  hide() {
    console.log('hide');
    return new Promise(resolve => {
      this.animateOut = gsap__WEBPACK_IMPORTED_MODULE_3__["default"].timeline();
      this.animateOut.to(this.wrapper, {
        autoAlpha: 0,
        onComplete: resolve
      });
    });
  }

}

/***/ }),

/***/ "./app/components/Alert.js":
/*!*********************************!*\
  !*** ./app/components/Alert.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Alert)
/* harmony export */ });
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/selectors */ "./app/utils/selectors.js");

class Alert {
  constructor(message, type) {
    this.message = message;
    this.type = type;
    this.init();
  }

  init() {
    this.create();
    this.self = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_0__.$)('.alert');
  }

  create() {
    this.div = document.createElement('DIV');
    this.div.className = 'alert';
    if (this.type === 'success') this.div.classList.add('alert__success');else this.div.classList.add('alert__error'); // Create alert__wrapper

    const wrapper = createElement('DIV', 'alert__wrapper'); // content

    const content = createElement('DIV', 'alert__content'); // icons

    const icon = createElement('SPAN', 'alert__icon'); // Message

    const message = createElement('P', 'alert__message');
    message.innerText = this.message; // Close icon

    const closeIcon = createElement('SPAN', 'alert__closeIcon');
    const i = createElement('I', 'rob-close');
    closeIcon.append(i);

    closeIcon.onclick = () => {
      this.hide();
      this.destroy();
    }; // appned child


    content.append(icon, message);
    wrapper.append(content, closeIcon);
    this.div.append(wrapper);
    document.body.prepend(this.div);
    this.self = this.div;
    this.hide();

    function createElement(tag, className) {
      const element = document.createElement(tag);
      element.className = className;
      return element;
    }
  }

  show() {
    setTimeout(() => {
      this.self.style.right = '.5rem';
    }, 1000);
  }

  hide() {
    this.self.style.right = '-100%';
    this.self.transition = 'right .6s';
  }

  destroy() {
    document.body.removeChild(this.div);
  }

}

/***/ }),

/***/ "./app/components/Navigation.js":
/*!**************************************!*\
  !*** ./app/components/Navigation.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Navigation)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");

class Navigation extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('navigation');
    this.init();
    this.eventsListener();
  }

  init() {
    const defaultSource = 'images/previews/img-1';
    this.selectors.navigation.previewImg.src = `${defaultSource}.png`;
  }

  onMouseHoverLinks(e) {
    const src = e.currentTarget.getAttribute('data-snap-image');
    this.selectors.navigation.previewImg.src = `${src}.png`;
  }

  openMenu(e) {
    e.preventDefault();
    this.selectors.navigation.content.classList.add('menu__content-visible');
  }

  closeMenu(e) {
    e.preventDefault();
    this.selectors.navigation.content.classList.remove('menu__content-visible');
  }

  eventsListener() {
    this.selectors.navigation.navList.forEach(link => {
      link.addEventListener('mouseover', this.onMouseHoverLinks.bind(this));
    });
    this.selectors.navigation.openMenu.addEventListener('click', this.openMenu.bind(this));
    this.selectors.navigation.closeMenu.addEventListener('click', this.closeMenu.bind(this));
  }

}

/***/ }),

/***/ "./app/components/Preloader.js":
/*!*************************************!*\
  !*** ./app/components/Preloader.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Preloader)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! imagesloaded */ "./node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_1__);

 //import autoBind from 'auto-bind'

class Preloader extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('preloader');
    this.length = 0;
    this.startIndex = 1;
    this.size = {
      height: Number(this.elements.text.getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.createPreloader();
    this.addEventListener();
  }

  createPreloader() {
    if (this.selectors.images) {
      const imgLoad = imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(document.body);
      imgLoad.on('progress', _ => {
        this.onProgress(imgLoad.images.length);
      });
      imgLoad.on('always', _ => {
        this.onLoad();
      });
    }
  }

  animPreloaderText(e) {
    e.preventDefault();
    const length = this.elements.wrapper.children.length; //Give the wrapper the height of the text

    this.elements.container.style.height = `${this.size.height}px`;
    this.elements.container.style.width = `${this.size.width}px`;
    window.setInterval(() => {
      if (this.startIndex < length) {
        this.elements.wrapper.style.top = `${(-this.size.height - this.size.gap) * this.startIndex}px`;
        this.startIndex++;
      }
    }, 1000);
  }

  onProgress(length) {
    this.length += 1;
    const percent = this.length / length;
    this.elements.loader.style.width = `${Math.round(percent * 100)}%`;
  }

  onLoad() {
    this.emit('completed');
  }

  onResize(e) {
    this.size = {
      height: Number(this.elements.text.getBoundingClientRect().height),
      width: Number(this.elements.wrapper.clientWidth),
      gap: 2
    };
    this.animPreloaderText(e);
  }

  addEventListener() {
    window.addEventListener('load', this.animPreloaderText.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }

  destroy() {
    this.elements.element.parentNode.removeChild(this.elements.element);
  }

}

/***/ }),

/***/ "./app/components/Services.js":
/*!************************************!*\
  !*** ./app/components/Services.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Services)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");

class Services extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('services');
    this.init();
  }

  init() {
    this.buttons = [...this.elements.buttons];
    this.eventListener();
  }

  onClick(e) {
    e.preventDefault();
    const button = e.currentTarget;
    this.type = button.getAttribute('data-service');
    this.selectors.modal.self.classList.add('modal-visible');
  }

  closeModal(e) {
    e.preventDefault();

    if (this.selectors.modal.self.classList.contains('modal-visible')) {
      this.selectors.modal.self.classList.remove('modal-visible');
    }
  }

  eventListener() {
    this.buttons.forEach(button => {
      button.addEventListener('click', this.onClick.bind(this));
    });
    this.selectors.modal.button.addEventListener('click', this.closeModal.bind(this));
  }

}

/***/ }),

/***/ "./app/components/slider/Slider.js":
/*!*****************************************!*\
  !*** ./app/components/slider/Slider.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Slider)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Components */ "./app/classes/Components.js");

class Slider extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('slider');
    this.init();
  }

  init() {
    this.child = [...this.elements.items.children];
    this.index = 1;
    this.padding = 24;
    this.currentPosition = 0;
    this.treshold = 0;
    this.dragIntervall = 40;
    this.setChildWidth();
    this.setPosition();
    this.eventListener();
  }

  setChildWidth() {
    this.child.forEach(item => {
      item.style.flex = 'none';
      item.style.width = `${window.innerWidth * 0.80}px`;
    });
  }

  setPosition() {
    this.width = this.elements.items.getBoundingClientRect().width;
    this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
    this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    return this.currentPosition;
  }

  next() {
    if (this.index >= this.child.length - 1) return;
    this.index++;

    if (this.index === 2) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.currentPosition - this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }

  prev() {
    if (this.index <= 0) {
      this.index = 0;
      return;
    }

    this.index--;

    if (this.index === 0) {
      this.width = this.elements.items.getBoundingClientRect().width;
      this.currentPosition = -((this.width - window.innerWidth - 24) / 2) * this.index;
      this.elements.items.style.transform = `translate3D(${this.padding}px, 0, 0)`;
    } else {
      this.setPosition();
    }
  }

  onMouseDown(e) {
    e.preventDefault();
    this.isDown = true;
    this.dragStart = e.x;
    this.dragStarty = e.y;
  }

  onMouseMove(e) {
    e.preventDefault();
    if (!this.isDown) return;
    this.treshold = e.x - this.dragStart;
    this.elements.items.style.transform = `translate3D(${this.currentPosition + this.treshold}px, 0, 0)`;
  }

  onMouseUp(e) {
    e.preventDefault();

    if (this.treshold > 0 && this.treshold >= this.dragIntervall) {
      this.prev();
      console.log('prev');
    } else if (this.treshold < 0 && this.treshold <= -this.dragIntervall) {
      this.next();
      console.log('next');
    } else {
      this.elements.items.style.transform = `translate3D(${this.currentPosition}px, 0, 0)`;
    }

    this.isDown = false;
  }

  onWindowResize(e) {
    e.preventDefault();
    this.setChildWidth();
    this.setPosition();
  }

  eventListener() {
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
    this.elements.wrapper.addEventListener('pointerdown', this.onMouseDown.bind(this));
    this.elements.wrapper.addEventListener('pointermove', this.onMouseMove.bind(this));
    this.elements.wrapper.addEventListener('pointerup', this.onMouseUp.bind(this));
    addEventListener('resize', this.onWindowResize.bind(this));
  }

}

/***/ }),

/***/ "./app/components/widgets/music-player/MediaManager.js":
/*!*************************************************************!*\
  !*** ./app/components/widgets/music-player/MediaManager.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MediaManager)
/* harmony export */ });
const data = __webpack_require__(/*! ../../../../datas/sounds.json */ "./datas/sounds.json");

class MediaManager {
  constructor() {
    this.data = data;
  }

}

/***/ }),

/***/ "./app/components/widgets/music-player/Timer.js":
/*!******************************************************!*\
  !*** ./app/components/widgets/music-player/Timer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Timer)
/* harmony export */ });
class Timer {
  constructor(starttime, endtime, range, progress, preloader, media) {
    this.elements = {
      starttime,
      endtime,
      range,
      preloader,
      progress
    };
    this.media = media;
    this.#init();
  }

  #init() {
    this.#addEventListener();
  }

  #isPlay() {
    console.log(this.media.currentTime);
    console.log('is start play');
  }

  #onPause() {
    console.log('Pause');
  }

  isEnded(cb) {
    cb();
  }

  #setTime() {
    this.hours = Math.floor(this.media.currentTime / 3600);
    this.minutes = Math.floor(this.media.currentTime / 60);
    this.seconds = Math.floor(this.media.currentTime - this.minutes * 60);
    this.hoursValue = this.minutesValue = this.secondsValue = 0;

    if (this.hours <= 0) {
      this.hoursValue = `0${this.hours}`;
    } else {
      this.hoursValue = this.hours;
    }

    if (this.minutes < 10) {
      this.minutesValue = `0${this.minutes}`;
    } else {
      this.minutesValue = this.minutes;
    }

    if (this.seconds < 10) {
      this.secondsValue = `0${this.seconds}`;
    } else {
      this.secondsValue = this.seconds;
    }

    this.elements.starttime.textContent = `${this.minutesValue} : ${this.secondsValue}`;
    this.#updateProgress();
  }

  #updateProgress() {
    this.elements.range.value = this.media.currentTime;
    this.ratio = this.elements.range.value / this.elements.range.max;
    this.elements.progress.style.width = `${this.ratio * 100}%`;
  }

  #setFullTime() {
    const hours = Math.floor(this.media.duration / 3600);
    const minutes = Math.floor(this.media.duration / 60);
    const seconds = Math.floor(this.media.duration - minutes * 60);

    if (hours <= 0) {
      this.elements.endtime.textContent = `${minutes} : ${seconds}`;
    } else {
      this.elements.endtime.textContent = `${hours}:${minutes}:${seconds}`;
    }
  }

  #onTimeChange() {
    this.media.currentTime = this.elements.range.value;
    this.#setTime();
  }

  #progress() {
    const duration = this.media.duration;
    console.log(duration);

    if (duration > 0) {
      for (let i = 0; i < this.media.buffered.length; i++) {
        if (this.media.buffered.start(this.media.buffered.length - 1 - i) < this.media.currentTime) {
          console.log(this.media.buffered.end(this.media.buffered.length - 1 - i / duration) * 100);
          this.elements.preloader.style.width = this.media.buffered.end(this.media.buffered.length - 1 - i) / duration * 100 + '%';
          break;
        }
      }
    }
  }

  #metaDataLoaded() {
    this.#setFullTime();
    this.elements.range.max = Math.floor(this.media.duration);
    this.elements.range.addEventListener('input', this.#onTimeChange.bind(this));
    this.media.addEventListener('play', this.#isPlay.bind(this));
    this.media.addEventListener('pause', this.#onPause.bind(this));
    this.media.addEventListener('ended', this.isEnded.bind(this));
    this.media.addEventListener('timeupdate', this.#setTime.bind(this));
  }

  #addEventListener() {
    this.media.addEventListener('progress', this.#progress.bind(this));
    this.media.addEventListener('loadedmetadata', this.#metaDataLoaded.bind(this));
  }

}

/***/ }),

/***/ "./app/components/widgets/music-player/player.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/player.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Player)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _MediaManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MediaManager */ "./app/components/widgets/music-player/MediaManager.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Timer */ "./app/components/widgets/music-player/Timer.js");
/* harmony import */ var _volume__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./volume */ "./app/components/widgets/music-player/volume.js");




class Player extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('player');
    this.init();
  }

  init() {
    this.isExpand = false;
    this.src = this.elements.media.getAttribute('src');
    this.media = this.elements.media;
    this.length = 0;
    this.randomId = 0;
    this.sound = null;
    this.icon = this.elements.button.play.querySelector('i');
    this.mediaManager = new _MediaManager__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = this.mediaManager.data.length;
    this.randomId = Math.floor(Math.random() * this.length);
    this.componentsHandler(this.randomId);
    this.eventsListerner();
  }

  expand() {
    if (this.selectors.player.coverContainer.classList.contains('isExpand')) {
      this.selectors.player.coverContainer.classList.remove('isExpand');
      this.selectors.player.coverContainer.style.height = '0px';
    } else {
      this.selectors.player.coverContainer.classList.add('isExpand');
      this.selectors.player.coverContainer.style.height = '180px';
    }
  }

  close() {
    this.elements.self.classList.add('isHidden');
  }

  componentsHandler(id) {
    this.sound = this.mediaManager.data[id];
    this.media.src = this.sound.link;
    this.setComponents(this.sound);
    this.timerHandler(this.media);
  }

  setComponents(sound) {
    this.coverHandler(sound);
    this.volumeHandler(this.media);
    this.setSoundDetails(sound);
  }

  coverHandler(sound) {
    this.elements.cover.src = sound.album.cover;
  }

  setSoundDetails(sound) {
    this.elements.artist.innerText = sound.artist.name;
    this.elements.title.innerText = sound.title;
  }

  play() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.play();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
      this.media.pause();
    }
  }

  pause() {
    if (this.elements.button.play.dataset.icon === 'rob-play') {
      this.elements.button.play.setAttribute('data-icon', 'rob-pause');
      this.icon.setAttribute('class', 'rob-pause');
      this.media.pause();
    } else {
      this.elements.button.play.setAttribute('data-icon', 'rob-play');
      this.icon.setAttribute('class', 'rob-play');
    }
  }

  stop() {
    this.media.pause();
    this.media.currentTime = 0;
    this.elements.button.play.setAttribute('data-icon', 'rob-play');
    this.icon.setAttribute('class', 'rob-play');
  }

  next() {
    this.randomId++;
    if (this.randomId > this.length - 1) this.randomId = 0;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }

  prev() {
    this.randomId--;
    if (this.randomId < 0) this.randomId = this.length - 1;
    this.stop();
    this.componentsHandler(this.randomId);
    this.play();
  }

  timerHandler(media) {
    this.time = new _Timer__WEBPACK_IMPORTED_MODULE_2__["default"](this.elements.timer.startTime, this.elements.timer.endTime, this.elements.timer.range, this.elements.timer.progress, this.elements.timer.preload, media);
  }

  volumeHandler(sound) {
    this.volume = new _volume__WEBPACK_IMPORTED_MODULE_3__["default"](this.elements.volume.container, this.elements.volume.grapper, this.elements.volume.slider, sound);
  }

  eventsListerner() {
    this.elements.button.expand.addEventListener('click', this.expand.bind(this));
    this.elements.button.close.addEventListener('click', this.close.bind(this)); // Control

    this.elements.button.play.addEventListener('click', this.play.bind(this));
    this.elements.button.next.addEventListener('click', this.next.bind(this));
    this.elements.button.prev.addEventListener('click', this.prev.bind(this));
  }

}

/***/ }),

/***/ "./app/components/widgets/music-player/volume.js":
/*!*******************************************************!*\
  !*** ./app/components/widgets/music-player/volume.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Volume)
/* harmony export */ });
class Volume {
  constructor(container, grapper, slider, media) {
    this.container = container;
    this.grapper = grapper;
    this.containerBottom = this.container.getBoundingClientRect().bottom;
    this.containerHeight = this.container.getBoundingClientRect().height;
    this.containerTop = this.container.getBoundingClientRect().top;
    this.slider = slider;
    this.media = media;
    this.isDown = false;
    this.position = {
      start: 0,
      end: 0
    };
    this.addEventListener();
  }

  onPointerDown(e) {
    e.preventDefault();
    this.isDown = true;
    this.container.addEventListener('pointermove', this.onPointerMove.bind(this));
    this.container.addEventListener('pointerup', this.onPointerUp.bind(this));
  }

  onPointerMove(e) {
    e.preventDefault();
    if (!this.isDown) return;
    this.ratio = this.containerHeight - (e.pageY - this.containerTop);
    this.slider.style.height = `${this.ratio / this.containerHeight * 100}%`;
    this.media.volume = this.ratio / this.containerHeight;
  }

  onPointerUp() {
    this.isDown = false;
  }

  addEventListener() {
    this.container.addEventListener('pointerdown', this.onPointerDown.bind(this), false);
  }

}

/***/ }),

/***/ "./app/config/forms.js":
/*!*****************************!*\
  !*** ./app/config/forms.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormHandler)
/* harmony export */ });
/* harmony import */ var _classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Components */ "./app/classes/Components.js");
/* harmony import */ var _components_Alert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Alert */ "./app/components/Alert.js");
/* harmony import */ var _utils_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/function */ "./app/utils/function.js");



class FormHandler extends _classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(type, url, method) {
    super('form');
    this.formType = type;
    this.method = method;
    this.url = `${window.location.origin}/${url}`;
    this.elements = this.elements[this.formType];
    this.val = 0;
    this.init();
  }

  init() {
    this.eventListener();
  } // SendToDb () {}


  async fetch(url, method, data) {
    const options = {
      method,
      mode: 'no-cors',
      body: data
    };
    const res = await fetch(url, options);

    if (res.status === 200) {
      // success
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
        this.elements.form.reset();
      });
    } else {
      // error
      res.json().then(data => {
        this.alert = new _components_Alert__WEBPACK_IMPORTED_MODULE_1__["default"](data.text, data.type);
        this.alert.show();
      });
    }
  }

  sendData(e) {
    e.preventDefault();
    const validNumber = this.verifyData(this.elements.mail, this.elements.name, this.elements.message);
    if (!validNumber) return;
    this.elements.alert.forEach(el => {
      el.innerText = '';
    });
    const formElements = new URLSearchParams(new FormData(this.elements.form));
    this.fetch(this.url, this.method, formElements);
  }

  verifyData(mail, name, message) {
    this.val = 0; // email

    if ((0,_utils_function__WEBPACK_IMPORTED_MODULE_2__.validEmail)(mail.value)) {
      this.val++;
    } else if (mail.value === '') {
      this.elements.emailAlert.innerText = 'Required*';
    } else {
      this.elements.emailAlert.innerText = 'This email is not valid';
    } // name


    if (name.value === '') {
      this.elements.nameAlert.innerText = 'Required*';
    } else {
      this.val++;
    } // message


    if (message.value === '') {
      this.elements.messageAlert.innerText = 'Required*';
    } else {
      this.val++;
    }

    return this.val === 3;
  }

  eventListener() {
    this.elements.button.addEventListener('click', this.sendData.bind(this));
  }

}

/***/ }),

/***/ "./app/pages/about/index.js":
/*!**********************************!*\
  !*** ./app/pages/about/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ About)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Pages */ "./app/classes/Pages.js");

class About extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('about');
    console.log('About');
  }

  create() {
    super.create();
  }

  hide() {
    console.log('hide');
  }

}

/***/ }),

/***/ "./app/pages/home/index.js":
/*!*********************************!*\
  !*** ./app/pages/home/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Home)
/* harmony export */ });
/* harmony import */ var _classes_Pages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/Pages */ "./app/classes/Pages.js");
/* harmony import */ var _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/slider/Slider */ "./app/components/slider/Slider.js");


class Home extends _classes_Pages__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('home');
    console.log('home');
    this.create();
  }

  create() {
    super.create();
    this.slider = new _components_slider_Slider__WEBPACK_IMPORTED_MODULE_1__["default"]();
  }

  hide() {
    console.log('hide home');
  }

}

/***/ }),

/***/ "./app/utils/Smoothscroll.js":
/*!***********************************!*\
  !*** ./app/utils/Smoothscroll.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Smoothscroll)
/* harmony export */ });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./app/utils/function.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! normalize-wheel */ "./node_modules/normalize-wheel/index.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(normalize_wheel__WEBPACK_IMPORTED_MODULE_1__);


class Smoothscroll {
  constructor(element, opts) {
    this.element = element;
    this.defaultOptions = {
      direction: 'v',
      // v: vertical or  v- : vertical bottom to top;  h: Horizontal or h- horizontal right to left
      smooth: 0.1 // Smooth amount -> Lerp function

    };
    this.smoothOptions = Object.assign(this.defaultOptions, { ...opts
    });
    this.init();
  }

  init() {
    this.scroll = {
      current: 0,
      target: 0,
      limit: 0
    };
    this.offsetHeight = 156;
    this.scroll.limit = this.element.getBoundingClientRect().height - window.innerHeight;
    this.addListener();
    this.update();
  }

  onMouseWheel(e) {
    const event = normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default()(e);

    if (this.smoothOptions.direction === 'v' || this.smoothOptions.direction === 'v-') {
      this.scroll.target += event.pixelY;
    } else if (this.smoothOptions.direction === 'h' || this.smoothOptions.direction === 'h-') {
      this.scroll.target += event.pixelX;
    }
  }

  onResize() {
    this.scroll.limit = this.element.clientHeight - (window.innerHeight - this.offsetHeight);
  }

  addListener() {
    window.addEventListener('wheel', this.onMouseWheel.bind(this));
    window.addEventListener('resize', this.onResize.bind(this));
  }

  update() {
    this.scroll.target = (0,_function__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.scroll.target, 0, this.scroll.limit);
    this.scroll.current = (0,_function__WEBPACK_IMPORTED_MODULE_0__.lerp)(this.scroll.current, this.scroll.target, this.smoothOptions.smooth);

    if (this.scroll.current < 0.01) {
      this.scroll.current = 0;
    }

    this.translateByCase();
    window.requestAnimationFrame(this.update.bind(this));
  }

  translateByCase() {
    switch (this.smoothOptions.direction) {
      case 'v':
        this.element.style.transform = `translate3D(0, -${Math.floor(this.scroll.current)}px , 0)`;
        break;

      case 'v-':
        this.element.style.transform = `translate3D(0, ${Math.floor(this.scroll.current)}px, 0)`;
        break;

      case 'h':
        this.element.style.transform = `translateX(-${this.scroll.current}px)`;
        break;

      case 'h-':
        this.element.style.transform = `translateX(${this.scroll.current}px)`;
        break;
    }
  }

}

/***/ }),

/***/ "./app/utils/function.js":
/*!*******************************!*\
  !*** ./app/utils/function.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UrlExist": () => (/* binding */ UrlExist),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "lerp": () => (/* binding */ lerp),
/* harmony export */   "validEmail": () => (/* binding */ validEmail),
/* harmony export */   "validFileType": () => (/* binding */ validFileType)
/* harmony export */ });
const lerp = (start, end, amount) => {
  return (1 - amount) * start + amount * end;
};
const clamp = (value, min, max) => {
  return Math.min(Math.max(value, min), max);
};
/**
 * Vérifie si un fichier est de type PDF,  DOC et DOX c'est à dire
 * un document texte
 * @param {FILE} file - le fichier qui doit être vérifier
 * @param {string} type - le type de fichier document | image
 * @returns {Boolean} Boolean
 */

const validFileType = (file, type) => {
  const documents = ['application/pdf', 'application/doc', 'application/docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword'];
  const images = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/bmp'];

  if (type === 'documents') {
    for (let i = 0; i < documents.length; i++) {
      if (file.type === documents[i]) {
        return true;
      }
    }

    return false;
  } else if (type === 'images') {
    for (let i = 0; i < images.length; i++) {
      if (file.type === images[i]) {
        return true;
      }
    }

    return false;
  }
};
/**
 * Vérifie si une Url pointe vers une page valide
 *
 * @async
 * @param {string} url - le lien de la page
 * @returns {boolean} Boolean
 */

async function UrlExist(url) {
  const options = {
    mode: 'no-cors',
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  };
  const response = await fetch(url, options);
  return response.status !== '404';
}
/**
 * Verifie si un email est valide
 * @param email
 * @returns {boolean}
 */

function validEmail(email) {
  const regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

  if (regex.test(email)) {
    return true;
  }
}

/***/ }),

/***/ "./app/utils/selectors.js":
/*!********************************!*\
  !*** ./app/utils/selectors.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ $),
/* harmony export */   "$All": () => (/* binding */ $All),
/* harmony export */   "$Attribute": () => (/* binding */ $Attribute)
/* harmony export */ });
/**
 * Select element in DOM HTML
 * @param {*} element - The css selector of the HTML element to target
 * @returns {HTMLElement}
 */
const $ = element => {
  return document.querySelector(`${element}`);
};
/**
 * Select elements in DOM HTML
 * @param {*} elements - The css selector of the HTML elements to target
 * @returns {NodeList}
 */

const $All = elements => {
  return [...document.querySelectorAll(`${elements}`)];
};
/**
 * Get Attribute of Element
 * @param {HTMLElement} element - HTML element
 * @param {HTMLElement} name - Name of attribute (ex : data-animation)
 * @returns {string}
 */

const $Attribute = (element, name) => {
  return element.getAttribute(name);
};

/***/ }),

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML; // Reference to https://github.com/sindresorhus/ansi-regex

var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var _defColors = {
  reset: ['fff', '000'],
  // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
};
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
};
var _openTags = {
  '1': 'font-weight:bold',
  // bold
  '2': 'opacity:0.5',
  // dim
  '3': '<i>',
  // italic
  '4': '<u>',
  // underscore
  '8': 'display:none',
  // hidden
  '9': '<del>' // delete

};
var _closeTags = {
  '23': '</i>',
  // reset italic
  '24': '</u>',
  // reset underscore
  '29': '</del>' // reset delete

};
[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>';
});
/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */

function ansiHTML(text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text;
  } // Cache opened sequence.


  var ansiCodes = []; // Replace with markup.

  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq];

    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) {
        // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop();
        return '</span>';
      } // Open tag.


      ansiCodes.push(seq);
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
    }

    var ct = _closeTags[seq];

    if (ct) {
      // Pop sequence
      ansiCodes.pop();
      return ct;
    }

    return '';
  }); // Make sure tags are closed.

  var l = ansiCodes.length;
  l > 0 && (ret += Array(l + 1).join('</span>'));
  return ret;
}
/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */


ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.');
  }

  var _finalColors = {};

  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null;

    if (!hex) {
      _finalColors[key] = _defColors[key];
      continue;
    }

    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex];
      }

      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string';
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
      }

      var defHexColor = _defColors[key];

      if (!hex[0]) {
        hex[0] = defHexColor[0];
      }

      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]];
        hex.push(defHexColor[1]);
      }

      hex = hex.slice(0, 2);
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
    }

    _finalColors[key] = hex;
  }

  _setTags(_finalColors);
};
/**
 * Reset colors.
 */


ansiHTML.reset = function () {
  _setTags(_defColors);
};
/**
 * Expose tags, including open and close.
 * @type {Object}
 */


ansiHTML.tags = {};

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () {
      return _openTags;
    }
  });
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () {
      return _closeTags;
    }
  });
} else {
  ansiHTML.tags.open = _openTags;
  ansiHTML.tags.close = _closeTags;
}

function _setTags(colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]; // inverse

  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]; // dark grey

  _openTags['90'] = 'color:#' + colors.darkgrey;

  for (var code in _styles) {
    var color = _styles[code];
    var oriColor = colors[color] || '000';
    _openTags[code] = 'color:#' + oriColor;
    code = parseInt(code);
    _openTags[(code + 10).toString()] = 'background:#' + oriColor;
  }
}

ansiHTML.reset();

/***/ }),

/***/ "./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/***/ (function(module) {

/**
 * EvEmitter v2.1.1
 * Lil' event emitter
 * MIT License
 */
(function (global, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }
})(typeof window != 'undefined' ? window : this, function () {
  function EvEmitter() {}

  let proto = EvEmitter.prototype;

  proto.on = function (eventName, listener) {
    if (!eventName || !listener) return this; // set events hash

    let events = this._events = this._events || {}; // set listeners array

    let listeners = events[eventName] = events[eventName] || []; // only add once

    if (!listeners.includes(listener)) {
      listeners.push(listener);
    }

    return this;
  };

  proto.once = function (eventName, listener) {
    if (!eventName || !listener) return this; // add event

    this.on(eventName, listener); // set once flag
    // set onceEvents hash

    let onceEvents = this._onceEvents = this._onceEvents || {}; // set onceListeners object

    let onceListeners = onceEvents[eventName] = onceEvents[eventName] || {}; // set flag

    onceListeners[listener] = true;
    return this;
  };

  proto.off = function (eventName, listener) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this;
    let index = listeners.indexOf(listener);

    if (index != -1) {
      listeners.splice(index, 1);
    }

    return this;
  };

  proto.emitEvent = function (eventName, args) {
    let listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) return this; // copy over to avoid interference if .off() in listener

    listeners = listeners.slice(0);
    args = args || []; // once stuff

    let onceListeners = this._onceEvents && this._onceEvents[eventName];

    for (let listener of listeners) {
      let isOnce = onceListeners && onceListeners[listener];

      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener); // unset once flag

        delete onceListeners[listener];
      } // trigger listener


      listener.apply(this, args);
    }

    return this;
  };

  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
    return this;
  };

  return EvEmitter;
});

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/***/ }),

/***/ "./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSPlugin": () => (/* binding */ CSSPlugin),
/* harmony export */   "_createElement": () => (/* binding */ _createElement),
/* harmony export */   "_getBBox": () => (/* binding */ _getBBox),
/* harmony export */   "checkPrefix": () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/*!
 * CSSPlugin 3.11.0
 * https://greensock.com
 *
 * Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _win,
    _doc,
    _docElement,
    _pluginInitted,
    _tempDiv,
    _tempDivStyler,
    _recentSetterPlugin,
    _reverting,
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _transformProps = {},
    _RAD2DEG = 180 / Math.PI,
    _DEG2RAD = Math.PI / 180,
    _atan2 = Math.atan2,
    _bigNum = 1e8,
    _capsExp = /([A-Z])/g,
    _horizontalExp = /(left|right|width|margin|padding|x)/i,
    _complexExp = /[\s,\(]\S/,
    _propertyAliases = {
  autoAlpha: "opacity,visibility",
  scale: "scaleX,scaleY",
  alpha: "opacity"
},
    _renderCSSProp = function _renderCSSProp(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
},
    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
  var value = data.s + data.c * ratio;
  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
},
    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
  return data.set(data.t, data.p, ratio ? data.e : data.b, data);
},
    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
},
    _setterCSSStyle = function _setterCSSStyle(target, property, value) {
  return target.style[property] = value;
},
    _setterCSSProp = function _setterCSSProp(target, property, value) {
  return target.style.setProperty(property, value);
},
    _setterTransform = function _setterTransform(target, property, value) {
  return target._gsap[property] = value;
},
    _setterScale = function _setterScale(target, property, value) {
  return target._gsap.scaleX = target._gsap.scaleY = value;
},
    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache.scaleX = cache.scaleY = value;
  cache.renderTransform(ratio, cache);
},
    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache[property] = value;
  cache.renderTransform(ratio, cache);
},
    _transformProp = "transform",
    _transformOriginProp = _transformProp + "Origin",
    _saveStyle = function _saveStyle(property) {
  var _this = this;

  var target = this.target,
      style = target.style;

  if (property in _transformProps) {
    this.tfm = this.tfm || {};

    if (property !== "transform") {
      property = _propertyAliases[property] || property;
      ~property.indexOf(",") ? property.split(",").forEach(function (a) {
        return _this.tfm[a] = _get(target, a);
      }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
    }

    target._gsap.svg && (this.svg = target.getAttribute(property) || "");

    if (this.props.indexOf(_transformProp) >= 0) {
      return;
    }

    property = _transformProp;
  }

  style && this.props.push(property, style[property]);
},
    _removeIndependentTransforms = function _removeIndependentTransforms(style) {
  if (style.translate) {
    style.removeProperty("translate");
    style.removeProperty("scale");
    style.removeProperty("rotate");
  }
},
    _revertStyle = function _revertStyle() {
  var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;

  for (i = 0; i < props.length; i += 2) {
    props[i + 1] ? style[props[i]] = props[i + 1] : style.removeProperty(props[i].replace(_capsExp, "-$1").toLowerCase());
  }

  if (this.tfm) {
    cache.svg && target.setAttribute("transform", this.svg || "");

    for (p in this.tfm) {
      cache[p] = this.tfm[p];
    }

    i = _reverting();

    if (i && !i.isStart && !style[_transformProp]) {
      _removeIndependentTransforms(style);

      cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
    }
  }
},
    _getStyleSaver = function _getStyleSaver(target, properties) {
  var saver = {
    target: target,
    props: [],
    revert: _revertStyle,
    save: _saveStyle
  };
  properties && properties.split(",").forEach(function (p) {
    return saver.save(p);
  });
  return saver;
},
    _supports3D,
    _createElement = function _createElement(type, ns) {
  var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
},
    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
  var cs = getComputedStyle(target);
  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
},
    _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
  var e = element || _tempDiv,
      s = e.style,
      i = 5;

  if (property in s && !preferPrefix) {
    return property;
  }

  property = property.charAt(0).toUpperCase() + property.substr(1);

  while (i-- && !(_prefixes[i] + property in s)) {}

  return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
},
    _initCore = function _initCore() {
  if (_windowExists() && window.document) {
    _win = window;
    _doc = _win.document;
    _docElement = _doc.documentElement;
    _tempDiv = _createElement("div") || {
      style: {}
    };
    _tempDivStyler = _createElement("div");
    _transformProp = _checkPropPrefix(_transformProp);
    _transformOriginProp = _transformProp + "Origin";
    _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

    _supports3D = !!_checkPropPrefix("perspective");
    _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;
    _pluginInitted = 1;
  }
},
    _getBBoxHack = function _getBBoxHack(swapIfPossible) {
  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
  var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;

  _docElement.appendChild(svg);

  svg.appendChild(this);
  this.style.display = "block";

  if (swapIfPossible) {
    try {
      bbox = this.getBBox();
      this._gsapBBox = this.getBBox; //store the original

      this.getBBox = _getBBoxHack;
    } catch (e) {}
  } else if (this._gsapBBox) {
    bbox = this._gsapBBox();
  }

  if (oldParent) {
    if (oldSibling) {
      oldParent.insertBefore(this, oldSibling);
    } else {
      oldParent.appendChild(this);
    }
  }

  _docElement.removeChild(svg);

  this.style.cssText = oldCSS;
  return bbox;
},
    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
  var i = attributesArray.length;

  while (i--) {
    if (target.hasAttribute(attributesArray[i])) {
      return target.getAttribute(attributesArray[i]);
    }
  }
},
    _getBBox = function _getBBox(target) {
  var bounds;

  try {
    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
  } catch (error) {
    bounds = _getBBoxHack.call(target, true);
  }

  bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

  return bounds && !bounds.width && !bounds.x && !bounds.y ? {
    x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
    y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
    width: 0,
    height: 0
  } : bounds;
},
    _isSVG = function _isSVG(e) {
  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
},
    //reports if the element is an SVG on which getBBox() actually works
_removeProperty = function _removeProperty(target, property) {
  if (property) {
    var style = target.style;

    if (property in _transformProps && property !== _transformOriginProp) {
      property = _transformProp;
    }

    if (style.removeProperty) {
      if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
        property = "-" + property;
      }

      style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
    } else {
      //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
      style.removeAttribute(property);
    }
  }
},
    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
  var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
  plugin._pt = pt;
  pt.b = beginning;
  pt.e = end;

  plugin._props.push(property);

  return pt;
},
    _nonConvertibleUnits = {
  deg: 1,
  rad: 1,
  turn: 1
},
    _nonStandardLayouts = {
  grid: 1,
  flex: 1
},
    //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
_convertToUnit = function _convertToUnit(target, property, value, unit) {
  var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
  style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;

  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
    return curValue;
  }

  curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
  isSVG = target.getCTM && _isSVG(target);

  if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
    px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
  }

  style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
  parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

  if (isSVG) {
    parent = (target.ownerSVGElement || {}).parentNode;
  }

  if (!parent || parent === _doc || !parent.appendChild) {
    parent = _doc.body;
  }

  cache = parent._gsap;

  if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
  } else {
    (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
    parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

    parent.appendChild(_tempDiv);
    px = _tempDiv[measureProperty];
    parent.removeChild(_tempDiv);
    style.position = "absolute";

    if (horizontal && toPercent) {
      cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
      cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
      cache.width = parent[measureProperty];
    }
  }

  return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
},
    _get = function _get(target, property, unit, uncache) {
  var value;
  _pluginInitted || _initCore();

  if (property in _propertyAliases && property !== "transform") {
    property = _propertyAliases[property];

    if (~property.indexOf(",")) {
      property = property.split(",")[0];
    }
  }

  if (_transformProps[property] && property !== "transform") {
    value = _parseTransform(target, uncache);
    value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
  } else {
    value = target.style[property];

    if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
    }
  }

  return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
},
    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
  // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  if (!start || start === "none") {
    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
    var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);

    if (s && s !== start) {
      prop = p;
      start = s;
    } else if (prop === "borderColor") {
      start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
    }
  }

  var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
  pt.b = start;
  pt.e = end;
  start += ""; // ensure values are strings

  end += "";

  if (end === "auto") {
    target.style[prop] = end;
    end = _getComputedProperty(target, prop) || end;
    target.style[prop] = start;
  }

  a = [start, end];

  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


  start = a[0];
  end = a[1];
  startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
  endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];

  if (endValues.length) {
    while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
      endValue = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
        color = 1;
      }

      if (endValue !== (startValue = startValues[matchIndex++] || "")) {
        startNum = parseFloat(startValue) || 0;
        startUnit = startValue.substr((startNum + "").length);
        endValue.charAt(1) === "=" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
        endNum = parseFloat(endValue);
        endUnit = endValue.substr((endNum + "").length);
        index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;

        if (!endUnit) {
          //if something like "perspective:300" is passed in and we must add a unit to the end
          endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;

          if (index === end.length) {
            end += endUnit;
            pt.e += endUnit;
          }
        }

        if (startUnit !== endUnit) {
          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
        } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum - startNum,
          m: color && color < 4 || prop === "zIndex" ? Math.round : 0
        };
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
  } else {
    pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
  }

  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _keywordToPercent = {
  top: "0%",
  bottom: "100%",
  left: "0%",
  right: "100%",
  center: "50%"
},
    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
  var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";

  if (x === "top" || x === "bottom" || y === "left" || y === "right") {
    //the user provided them in the wrong order, so flip them
    value = x;
    x = y;
    y = value;
  }

  split[0] = _keywordToPercent[x] || x;
  split[1] = _keywordToPercent[y] || y;
  return split.join(" ");
},
    _renderClearProps = function _renderClearProps(ratio, data) {
  if (data.tween && data.tween._time === data.tween._dur) {
    var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;

    if (props === "all" || props === true) {
      style.cssText = "";
      clearTransforms = 1;
    } else {
      props = props.split(",");
      i = props.length;

      while (--i > -1) {
        prop = props[i];

        if (_transformProps[prop]) {
          clearTransforms = 1;
          prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
        }

        _removeProperty(target, prop);
      }
    }

    if (clearTransforms) {
      _removeProperty(target, _transformProp);

      if (cache) {
        cache.svg && target.removeAttribute("transform");

        _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


        cache.uncache = 1;

        _removeIndependentTransforms(style);
      }
    }
  }
},
    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
_specialProps = {
  clearProps: function clearProps(plugin, target, property, endValue, tween) {
    if (tween.data !== "isFromStart") {
      var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
      pt.u = endValue;
      pt.pr = -10;
      pt.tween = tween;

      plugin._props.push(property);

      return 1;
    }
  }
  /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */

},

/*
 * --------------------------------------------------------------------------------------
 * TRANSFORMS
 * --------------------------------------------------------------------------------------
 */
_identity2DMatrix = [1, 0, 0, 1, 0, 0],
    _rotationalProperties = {},
    _isNullTransform = function _isNullTransform(value) {
  return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
},
    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
  var matrixString = _getComputedProperty(target, _transformProp);

  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);
},
    _getMatrix = function _getMatrix(target, force2D) {
  var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;

  if (cache.svg && target.getAttribute("transform")) {
    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
    return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
    temp = style.display;
    style.display = "block";
    parent = target.parentNode;

    if (!parent || !target.offsetParent) {
      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
      addedToDOM = 1; //flag

      nextSibling = target.nextElementSibling;

      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

    }

    matrix = _getComputedTransformMatrixAsArray(target);
    temp ? style.display = temp : _removeProperty(target, "display");

    if (addedToDOM) {
      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
    }
  }

  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
},
    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
  var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;

  if (!originIsAbsolute) {
    bounds = _getBBox(target);
    xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
    xOrigin = x;
    yOrigin = y;
  }

  if (smooth || smooth !== false && cache.smooth) {
    tx = xOrigin - xOriginOld;
    ty = yOrigin - yOriginOld;
    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
  } else {
    cache.xOffset = cache.yOffset = 0;
  }

  cache.xOrigin = xOrigin;
  cache.yOrigin = yOrigin;
  cache.smooth = !!smooth;
  cache.origin = origin;
  cache.originIsAbsolute = !!originIsAbsolute;
  target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

  if (pluginToAddPropTweensTo) {
    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
  }

  target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
},
    _parseTransform = function _parseTransform(target, uncache) {
  var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);

  if ("x" in cache && !uncache && !cache.uncache) {
    return cache;
  }

  var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
  scaleX = scaleY = 1;
  cache.svg = !!(target.getCTM && _isSVG(target));

  if (cs.translate) {
    // accommodate independent transforms by combining them into normal ones.
    if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
      style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + cs[_transformProp];
    }

    style.scale = style.rotate = style.translate = "none";
  }

  matrix = _getMatrix(target, cache.svg);

  if (cache.svg) {
    t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin"); // if origin is 0,0 and cache.uncache is true, let the recorded data-svg-origin stay. Otherwise, whenever we set cache.uncache to true, we'd need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.

    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
  }

  xOrigin = cache.xOrigin || 0;
  yOrigin = cache.yOrigin || 0;

  if (matrix !== _identity2DMatrix) {
    a = matrix[0]; //a11

    b = matrix[1]; //a21

    c = matrix[2]; //a31

    d = matrix[3]; //a41

    x = a12 = matrix[4];
    y = a22 = matrix[5]; //2D matrix

    if (matrix.length === 6) {
      scaleX = Math.sqrt(a * a + b * b);
      scaleY = Math.sqrt(d * d + c * c);
      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
      skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

      if (cache.svg) {
        x -= xOrigin - (xOrigin * a + yOrigin * c);
        y -= yOrigin - (xOrigin * b + yOrigin * d);
      } //3D matrix

    } else {
      a32 = matrix[6];
      a42 = matrix[7];
      a13 = matrix[8];
      a23 = matrix[9];
      a33 = matrix[10];
      a43 = matrix[11];
      x = matrix[12];
      y = matrix[13];
      z = matrix[14];
      angle = _atan2(a32, a33);
      rotationX = angle * _RAD2DEG; //rotationX

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a12 * cos + a13 * sin;
        t2 = a22 * cos + a23 * sin;
        t3 = a32 * cos + a33 * sin;
        a13 = a12 * -sin + a13 * cos;
        a23 = a22 * -sin + a23 * cos;
        a33 = a32 * -sin + a33 * cos;
        a43 = a42 * -sin + a43 * cos;
        a12 = t1;
        a22 = t2;
        a32 = t3;
      } //rotationY


      angle = _atan2(-c, a33);
      rotationY = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a * cos - a13 * sin;
        t2 = b * cos - a23 * sin;
        t3 = c * cos - a33 * sin;
        a43 = d * sin + a43 * cos;
        a = t1;
        b = t2;
        c = t3;
      } //rotationZ


      angle = _atan2(b, a);
      rotation = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);
        t1 = a * cos + b * sin;
        t2 = a12 * cos + a22 * sin;
        b = b * cos - a * sin;
        a22 = a22 * cos - a12 * sin;
        a = t1;
        a12 = t2;
      }

      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
        rotationX = rotation = 0;
        rotationY = 180 - rotationY;
      }

      scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
      scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
      angle = _atan2(a12, a22);
      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
    }

    if (cache.svg) {
      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
      t1 = target.getAttribute("transform");
      cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
      t1 && target.setAttribute("transform", t1);
    }
  }

  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
    if (invertedScaleX) {
      scaleX *= -1;
      skewX += rotation <= 0 ? 180 : -180;
      rotation += rotation <= 0 ? 180 : -180;
    } else {
      scaleY *= -1;
      skewX += skewX <= 0 ? 180 : -180;
    }
  }

  uncache = uncache || cache.uncache;
  cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
  cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
  cache.z = z + px;
  cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
  cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
  cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
  cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
  cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
  cache.skewX = skewX + deg;
  cache.skewY = skewY + deg;
  cache.transformPerspective = perspective + px;

  if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
    style[_transformOriginProp] = _firstTwoOnly(origin);
  }

  cache.xOffset = cache.yOffset = 0;
  cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
  cache.uncache = 0;
  return cache;
},
    _firstTwoOnly = function _firstTwoOnly(value) {
  return (value = value.split(" "))[0] + " " + value[1];
},
    //for handling transformOrigin values, stripping out the 3rd dimension
_addPxTranslate = function _addPxTranslate(target, start, value) {
  var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
  return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
},
    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
  cache.z = "0px";
  cache.rotationY = cache.rotationX = "0deg";
  cache.force3D = 0;

  _renderCSSTransforms(ratio, cache);
},
    _zeroDeg = "0deg",
    _zeroPx = "0px",
    _endParenthesis = ") ",
    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
  var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
    var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;

    angle = parseFloat(rotationX) * _DEG2RAD;
    cos = Math.cos(angle);
    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
  }

  if (transformPerspective !== _zeroPx) {
    transforms += "perspective(" + transformPerspective + _endParenthesis;
  }

  if (xPercent || yPercent) {
    transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
  }

  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
    transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
  }

  if (rotation !== _zeroDeg) {
    transforms += "rotate(" + rotation + _endParenthesis;
  }

  if (rotationY !== _zeroDeg) {
    transforms += "rotateY(" + rotationY + _endParenthesis;
  }

  if (rotationX !== _zeroDeg) {
    transforms += "rotateX(" + rotationX + _endParenthesis;
  }

  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
    transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
  }

  if (scaleX !== 1 || scaleY !== 1) {
    transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
  }

  target.style[_transformProp] = transforms || "translate(0, 0)";
},
    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
  var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;

  rotation = parseFloat(rotation);
  skewX = parseFloat(skewX);
  skewY = parseFloat(skewY);

  if (skewY) {
    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
    skewY = parseFloat(skewY);
    skewX += skewY;
    rotation += skewY;
  }

  if (rotation || skewX) {
    rotation *= _DEG2RAD;
    skewX *= _DEG2RAD;
    a11 = Math.cos(rotation) * scaleX;
    a21 = Math.sin(rotation) * scaleX;
    a12 = Math.sin(rotation - skewX) * -scaleY;
    a22 = Math.cos(rotation - skewX) * scaleY;

    if (skewX) {
      skewY *= _DEG2RAD;
      temp = Math.tan(skewX - skewY);
      temp = Math.sqrt(1 + temp * temp);
      a12 *= temp;
      a22 *= temp;

      if (skewY) {
        temp = Math.tan(skewY);
        temp = Math.sqrt(1 + temp * temp);
        a11 *= temp;
        a21 *= temp;
      }
    }

    a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
    a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
    a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
    a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
  } else {
    a11 = scaleX;
    a22 = scaleY;
    a21 = a12 = 0;
  }

  if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
    tx = _convertToUnit(target, "x", x, "px");
    ty = _convertToUnit(target, "y", y, "px");
  }

  if (xOrigin || yOrigin || xOffset || yOffset) {
    tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
    ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
  }

  if (xPercent || yPercent) {
    //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
    temp = target.getBBox();
    tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
    ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
  }

  temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
  target.setAttribute("transform", temp);
  forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
},
    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
  var cap = 360,
      isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;

  if (isString) {
    direction = endValue.split("_")[1];

    if (direction === "short") {
      change %= cap;

      if (change !== change % (cap / 2)) {
        change += change < 0 ? cap : -cap;
      }
    }

    if (direction === "cw" && change < 0) {
      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
    } else if (direction === "ccw" && change > 0) {
      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
    }
  }

  plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
  pt.e = finalValue;
  pt.u = "deg";

  plugin._props.push(property);

  return pt;
},
    _assign = function _assign(target, source) {
  // Internet Explorer doesn't have Object.assign(), so we recreate it here.
  for (var p in source) {
    target[p] = source[p];
  }

  return target;
},
    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
  //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
  var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;

  if (startCache.svg) {
    startValue = target.getAttribute("transform");
    target.setAttribute("transform", "");
    style[_transformProp] = transforms;
    endCache = _parseTransform(target, 1);

    _removeProperty(target, _transformProp);

    target.setAttribute("transform", startValue);
  } else {
    startValue = getComputedStyle(target)[_transformProp];
    style[_transformProp] = transforms;
    endCache = _parseTransform(target, 1);
    style[_transformProp] = startValue;
  }

  for (p in _transformProps) {
    startValue = startCache[p];
    endValue = endCache[p];

    if (startValue !== endValue && exclude.indexOf(p) < 0) {
      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
      startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
      endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
      endNum = parseFloat(endValue);
      plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
      plugin._pt.u = endUnit || 0;

      plugin._props.push(p);
    }
  }

  _assign(endCache, startCache);
}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
      r = "Right",
      b = "Bottom",
      l = "Left",
      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
    return index < 2 ? name + side : "border" + side + name;
  });

  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;

    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }

    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});

var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
        style = target.style,
        startAt = tween.vars.startAt,
        startValue,
        endValue,
        endNum,
        startNum,
        type,
        specialProp,
        p,
        startUnit,
        endUnit,
        relative,
        isTransformRelated,
        transformPropTween,
        cache,
        smooth,
        hasPriority,
        inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;

    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }

      endValue = vars[p];

      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }

      type = typeof endValue;
      specialProp = _specialProps[p];

      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }

      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }

      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;

        if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }

        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }

        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);

        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }

            inlineProps.push("visibility", style.visibility);

            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }

          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }

        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);

          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }

            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);

            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);

            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);

            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }

        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;

          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else {
            (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);

            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }

        isTransformRelated || inlineProps.push(p, style[p]);
        props.push(p);
      }
    }

    hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;

(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });

  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });

  _propertyAliases[all[13]] = positionAndScale + "," + rotation;

  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});

_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Back": () => (/* binding */ Back),
/* harmony export */   "Bounce": () => (/* binding */ Bounce),
/* harmony export */   "Circ": () => (/* binding */ Circ),
/* harmony export */   "Cubic": () => (/* binding */ Cubic),
/* harmony export */   "Elastic": () => (/* binding */ Elastic),
/* harmony export */   "Expo": () => (/* binding */ Expo),
/* harmony export */   "GSCache": () => (/* binding */ GSCache),
/* harmony export */   "Linear": () => (/* binding */ Linear),
/* harmony export */   "Power0": () => (/* binding */ Power0),
/* harmony export */   "Power1": () => (/* binding */ Power1),
/* harmony export */   "Power2": () => (/* binding */ Power2),
/* harmony export */   "Power3": () => (/* binding */ Power3),
/* harmony export */   "Power4": () => (/* binding */ Power4),
/* harmony export */   "PropTween": () => (/* binding */ PropTween),
/* harmony export */   "Quad": () => (/* binding */ Quad),
/* harmony export */   "Quart": () => (/* binding */ Quart),
/* harmony export */   "Quint": () => (/* binding */ Quint),
/* harmony export */   "Sine": () => (/* binding */ Sine),
/* harmony export */   "SteppedEase": () => (/* binding */ SteppedEase),
/* harmony export */   "Strong": () => (/* binding */ Strong),
/* harmony export */   "Timeline": () => (/* binding */ Timeline),
/* harmony export */   "TimelineLite": () => (/* binding */ Timeline),
/* harmony export */   "TimelineMax": () => (/* binding */ Timeline),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "TweenLite": () => (/* binding */ Tween),
/* harmony export */   "TweenMax": () => (/* binding */ Tween),
/* harmony export */   "_checkPlugin": () => (/* binding */ _checkPlugin),
/* harmony export */   "_colorExp": () => (/* binding */ _colorExp),
/* harmony export */   "_colorStringFilter": () => (/* binding */ _colorStringFilter),
/* harmony export */   "_config": () => (/* binding */ _config),
/* harmony export */   "_forEachName": () => (/* binding */ _forEachName),
/* harmony export */   "_getCache": () => (/* binding */ _getCache),
/* harmony export */   "_getProperty": () => (/* binding */ _getProperty),
/* harmony export */   "_getSetter": () => (/* binding */ _getSetter),
/* harmony export */   "_isString": () => (/* binding */ _isString),
/* harmony export */   "_isUndefined": () => (/* binding */ _isUndefined),
/* harmony export */   "_missingPlugin": () => (/* binding */ _missingPlugin),
/* harmony export */   "_numExp": () => (/* binding */ _numExp),
/* harmony export */   "_numWithUnitExp": () => (/* binding */ _numWithUnitExp),
/* harmony export */   "_parseRelative": () => (/* binding */ _parseRelative),
/* harmony export */   "_plugins": () => (/* binding */ _plugins),
/* harmony export */   "_relExp": () => (/* binding */ _relExp),
/* harmony export */   "_removeLinkedListItem": () => (/* binding */ _removeLinkedListItem),
/* harmony export */   "_renderComplexString": () => (/* binding */ _renderComplexString),
/* harmony export */   "_replaceRandom": () => (/* binding */ _replaceRandom),
/* harmony export */   "_round": () => (/* binding */ _round),
/* harmony export */   "_roundModifier": () => (/* binding */ _roundModifier),
/* harmony export */   "_setDefaults": () => (/* binding */ _setDefaults),
/* harmony export */   "_sortPropTweensByPriority": () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   "_ticker": () => (/* binding */ _ticker),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   "distribute": () => (/* binding */ distribute),
/* harmony export */   "getUnit": () => (/* binding */ getUnit),
/* harmony export */   "gsap": () => (/* binding */ gsap),
/* harmony export */   "interpolate": () => (/* binding */ interpolate),
/* harmony export */   "mapRange": () => (/* binding */ mapRange),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "selector": () => (/* binding */ selector),
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "snap": () => (/* binding */ snap),
/* harmony export */   "splitColor": () => (/* binding */ splitColor),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "unitize": () => (/* binding */ unitize),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapYoyo": () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
/*!
 * GSAP 3.11.0
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _config = {
  autoSleep: 120,
  force3D: "auto",
  nullTargetWarn: 1,
  units: {
    lineHeight: ""
  }
},
    _defaults = {
  duration: .5,
  overwrite: false,
  delay: 0
},
    _suppressOverwrites,
    _reverting,
    _context,
    _bigNum = 1e8,
    _tinyNum = 1 / _bigNum,
    _2PI = Math.PI * 2,
    _HALF_PI = _2PI / 4,
    _gsID = 0,
    _sqrt = Math.sqrt,
    _cos = Math.cos,
    _sin = Math.sin,
    _isString = function _isString(value) {
  return typeof value === "string";
},
    _isFunction = function _isFunction(value) {
  return typeof value === "function";
},
    _isNumber = function _isNumber(value) {
  return typeof value === "number";
},
    _isUndefined = function _isUndefined(value) {
  return typeof value === "undefined";
},
    _isObject = function _isObject(value) {
  return typeof value === "object";
},
    _isNotFalse = function _isNotFalse(value) {
  return value !== false;
},
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _isFuncOrString = function _isFuncOrString(value) {
  return _isFunction(value) || _isString(value);
},
    _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
    // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
_isArray = Array.isArray,
    _strictNumExp = /(?:-?\.?\d|\.)+/gi,
    //only numbers (including negatives and decimals) but NOT relative values.
_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
    _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
    //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
_relExp = /[+-]=-?[.\d]+/,
    _delimitedValueExp = /[^,'"\[\]\s]+/gi,
    // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
    _globalTimeline,
    _win,
    _coreInitted,
    _doc,
    _globals = {},
    _installScope = {},
    _coreReady,
    _install = function _install(scope) {
  return (_installScope = _merge(scope, _globals)) && gsap;
},
    _missingPlugin = function _missingPlugin(property, value) {
  return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
},
    _warn = function _warn(message, suppress) {
  return !suppress && console.warn(message);
},
    _addGlobal = function _addGlobal(name, obj) {
  return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
},
    _emptyFunc = function _emptyFunc() {
  return 0;
},
    _startAtRevertConfig = {
  suppressEvents: true,
  isStart: true
},
    _revertConfig = {
  suppressEvents: true
},
    _reservedProps = {},
    _lazyTweens = [],
    _lazyLookup = {},
    _lastRenderedFrame,
    _plugins = {},
    _effects = {},
    _nextGCFrame = 30,
    _harnessPlugins = [],
    _callbackNames = "",
    _harness = function _harness(targets) {
  var target = targets[0],
      harnessPlugin,
      i;
  _isObject(target) || _isFunction(target) || (targets = [targets]);

  if (!(harnessPlugin = (target._gsap || {}).harness)) {
    // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
    i = _harnessPlugins.length;

    while (i-- && !_harnessPlugins[i].targetTest(target)) {}

    harnessPlugin = _harnessPlugins[i];
  }

  i = targets.length;

  while (i--) {
    targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
  }

  return targets;
},
    _getCache = function _getCache(target) {
  return target._gsap || _harness(toArray(target))[0]._gsap;
},
    _getProperty = function _getProperty(target, property, v) {
  return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
},
    _forEachName = function _forEachName(names, func) {
  return (names = names.split(",")).forEach(func) || names;
},
    //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
_round = function _round(value) {
  return Math.round(value * 100000) / 100000 || 0;
},
    _roundPrecise = function _roundPrecise(value) {
  return Math.round(value * 10000000) / 10000000 || 0;
},
    // increased precision mostly for timing values.
_parseRelative = function _parseRelative(start, value) {
  var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
  start = parseFloat(start);
  return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
},
    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
  //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
  var l = toFind.length,
      i = 0;

  for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

  return i < l;
},
    _lazyRender = function _lazyRender() {
  var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;

  _lazyLookup = {};
  _lazyTweens.length = 0;

  for (i = 0; i < l; i++) {
    tween = a[i];
    tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
  }
},
    _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
  _lazyTweens.length && _lazyRender();
  animation.render(time, suppressEvents, force || _reverting);
  _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
},
    _numericIfPossible = function _numericIfPossible(value) {
  var n = parseFloat(value);
  return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
},
    _passThrough = function _passThrough(p) {
  return p;
},
    _setDefaults = function _setDefaults(obj, defaults) {
  for (var p in defaults) {
    p in obj || (obj[p] = defaults[p]);
  }

  return obj;
},
    _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
  return function (obj, defaults) {
    for (var p in defaults) {
      p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
    }
  };
},
    _merge = function _merge(base, toMerge) {
  for (var p in toMerge) {
    base[p] = toMerge[p];
  }

  return base;
},
    _mergeDeep = function _mergeDeep(base, toMerge) {
  for (var p in toMerge) {
    p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
  }

  return base;
},
    _copyExcluding = function _copyExcluding(obj, excluding) {
  var copy = {},
      p;

  for (p in obj) {
    p in excluding || (copy[p] = obj[p]);
  }

  return copy;
},
    _inheritDefaults = function _inheritDefaults(vars) {
  var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

  if (_isNotFalse(vars.inherit)) {
    while (parent) {
      func(vars, parent.vars.defaults);
      parent = parent.parent || parent._dp;
    }
  }

  return vars;
},
    _arraysMatch = function _arraysMatch(a1, a2) {
  var i = a1.length,
      match = i === a2.length;

  while (match && i-- && a1[i] === a2[i]) {}

  return i < 0;
},
    _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
  if (firstProp === void 0) {
    firstProp = "_first";
  }

  if (lastProp === void 0) {
    lastProp = "_last";
  }

  var prev = parent[lastProp],
      t;

  if (sortBy) {
    t = child[sortBy];

    while (prev && prev[sortBy] > t) {
      prev = prev._prev;
    }
  }

  if (prev) {
    child._next = prev._next;
    prev._next = child;
  } else {
    child._next = parent[firstProp];
    parent[firstProp] = child;
  }

  if (child._next) {
    child._next._prev = child;
  } else {
    parent[lastProp] = child;
  }

  child._prev = prev;
  child.parent = child._dp = parent;
  return child;
},
    _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
  if (firstProp === void 0) {
    firstProp = "_first";
  }

  if (lastProp === void 0) {
    lastProp = "_last";
  }

  var prev = child._prev,
      next = child._next;

  if (prev) {
    prev._next = next;
  } else if (parent[firstProp] === child) {
    parent[firstProp] = next;
  }

  if (next) {
    next._prev = prev;
  } else if (parent[lastProp] === child) {
    parent[lastProp] = prev;
  }

  child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
},
    _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
  child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
  child._act = 0;
},
    _uncache = function _uncache(animation, child) {
  if (animation && (!child || child._end > animation._dur || child._start < 0)) {
    // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
    var a = animation;

    while (a) {
      a._dirty = 1;
      a = a.parent;
    }
  }

  return animation;
},
    _recacheAncestors = function _recacheAncestors(animation) {
  var parent = animation.parent;

  while (parent && parent.parent) {
    //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
    parent._dirty = 1;
    parent.totalDuration();
    parent = parent.parent;
  }

  return animation;
},
    _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
  return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfig) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
},
    _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
  return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
},
    _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
  return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
},
    // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
_animationCycle = function _animationCycle(tTime, cycleDuration) {
  var whole = Math.floor(tTime /= cycleDuration);
  return tTime && whole === tTime ? whole - 1 : whole;
},
    _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
  return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
},
    _setEnd = function _setEnd(animation) {
  return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
},
    _alignPlayhead = function _alignPlayhead(animation, totalTime) {
  // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
  var parent = animation._dp;

  if (parent && parent.smoothChildTiming && animation._ts) {
    animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

    _setEnd(animation);

    parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
  }

  return animation;
},

/*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/
_postAddChecks = function _postAddChecks(timeline, child) {
  var t;

  if (child._time || child._initted && !child._dur) {
    //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
    t = _parentToChildTotalTime(timeline.rawTime(), child);

    if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
      child.render(t, true);
    }
  } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


  if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
    //in case any of the ancestors had completed but should now be enabled...
    if (timeline._dur < timeline.duration()) {
      t = timeline;

      while (t._dp) {
        t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

        t = t._dp;
      }
    }

    timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
  }
},
    _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
  child.parent && _removeFromParent(child);
  child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
  child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

  _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

  _isFromOrFromStart(child) || (timeline._recent = child);
  skipChecks || _postAddChecks(timeline, child);
  timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

  return timeline;
},
    _scrollTrigger = function _scrollTrigger(animation, trigger) {
  return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
},
    _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
  _initTween(tween, totalTime);

  if (!tween._initted) {
    return 1;
  }

  if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
    _lazyTweens.push(tween);

    tween._lazy = [totalTime, suppressEvents];
    return 1;
  }
},
    _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
  var parent = _ref.parent;
  return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
},
    // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
_isFromOrFromStart = function _isFromOrFromStart(_ref2) {
  var data = _ref2.data;
  return data === "isFromStart" || data === "isStart";
},
    _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
  var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
  repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;

  if (repeatDelay && tween._repeat) {
    // in case there's a zero-duration tween that has a repeat with a repeatDelay
    tTime = _clamp(0, tween._tDur, totalTime);
    iteration = _animationCycle(tTime, repeatDelay);
    tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

    if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
      // if iteration changed
      prevRatio = 1 - ratio;
      tween.vars.repeatRefresh && tween._initted && tween.invalidate();
    }
  }

  if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
      return;
    }

    prevIteration = tween._zTime;
    tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

    suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

    tween.ratio = ratio;
    tween._from && (ratio = 1 - ratio);
    tween._time = 0;
    tween._tTime = tTime;
    pt = tween._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }

    totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
    tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
    tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

    if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
      ratio && _removeFromParent(tween, 1);

      if (!suppressEvents) {
        _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

        tween._prom && tween._prom();
      }
    }
  } else if (!tween._zTime) {
    tween._zTime = totalTime;
  }
},
    _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
  var child;

  if (time > prevTime) {
    child = animation._first;

    while (child && child._start <= time) {
      if (child.data === "isPause" && child._start > prevTime) {
        return child;
      }

      child = child._next;
    }
  } else {
    child = animation._last;

    while (child && child._start >= time) {
      if (child.data === "isPause" && child._start < prevTime) {
        return child;
      }

      child = child._prev;
    }
  }
},
    _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
  var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
  totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
  animation._dur = dur;
  animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
  totalProgress > 0 && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);
  skipUncache || _uncache(animation.parent, animation);
  return animation;
},
    _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
  return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
},
    _zeroPosition = {
  _start: 0,
  endTime: _emptyFunc,
  totalDuration: _emptyFunc
},
    _parsePosition = function _parsePosition(animation, position, percentAnimation) {
  var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
  i,
      offset,
      isPercent;

  if (_isString(position) && (isNaN(position) || position in labels)) {
    //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
    offset = position.charAt(0);
    isPercent = position.substr(-1) === "%";
    i = position.indexOf("=");

    if (offset === "<" || offset === ">") {
      i >= 0 && (position = position.replace(/=/, ""));
      return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
    }

    if (i < 0) {
      position in labels || (labels[position] = clippedDuration);
      return labels[position];
    }

    offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

    if (isPercent && percentAnimation) {
      offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
    }

    return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
  }

  return position == null ? clippedDuration : +position;
},
    _createTweenType = function _createTweenType(type, params, timeline) {
  var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;

  isLegacy && (vars.duration = params[1]);
  vars.parent = timeline;

  if (type) {
    irVars = vars;
    parent = timeline;

    while (parent && !("immediateRender" in irVars)) {
      // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
      irVars = parent.vars.defaults || {};
      parent = _isNotFalse(parent.vars.inherit) && parent.parent;
    }

    vars.immediateRender = _isNotFalse(irVars.immediateRender);
    type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
  }

  return new Tween(params[0], vars, params[varsIndex + 1]);
},
    _conditionalReturn = function _conditionalReturn(value, func) {
  return value || value === 0 ? func(value) : func;
},
    _clamp = function _clamp(min, max, value) {
  return value < min ? min : value > max ? max : value;
},
    getUnit = function getUnit(value, v) {
  return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
},
    // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
clamp = function clamp(min, max, value) {
  return _conditionalReturn(value, function (v) {
    return _clamp(min, max, v);
  });
},
    _slice = [].slice,
    _isArrayLike = function _isArrayLike(value, nonEmpty) {
  return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
},
    _flatten = function _flatten(ar, leaveStrings, accumulator) {
  if (accumulator === void 0) {
    accumulator = [];
  }

  return ar.forEach(function (value) {
    var _accumulator;

    return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
  }) || accumulator;
},
    //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
toArray = function toArray(value, scope, leaveStrings) {
  return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
},
    selector = function selector(value) {
  value = toArray(value)[0] || _warn("Invalid scope") || {};
  return function (v) {
    var el = value.current || value.nativeElement || value;
    return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
  };
},
    shuffle = function shuffle(a) {
  return a.sort(function () {
    return .5 - Math.random();
  });
},
    // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
distribute = function distribute(v) {
  if (_isFunction(v)) {
    return v;
  }

  var vars = _isObject(v) ? v : {
    each: v
  },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
  ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;

  if (_isString(from)) {
    ratioX = ratioY = {
      center: .5,
      edges: .5,
      end: 1
    }[from] || 0;
  } else if (!isDecimal && ratios) {
    ratioX = from[0];
    ratioY = from[1];
  }

  return function (i, target, a) {
    var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;

    if (!distances) {
      wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

      if (!wrapAt) {
        max = -_bigNum;

        while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

        wrapAt--;
      }

      distances = cache[l] = [];
      originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
      originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
      max = 0;
      min = _bigNum;

      for (j = 0; j < l; j++) {
        x = j % wrapAt - originX;
        y = originY - (j / wrapAt | 0);
        distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
        d > max && (max = d);
        d < min && (min = d);
      }

      from === "random" && shuffle(distances);
      distances.max = max - min;
      distances.min = min;
      distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
      distances.b = l < 0 ? base - l : base;
      distances.u = getUnit(vars.amount || vars.each) || 0; //unit

      ease = ease && l < 0 ? _invertEase(ease) : ease;
    }

    l = (distances[i] - distances.min) / distances.max || 0;
    return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
  };
},
    _roundModifier = function _roundModifier(v) {
  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
  var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

  return function (raw) {
    var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

    return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
  };
},
    snap = function snap(snapTo, value) {
  var isArray = _isArray(snapTo),
      radius,
      is2D;

  if (!isArray && _isObject(snapTo)) {
    radius = isArray = snapTo.radius || _bigNum;

    if (snapTo.values) {
      snapTo = toArray(snapTo.values);

      if (is2D = !_isNumber(snapTo[0])) {
        radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
      }
    } else {
      snapTo = _roundModifier(snapTo.increment);
    }
  }

  return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
    is2D = snapTo(raw);
    return Math.abs(is2D - raw) <= radius ? is2D : raw;
  } : function (raw) {
    var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;

    while (i--) {
      if (is2D) {
        dx = snapTo[i].x - x;
        dy = snapTo[i].y - y;
        dx = dx * dx + dy * dy;
      } else {
        dx = Math.abs(snapTo[i] - x);
      }

      if (dx < min) {
        min = dx;
        closest = i;
      }
    }

    closest = !radius || min <= radius ? snapTo[closest] : raw;
    return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
  });
},
    random = function random(min, max, roundingIncrement, returnFunction) {
  return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
    return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
  });
},
    pipe = function pipe() {
  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
    functions[_key] = arguments[_key];
  }

  return function (value) {
    return functions.reduce(function (v, f) {
      return f(v);
    }, value);
  };
},
    unitize = function unitize(func, unit) {
  return function (value) {
    return func(parseFloat(value)) + (unit || getUnit(value));
  };
},
    normalize = function normalize(min, max, value) {
  return mapRange(min, max, 0, 1, value);
},
    _wrapArray = function _wrapArray(a, wrapper, value) {
  return _conditionalReturn(value, function (index) {
    return a[~~wrapper(index)];
  });
},
    wrap = function wrap(min, max, value) {
  // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
  var range = max - min;
  return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
    return (range + (value - min) % range) % range + min;
  });
},
    wrapYoyo = function wrapYoyo(min, max, value) {
  var range = max - min,
      total = range * 2;
  return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
    value = (total + (value - min) % total) % total || 0;
    return min + (value > range ? total - value : value);
  });
},
    _replaceRandom = function _replaceRandom(value) {
  //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
  var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;

  while (~(i = value.indexOf("random(", prev))) {
    end = value.indexOf(")", i);
    isArray = value.charAt(i + 7) === "[";
    nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
    s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
    prev = end + 1;
  }

  return s + value.substr(prev, value.length - prev);
},
    mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
  var inRange = inMax - inMin,
      outRange = outMax - outMin;
  return _conditionalReturn(value, function (value) {
    return outMin + ((value - inMin) / inRange * outRange || 0);
  });
},
    interpolate = function interpolate(start, end, progress, mutate) {
  var func = isNaN(start + end) ? 0 : function (p) {
    return (1 - p) * start + p * end;
  };

  if (!func) {
    var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;

    progress === true && (mutate = 1) && (progress = null);

    if (isString) {
      start = {
        p: start
      };
      end = {
        p: end
      };
    } else if (_isArray(start) && !_isArray(end)) {
      interpolators = [];
      l = start.length;
      il = l - 2;

      for (i = 1; i < l; i++) {
        interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
      }

      l--;

      func = function func(p) {
        p *= l;
        var i = Math.min(il, ~~p);
        return interpolators[i](p - i);
      };

      progress = end;
    } else if (!mutate) {
      start = _merge(_isArray(start) ? [] : {}, start);
    }

    if (!interpolators) {
      for (p in end) {
        _addPropTween.call(master, start, p, "get", end[p]);
      }

      func = function func(p) {
        return _renderPropTweens(p, master) || (isString ? start.p : start);
      };
    }
  }

  return _conditionalReturn(progress, func);
},
    _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
  //used for nextLabel() and previousLabel()
  var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;

  for (p in labels) {
    distance = labels[p] - fromTime;

    if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
      label = p;
      min = distance;
    }
  }

  return label;
},
    _callback = function _callback(animation, type, executeLazyFirst) {
  var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;

  if (!callback) {
    return;
  }

  params = v[type + "Params"];
  scope = v.callbackScope || animation;
  executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

  context && (_context = context);
  result = params ? callback.apply(scope, params) : callback.call(scope);
  _context = prevContext;
  return result;
},
    _interrupt = function _interrupt(animation) {
  _removeFromParent(animation);

  animation.scrollTrigger && animation.scrollTrigger.kill(false);
  animation.progress() < 1 && _callback(animation, "onInterrupt");
  return animation;
},
    _quickTween,
    _createPlugin = function _createPlugin(config) {
  config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

  var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
    this._props = [];
  } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
  instanceDefaults = {
    init: _emptyFunc,
    render: _renderPropTweens,
    add: _addPropTween,
    kill: _killPropTweensOf,
    modifier: _addPluginModifier,
    rawVars: 0
  },
      statics = {
    targetTest: 0,
    get: 0,
    getSetter: _getSetter,
    aliases: {},
    register: 0
  };

  _wake();

  if (config !== Plugin) {
    if (_plugins[name]) {
      return;
    }

    _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


    _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


    _plugins[Plugin.prop = name] = Plugin;

    if (config.targetTest) {
      _harnessPlugins.push(Plugin);

      _reservedProps[name] = 1;
    }

    name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
  }

  _addGlobal(name, Plugin);

  config.register && config.register(gsap, Plugin, PropTween);
},

/*
 * --------------------------------------------------------------------------------------
 * COLORS
 * --------------------------------------------------------------------------------------
 */
_255 = 255,
    _colorLookup = {
  aqua: [0, _255, _255],
  lime: [0, _255, 0],
  silver: [192, 192, 192],
  black: [0, 0, 0],
  maroon: [128, 0, 0],
  teal: [0, 128, 128],
  blue: [0, 0, _255],
  navy: [0, 0, 128],
  white: [_255, _255, _255],
  olive: [128, 128, 0],
  yellow: [_255, _255, 0],
  orange: [_255, 165, 0],
  gray: [128, 128, 128],
  purple: [128, 0, 128],
  green: [0, 128, 0],
  red: [_255, 0, 0],
  pink: [_255, 192, 203],
  cyan: [0, _255, _255],
  transparent: [_255, _255, _255, 0]
},
    // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
// let ctx = _doc.createElement("canvas").getContext("2d");
// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
_hue = function _hue(h, m1, m2) {
  h += h < 0 ? 1 : h > 1 ? -1 : 0;
  return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
},
    splitColor = function splitColor(v, toHSL, forceAlpha) {
  var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;

  if (!a) {
    if (v.substr(-1) === ",") {
      //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
      v = v.substr(0, v.length - 1);
    }

    if (_colorLookup[v]) {
      a = _colorLookup[v];
    } else if (v.charAt(0) === "#") {
      if (v.length < 6) {
        //for shorthand like #9F0 or #9F0F (could have alpha)
        r = v.charAt(1);
        g = v.charAt(2);
        b = v.charAt(3);
        v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
      }

      if (v.length === 9) {
        // hex with alpha, like #fd5e53ff
        a = parseInt(v.substr(1, 6), 16);
        return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
      }

      v = parseInt(v.substr(1), 16);
      a = [v >> 16, v >> 8 & _255, v & _255];
    } else if (v.substr(0, 3) === "hsl") {
      a = wasHSL = v.match(_strictNumExp);

      if (!toHSL) {
        h = +a[0] % 360 / 360;
        s = +a[1] / 100;
        l = +a[2] / 100;
        g = l <= .5 ? l * (s + 1) : l + s - l * s;
        r = l * 2 - g;
        a.length > 3 && (a[3] *= 1); //cast as number

        a[0] = _hue(h + 1 / 3, r, g);
        a[1] = _hue(h, r, g);
        a[2] = _hue(h - 1 / 3, r, g);
      } else if (~v.indexOf("=")) {
        //if relative values are found, just return the raw strings with the relative prefixes in place.
        a = v.match(_numExp);
        forceAlpha && a.length < 4 && (a[3] = 1);
        return a;
      }
    } else {
      a = v.match(_strictNumExp) || _colorLookup.transparent;
    }

    a = a.map(Number);
  }

  if (toHSL && !wasHSL) {
    r = a[0] / _255;
    g = a[1] / _255;
    b = a[2] / _255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
      h *= 60;
    }

    a[0] = ~~(h + .5);
    a[1] = ~~(s * 100 + .5);
    a[2] = ~~(l * 100 + .5);
  }

  forceAlpha && a.length < 4 && (a[3] = 1);
  return a;
},
    _colorOrderData = function _colorOrderData(v) {
  // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
  var values = [],
      c = [],
      i = -1;
  v.split(_colorExp).forEach(function (v) {
    var a = v.match(_numWithUnitExp) || [];
    values.push.apply(values, a);
    c.push(i += a.length + 1);
  });
  values.c = c;
  return values;
},
    _formatColors = function _formatColors(s, toHSL, orderMatchData) {
  var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;

  if (!colors) {
    return s;
  }

  colors = colors.map(function (color) {
    return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
  });

  if (orderMatchData) {
    d = _colorOrderData(s);
    c = orderMatchData.c;

    if (c.join(result) !== d.c.join(result)) {
      shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
      }
    }
  }

  if (!shell) {
    shell = s.split(_colorExp);
    l = shell.length - 1;

    for (; i < l; i++) {
      result += shell[i] + colors[i];
    }
  }

  return result + shell[l];
},
    _colorExp = function () {
  var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
  p;

  for (p in _colorLookup) {
    s += "|" + p + "\\b";
  }

  return new RegExp(s + ")", "gi");
}(),
    _hslExp = /hsl[a]?\(/,
    _colorStringFilter = function _colorStringFilter(a) {
  var combined = a.join(" "),
      toHSL;
  _colorExp.lastIndex = 0;

  if (_colorExp.test(combined)) {
    toHSL = _hslExp.test(combined);
    a[1] = _formatColors(a[1], toHSL);
    a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

    return true;
  }
},

/*
 * --------------------------------------------------------------------------------------
 * TICKER
 * --------------------------------------------------------------------------------------
 */
_tickerActive,
    _ticker = function () {
  var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
    var elapsed = _getTime() - _lastUpdate,
        manual = v === true,
        overlap,
        dispatch,
        time,
        frame;

    elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
    _lastUpdate += elapsed;
    time = _lastUpdate - _startTime;
    overlap = time - _nextTime;

    if (overlap > 0 || manual) {
      frame = ++_self.frame;
      _delta = time - _self.time * 1000;
      _self.time = time = time / 1000;
      _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
      dispatch = 1;
    }

    manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

    if (dispatch) {
      for (_i = 0; _i < _listeners.length; _i++) {
        // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
        _listeners[_i](time, _delta, frame, v);
      }
    }
  };

  _self = {
    time: 0,
    frame: 0,
    tick: function tick() {
      _tick(true);
    },
    deltaRatio: function deltaRatio(fps) {
      return _delta / (1000 / (fps || 60));
    },
    wake: function wake() {
      if (_coreReady) {
        if (!_coreInitted && _windowExists()) {
          _win = _coreInitted = window;
          _doc = _win.document || {};
          _globals.gsap = gsap;
          (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

          _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

          _raf = _win.requestAnimationFrame;
        }

        _id && _self.sleep();

        _req = _raf || function (f) {
          return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
        };

        _tickerActive = 1;

        _tick(2);
      }
    },
    sleep: function sleep() {
      (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
      _tickerActive = 0;
      _req = _emptyFunc;
    },
    lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
      _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

      _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
    },
    fps: function fps(_fps) {
      _gap = 1000 / (_fps || 240);
      _nextTime = _self.time * 1000 + _gap;
    },
    add: function add(callback, once, prioritize) {
      var func = once ? function (t, d, f, v) {
        callback(t, d, f, v);

        _self.remove(func);
      } : callback;

      _self.remove(callback);

      _listeners[prioritize ? "unshift" : "push"](func);

      _wake();

      return func;
    },
    remove: function remove(callback, i) {
      ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
    },
    _listeners: _listeners
  };
  return _self;
}(),
    _wake = function _wake() {
  return !_tickerActive && _ticker.wake();
},
    //also ensures the core classes are initialized.

/*
* -------------------------------------------------
* EASING
* -------------------------------------------------
*/
_easeMap = {},
    _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
    _quotesExp = /["']/g,
    _parseObjectInString = function _parseObjectInString(value) {
  //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
  var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;

  for (; i < l; i++) {
    val = split[i];
    index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
    parsedVal = val.substr(0, index);
    obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
    key = val.substr(index + 1).trim();
  }

  return obj;
},
    _valueInParentheses = function _valueInParentheses(value) {
  var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
  return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
},
    _configEaseFromString = function _configEaseFromString(name) {
  //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
  var split = (name + "").split("("),
      ease = _easeMap[split[0]];
  return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
},
    _invertEase = function _invertEase(ease) {
  return function (p) {
    return 1 - ease(1 - p);
  };
},
    // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
  var child = timeline._first,
      ease;

  while (child) {
    if (child instanceof Timeline) {
      _propagateYoyoEase(child, isYoyo);
    } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
      if (child.timeline) {
        _propagateYoyoEase(child.timeline, isYoyo);
      } else {
        ease = child._ease;
        child._ease = child._yEase;
        child._yEase = ease;
        child._yoyo = isYoyo;
      }
    }

    child = child._next;
  }
},
    _parseEase = function _parseEase(ease, defaultEase) {
  return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
},
    _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
  if (easeOut === void 0) {
    easeOut = function easeOut(p) {
      return 1 - easeIn(1 - p);
    };
  }

  if (easeInOut === void 0) {
    easeInOut = function easeInOut(p) {
      return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
    };
  }

  var ease = {
    easeIn: easeIn,
    easeOut: easeOut,
    easeInOut: easeInOut
  },
      lowercaseName;

  _forEachName(names, function (name) {
    _easeMap[name] = _globals[name] = ease;
    _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

    for (var p in ease) {
      _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
    }
  });

  return ease;
},
    _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
  return function (p) {
    return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
  };
},
    _configElastic = function _configElastic(type, amplitude, period) {
  var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
  p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
    return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  p2 = _2PI / p2; //precalculate to optimize

  ease.config = function (amplitude, period) {
    return _configElastic(type, amplitude, period);
  };

  return ease;
},
    _configBack = function _configBack(type, overshoot) {
  if (overshoot === void 0) {
    overshoot = 1.70158;
  }

  var easeOut = function easeOut(p) {
    return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  ease.config = function (overshoot) {
    return _configBack(type, overshoot);
  };

  return ease;
}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };


_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;

  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});

_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

(function (n, c) {
  var n1 = 1 / c,
      n2 = 2 * n1,
      n3 = 2.5 * n1,
      easeOut = function easeOut(p) {
    return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
  };

  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);

_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});

_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});

_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});

_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }

    var p1 = 1 / steps,
        p2 = steps + (immediateStart ? 0 : 1),
        p3 = immediateStart ? 1 : 0,
        max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];

_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */


var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;

    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }

    this._ts = 1;

    _setDuration(this, +vars.duration, 1, 1);

    this.data = vars.data;

    if (_context) {
      this._ctx = _context;

      _context.data.push(this);
    }

    _tickerActive || _ticker.wake();
  }

  var _proto = Animation.prototype;

  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }

    return this._delay;
  };

  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };

  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }

    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };

  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();

    if (!arguments.length) {
      return this._tTime;
    }

    var parent = this._dp;

    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);

      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }

        parent = parent.parent;
      }

      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }

    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}

    }

    return this;
  };

  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
  };

  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
  };

  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;

    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;

  _proto.timeScale = function timeScale(value) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }

    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);

    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.


    return _recacheAncestors(this);
  };

  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }

    if (this._ps !== value) {
      this._ps = value;

      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();

        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };

  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }

    return this._start;
  };

  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };

  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };

  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }

    var prevIsReverting = _reverting;
    _reverting = config;
    this.timeline && this.timeline.revert(config);
    this.totalTime(-0.01, config.suppressEvents);
    this.data !== "nested" && _removeFromParent(this);
    _reverting = prevIsReverting;
    return this;
  };

  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
        time = arguments.length ? rawTime : animation.rawTime();

    while (animation) {
      time = animation._start + time / (animation._ts || 1);
      animation = animation._dp;
    }

    return !this.parent && this.vars.immediateRender ? -1 : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for Recording.revert())
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }

    return this._repeat === -2 ? Infinity : this._repeat;
  };

  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;

      _onUpdateTotalDuration(this);

      return time ? this.time(time) : this;
    }

    return this._rDelay;
  };

  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }

    return this._yoyo;
  };

  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };

  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };

  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };

  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };

  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };

  _proto.resume = function resume() {
    return this.paused(false);
  };

  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }

    return this._rts < 0;
  };

  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };

  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
        start = this._start,
        rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };

  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;

    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }

      return this;
    }

    return vars[type];
  };

  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
          _resolve = function _resolve() {
        var _then = self.then;
        self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

        _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
        resolve(f);
        self.then = _then;
      };

      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };

  _proto.kill = function kill() {
    _interrupt(this);
  };

  return Animation;
}();

_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */


var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);

  function Timeline(vars, position) {
    var _this;

    if (vars === void 0) {
      vars = {};
    }

    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }

  var _proto2 = Timeline.prototype;

  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);

    return this;
  };

  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);

    return this;
  };

  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);

    return this;
  };

  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };

  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;

  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };

  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };

  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };

  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
        tDur = this._dirty ? this.totalDuration() : this._tDur,
        dur = this._dur,
        tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
        // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
    crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
        time,
        child,
        next,
        iteration,
        cycleDuration,
        prevPaused,
        pauseTween,
        timeScale,
        prevStart,
        prevIteration,
        yoyo,
        isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }

      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;

      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;

        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }

        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          time > dur && (time = dur);
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */


        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
              doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : dur;
          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }

          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;

          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }

          this._lock = 0;

          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


          _propagateYoyoEase(this, isYoyo);
        }
      }

      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }

      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }

      if (!prevTime && time && !suppressEvents) {
        _callback(this, "onStart");

        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }

      if (time >= prevTime && totalTime >= 0) {
        child = this._first;

        while (child) {
          next = child._next;

          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      } else {
        force = force || _reverting; // if reverting, we should always force renders. If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;

          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      }

      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);

          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }

    return this;
  };

  _proto2.add = function add(child, position) {
    var _this2 = this;

    _isNumber(position) || (position = _parsePosition(this, position, child));

    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }

      if (_isString(child)) {
        return this.addLabel(child, position);
      }

      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }

    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }

    if (tweens === void 0) {
      tweens = true;
    }

    if (timelines === void 0) {
      timelines = true;
    }

    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }

    var a = [],
        child = this._first;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }

      child = child._next;
    }

    return a;
  };

  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
        i = animations.length;

    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };

  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }

    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }

    _removeLinkedListItem(this, child);

    if (child === this._recent) {
      this._recent = this._last;
    }

    return _uncache(this);
  };

  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }

    this._forcing = 1;

    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }

    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

    this._forcing = 0;
    return this;
  };

  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };

  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };

  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };

  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);

    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }

      child = child._next;
    }
  };

  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
        i = tweens.length;

    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }

    return this;
  };

  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
        parsedTargets = toArray(targets),
        child = this._first,
        isGlobalTime = _isNumber(onlyActive),
        // a number is interpreted as a global time. If the animation spans
    children;

    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }

      child = child._next;
    }

    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};

    var tl = this,
        endTime = _parsePosition(tl, position),
        _vars = vars,
        startAt = _vars.startAt,
        _onStart = _vars.onStart,
        onStartParams = _vars.onStartParams,
        immediateRender = _vars.immediateRender,
        initted,
        tween = Tween.to(tl, _setDefaults({
      ease: vars.ease || "none",
      lazy: false,
      immediateRender: false,
      time: endTime,
      overwrite: "auto",
      duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
      onStart: function onStart() {
        tl.pause();

        if (!initted) {
          var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
          tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
          initted = 1;
        }

        _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
      }
    }, vars));

    return immediateRender ? tween.render(0) : tween;
  };

  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };

  _proto2.recent = function recent() {
    return this._recent;
  };

  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };

  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };

  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };

  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }

    var child = this._first,
        labels = this.labels,
        p;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }

      child = child._next;
    }

    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }

    return _uncache(this);
  };

  _proto2.invalidate = function invalidate() {
    var child = this._first;
    this._lock = 0;

    while (child) {
      child.invalidate();
      child = child._next;
    }

    return _Animation.prototype.invalidate.call(this);
  };

  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }

    var child = this._first,
        next;

    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }

    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };

  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
        self = this,
        child = self._last,
        prevStart = _bigNum,
        prev,
        start,
        parent;

    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }

    if (self._dirty) {
      parent = self.parent;

      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;

        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }

        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;

          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }

          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }

        child._end > max && child._ts && (max = child._end);
        child = prev;
      }

      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

      self._dirty = 0;
    }

    return self._tDur;
  };

  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

      _lastRenderedFrame = _ticker.frame;
    }

    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }

        child || _ticker.sleep();
      }
    }
  };

  return Timeline;
}(Animation);

_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});

var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
  //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
  pt.b = start;
  pt.e = end;
  start += ""; //ensure values are strings

  end += "";

  if (hasRandom = ~end.indexOf("random(")) {
    end = _replaceRandom(end);
  }

  if (stringFilter) {
    a = [start, end];
    stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

    start = a[0];
    end = a[1];
  }

  startNums = start.match(_complexStringNumExp) || [];

  while (result = _complexStringNumExp.exec(end)) {
    endNum = result[0];
    chunk = end.substring(index, result.index);

    if (color) {
      color = (color + 1) % 5;
    } else if (chunk.substr(-5) === "rgba(") {
      color = 1;
    }

    if (endNum !== startNums[matchIndex++]) {
      startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

      pt._pt = {
        _next: pt._pt,
        p: chunk || matchIndex === 1 ? chunk : ",",
        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
        s: startNum,
        c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
        m: color && color < 4 ? Math.round : 0
      };
      index = _complexStringNumExp.lastIndex;
    }
  }

  pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

  pt.fp = funcParam;

  if (_relExp.test(end) || hasRandom) {
    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
  }

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
  _isFunction(end) && (end = end(index || 0, target, targets));
  var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;

  if (_isString(end)) {
    if (~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (end.charAt(1) === "=") {
      pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

      if (pt || pt === 0) {
        // to avoid isNaN, like if someone passes in a value like "!= whatever"
        end = pt;
      }
    }
  }

  if (!optional || parsedStart !== end || _forceAllPropTweens) {
    if (!isNaN(parsedStart * end) && end !== "") {
      // fun fact: any number multiplied by "" is evaluated as the number 0!
      pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
      funcParam && (pt.fp = funcParam);
      modifier && pt.modifier(modifier, this, target);
      return this._pt = pt;
    }

    !currentValue && !(prop in target) && _missingPlugin(prop, end);
    return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
  }
},
    //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
_processVars = function _processVars(vars, index, target, targets, tween) {
  _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

  if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
    return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
  }

  var copy = {},
      p;

  for (p in vars) {
    copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
  }

  return copy;
},
    _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
  var plugin, pt, ptLookup, i;

  if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
    tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

    if (tween !== _quickTween) {
      ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

      i = plugin._props.length;

      while (i--) {
        ptLookup[plugin._props[i]] = pt;
      }
    }
  }

  return plugin;
},
    _overwritingTween,
    //store a reference temporarily so we can avoid overwriting itself.
_forceAllPropTweens,
    _initTween = function _initTween(tween, time) {
  var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
  tl && (!keyframes || !ease) && (ease = "none");
  tween._ease = _parseEase(ease, _defaults.ease);
  tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

  if (yoyoEase && tween._yoyo && !tween._repeat) {
    //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
    yoyoEase = tween._yEase;
    tween._yEase = tween._ease;
    tween._ease = yoyoEase;
  }

  tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

  if (!tl || keyframes && !vars.stagger) {
    //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
    harness = targets[0] ? _getCache(targets[0]).harness : 0;
    harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

    cleanVars = _copyExcluding(vars, _reservedProps);

    if (prevStartAt) {
      prevStartAt.revert(runBackwards && dur ? _revertConfig : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
      // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

      prevStartAt._lazy = 0;
    }

    if (startAt) {
      _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
        data: "isStart",
        overwrite: false,
        parent: parent,
        immediateRender: true,
        lazy: _isNotFalse(lazy),
        startAt: null,
        delay: 0,
        onUpdate: onUpdate,
        onUpdateParams: onUpdateParams,
        callbackScope: callbackScope,
        stagger: 0
      }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


      time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfig); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

      if (immediateRender) {
        if (dur && time <= 0) {
          time && (tween._zTime = time);
          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
        }
      }
    } else if (runBackwards && dur) {
      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
      if (!prevStartAt) {
        time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

        p = _setDefaults({
          overwrite: false,
          data: "isFromStart",
          //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
          lazy: immediateRender && _isNotFalse(lazy),
          immediateRender: immediateRender,
          //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
          stagger: 0,
          parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})

        }, cleanVars);
        harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

        _removeFromParent(tween._startAt = Tween.set(targets, p));

        time < 0 && (_reverting ? tween._startAt.revert(_revertConfig) : tween._startAt.render(-1, true));
        tween._zTime = time;

        if (!immediateRender) {
          _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded

        } else if (!time) {
          return;
        }
      }
    }

    tween._pt = tween._ptCache = 0;
    lazy = dur && _isNotFalse(lazy) || lazy && !dur;

    for (i = 0; i < targets.length; i++) {
      target = targets[i];
      gsData = target._gsap || _harness(targets)[i]._gsap;
      tween._ptLookup[i] = ptLookup = {};
      _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

      index = fullTargets === targets ? i : fullTargets.indexOf(target);

      if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

        plugin._props.forEach(function (name) {
          ptLookup[name] = pt;
        });

        plugin.priority && (hasPriority = 1);
      }

      if (!harness || harnessVars) {
        for (p in cleanVars) {
          if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
            plugin.priority && (hasPriority = 1);
          } else {
            ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
          }
        }
      }

      tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

      if (autoOverwrite && tween._pt) {
        _overwritingTween = tween;

        _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!


        overwritten = !tween.parent;
        _overwritingTween = 0;
      }

      tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
    }

    hasPriority && _sortPropTweensByPriority(tween);
    tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
  }

  tween._onUpdate = onUpdate;
  tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

  keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
},
    _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
  var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;

  if (!ptCache) {
    ptCache = tween._ptCache[property] = [];
    lookup = tween._ptLookup;
    i = tween._targets.length;

    while (i--) {
      pt = lookup[i][property];

      if (pt && pt.d && pt.d._pt) {
        // it's a plugin, so find the nested PropTween
        pt = pt.d._pt;

        while (pt && pt.p !== property && pt.fp !== property) {
          // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
          pt = pt._next;
        }
      }

      if (!pt) {
        // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
        // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
        _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

        tween.vars[property] = "+=0";

        _initTween(tween, time);

        _forceAllPropTweens = 0;
        return 1;
      }

      ptCache.push(pt);
    }
  }

  i = ptCache.length;

  while (i--) {
    rootPT = ptCache[i];
    pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

    pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
    pt.c = value - pt.s;
    rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

    rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
  }
},
    _addAliasesToVars = function _addAliasesToVars(targets, vars) {
  var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;

  if (!propertyAliases) {
    return vars;
  }

  copy = _merge({}, vars);

  for (p in propertyAliases) {
    if (p in copy) {
      aliases = propertyAliases[p].split(",");
      i = aliases.length;

      while (i--) {
        copy[aliases[i]] = copy[p];
      }
    }
  }

  return copy;
},
    // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
  var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;

  if (_isArray(obj)) {
    a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

    obj.forEach(function (value, i) {
      return a.push({
        t: i / (obj.length - 1) * 100,
        v: value,
        e: ease
      });
    });
  } else {
    for (p in obj) {
      a = allProps[p] || (allProps[p] = []);
      p === "ease" || a.push({
        t: parseFloat(prop),
        v: obj[p],
        e: ease
      });
    }
  }
},
    _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
  return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
},
    _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
    _staggerPropsToSkip = {};

_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */


var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);

  function Tween(targets, vars, position, skipInherit) {
    var _this3;

    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }

    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
        duration = _this3$vars.duration,
        delay = _this3$vars.delay,
        immediateRender = _this3$vars.immediateRender,
        stagger = _this3$vars.stagger,
        overwrite = _this3$vars.overwrite,
        keyframes = _this3$vars.keyframes,
        defaults = _this3$vars.defaults,
        scrollTrigger = _this3$vars.scrollTrigger,
        yoyoEase = _this3$vars.yoyoEase,
        parent = vars.parent || _globalTimeline,
        parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
        tl,
        i,
        copy,
        l,
        p,
        curTarget,
        staggerFunc,
        staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;

    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {}
      });
      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;

      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);

        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }

        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }

          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }

        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));

        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
            a,
            kf,
            v;

        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};

          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }

          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;

            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }

          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);

      _globalTimeline.killTweensOf(parsedTargets);

      _overwritingTween = 0;
    }

    _addToTimeline(parent, _assertThisInitialized(_this3), position);

    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);

    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay)); //in case delay is negative

    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }

  var _proto3 = Tween.prototype;

  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
        tDur = this._tDur,
        dur = this._dur,
        isNegative = totalTime < 0,
        tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
        time,
        pt,
        iteration,
        cycleDuration,
        prevIteration,
        isYoyo,
        ratio,
        timeline,
        yoyoEase;

    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;

        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }

        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          time > dur && (time = dur);
        }

        isYoyo = this._yoyo && iteration & 1;

        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);

        if (time === prevTime && !force && this._initted) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }

        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }

      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }

        if (prevTime !== this._time) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
          return this;
        }

        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._tTime = tTime;
      this._time = time;

      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }

      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }

      if (time && !prevTime && !suppressEvents) {
        _callback(this, "onStart");

        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }

      pt = this._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }

      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }

    return this;
  };

  _proto3.targets = function targets() {
    return this._targets;
  };

  _proto3.invalidate = function invalidate() {
    this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate();
    return _Animation2.prototype.invalidate.call(this);
  };

  _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
        ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
      return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}


    _alignPlayhead(this, 0);

    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };

  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }

    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      return this.parent ? _interrupt(this) : this;
    }

    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }

    var parsedTargets = this._targets,
        killingTargets = targets ? toArray(targets) : parsedTargets,
        propTweenLookup = this._ptLookup,
        firstPT = this._pt,
        overwrittenProps,
        curLookup,
        curOverwriteProps,
        props,
        p,
        pt,
        i;

    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }

    overwrittenProps = this._op = this._op || [];

    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};

        _forEachName(vars, function (name) {
          return p[name] = 1;
        });

        vars = p;
      }

      vars = _addAliasesToVars(parsedTargets, vars);
    }

    i = parsedTargets.length;

    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];

        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }

        for (p in props) {
          pt = curLookup && curLookup[p];

          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }

            delete curLookup[p];
          }

          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }

    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };

  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };

  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };

  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    });
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };

  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };

  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };

  return Tween;
}(Animation);

_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.


_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
        params = _slice.call(arguments, 0);

    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */


var _setterPlain = function _setterPlain(target, property, value) {
  return target[property] = value;
},
    _setterFunc = function _setterFunc(target, property, value) {
  return target[property](value);
},
    _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
  return target[property](data.fp, value);
},
    _setterAttribute = function _setterAttribute(target, property, value) {
  return target.setAttribute(property, value);
},
    _getSetter = function _getSetter(target, property) {
  return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
},
    _renderPlain = function _renderPlain(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
},
    _renderBoolean = function _renderBoolean(ratio, data) {
  return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
},
    _renderComplexString = function _renderComplexString(ratio, data) {
  var pt = data._pt,
      s = "";

  if (!ratio && data.b) {
    //b = beginning string
    s = data.b;
  } else if (ratio === 1 && data.e) {
    //e = ending string
    s = data.e;
  } else {
    while (pt) {
      s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

      pt = pt._next;
    }

    s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
  }

  data.set(data.t, data.p, s, data);
},
    _renderPropTweens = function _renderPropTweens(ratio, data) {
  var pt = data._pt;

  while (pt) {
    pt.r(ratio, pt.d);
    pt = pt._next;
  }
},
    _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
  var pt = this._pt,
      next;

  while (pt) {
    next = pt._next;
    pt.p === property && pt.modifier(modifier, tween, target);
    pt = next;
  }
},
    _killPropTweensOf = function _killPropTweensOf(property) {
  var pt = this._pt,
      hasNonDependentRemaining,
      next;

  while (pt) {
    next = pt._next;

    if (pt.p === property && !pt.op || pt.op === property) {
      _removeLinkedListItem(this, pt, "_pt");
    } else if (!pt.dep) {
      hasNonDependentRemaining = 1;
    }

    pt = next;
  }

  return !hasNonDependentRemaining;
},
    _setterWithModifier = function _setterWithModifier(target, property, value, data) {
  data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
},
    _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
  var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

  while (pt) {
    next = pt._next;
    pt2 = first;

    while (pt2 && pt2.pr > pt.pr) {
      pt2 = pt2._next;
    }

    if (pt._prev = pt2 ? pt2._prev : last) {
      pt._prev._next = pt;
    } else {
      first = pt;
    }

    if (pt._next = pt2) {
      pt2._prev = pt;
    } else {
      last = pt;
    }

    pt = next;
  }

  parent._pt = first;
}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;

    if (next) {
      next._prev = this;
    }
  }

  var _proto4 = PropTween.prototype;

  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };

  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});

_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;

var _media = [],
    _listeners = {},
    _emptyArray = [],
    _lastMediaTime = 0,
    _dispatch = function _dispatch(type) {
  return (_listeners[type] || _emptyArray).map(function (f) {
    return f();
  });
},
    _onMediaChange = function _onMediaChange() {
  var time = Date.now(),
      matches = [];

  if (time - _lastMediaTime > 2) {
    _dispatch("matchMediaInit");

    _media.forEach(function (c) {
      var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;

      for (p in queries) {
        match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

        match && (anyMatch = 1);

        if (match !== conditions[p]) {
          conditions[p] = match;
          toggled = 1;
        }
      }

      if (toggled) {
        c.revert();
        anyMatch && matches.push(c);
      }
    });

    _dispatch("matchMediaRevert");

    matches.forEach(function (c) {
      return c.onMatch(c);
    });
    _lastMediaTime = time;

    _dispatch("matchMedia");
  }
};

var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    func && this.add(func);
  }

  var _proto5 = Context.prototype;

  _proto5.add = function add(name, func, scope) {
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }

    var self = this,
        f = function f() {
      var prev = _context,
          prevSelector = self.selector,
          result;
      prev && prev.data.push(self);
      scope && (self.selector = selector(scope));
      _context = self;
      result = func.apply(self, arguments);
      _isFunction(result) && self._r.push(result);
      _context = prev;
      self.selector = prevSelector;
      self.isReverted = false;
      return result;
    };

    self.last = f;
    return name === _isFunction ? f(self) : name ? self[name] = f : f;
  };

  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };

  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && e._targets[0] !== e.vars.onComplete && a.push(e);
    }); // don't include delayedCalls

    return a;
  };

  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };

  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;

    if (revert) {
      // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
      this.getTweens().map(function (t) {
        return {
          g: t.globalTime(0),
          t: t
        };
      }).sort(function (a, b) {
        return b.g - a.g || -1;
      }).forEach(function (o) {
        return o.t.revert(revert);
      }); // note: all of the _startAt tweens should be reverted in reverse order that thy were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

      this.data.forEach(function (e) {
        return !(e instanceof Animation) && e.revert && e.revert(revert);
      });

      this._r.forEach(function (f) {
        return f(revert, _this4);
      });

      this.isReverted = true;
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }

    this.clear();

    if (matchMedia) {
      var i = _media.indexOf(this);

      !!~i && _media.splice(i, 1);
    }
  };

  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };

  return Context;
}();

var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
  }

  var _proto6 = MatchMedia.prototype;

  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
        cond = context.conditions = {},
        mq,
        p,
        active;
    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;

    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win.matchMedia(conditions[p]);

        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }

    active && func(context);
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;

  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };

  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };

  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */


var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
        format = unit ? _passThrough : _numericIfPossible;

    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);

    if (target.length > 1) {
      var setters = target.map(function (t) {
        return gsap.quickSetter(t, property, unit);
      }),
          l = setters.length;
      return function (value) {
        var i = l;

        while (i--) {
          setters[i](value);
        }
      };
    }

    target = target[0] || {};

    var Plugin = _plugins[property],
        cache = _getCache(target),
        p = cache.harness && (cache.harness.aliases || {})[property] || property,
        // in case it's an alias, like "rotate" for "rotation".
    setter = Plugin ? function (value) {
      var p = new Plugin();
      _quickTween._pt = 0;
      p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
      p.render(1, p);
      _quickTween._pt && _renderPropTweens(1, _quickTween);
    } : cache.set(target, p);

    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;

    var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
        func = function func(value, start, startIsRelative) {
      return tween.resetTo(property, value, start, startIsRelative);
    };

    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
        effect = _ref3.effect,
        plugins = _ref3.plugins,
        defaults = _ref3.defaults,
        extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });

    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };

    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }

    var tl = new Timeline(vars),
        child,
        next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

    _globalTimeline.remove(tl);

    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;

    while (child) {
      next = child._next;

      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }

      child = next;
    }

    _addToTimeline(_globalTimeline, tl, 0);

    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
          found,
          p;

      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }

      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
        i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);

        toAdd._ctx = _context;
      }

      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};

_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});

_ticker.add(Timeline.updateRoot);

_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
  var pt = plugin._pt;

  while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
    pt = pt._next;
  }

  return pt;
},
    _addModifiers = function _addModifiers(tween, modifiers) {
  var targets = tween._targets,
      p,
      i,
      pt;

  for (p in modifiers) {
    i = targets.length;

    while (i--) {
      pt = tween._ptLookup[i][p];

      if (pt && (pt = pt.d)) {
        if (pt._pt) {
          // is a plugin
          pt = _getPluginPropTween(pt, p);
        }

        pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
      }
    }
  }
},
    _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
  return {
    name: name,
    rawVars: 1,
    //don't pre-process function-based values or "random()" strings.
    init: function init(target, vars, tween) {
      tween._onInit = function (tween) {
        var temp, p;

        if (_isString(vars)) {
          temp = {};

          _forEachName(vars, function (name) {
            return temp[name] = 1;
          }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


          vars = temp;
        }

        if (modifier) {
          temp = {};

          for (p in vars) {
            temp[p] = modifier(vars[p]);
          }

          vars = temp;
        }

        _addModifiers(tween, vars);
      };
    }
  };
}; //register core plugins


var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;

    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;

    while (pt) {
      _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;

    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.11.0";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
    Power1 = _easeMap.Power1,
    Power2 = _easeMap.Power2,
    Power3 = _easeMap.Power3,
    Power4 = _easeMap.Power4,
    Linear = _easeMap.Linear,
    Quad = _easeMap.Quad,
    Cubic = _easeMap.Cubic,
    Quart = _easeMap.Quart,
    Quint = _easeMap.Quint,
    Strong = _easeMap.Strong,
    Elastic = _easeMap.Elastic,
    Back = _easeMap.Back,
    SteppedEase = _easeMap.SteppedEase,
    Bounce = _easeMap.Bounce,
    Sine = _easeMap.Sine,
    Expo = _easeMap.Expo,
    Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Back": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),
/* harmony export */   "Bounce": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),
/* harmony export */   "CSSPlugin": () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),
/* harmony export */   "Circ": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),
/* harmony export */   "Cubic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),
/* harmony export */   "Elastic": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),
/* harmony export */   "Expo": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),
/* harmony export */   "Linear": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),
/* harmony export */   "Power0": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),
/* harmony export */   "Power1": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),
/* harmony export */   "Power2": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),
/* harmony export */   "Power3": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),
/* harmony export */   "Power4": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),
/* harmony export */   "Quad": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),
/* harmony export */   "Quart": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),
/* harmony export */   "Quint": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),
/* harmony export */   "Sine": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),
/* harmony export */   "SteppedEase": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),
/* harmony export */   "Strong": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),
/* harmony export */   "TimelineLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),
/* harmony export */   "TimelineMax": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),
/* harmony export */   "TweenLite": () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),
/* harmony export */   "TweenMax": () => (/* binding */ TweenMaxWithCSS),
/* harmony export */   "default": () => (/* binding */ gsapWithCSS),
/* harmony export */   "gsap": () => (/* binding */ gsapWithCSS)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js");


var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap,
    // to protect from tree shaking
TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var named_references_1 = __webpack_require__(/*! ./named-references */ "./node_modules/html-entities/lib/named-references.js");

var numeric_unicode_map_1 = __webpack_require__(/*! ./numeric-unicode-map */ "./node_modules/html-entities/lib/numeric-unicode-map.js");

var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");

var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {
  all: named_references_1.namedReferences.html5
});

var encodeRegExps = {
  specialChars: /[<>'"&]/g,
  nonAscii: /(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
  nonAsciiPrintable: /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
  extensive: /(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g
};
var defaultEncodeOptions = {
  mode: 'specialChars',
  level: 'all',
  numeric: 'decimal'
};
/** Encodes all the necessary (specified by `level`) characters in the text */

function encode(text, _a) {
  var _b = _a === void 0 ? defaultEncodeOptions : _a,
      _c = _b.mode,
      mode = _c === void 0 ? 'specialChars' : _c,
      _d = _b.numeric,
      numeric = _d === void 0 ? 'decimal' : _d,
      _e = _b.level,
      level = _e === void 0 ? 'all' : _e;

  if (!text) {
    return '';
  }

  var encodeRegExp = encodeRegExps[mode];
  var references = allNamedReferences[level].characters;
  var isHex = numeric === 'hexadecimal';
  encodeRegExp.lastIndex = 0;

  var _b = encodeRegExp.exec(text);

  var _c;

  if (_b) {
    _c = '';
    var _d = 0;

    do {
      if (_d !== _b.index) {
        _c += text.substring(_d, _b.index);
      }

      var _e = _b[0];
      var result_1 = references[_e];

      if (!result_1) {
        var code_1 = _e.length > 1 ? surrogate_pairs_1.getCodePoint(_e, 0) : _e.charCodeAt(0);
        result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
      }

      _c += result_1;
      _d = _b.index + _e.length;
    } while (_b = encodeRegExp.exec(text));

    if (_d !== text.length) {
      _c += text.substring(_d);
    }
  } else {
    _c = text;
  }

  return _c;
}

exports.encode = encode;
var defaultDecodeOptions = {
  scope: 'body',
  level: 'all'
};
var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
var baseDecodeRegExps = {
  xml: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.xml
  },
  html4: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.html4
  },
  html5: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.html5
  }
};

var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {
  all: baseDecodeRegExps.html5
});

var fromCharCode = String.fromCharCode;
var outOfBoundsChar = fromCharCode(65533);
var defaultDecodeEntityOptions = {
  level: 'all'
};
/** Decodes a single entity */

function decodeEntity(entity, _a) {
  var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,
      level = _b === void 0 ? 'all' : _b;

  if (!entity) {
    return '';
  }

  var _b = entity;
  var decodeEntityLastChar_1 = entity[entity.length - 1];

  if (false) {} else if (false) {} else {
    var decodeResultByReference_1 = allNamedReferences[level].entities[entity];

    if (decodeResultByReference_1) {
      _b = decodeResultByReference_1;
    } else if (entity[0] === '&' && entity[1] === '#') {
      var decodeSecondChar_1 = entity[2];
      var decodeCode_1 = decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X' ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));
      _b = decodeCode_1 >= 0x10ffff ? outOfBoundsChar : decodeCode_1 > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode_1) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] || decodeCode_1);
    }
  }

  return _b;
}

exports.decodeEntity = decodeEntity;
/** Decodes all entities in the text */

function decode(text, _a) {
  var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a,
      decodeCode_1 = decodeSecondChar_1.level,
      level = decodeCode_1 === void 0 ? 'all' : decodeCode_1,
      _b = decodeSecondChar_1.scope,
      scope = _b === void 0 ? level === 'xml' ? 'strict' : 'body' : _b;

  if (!text) {
    return '';
  }

  var decodeRegExp = decodeRegExps[level][scope];
  var references = allNamedReferences[level].entities;
  var isAttribute = scope === 'attribute';
  var isStrict = scope === 'strict';
  decodeRegExp.lastIndex = 0;
  var replaceMatch_1 = decodeRegExp.exec(text);
  var replaceResult_1;

  if (replaceMatch_1) {
    replaceResult_1 = '';
    var replaceLastIndex_1 = 0;

    do {
      if (replaceLastIndex_1 !== replaceMatch_1.index) {
        replaceResult_1 += text.substring(replaceLastIndex_1, replaceMatch_1.index);
      }

      var replaceInput_1 = replaceMatch_1[0];
      var decodeResult_1 = replaceInput_1;
      var decodeEntityLastChar_2 = replaceInput_1[replaceInput_1.length - 1];

      if (isAttribute && decodeEntityLastChar_2 === '=') {
        decodeResult_1 = replaceInput_1;
      } else if (isStrict && decodeEntityLastChar_2 !== ';') {
        decodeResult_1 = replaceInput_1;
      } else {
        var decodeResultByReference_2 = references[replaceInput_1];

        if (decodeResultByReference_2) {
          decodeResult_1 = decodeResultByReference_2;
        } else if (replaceInput_1[0] === '&' && replaceInput_1[1] === '#') {
          var decodeSecondChar_2 = replaceInput_1[2];
          var decodeCode_2 = decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X' ? parseInt(replaceInput_1.substr(3), 16) : parseInt(replaceInput_1.substr(2));
          decodeResult_1 = decodeCode_2 >= 0x10ffff ? outOfBoundsChar : decodeCode_2 > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode_2) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_2] || decodeCode_2);
        }
      }

      replaceResult_1 += decodeResult_1;
      replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
    } while (replaceMatch_1 = decodeRegExp.exec(text));

    if (replaceLastIndex_1 !== text.length) {
      replaceResult_1 += text.substring(replaceLastIndex_1);
    }
  } else {
    replaceResult_1 = text;
  }

  return replaceResult_1;
}

exports.decode = decode;

/***/ }),

/***/ "./node_modules/html-entities/lib/named-references.js":
/*!************************************************************!*\
  !*** ./node_modules/html-entities/lib/named-references.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bodyRegExps = {
  xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
  html4: /&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
  html5: /&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g
};
exports.namedReferences = {
  xml: {
    entities: {
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&apos;": "'",
      "&amp;": "&"
    },
    characters: {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&apos;",
      "&": "&amp;"
    }
  },
  html4: {
    entities: {
      "&apos;": "'",
      "&nbsp": " ",
      "&nbsp;": " ",
      "&iexcl": "¡",
      "&iexcl;": "¡",
      "&cent": "¢",
      "&cent;": "¢",
      "&pound": "£",
      "&pound;": "£",
      "&curren": "¤",
      "&curren;": "¤",
      "&yen": "¥",
      "&yen;": "¥",
      "&brvbar": "¦",
      "&brvbar;": "¦",
      "&sect": "§",
      "&sect;": "§",
      "&uml": "¨",
      "&uml;": "¨",
      "&copy": "©",
      "&copy;": "©",
      "&ordf": "ª",
      "&ordf;": "ª",
      "&laquo": "«",
      "&laquo;": "«",
      "&not": "¬",
      "&not;": "¬",
      "&shy": "­",
      "&shy;": "­",
      "&reg": "®",
      "&reg;": "®",
      "&macr": "¯",
      "&macr;": "¯",
      "&deg": "°",
      "&deg;": "°",
      "&plusmn": "±",
      "&plusmn;": "±",
      "&sup2": "²",
      "&sup2;": "²",
      "&sup3": "³",
      "&sup3;": "³",
      "&acute": "´",
      "&acute;": "´",
      "&micro": "µ",
      "&micro;": "µ",
      "&para": "¶",
      "&para;": "¶",
      "&middot": "·",
      "&middot;": "·",
      "&cedil": "¸",
      "&cedil;": "¸",
      "&sup1": "¹",
      "&sup1;": "¹",
      "&ordm": "º",
      "&ordm;": "º",
      "&raquo": "»",
      "&raquo;": "»",
      "&frac14": "¼",
      "&frac14;": "¼",
      "&frac12": "½",
      "&frac12;": "½",
      "&frac34": "¾",
      "&frac34;": "¾",
      "&iquest": "¿",
      "&iquest;": "¿",
      "&Agrave": "À",
      "&Agrave;": "À",
      "&Aacute": "Á",
      "&Aacute;": "Á",
      "&Acirc": "Â",
      "&Acirc;": "Â",
      "&Atilde": "Ã",
      "&Atilde;": "Ã",
      "&Auml": "Ä",
      "&Auml;": "Ä",
      "&Aring": "Å",
      "&Aring;": "Å",
      "&AElig": "Æ",
      "&AElig;": "Æ",
      "&Ccedil": "Ç",
      "&Ccedil;": "Ç",
      "&Egrave": "È",
      "&Egrave;": "È",
      "&Eacute": "É",
      "&Eacute;": "É",
      "&Ecirc": "Ê",
      "&Ecirc;": "Ê",
      "&Euml": "Ë",
      "&Euml;": "Ë",
      "&Igrave": "Ì",
      "&Igrave;": "Ì",
      "&Iacute": "Í",
      "&Iacute;": "Í",
      "&Icirc": "Î",
      "&Icirc;": "Î",
      "&Iuml": "Ï",
      "&Iuml;": "Ï",
      "&ETH": "Ð",
      "&ETH;": "Ð",
      "&Ntilde": "Ñ",
      "&Ntilde;": "Ñ",
      "&Ograve": "Ò",
      "&Ograve;": "Ò",
      "&Oacute": "Ó",
      "&Oacute;": "Ó",
      "&Ocirc": "Ô",
      "&Ocirc;": "Ô",
      "&Otilde": "Õ",
      "&Otilde;": "Õ",
      "&Ouml": "Ö",
      "&Ouml;": "Ö",
      "&times": "×",
      "&times;": "×",
      "&Oslash": "Ø",
      "&Oslash;": "Ø",
      "&Ugrave": "Ù",
      "&Ugrave;": "Ù",
      "&Uacute": "Ú",
      "&Uacute;": "Ú",
      "&Ucirc": "Û",
      "&Ucirc;": "Û",
      "&Uuml": "Ü",
      "&Uuml;": "Ü",
      "&Yacute": "Ý",
      "&Yacute;": "Ý",
      "&THORN": "Þ",
      "&THORN;": "Þ",
      "&szlig": "ß",
      "&szlig;": "ß",
      "&agrave": "à",
      "&agrave;": "à",
      "&aacute": "á",
      "&aacute;": "á",
      "&acirc": "â",
      "&acirc;": "â",
      "&atilde": "ã",
      "&atilde;": "ã",
      "&auml": "ä",
      "&auml;": "ä",
      "&aring": "å",
      "&aring;": "å",
      "&aelig": "æ",
      "&aelig;": "æ",
      "&ccedil": "ç",
      "&ccedil;": "ç",
      "&egrave": "è",
      "&egrave;": "è",
      "&eacute": "é",
      "&eacute;": "é",
      "&ecirc": "ê",
      "&ecirc;": "ê",
      "&euml": "ë",
      "&euml;": "ë",
      "&igrave": "ì",
      "&igrave;": "ì",
      "&iacute": "í",
      "&iacute;": "í",
      "&icirc": "î",
      "&icirc;": "î",
      "&iuml": "ï",
      "&iuml;": "ï",
      "&eth": "ð",
      "&eth;": "ð",
      "&ntilde": "ñ",
      "&ntilde;": "ñ",
      "&ograve": "ò",
      "&ograve;": "ò",
      "&oacute": "ó",
      "&oacute;": "ó",
      "&ocirc": "ô",
      "&ocirc;": "ô",
      "&otilde": "õ",
      "&otilde;": "õ",
      "&ouml": "ö",
      "&ouml;": "ö",
      "&divide": "÷",
      "&divide;": "÷",
      "&oslash": "ø",
      "&oslash;": "ø",
      "&ugrave": "ù",
      "&ugrave;": "ù",
      "&uacute": "ú",
      "&uacute;": "ú",
      "&ucirc": "û",
      "&ucirc;": "û",
      "&uuml": "ü",
      "&uuml;": "ü",
      "&yacute": "ý",
      "&yacute;": "ý",
      "&thorn": "þ",
      "&thorn;": "þ",
      "&yuml": "ÿ",
      "&yuml;": "ÿ",
      "&quot": '"',
      "&quot;": '"',
      "&amp": "&",
      "&amp;": "&",
      "&lt": "<",
      "&lt;": "<",
      "&gt": ">",
      "&gt;": ">",
      "&OElig;": "Œ",
      "&oelig;": "œ",
      "&Scaron;": "Š",
      "&scaron;": "š",
      "&Yuml;": "Ÿ",
      "&circ;": "ˆ",
      "&tilde;": "˜",
      "&ensp;": " ",
      "&emsp;": " ",
      "&thinsp;": " ",
      "&zwnj;": "‌",
      "&zwj;": "‍",
      "&lrm;": "‎",
      "&rlm;": "‏",
      "&ndash;": "–",
      "&mdash;": "—",
      "&lsquo;": "‘",
      "&rsquo;": "’",
      "&sbquo;": "‚",
      "&ldquo;": "“",
      "&rdquo;": "”",
      "&bdquo;": "„",
      "&dagger;": "†",
      "&Dagger;": "‡",
      "&permil;": "‰",
      "&lsaquo;": "‹",
      "&rsaquo;": "›",
      "&euro;": "€",
      "&fnof;": "ƒ",
      "&Alpha;": "Α",
      "&Beta;": "Β",
      "&Gamma;": "Γ",
      "&Delta;": "Δ",
      "&Epsilon;": "Ε",
      "&Zeta;": "Ζ",
      "&Eta;": "Η",
      "&Theta;": "Θ",
      "&Iota;": "Ι",
      "&Kappa;": "Κ",
      "&Lambda;": "Λ",
      "&Mu;": "Μ",
      "&Nu;": "Ν",
      "&Xi;": "Ξ",
      "&Omicron;": "Ο",
      "&Pi;": "Π",
      "&Rho;": "Ρ",
      "&Sigma;": "Σ",
      "&Tau;": "Τ",
      "&Upsilon;": "Υ",
      "&Phi;": "Φ",
      "&Chi;": "Χ",
      "&Psi;": "Ψ",
      "&Omega;": "Ω",
      "&alpha;": "α",
      "&beta;": "β",
      "&gamma;": "γ",
      "&delta;": "δ",
      "&epsilon;": "ε",
      "&zeta;": "ζ",
      "&eta;": "η",
      "&theta;": "θ",
      "&iota;": "ι",
      "&kappa;": "κ",
      "&lambda;": "λ",
      "&mu;": "μ",
      "&nu;": "ν",
      "&xi;": "ξ",
      "&omicron;": "ο",
      "&pi;": "π",
      "&rho;": "ρ",
      "&sigmaf;": "ς",
      "&sigma;": "σ",
      "&tau;": "τ",
      "&upsilon;": "υ",
      "&phi;": "φ",
      "&chi;": "χ",
      "&psi;": "ψ",
      "&omega;": "ω",
      "&thetasym;": "ϑ",
      "&upsih;": "ϒ",
      "&piv;": "ϖ",
      "&bull;": "•",
      "&hellip;": "…",
      "&prime;": "′",
      "&Prime;": "″",
      "&oline;": "‾",
      "&frasl;": "⁄",
      "&weierp;": "℘",
      "&image;": "ℑ",
      "&real;": "ℜ",
      "&trade;": "™",
      "&alefsym;": "ℵ",
      "&larr;": "←",
      "&uarr;": "↑",
      "&rarr;": "→",
      "&darr;": "↓",
      "&harr;": "↔",
      "&crarr;": "↵",
      "&lArr;": "⇐",
      "&uArr;": "⇑",
      "&rArr;": "⇒",
      "&dArr;": "⇓",
      "&hArr;": "⇔",
      "&forall;": "∀",
      "&part;": "∂",
      "&exist;": "∃",
      "&empty;": "∅",
      "&nabla;": "∇",
      "&isin;": "∈",
      "&notin;": "∉",
      "&ni;": "∋",
      "&prod;": "∏",
      "&sum;": "∑",
      "&minus;": "−",
      "&lowast;": "∗",
      "&radic;": "√",
      "&prop;": "∝",
      "&infin;": "∞",
      "&ang;": "∠",
      "&and;": "∧",
      "&or;": "∨",
      "&cap;": "∩",
      "&cup;": "∪",
      "&int;": "∫",
      "&there4;": "∴",
      "&sim;": "∼",
      "&cong;": "≅",
      "&asymp;": "≈",
      "&ne;": "≠",
      "&equiv;": "≡",
      "&le;": "≤",
      "&ge;": "≥",
      "&sub;": "⊂",
      "&sup;": "⊃",
      "&nsub;": "⊄",
      "&sube;": "⊆",
      "&supe;": "⊇",
      "&oplus;": "⊕",
      "&otimes;": "⊗",
      "&perp;": "⊥",
      "&sdot;": "⋅",
      "&lceil;": "⌈",
      "&rceil;": "⌉",
      "&lfloor;": "⌊",
      "&rfloor;": "⌋",
      "&lang;": "〈",
      "&rang;": "〉",
      "&loz;": "◊",
      "&spades;": "♠",
      "&clubs;": "♣",
      "&hearts;": "♥",
      "&diams;": "♦"
    },
    characters: {
      "'": "&apos;",
      " ": "&nbsp;",
      "¡": "&iexcl;",
      "¢": "&cent;",
      "£": "&pound;",
      "¤": "&curren;",
      "¥": "&yen;",
      "¦": "&brvbar;",
      "§": "&sect;",
      "¨": "&uml;",
      "©": "&copy;",
      "ª": "&ordf;",
      "«": "&laquo;",
      "¬": "&not;",
      "­": "&shy;",
      "®": "&reg;",
      "¯": "&macr;",
      "°": "&deg;",
      "±": "&plusmn;",
      "²": "&sup2;",
      "³": "&sup3;",
      "´": "&acute;",
      "µ": "&micro;",
      "¶": "&para;",
      "·": "&middot;",
      "¸": "&cedil;",
      "¹": "&sup1;",
      "º": "&ordm;",
      "»": "&raquo;",
      "¼": "&frac14;",
      "½": "&frac12;",
      "¾": "&frac34;",
      "¿": "&iquest;",
      "À": "&Agrave;",
      "Á": "&Aacute;",
      "Â": "&Acirc;",
      "Ã": "&Atilde;",
      "Ä": "&Auml;",
      "Å": "&Aring;",
      "Æ": "&AElig;",
      "Ç": "&Ccedil;",
      "È": "&Egrave;",
      "É": "&Eacute;",
      "Ê": "&Ecirc;",
      "Ë": "&Euml;",
      "Ì": "&Igrave;",
      "Í": "&Iacute;",
      "Î": "&Icirc;",
      "Ï": "&Iuml;",
      "Ð": "&ETH;",
      "Ñ": "&Ntilde;",
      "Ò": "&Ograve;",
      "Ó": "&Oacute;",
      "Ô": "&Ocirc;",
      "Õ": "&Otilde;",
      "Ö": "&Ouml;",
      "×": "&times;",
      "Ø": "&Oslash;",
      "Ù": "&Ugrave;",
      "Ú": "&Uacute;",
      "Û": "&Ucirc;",
      "Ü": "&Uuml;",
      "Ý": "&Yacute;",
      "Þ": "&THORN;",
      "ß": "&szlig;",
      "à": "&agrave;",
      "á": "&aacute;",
      "â": "&acirc;",
      "ã": "&atilde;",
      "ä": "&auml;",
      "å": "&aring;",
      "æ": "&aelig;",
      "ç": "&ccedil;",
      "è": "&egrave;",
      "é": "&eacute;",
      "ê": "&ecirc;",
      "ë": "&euml;",
      "ì": "&igrave;",
      "í": "&iacute;",
      "î": "&icirc;",
      "ï": "&iuml;",
      "ð": "&eth;",
      "ñ": "&ntilde;",
      "ò": "&ograve;",
      "ó": "&oacute;",
      "ô": "&ocirc;",
      "õ": "&otilde;",
      "ö": "&ouml;",
      "÷": "&divide;",
      "ø": "&oslash;",
      "ù": "&ugrave;",
      "ú": "&uacute;",
      "û": "&ucirc;",
      "ü": "&uuml;",
      "ý": "&yacute;",
      "þ": "&thorn;",
      "ÿ": "&yuml;",
      '"': "&quot;",
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "Œ": "&OElig;",
      "œ": "&oelig;",
      "Š": "&Scaron;",
      "š": "&scaron;",
      "Ÿ": "&Yuml;",
      "ˆ": "&circ;",
      "˜": "&tilde;",
      " ": "&ensp;",
      " ": "&emsp;",
      " ": "&thinsp;",
      "‌": "&zwnj;",
      "‍": "&zwj;",
      "‎": "&lrm;",
      "‏": "&rlm;",
      "–": "&ndash;",
      "—": "&mdash;",
      "‘": "&lsquo;",
      "’": "&rsquo;",
      "‚": "&sbquo;",
      "“": "&ldquo;",
      "”": "&rdquo;",
      "„": "&bdquo;",
      "†": "&dagger;",
      "‡": "&Dagger;",
      "‰": "&permil;",
      "‹": "&lsaquo;",
      "›": "&rsaquo;",
      "€": "&euro;",
      "ƒ": "&fnof;",
      "Α": "&Alpha;",
      "Β": "&Beta;",
      "Γ": "&Gamma;",
      "Δ": "&Delta;",
      "Ε": "&Epsilon;",
      "Ζ": "&Zeta;",
      "Η": "&Eta;",
      "Θ": "&Theta;",
      "Ι": "&Iota;",
      "Κ": "&Kappa;",
      "Λ": "&Lambda;",
      "Μ": "&Mu;",
      "Ν": "&Nu;",
      "Ξ": "&Xi;",
      "Ο": "&Omicron;",
      "Π": "&Pi;",
      "Ρ": "&Rho;",
      "Σ": "&Sigma;",
      "Τ": "&Tau;",
      "Υ": "&Upsilon;",
      "Φ": "&Phi;",
      "Χ": "&Chi;",
      "Ψ": "&Psi;",
      "Ω": "&Omega;",
      "α": "&alpha;",
      "β": "&beta;",
      "γ": "&gamma;",
      "δ": "&delta;",
      "ε": "&epsilon;",
      "ζ": "&zeta;",
      "η": "&eta;",
      "θ": "&theta;",
      "ι": "&iota;",
      "κ": "&kappa;",
      "λ": "&lambda;",
      "μ": "&mu;",
      "ν": "&nu;",
      "ξ": "&xi;",
      "ο": "&omicron;",
      "π": "&pi;",
      "ρ": "&rho;",
      "ς": "&sigmaf;",
      "σ": "&sigma;",
      "τ": "&tau;",
      "υ": "&upsilon;",
      "φ": "&phi;",
      "χ": "&chi;",
      "ψ": "&psi;",
      "ω": "&omega;",
      "ϑ": "&thetasym;",
      "ϒ": "&upsih;",
      "ϖ": "&piv;",
      "•": "&bull;",
      "…": "&hellip;",
      "′": "&prime;",
      "″": "&Prime;",
      "‾": "&oline;",
      "⁄": "&frasl;",
      "℘": "&weierp;",
      "ℑ": "&image;",
      "ℜ": "&real;",
      "™": "&trade;",
      "ℵ": "&alefsym;",
      "←": "&larr;",
      "↑": "&uarr;",
      "→": "&rarr;",
      "↓": "&darr;",
      "↔": "&harr;",
      "↵": "&crarr;",
      "⇐": "&lArr;",
      "⇑": "&uArr;",
      "⇒": "&rArr;",
      "⇓": "&dArr;",
      "⇔": "&hArr;",
      "∀": "&forall;",
      "∂": "&part;",
      "∃": "&exist;",
      "∅": "&empty;",
      "∇": "&nabla;",
      "∈": "&isin;",
      "∉": "&notin;",
      "∋": "&ni;",
      "∏": "&prod;",
      "∑": "&sum;",
      "−": "&minus;",
      "∗": "&lowast;",
      "√": "&radic;",
      "∝": "&prop;",
      "∞": "&infin;",
      "∠": "&ang;",
      "∧": "&and;",
      "∨": "&or;",
      "∩": "&cap;",
      "∪": "&cup;",
      "∫": "&int;",
      "∴": "&there4;",
      "∼": "&sim;",
      "≅": "&cong;",
      "≈": "&asymp;",
      "≠": "&ne;",
      "≡": "&equiv;",
      "≤": "&le;",
      "≥": "&ge;",
      "⊂": "&sub;",
      "⊃": "&sup;",
      "⊄": "&nsub;",
      "⊆": "&sube;",
      "⊇": "&supe;",
      "⊕": "&oplus;",
      "⊗": "&otimes;",
      "⊥": "&perp;",
      "⋅": "&sdot;",
      "⌈": "&lceil;",
      "⌉": "&rceil;",
      "⌊": "&lfloor;",
      "⌋": "&rfloor;",
      "〈": "&lang;",
      "〉": "&rang;",
      "◊": "&loz;",
      "♠": "&spades;",
      "♣": "&clubs;",
      "♥": "&hearts;",
      "♦": "&diams;"
    }
  },
  html5: {
    entities: {
      "&AElig": "Æ",
      "&AElig;": "Æ",
      "&AMP": "&",
      "&AMP;": "&",
      "&Aacute": "Á",
      "&Aacute;": "Á",
      "&Abreve;": "Ă",
      "&Acirc": "Â",
      "&Acirc;": "Â",
      "&Acy;": "А",
      "&Afr;": "𝔄",
      "&Agrave": "À",
      "&Agrave;": "À",
      "&Alpha;": "Α",
      "&Amacr;": "Ā",
      "&And;": "⩓",
      "&Aogon;": "Ą",
      "&Aopf;": "𝔸",
      "&ApplyFunction;": "⁡",
      "&Aring": "Å",
      "&Aring;": "Å",
      "&Ascr;": "𝒜",
      "&Assign;": "≔",
      "&Atilde": "Ã",
      "&Atilde;": "Ã",
      "&Auml": "Ä",
      "&Auml;": "Ä",
      "&Backslash;": "∖",
      "&Barv;": "⫧",
      "&Barwed;": "⌆",
      "&Bcy;": "Б",
      "&Because;": "∵",
      "&Bernoullis;": "ℬ",
      "&Beta;": "Β",
      "&Bfr;": "𝔅",
      "&Bopf;": "𝔹",
      "&Breve;": "˘",
      "&Bscr;": "ℬ",
      "&Bumpeq;": "≎",
      "&CHcy;": "Ч",
      "&COPY": "©",
      "&COPY;": "©",
      "&Cacute;": "Ć",
      "&Cap;": "⋒",
      "&CapitalDifferentialD;": "ⅅ",
      "&Cayleys;": "ℭ",
      "&Ccaron;": "Č",
      "&Ccedil": "Ç",
      "&Ccedil;": "Ç",
      "&Ccirc;": "Ĉ",
      "&Cconint;": "∰",
      "&Cdot;": "Ċ",
      "&Cedilla;": "¸",
      "&CenterDot;": "·",
      "&Cfr;": "ℭ",
      "&Chi;": "Χ",
      "&CircleDot;": "⊙",
      "&CircleMinus;": "⊖",
      "&CirclePlus;": "⊕",
      "&CircleTimes;": "⊗",
      "&ClockwiseContourIntegral;": "∲",
      "&CloseCurlyDoubleQuote;": "”",
      "&CloseCurlyQuote;": "’",
      "&Colon;": "∷",
      "&Colone;": "⩴",
      "&Congruent;": "≡",
      "&Conint;": "∯",
      "&ContourIntegral;": "∮",
      "&Copf;": "ℂ",
      "&Coproduct;": "∐",
      "&CounterClockwiseContourIntegral;": "∳",
      "&Cross;": "⨯",
      "&Cscr;": "𝒞",
      "&Cup;": "⋓",
      "&CupCap;": "≍",
      "&DD;": "ⅅ",
      "&DDotrahd;": "⤑",
      "&DJcy;": "Ђ",
      "&DScy;": "Ѕ",
      "&DZcy;": "Џ",
      "&Dagger;": "‡",
      "&Darr;": "↡",
      "&Dashv;": "⫤",
      "&Dcaron;": "Ď",
      "&Dcy;": "Д",
      "&Del;": "∇",
      "&Delta;": "Δ",
      "&Dfr;": "𝔇",
      "&DiacriticalAcute;": "´",
      "&DiacriticalDot;": "˙",
      "&DiacriticalDoubleAcute;": "˝",
      "&DiacriticalGrave;": "`",
      "&DiacriticalTilde;": "˜",
      "&Diamond;": "⋄",
      "&DifferentialD;": "ⅆ",
      "&Dopf;": "𝔻",
      "&Dot;": "¨",
      "&DotDot;": "⃜",
      "&DotEqual;": "≐",
      "&DoubleContourIntegral;": "∯",
      "&DoubleDot;": "¨",
      "&DoubleDownArrow;": "⇓",
      "&DoubleLeftArrow;": "⇐",
      "&DoubleLeftRightArrow;": "⇔",
      "&DoubleLeftTee;": "⫤",
      "&DoubleLongLeftArrow;": "⟸",
      "&DoubleLongLeftRightArrow;": "⟺",
      "&DoubleLongRightArrow;": "⟹",
      "&DoubleRightArrow;": "⇒",
      "&DoubleRightTee;": "⊨",
      "&DoubleUpArrow;": "⇑",
      "&DoubleUpDownArrow;": "⇕",
      "&DoubleVerticalBar;": "∥",
      "&DownArrow;": "↓",
      "&DownArrowBar;": "⤓",
      "&DownArrowUpArrow;": "⇵",
      "&DownBreve;": "̑",
      "&DownLeftRightVector;": "⥐",
      "&DownLeftTeeVector;": "⥞",
      "&DownLeftVector;": "↽",
      "&DownLeftVectorBar;": "⥖",
      "&DownRightTeeVector;": "⥟",
      "&DownRightVector;": "⇁",
      "&DownRightVectorBar;": "⥗",
      "&DownTee;": "⊤",
      "&DownTeeArrow;": "↧",
      "&Downarrow;": "⇓",
      "&Dscr;": "𝒟",
      "&Dstrok;": "Đ",
      "&ENG;": "Ŋ",
      "&ETH": "Ð",
      "&ETH;": "Ð",
      "&Eacute": "É",
      "&Eacute;": "É",
      "&Ecaron;": "Ě",
      "&Ecirc": "Ê",
      "&Ecirc;": "Ê",
      "&Ecy;": "Э",
      "&Edot;": "Ė",
      "&Efr;": "𝔈",
      "&Egrave": "È",
      "&Egrave;": "È",
      "&Element;": "∈",
      "&Emacr;": "Ē",
      "&EmptySmallSquare;": "◻",
      "&EmptyVerySmallSquare;": "▫",
      "&Eogon;": "Ę",
      "&Eopf;": "𝔼",
      "&Epsilon;": "Ε",
      "&Equal;": "⩵",
      "&EqualTilde;": "≂",
      "&Equilibrium;": "⇌",
      "&Escr;": "ℰ",
      "&Esim;": "⩳",
      "&Eta;": "Η",
      "&Euml": "Ë",
      "&Euml;": "Ë",
      "&Exists;": "∃",
      "&ExponentialE;": "ⅇ",
      "&Fcy;": "Ф",
      "&Ffr;": "𝔉",
      "&FilledSmallSquare;": "◼",
      "&FilledVerySmallSquare;": "▪",
      "&Fopf;": "𝔽",
      "&ForAll;": "∀",
      "&Fouriertrf;": "ℱ",
      "&Fscr;": "ℱ",
      "&GJcy;": "Ѓ",
      "&GT": ">",
      "&GT;": ">",
      "&Gamma;": "Γ",
      "&Gammad;": "Ϝ",
      "&Gbreve;": "Ğ",
      "&Gcedil;": "Ģ",
      "&Gcirc;": "Ĝ",
      "&Gcy;": "Г",
      "&Gdot;": "Ġ",
      "&Gfr;": "𝔊",
      "&Gg;": "⋙",
      "&Gopf;": "𝔾",
      "&GreaterEqual;": "≥",
      "&GreaterEqualLess;": "⋛",
      "&GreaterFullEqual;": "≧",
      "&GreaterGreater;": "⪢",
      "&GreaterLess;": "≷",
      "&GreaterSlantEqual;": "⩾",
      "&GreaterTilde;": "≳",
      "&Gscr;": "𝒢",
      "&Gt;": "≫",
      "&HARDcy;": "Ъ",
      "&Hacek;": "ˇ",
      "&Hat;": "^",
      "&Hcirc;": "Ĥ",
      "&Hfr;": "ℌ",
      "&HilbertSpace;": "ℋ",
      "&Hopf;": "ℍ",
      "&HorizontalLine;": "─",
      "&Hscr;": "ℋ",
      "&Hstrok;": "Ħ",
      "&HumpDownHump;": "≎",
      "&HumpEqual;": "≏",
      "&IEcy;": "Е",
      "&IJlig;": "Ĳ",
      "&IOcy;": "Ё",
      "&Iacute": "Í",
      "&Iacute;": "Í",
      "&Icirc": "Î",
      "&Icirc;": "Î",
      "&Icy;": "И",
      "&Idot;": "İ",
      "&Ifr;": "ℑ",
      "&Igrave": "Ì",
      "&Igrave;": "Ì",
      "&Im;": "ℑ",
      "&Imacr;": "Ī",
      "&ImaginaryI;": "ⅈ",
      "&Implies;": "⇒",
      "&Int;": "∬",
      "&Integral;": "∫",
      "&Intersection;": "⋂",
      "&InvisibleComma;": "⁣",
      "&InvisibleTimes;": "⁢",
      "&Iogon;": "Į",
      "&Iopf;": "𝕀",
      "&Iota;": "Ι",
      "&Iscr;": "ℐ",
      "&Itilde;": "Ĩ",
      "&Iukcy;": "І",
      "&Iuml": "Ï",
      "&Iuml;": "Ï",
      "&Jcirc;": "Ĵ",
      "&Jcy;": "Й",
      "&Jfr;": "𝔍",
      "&Jopf;": "𝕁",
      "&Jscr;": "𝒥",
      "&Jsercy;": "Ј",
      "&Jukcy;": "Є",
      "&KHcy;": "Х",
      "&KJcy;": "Ќ",
      "&Kappa;": "Κ",
      "&Kcedil;": "Ķ",
      "&Kcy;": "К",
      "&Kfr;": "𝔎",
      "&Kopf;": "𝕂",
      "&Kscr;": "𝒦",
      "&LJcy;": "Љ",
      "&LT": "<",
      "&LT;": "<",
      "&Lacute;": "Ĺ",
      "&Lambda;": "Λ",
      "&Lang;": "⟪",
      "&Laplacetrf;": "ℒ",
      "&Larr;": "↞",
      "&Lcaron;": "Ľ",
      "&Lcedil;": "Ļ",
      "&Lcy;": "Л",
      "&LeftAngleBracket;": "⟨",
      "&LeftArrow;": "←",
      "&LeftArrowBar;": "⇤",
      "&LeftArrowRightArrow;": "⇆",
      "&LeftCeiling;": "⌈",
      "&LeftDoubleBracket;": "⟦",
      "&LeftDownTeeVector;": "⥡",
      "&LeftDownVector;": "⇃",
      "&LeftDownVectorBar;": "⥙",
      "&LeftFloor;": "⌊",
      "&LeftRightArrow;": "↔",
      "&LeftRightVector;": "⥎",
      "&LeftTee;": "⊣",
      "&LeftTeeArrow;": "↤",
      "&LeftTeeVector;": "⥚",
      "&LeftTriangle;": "⊲",
      "&LeftTriangleBar;": "⧏",
      "&LeftTriangleEqual;": "⊴",
      "&LeftUpDownVector;": "⥑",
      "&LeftUpTeeVector;": "⥠",
      "&LeftUpVector;": "↿",
      "&LeftUpVectorBar;": "⥘",
      "&LeftVector;": "↼",
      "&LeftVectorBar;": "⥒",
      "&Leftarrow;": "⇐",
      "&Leftrightarrow;": "⇔",
      "&LessEqualGreater;": "⋚",
      "&LessFullEqual;": "≦",
      "&LessGreater;": "≶",
      "&LessLess;": "⪡",
      "&LessSlantEqual;": "⩽",
      "&LessTilde;": "≲",
      "&Lfr;": "𝔏",
      "&Ll;": "⋘",
      "&Lleftarrow;": "⇚",
      "&Lmidot;": "Ŀ",
      "&LongLeftArrow;": "⟵",
      "&LongLeftRightArrow;": "⟷",
      "&LongRightArrow;": "⟶",
      "&Longleftarrow;": "⟸",
      "&Longleftrightarrow;": "⟺",
      "&Longrightarrow;": "⟹",
      "&Lopf;": "𝕃",
      "&LowerLeftArrow;": "↙",
      "&LowerRightArrow;": "↘",
      "&Lscr;": "ℒ",
      "&Lsh;": "↰",
      "&Lstrok;": "Ł",
      "&Lt;": "≪",
      "&Map;": "⤅",
      "&Mcy;": "М",
      "&MediumSpace;": " ",
      "&Mellintrf;": "ℳ",
      "&Mfr;": "𝔐",
      "&MinusPlus;": "∓",
      "&Mopf;": "𝕄",
      "&Mscr;": "ℳ",
      "&Mu;": "Μ",
      "&NJcy;": "Њ",
      "&Nacute;": "Ń",
      "&Ncaron;": "Ň",
      "&Ncedil;": "Ņ",
      "&Ncy;": "Н",
      "&NegativeMediumSpace;": "​",
      "&NegativeThickSpace;": "​",
      "&NegativeThinSpace;": "​",
      "&NegativeVeryThinSpace;": "​",
      "&NestedGreaterGreater;": "≫",
      "&NestedLessLess;": "≪",
      "&NewLine;": "\n",
      "&Nfr;": "𝔑",
      "&NoBreak;": "⁠",
      "&NonBreakingSpace;": " ",
      "&Nopf;": "ℕ",
      "&Not;": "⫬",
      "&NotCongruent;": "≢",
      "&NotCupCap;": "≭",
      "&NotDoubleVerticalBar;": "∦",
      "&NotElement;": "∉",
      "&NotEqual;": "≠",
      "&NotEqualTilde;": "≂̸",
      "&NotExists;": "∄",
      "&NotGreater;": "≯",
      "&NotGreaterEqual;": "≱",
      "&NotGreaterFullEqual;": "≧̸",
      "&NotGreaterGreater;": "≫̸",
      "&NotGreaterLess;": "≹",
      "&NotGreaterSlantEqual;": "⩾̸",
      "&NotGreaterTilde;": "≵",
      "&NotHumpDownHump;": "≎̸",
      "&NotHumpEqual;": "≏̸",
      "&NotLeftTriangle;": "⋪",
      "&NotLeftTriangleBar;": "⧏̸",
      "&NotLeftTriangleEqual;": "⋬",
      "&NotLess;": "≮",
      "&NotLessEqual;": "≰",
      "&NotLessGreater;": "≸",
      "&NotLessLess;": "≪̸",
      "&NotLessSlantEqual;": "⩽̸",
      "&NotLessTilde;": "≴",
      "&NotNestedGreaterGreater;": "⪢̸",
      "&NotNestedLessLess;": "⪡̸",
      "&NotPrecedes;": "⊀",
      "&NotPrecedesEqual;": "⪯̸",
      "&NotPrecedesSlantEqual;": "⋠",
      "&NotReverseElement;": "∌",
      "&NotRightTriangle;": "⋫",
      "&NotRightTriangleBar;": "⧐̸",
      "&NotRightTriangleEqual;": "⋭",
      "&NotSquareSubset;": "⊏̸",
      "&NotSquareSubsetEqual;": "⋢",
      "&NotSquareSuperset;": "⊐̸",
      "&NotSquareSupersetEqual;": "⋣",
      "&NotSubset;": "⊂⃒",
      "&NotSubsetEqual;": "⊈",
      "&NotSucceeds;": "⊁",
      "&NotSucceedsEqual;": "⪰̸",
      "&NotSucceedsSlantEqual;": "⋡",
      "&NotSucceedsTilde;": "≿̸",
      "&NotSuperset;": "⊃⃒",
      "&NotSupersetEqual;": "⊉",
      "&NotTilde;": "≁",
      "&NotTildeEqual;": "≄",
      "&NotTildeFullEqual;": "≇",
      "&NotTildeTilde;": "≉",
      "&NotVerticalBar;": "∤",
      "&Nscr;": "𝒩",
      "&Ntilde": "Ñ",
      "&Ntilde;": "Ñ",
      "&Nu;": "Ν",
      "&OElig;": "Œ",
      "&Oacute": "Ó",
      "&Oacute;": "Ó",
      "&Ocirc": "Ô",
      "&Ocirc;": "Ô",
      "&Ocy;": "О",
      "&Odblac;": "Ő",
      "&Ofr;": "𝔒",
      "&Ograve": "Ò",
      "&Ograve;": "Ò",
      "&Omacr;": "Ō",
      "&Omega;": "Ω",
      "&Omicron;": "Ο",
      "&Oopf;": "𝕆",
      "&OpenCurlyDoubleQuote;": "“",
      "&OpenCurlyQuote;": "‘",
      "&Or;": "⩔",
      "&Oscr;": "𝒪",
      "&Oslash": "Ø",
      "&Oslash;": "Ø",
      "&Otilde": "Õ",
      "&Otilde;": "Õ",
      "&Otimes;": "⨷",
      "&Ouml": "Ö",
      "&Ouml;": "Ö",
      "&OverBar;": "‾",
      "&OverBrace;": "⏞",
      "&OverBracket;": "⎴",
      "&OverParenthesis;": "⏜",
      "&PartialD;": "∂",
      "&Pcy;": "П",
      "&Pfr;": "𝔓",
      "&Phi;": "Φ",
      "&Pi;": "Π",
      "&PlusMinus;": "±",
      "&Poincareplane;": "ℌ",
      "&Popf;": "ℙ",
      "&Pr;": "⪻",
      "&Precedes;": "≺",
      "&PrecedesEqual;": "⪯",
      "&PrecedesSlantEqual;": "≼",
      "&PrecedesTilde;": "≾",
      "&Prime;": "″",
      "&Product;": "∏",
      "&Proportion;": "∷",
      "&Proportional;": "∝",
      "&Pscr;": "𝒫",
      "&Psi;": "Ψ",
      "&QUOT": '"',
      "&QUOT;": '"',
      "&Qfr;": "𝔔",
      "&Qopf;": "ℚ",
      "&Qscr;": "𝒬",
      "&RBarr;": "⤐",
      "&REG": "®",
      "&REG;": "®",
      "&Racute;": "Ŕ",
      "&Rang;": "⟫",
      "&Rarr;": "↠",
      "&Rarrtl;": "⤖",
      "&Rcaron;": "Ř",
      "&Rcedil;": "Ŗ",
      "&Rcy;": "Р",
      "&Re;": "ℜ",
      "&ReverseElement;": "∋",
      "&ReverseEquilibrium;": "⇋",
      "&ReverseUpEquilibrium;": "⥯",
      "&Rfr;": "ℜ",
      "&Rho;": "Ρ",
      "&RightAngleBracket;": "⟩",
      "&RightArrow;": "→",
      "&RightArrowBar;": "⇥",
      "&RightArrowLeftArrow;": "⇄",
      "&RightCeiling;": "⌉",
      "&RightDoubleBracket;": "⟧",
      "&RightDownTeeVector;": "⥝",
      "&RightDownVector;": "⇂",
      "&RightDownVectorBar;": "⥕",
      "&RightFloor;": "⌋",
      "&RightTee;": "⊢",
      "&RightTeeArrow;": "↦",
      "&RightTeeVector;": "⥛",
      "&RightTriangle;": "⊳",
      "&RightTriangleBar;": "⧐",
      "&RightTriangleEqual;": "⊵",
      "&RightUpDownVector;": "⥏",
      "&RightUpTeeVector;": "⥜",
      "&RightUpVector;": "↾",
      "&RightUpVectorBar;": "⥔",
      "&RightVector;": "⇀",
      "&RightVectorBar;": "⥓",
      "&Rightarrow;": "⇒",
      "&Ropf;": "ℝ",
      "&RoundImplies;": "⥰",
      "&Rrightarrow;": "⇛",
      "&Rscr;": "ℛ",
      "&Rsh;": "↱",
      "&RuleDelayed;": "⧴",
      "&SHCHcy;": "Щ",
      "&SHcy;": "Ш",
      "&SOFTcy;": "Ь",
      "&Sacute;": "Ś",
      "&Sc;": "⪼",
      "&Scaron;": "Š",
      "&Scedil;": "Ş",
      "&Scirc;": "Ŝ",
      "&Scy;": "С",
      "&Sfr;": "𝔖",
      "&ShortDownArrow;": "↓",
      "&ShortLeftArrow;": "←",
      "&ShortRightArrow;": "→",
      "&ShortUpArrow;": "↑",
      "&Sigma;": "Σ",
      "&SmallCircle;": "∘",
      "&Sopf;": "𝕊",
      "&Sqrt;": "√",
      "&Square;": "□",
      "&SquareIntersection;": "⊓",
      "&SquareSubset;": "⊏",
      "&SquareSubsetEqual;": "⊑",
      "&SquareSuperset;": "⊐",
      "&SquareSupersetEqual;": "⊒",
      "&SquareUnion;": "⊔",
      "&Sscr;": "𝒮",
      "&Star;": "⋆",
      "&Sub;": "⋐",
      "&Subset;": "⋐",
      "&SubsetEqual;": "⊆",
      "&Succeeds;": "≻",
      "&SucceedsEqual;": "⪰",
      "&SucceedsSlantEqual;": "≽",
      "&SucceedsTilde;": "≿",
      "&SuchThat;": "∋",
      "&Sum;": "∑",
      "&Sup;": "⋑",
      "&Superset;": "⊃",
      "&SupersetEqual;": "⊇",
      "&Supset;": "⋑",
      "&THORN": "Þ",
      "&THORN;": "Þ",
      "&TRADE;": "™",
      "&TSHcy;": "Ћ",
      "&TScy;": "Ц",
      "&Tab;": "\t",
      "&Tau;": "Τ",
      "&Tcaron;": "Ť",
      "&Tcedil;": "Ţ",
      "&Tcy;": "Т",
      "&Tfr;": "𝔗",
      "&Therefore;": "∴",
      "&Theta;": "Θ",
      "&ThickSpace;": "  ",
      "&ThinSpace;": " ",
      "&Tilde;": "∼",
      "&TildeEqual;": "≃",
      "&TildeFullEqual;": "≅",
      "&TildeTilde;": "≈",
      "&Topf;": "𝕋",
      "&TripleDot;": "⃛",
      "&Tscr;": "𝒯",
      "&Tstrok;": "Ŧ",
      "&Uacute": "Ú",
      "&Uacute;": "Ú",
      "&Uarr;": "↟",
      "&Uarrocir;": "⥉",
      "&Ubrcy;": "Ў",
      "&Ubreve;": "Ŭ",
      "&Ucirc": "Û",
      "&Ucirc;": "Û",
      "&Ucy;": "У",
      "&Udblac;": "Ű",
      "&Ufr;": "𝔘",
      "&Ugrave": "Ù",
      "&Ugrave;": "Ù",
      "&Umacr;": "Ū",
      "&UnderBar;": "_",
      "&UnderBrace;": "⏟",
      "&UnderBracket;": "⎵",
      "&UnderParenthesis;": "⏝",
      "&Union;": "⋃",
      "&UnionPlus;": "⊎",
      "&Uogon;": "Ų",
      "&Uopf;": "𝕌",
      "&UpArrow;": "↑",
      "&UpArrowBar;": "⤒",
      "&UpArrowDownArrow;": "⇅",
      "&UpDownArrow;": "↕",
      "&UpEquilibrium;": "⥮",
      "&UpTee;": "⊥",
      "&UpTeeArrow;": "↥",
      "&Uparrow;": "⇑",
      "&Updownarrow;": "⇕",
      "&UpperLeftArrow;": "↖",
      "&UpperRightArrow;": "↗",
      "&Upsi;": "ϒ",
      "&Upsilon;": "Υ",
      "&Uring;": "Ů",
      "&Uscr;": "𝒰",
      "&Utilde;": "Ũ",
      "&Uuml": "Ü",
      "&Uuml;": "Ü",
      "&VDash;": "⊫",
      "&Vbar;": "⫫",
      "&Vcy;": "В",
      "&Vdash;": "⊩",
      "&Vdashl;": "⫦",
      "&Vee;": "⋁",
      "&Verbar;": "‖",
      "&Vert;": "‖",
      "&VerticalBar;": "∣",
      "&VerticalLine;": "|",
      "&VerticalSeparator;": "❘",
      "&VerticalTilde;": "≀",
      "&VeryThinSpace;": " ",
      "&Vfr;": "𝔙",
      "&Vopf;": "𝕍",
      "&Vscr;": "𝒱",
      "&Vvdash;": "⊪",
      "&Wcirc;": "Ŵ",
      "&Wedge;": "⋀",
      "&Wfr;": "𝔚",
      "&Wopf;": "𝕎",
      "&Wscr;": "𝒲",
      "&Xfr;": "𝔛",
      "&Xi;": "Ξ",
      "&Xopf;": "𝕏",
      "&Xscr;": "𝒳",
      "&YAcy;": "Я",
      "&YIcy;": "Ї",
      "&YUcy;": "Ю",
      "&Yacute": "Ý",
      "&Yacute;": "Ý",
      "&Ycirc;": "Ŷ",
      "&Ycy;": "Ы",
      "&Yfr;": "𝔜",
      "&Yopf;": "𝕐",
      "&Yscr;": "𝒴",
      "&Yuml;": "Ÿ",
      "&ZHcy;": "Ж",
      "&Zacute;": "Ź",
      "&Zcaron;": "Ž",
      "&Zcy;": "З",
      "&Zdot;": "Ż",
      "&ZeroWidthSpace;": "​",
      "&Zeta;": "Ζ",
      "&Zfr;": "ℨ",
      "&Zopf;": "ℤ",
      "&Zscr;": "𝒵",
      "&aacute": "á",
      "&aacute;": "á",
      "&abreve;": "ă",
      "&ac;": "∾",
      "&acE;": "∾̳",
      "&acd;": "∿",
      "&acirc": "â",
      "&acirc;": "â",
      "&acute": "´",
      "&acute;": "´",
      "&acy;": "а",
      "&aelig": "æ",
      "&aelig;": "æ",
      "&af;": "⁡",
      "&afr;": "𝔞",
      "&agrave": "à",
      "&agrave;": "à",
      "&alefsym;": "ℵ",
      "&aleph;": "ℵ",
      "&alpha;": "α",
      "&amacr;": "ā",
      "&amalg;": "⨿",
      "&amp": "&",
      "&amp;": "&",
      "&and;": "∧",
      "&andand;": "⩕",
      "&andd;": "⩜",
      "&andslope;": "⩘",
      "&andv;": "⩚",
      "&ang;": "∠",
      "&ange;": "⦤",
      "&angle;": "∠",
      "&angmsd;": "∡",
      "&angmsdaa;": "⦨",
      "&angmsdab;": "⦩",
      "&angmsdac;": "⦪",
      "&angmsdad;": "⦫",
      "&angmsdae;": "⦬",
      "&angmsdaf;": "⦭",
      "&angmsdag;": "⦮",
      "&angmsdah;": "⦯",
      "&angrt;": "∟",
      "&angrtvb;": "⊾",
      "&angrtvbd;": "⦝",
      "&angsph;": "∢",
      "&angst;": "Å",
      "&angzarr;": "⍼",
      "&aogon;": "ą",
      "&aopf;": "𝕒",
      "&ap;": "≈",
      "&apE;": "⩰",
      "&apacir;": "⩯",
      "&ape;": "≊",
      "&apid;": "≋",
      "&apos;": "'",
      "&approx;": "≈",
      "&approxeq;": "≊",
      "&aring": "å",
      "&aring;": "å",
      "&ascr;": "𝒶",
      "&ast;": "*",
      "&asymp;": "≈",
      "&asympeq;": "≍",
      "&atilde": "ã",
      "&atilde;": "ã",
      "&auml": "ä",
      "&auml;": "ä",
      "&awconint;": "∳",
      "&awint;": "⨑",
      "&bNot;": "⫭",
      "&backcong;": "≌",
      "&backepsilon;": "϶",
      "&backprime;": "‵",
      "&backsim;": "∽",
      "&backsimeq;": "⋍",
      "&barvee;": "⊽",
      "&barwed;": "⌅",
      "&barwedge;": "⌅",
      "&bbrk;": "⎵",
      "&bbrktbrk;": "⎶",
      "&bcong;": "≌",
      "&bcy;": "б",
      "&bdquo;": "„",
      "&becaus;": "∵",
      "&because;": "∵",
      "&bemptyv;": "⦰",
      "&bepsi;": "϶",
      "&bernou;": "ℬ",
      "&beta;": "β",
      "&beth;": "ℶ",
      "&between;": "≬",
      "&bfr;": "𝔟",
      "&bigcap;": "⋂",
      "&bigcirc;": "◯",
      "&bigcup;": "⋃",
      "&bigodot;": "⨀",
      "&bigoplus;": "⨁",
      "&bigotimes;": "⨂",
      "&bigsqcup;": "⨆",
      "&bigstar;": "★",
      "&bigtriangledown;": "▽",
      "&bigtriangleup;": "△",
      "&biguplus;": "⨄",
      "&bigvee;": "⋁",
      "&bigwedge;": "⋀",
      "&bkarow;": "⤍",
      "&blacklozenge;": "⧫",
      "&blacksquare;": "▪",
      "&blacktriangle;": "▴",
      "&blacktriangledown;": "▾",
      "&blacktriangleleft;": "◂",
      "&blacktriangleright;": "▸",
      "&blank;": "␣",
      "&blk12;": "▒",
      "&blk14;": "░",
      "&blk34;": "▓",
      "&block;": "█",
      "&bne;": "=⃥",
      "&bnequiv;": "≡⃥",
      "&bnot;": "⌐",
      "&bopf;": "𝕓",
      "&bot;": "⊥",
      "&bottom;": "⊥",
      "&bowtie;": "⋈",
      "&boxDL;": "╗",
      "&boxDR;": "╔",
      "&boxDl;": "╖",
      "&boxDr;": "╓",
      "&boxH;": "═",
      "&boxHD;": "╦",
      "&boxHU;": "╩",
      "&boxHd;": "╤",
      "&boxHu;": "╧",
      "&boxUL;": "╝",
      "&boxUR;": "╚",
      "&boxUl;": "╜",
      "&boxUr;": "╙",
      "&boxV;": "║",
      "&boxVH;": "╬",
      "&boxVL;": "╣",
      "&boxVR;": "╠",
      "&boxVh;": "╫",
      "&boxVl;": "╢",
      "&boxVr;": "╟",
      "&boxbox;": "⧉",
      "&boxdL;": "╕",
      "&boxdR;": "╒",
      "&boxdl;": "┐",
      "&boxdr;": "┌",
      "&boxh;": "─",
      "&boxhD;": "╥",
      "&boxhU;": "╨",
      "&boxhd;": "┬",
      "&boxhu;": "┴",
      "&boxminus;": "⊟",
      "&boxplus;": "⊞",
      "&boxtimes;": "⊠",
      "&boxuL;": "╛",
      "&boxuR;": "╘",
      "&boxul;": "┘",
      "&boxur;": "└",
      "&boxv;": "│",
      "&boxvH;": "╪",
      "&boxvL;": "╡",
      "&boxvR;": "╞",
      "&boxvh;": "┼",
      "&boxvl;": "┤",
      "&boxvr;": "├",
      "&bprime;": "‵",
      "&breve;": "˘",
      "&brvbar": "¦",
      "&brvbar;": "¦",
      "&bscr;": "𝒷",
      "&bsemi;": "⁏",
      "&bsim;": "∽",
      "&bsime;": "⋍",
      "&bsol;": "\\",
      "&bsolb;": "⧅",
      "&bsolhsub;": "⟈",
      "&bull;": "•",
      "&bullet;": "•",
      "&bump;": "≎",
      "&bumpE;": "⪮",
      "&bumpe;": "≏",
      "&bumpeq;": "≏",
      "&cacute;": "ć",
      "&cap;": "∩",
      "&capand;": "⩄",
      "&capbrcup;": "⩉",
      "&capcap;": "⩋",
      "&capcup;": "⩇",
      "&capdot;": "⩀",
      "&caps;": "∩︀",
      "&caret;": "⁁",
      "&caron;": "ˇ",
      "&ccaps;": "⩍",
      "&ccaron;": "č",
      "&ccedil": "ç",
      "&ccedil;": "ç",
      "&ccirc;": "ĉ",
      "&ccups;": "⩌",
      "&ccupssm;": "⩐",
      "&cdot;": "ċ",
      "&cedil": "¸",
      "&cedil;": "¸",
      "&cemptyv;": "⦲",
      "&cent": "¢",
      "&cent;": "¢",
      "&centerdot;": "·",
      "&cfr;": "𝔠",
      "&chcy;": "ч",
      "&check;": "✓",
      "&checkmark;": "✓",
      "&chi;": "χ",
      "&cir;": "○",
      "&cirE;": "⧃",
      "&circ;": "ˆ",
      "&circeq;": "≗",
      "&circlearrowleft;": "↺",
      "&circlearrowright;": "↻",
      "&circledR;": "®",
      "&circledS;": "Ⓢ",
      "&circledast;": "⊛",
      "&circledcirc;": "⊚",
      "&circleddash;": "⊝",
      "&cire;": "≗",
      "&cirfnint;": "⨐",
      "&cirmid;": "⫯",
      "&cirscir;": "⧂",
      "&clubs;": "♣",
      "&clubsuit;": "♣",
      "&colon;": ":",
      "&colone;": "≔",
      "&coloneq;": "≔",
      "&comma;": ",",
      "&commat;": "@",
      "&comp;": "∁",
      "&compfn;": "∘",
      "&complement;": "∁",
      "&complexes;": "ℂ",
      "&cong;": "≅",
      "&congdot;": "⩭",
      "&conint;": "∮",
      "&copf;": "𝕔",
      "&coprod;": "∐",
      "&copy": "©",
      "&copy;": "©",
      "&copysr;": "℗",
      "&crarr;": "↵",
      "&cross;": "✗",
      "&cscr;": "𝒸",
      "&csub;": "⫏",
      "&csube;": "⫑",
      "&csup;": "⫐",
      "&csupe;": "⫒",
      "&ctdot;": "⋯",
      "&cudarrl;": "⤸",
      "&cudarrr;": "⤵",
      "&cuepr;": "⋞",
      "&cuesc;": "⋟",
      "&cularr;": "↶",
      "&cularrp;": "⤽",
      "&cup;": "∪",
      "&cupbrcap;": "⩈",
      "&cupcap;": "⩆",
      "&cupcup;": "⩊",
      "&cupdot;": "⊍",
      "&cupor;": "⩅",
      "&cups;": "∪︀",
      "&curarr;": "↷",
      "&curarrm;": "⤼",
      "&curlyeqprec;": "⋞",
      "&curlyeqsucc;": "⋟",
      "&curlyvee;": "⋎",
      "&curlywedge;": "⋏",
      "&curren": "¤",
      "&curren;": "¤",
      "&curvearrowleft;": "↶",
      "&curvearrowright;": "↷",
      "&cuvee;": "⋎",
      "&cuwed;": "⋏",
      "&cwconint;": "∲",
      "&cwint;": "∱",
      "&cylcty;": "⌭",
      "&dArr;": "⇓",
      "&dHar;": "⥥",
      "&dagger;": "†",
      "&daleth;": "ℸ",
      "&darr;": "↓",
      "&dash;": "‐",
      "&dashv;": "⊣",
      "&dbkarow;": "⤏",
      "&dblac;": "˝",
      "&dcaron;": "ď",
      "&dcy;": "д",
      "&dd;": "ⅆ",
      "&ddagger;": "‡",
      "&ddarr;": "⇊",
      "&ddotseq;": "⩷",
      "&deg": "°",
      "&deg;": "°",
      "&delta;": "δ",
      "&demptyv;": "⦱",
      "&dfisht;": "⥿",
      "&dfr;": "𝔡",
      "&dharl;": "⇃",
      "&dharr;": "⇂",
      "&diam;": "⋄",
      "&diamond;": "⋄",
      "&diamondsuit;": "♦",
      "&diams;": "♦",
      "&die;": "¨",
      "&digamma;": "ϝ",
      "&disin;": "⋲",
      "&div;": "÷",
      "&divide": "÷",
      "&divide;": "÷",
      "&divideontimes;": "⋇",
      "&divonx;": "⋇",
      "&djcy;": "ђ",
      "&dlcorn;": "⌞",
      "&dlcrop;": "⌍",
      "&dollar;": "$",
      "&dopf;": "𝕕",
      "&dot;": "˙",
      "&doteq;": "≐",
      "&doteqdot;": "≑",
      "&dotminus;": "∸",
      "&dotplus;": "∔",
      "&dotsquare;": "⊡",
      "&doublebarwedge;": "⌆",
      "&downarrow;": "↓",
      "&downdownarrows;": "⇊",
      "&downharpoonleft;": "⇃",
      "&downharpoonright;": "⇂",
      "&drbkarow;": "⤐",
      "&drcorn;": "⌟",
      "&drcrop;": "⌌",
      "&dscr;": "𝒹",
      "&dscy;": "ѕ",
      "&dsol;": "⧶",
      "&dstrok;": "đ",
      "&dtdot;": "⋱",
      "&dtri;": "▿",
      "&dtrif;": "▾",
      "&duarr;": "⇵",
      "&duhar;": "⥯",
      "&dwangle;": "⦦",
      "&dzcy;": "џ",
      "&dzigrarr;": "⟿",
      "&eDDot;": "⩷",
      "&eDot;": "≑",
      "&eacute": "é",
      "&eacute;": "é",
      "&easter;": "⩮",
      "&ecaron;": "ě",
      "&ecir;": "≖",
      "&ecirc": "ê",
      "&ecirc;": "ê",
      "&ecolon;": "≕",
      "&ecy;": "э",
      "&edot;": "ė",
      "&ee;": "ⅇ",
      "&efDot;": "≒",
      "&efr;": "𝔢",
      "&eg;": "⪚",
      "&egrave": "è",
      "&egrave;": "è",
      "&egs;": "⪖",
      "&egsdot;": "⪘",
      "&el;": "⪙",
      "&elinters;": "⏧",
      "&ell;": "ℓ",
      "&els;": "⪕",
      "&elsdot;": "⪗",
      "&emacr;": "ē",
      "&empty;": "∅",
      "&emptyset;": "∅",
      "&emptyv;": "∅",
      "&emsp13;": " ",
      "&emsp14;": " ",
      "&emsp;": " ",
      "&eng;": "ŋ",
      "&ensp;": " ",
      "&eogon;": "ę",
      "&eopf;": "𝕖",
      "&epar;": "⋕",
      "&eparsl;": "⧣",
      "&eplus;": "⩱",
      "&epsi;": "ε",
      "&epsilon;": "ε",
      "&epsiv;": "ϵ",
      "&eqcirc;": "≖",
      "&eqcolon;": "≕",
      "&eqsim;": "≂",
      "&eqslantgtr;": "⪖",
      "&eqslantless;": "⪕",
      "&equals;": "=",
      "&equest;": "≟",
      "&equiv;": "≡",
      "&equivDD;": "⩸",
      "&eqvparsl;": "⧥",
      "&erDot;": "≓",
      "&erarr;": "⥱",
      "&escr;": "ℯ",
      "&esdot;": "≐",
      "&esim;": "≂",
      "&eta;": "η",
      "&eth": "ð",
      "&eth;": "ð",
      "&euml": "ë",
      "&euml;": "ë",
      "&euro;": "€",
      "&excl;": "!",
      "&exist;": "∃",
      "&expectation;": "ℰ",
      "&exponentiale;": "ⅇ",
      "&fallingdotseq;": "≒",
      "&fcy;": "ф",
      "&female;": "♀",
      "&ffilig;": "ﬃ",
      "&fflig;": "ﬀ",
      "&ffllig;": "ﬄ",
      "&ffr;": "𝔣",
      "&filig;": "ﬁ",
      "&fjlig;": "fj",
      "&flat;": "♭",
      "&fllig;": "ﬂ",
      "&fltns;": "▱",
      "&fnof;": "ƒ",
      "&fopf;": "𝕗",
      "&forall;": "∀",
      "&fork;": "⋔",
      "&forkv;": "⫙",
      "&fpartint;": "⨍",
      "&frac12": "½",
      "&frac12;": "½",
      "&frac13;": "⅓",
      "&frac14": "¼",
      "&frac14;": "¼",
      "&frac15;": "⅕",
      "&frac16;": "⅙",
      "&frac18;": "⅛",
      "&frac23;": "⅔",
      "&frac25;": "⅖",
      "&frac34": "¾",
      "&frac34;": "¾",
      "&frac35;": "⅗",
      "&frac38;": "⅜",
      "&frac45;": "⅘",
      "&frac56;": "⅚",
      "&frac58;": "⅝",
      "&frac78;": "⅞",
      "&frasl;": "⁄",
      "&frown;": "⌢",
      "&fscr;": "𝒻",
      "&gE;": "≧",
      "&gEl;": "⪌",
      "&gacute;": "ǵ",
      "&gamma;": "γ",
      "&gammad;": "ϝ",
      "&gap;": "⪆",
      "&gbreve;": "ğ",
      "&gcirc;": "ĝ",
      "&gcy;": "г",
      "&gdot;": "ġ",
      "&ge;": "≥",
      "&gel;": "⋛",
      "&geq;": "≥",
      "&geqq;": "≧",
      "&geqslant;": "⩾",
      "&ges;": "⩾",
      "&gescc;": "⪩",
      "&gesdot;": "⪀",
      "&gesdoto;": "⪂",
      "&gesdotol;": "⪄",
      "&gesl;": "⋛︀",
      "&gesles;": "⪔",
      "&gfr;": "𝔤",
      "&gg;": "≫",
      "&ggg;": "⋙",
      "&gimel;": "ℷ",
      "&gjcy;": "ѓ",
      "&gl;": "≷",
      "&glE;": "⪒",
      "&gla;": "⪥",
      "&glj;": "⪤",
      "&gnE;": "≩",
      "&gnap;": "⪊",
      "&gnapprox;": "⪊",
      "&gne;": "⪈",
      "&gneq;": "⪈",
      "&gneqq;": "≩",
      "&gnsim;": "⋧",
      "&gopf;": "𝕘",
      "&grave;": "`",
      "&gscr;": "ℊ",
      "&gsim;": "≳",
      "&gsime;": "⪎",
      "&gsiml;": "⪐",
      "&gt": ">",
      "&gt;": ">",
      "&gtcc;": "⪧",
      "&gtcir;": "⩺",
      "&gtdot;": "⋗",
      "&gtlPar;": "⦕",
      "&gtquest;": "⩼",
      "&gtrapprox;": "⪆",
      "&gtrarr;": "⥸",
      "&gtrdot;": "⋗",
      "&gtreqless;": "⋛",
      "&gtreqqless;": "⪌",
      "&gtrless;": "≷",
      "&gtrsim;": "≳",
      "&gvertneqq;": "≩︀",
      "&gvnE;": "≩︀",
      "&hArr;": "⇔",
      "&hairsp;": " ",
      "&half;": "½",
      "&hamilt;": "ℋ",
      "&hardcy;": "ъ",
      "&harr;": "↔",
      "&harrcir;": "⥈",
      "&harrw;": "↭",
      "&hbar;": "ℏ",
      "&hcirc;": "ĥ",
      "&hearts;": "♥",
      "&heartsuit;": "♥",
      "&hellip;": "…",
      "&hercon;": "⊹",
      "&hfr;": "𝔥",
      "&hksearow;": "⤥",
      "&hkswarow;": "⤦",
      "&hoarr;": "⇿",
      "&homtht;": "∻",
      "&hookleftarrow;": "↩",
      "&hookrightarrow;": "↪",
      "&hopf;": "𝕙",
      "&horbar;": "―",
      "&hscr;": "𝒽",
      "&hslash;": "ℏ",
      "&hstrok;": "ħ",
      "&hybull;": "⁃",
      "&hyphen;": "‐",
      "&iacute": "í",
      "&iacute;": "í",
      "&ic;": "⁣",
      "&icirc": "î",
      "&icirc;": "î",
      "&icy;": "и",
      "&iecy;": "е",
      "&iexcl": "¡",
      "&iexcl;": "¡",
      "&iff;": "⇔",
      "&ifr;": "𝔦",
      "&igrave": "ì",
      "&igrave;": "ì",
      "&ii;": "ⅈ",
      "&iiiint;": "⨌",
      "&iiint;": "∭",
      "&iinfin;": "⧜",
      "&iiota;": "℩",
      "&ijlig;": "ĳ",
      "&imacr;": "ī",
      "&image;": "ℑ",
      "&imagline;": "ℐ",
      "&imagpart;": "ℑ",
      "&imath;": "ı",
      "&imof;": "⊷",
      "&imped;": "Ƶ",
      "&in;": "∈",
      "&incare;": "℅",
      "&infin;": "∞",
      "&infintie;": "⧝",
      "&inodot;": "ı",
      "&int;": "∫",
      "&intcal;": "⊺",
      "&integers;": "ℤ",
      "&intercal;": "⊺",
      "&intlarhk;": "⨗",
      "&intprod;": "⨼",
      "&iocy;": "ё",
      "&iogon;": "į",
      "&iopf;": "𝕚",
      "&iota;": "ι",
      "&iprod;": "⨼",
      "&iquest": "¿",
      "&iquest;": "¿",
      "&iscr;": "𝒾",
      "&isin;": "∈",
      "&isinE;": "⋹",
      "&isindot;": "⋵",
      "&isins;": "⋴",
      "&isinsv;": "⋳",
      "&isinv;": "∈",
      "&it;": "⁢",
      "&itilde;": "ĩ",
      "&iukcy;": "і",
      "&iuml": "ï",
      "&iuml;": "ï",
      "&jcirc;": "ĵ",
      "&jcy;": "й",
      "&jfr;": "𝔧",
      "&jmath;": "ȷ",
      "&jopf;": "𝕛",
      "&jscr;": "𝒿",
      "&jsercy;": "ј",
      "&jukcy;": "є",
      "&kappa;": "κ",
      "&kappav;": "ϰ",
      "&kcedil;": "ķ",
      "&kcy;": "к",
      "&kfr;": "𝔨",
      "&kgreen;": "ĸ",
      "&khcy;": "х",
      "&kjcy;": "ќ",
      "&kopf;": "𝕜",
      "&kscr;": "𝓀",
      "&lAarr;": "⇚",
      "&lArr;": "⇐",
      "&lAtail;": "⤛",
      "&lBarr;": "⤎",
      "&lE;": "≦",
      "&lEg;": "⪋",
      "&lHar;": "⥢",
      "&lacute;": "ĺ",
      "&laemptyv;": "⦴",
      "&lagran;": "ℒ",
      "&lambda;": "λ",
      "&lang;": "⟨",
      "&langd;": "⦑",
      "&langle;": "⟨",
      "&lap;": "⪅",
      "&laquo": "«",
      "&laquo;": "«",
      "&larr;": "←",
      "&larrb;": "⇤",
      "&larrbfs;": "⤟",
      "&larrfs;": "⤝",
      "&larrhk;": "↩",
      "&larrlp;": "↫",
      "&larrpl;": "⤹",
      "&larrsim;": "⥳",
      "&larrtl;": "↢",
      "&lat;": "⪫",
      "&latail;": "⤙",
      "&late;": "⪭",
      "&lates;": "⪭︀",
      "&lbarr;": "⤌",
      "&lbbrk;": "❲",
      "&lbrace;": "{",
      "&lbrack;": "[",
      "&lbrke;": "⦋",
      "&lbrksld;": "⦏",
      "&lbrkslu;": "⦍",
      "&lcaron;": "ľ",
      "&lcedil;": "ļ",
      "&lceil;": "⌈",
      "&lcub;": "{",
      "&lcy;": "л",
      "&ldca;": "⤶",
      "&ldquo;": "“",
      "&ldquor;": "„",
      "&ldrdhar;": "⥧",
      "&ldrushar;": "⥋",
      "&ldsh;": "↲",
      "&le;": "≤",
      "&leftarrow;": "←",
      "&leftarrowtail;": "↢",
      "&leftharpoondown;": "↽",
      "&leftharpoonup;": "↼",
      "&leftleftarrows;": "⇇",
      "&leftrightarrow;": "↔",
      "&leftrightarrows;": "⇆",
      "&leftrightharpoons;": "⇋",
      "&leftrightsquigarrow;": "↭",
      "&leftthreetimes;": "⋋",
      "&leg;": "⋚",
      "&leq;": "≤",
      "&leqq;": "≦",
      "&leqslant;": "⩽",
      "&les;": "⩽",
      "&lescc;": "⪨",
      "&lesdot;": "⩿",
      "&lesdoto;": "⪁",
      "&lesdotor;": "⪃",
      "&lesg;": "⋚︀",
      "&lesges;": "⪓",
      "&lessapprox;": "⪅",
      "&lessdot;": "⋖",
      "&lesseqgtr;": "⋚",
      "&lesseqqgtr;": "⪋",
      "&lessgtr;": "≶",
      "&lesssim;": "≲",
      "&lfisht;": "⥼",
      "&lfloor;": "⌊",
      "&lfr;": "𝔩",
      "&lg;": "≶",
      "&lgE;": "⪑",
      "&lhard;": "↽",
      "&lharu;": "↼",
      "&lharul;": "⥪",
      "&lhblk;": "▄",
      "&ljcy;": "љ",
      "&ll;": "≪",
      "&llarr;": "⇇",
      "&llcorner;": "⌞",
      "&llhard;": "⥫",
      "&lltri;": "◺",
      "&lmidot;": "ŀ",
      "&lmoust;": "⎰",
      "&lmoustache;": "⎰",
      "&lnE;": "≨",
      "&lnap;": "⪉",
      "&lnapprox;": "⪉",
      "&lne;": "⪇",
      "&lneq;": "⪇",
      "&lneqq;": "≨",
      "&lnsim;": "⋦",
      "&loang;": "⟬",
      "&loarr;": "⇽",
      "&lobrk;": "⟦",
      "&longleftarrow;": "⟵",
      "&longleftrightarrow;": "⟷",
      "&longmapsto;": "⟼",
      "&longrightarrow;": "⟶",
      "&looparrowleft;": "↫",
      "&looparrowright;": "↬",
      "&lopar;": "⦅",
      "&lopf;": "𝕝",
      "&loplus;": "⨭",
      "&lotimes;": "⨴",
      "&lowast;": "∗",
      "&lowbar;": "_",
      "&loz;": "◊",
      "&lozenge;": "◊",
      "&lozf;": "⧫",
      "&lpar;": "(",
      "&lparlt;": "⦓",
      "&lrarr;": "⇆",
      "&lrcorner;": "⌟",
      "&lrhar;": "⇋",
      "&lrhard;": "⥭",
      "&lrm;": "‎",
      "&lrtri;": "⊿",
      "&lsaquo;": "‹",
      "&lscr;": "𝓁",
      "&lsh;": "↰",
      "&lsim;": "≲",
      "&lsime;": "⪍",
      "&lsimg;": "⪏",
      "&lsqb;": "[",
      "&lsquo;": "‘",
      "&lsquor;": "‚",
      "&lstrok;": "ł",
      "&lt": "<",
      "&lt;": "<",
      "&ltcc;": "⪦",
      "&ltcir;": "⩹",
      "&ltdot;": "⋖",
      "&lthree;": "⋋",
      "&ltimes;": "⋉",
      "&ltlarr;": "⥶",
      "&ltquest;": "⩻",
      "&ltrPar;": "⦖",
      "&ltri;": "◃",
      "&ltrie;": "⊴",
      "&ltrif;": "◂",
      "&lurdshar;": "⥊",
      "&luruhar;": "⥦",
      "&lvertneqq;": "≨︀",
      "&lvnE;": "≨︀",
      "&mDDot;": "∺",
      "&macr": "¯",
      "&macr;": "¯",
      "&male;": "♂",
      "&malt;": "✠",
      "&maltese;": "✠",
      "&map;": "↦",
      "&mapsto;": "↦",
      "&mapstodown;": "↧",
      "&mapstoleft;": "↤",
      "&mapstoup;": "↥",
      "&marker;": "▮",
      "&mcomma;": "⨩",
      "&mcy;": "м",
      "&mdash;": "—",
      "&measuredangle;": "∡",
      "&mfr;": "𝔪",
      "&mho;": "℧",
      "&micro": "µ",
      "&micro;": "µ",
      "&mid;": "∣",
      "&midast;": "*",
      "&midcir;": "⫰",
      "&middot": "·",
      "&middot;": "·",
      "&minus;": "−",
      "&minusb;": "⊟",
      "&minusd;": "∸",
      "&minusdu;": "⨪",
      "&mlcp;": "⫛",
      "&mldr;": "…",
      "&mnplus;": "∓",
      "&models;": "⊧",
      "&mopf;": "𝕞",
      "&mp;": "∓",
      "&mscr;": "𝓂",
      "&mstpos;": "∾",
      "&mu;": "μ",
      "&multimap;": "⊸",
      "&mumap;": "⊸",
      "&nGg;": "⋙̸",
      "&nGt;": "≫⃒",
      "&nGtv;": "≫̸",
      "&nLeftarrow;": "⇍",
      "&nLeftrightarrow;": "⇎",
      "&nLl;": "⋘̸",
      "&nLt;": "≪⃒",
      "&nLtv;": "≪̸",
      "&nRightarrow;": "⇏",
      "&nVDash;": "⊯",
      "&nVdash;": "⊮",
      "&nabla;": "∇",
      "&nacute;": "ń",
      "&nang;": "∠⃒",
      "&nap;": "≉",
      "&napE;": "⩰̸",
      "&napid;": "≋̸",
      "&napos;": "ŉ",
      "&napprox;": "≉",
      "&natur;": "♮",
      "&natural;": "♮",
      "&naturals;": "ℕ",
      "&nbsp": " ",
      "&nbsp;": " ",
      "&nbump;": "≎̸",
      "&nbumpe;": "≏̸",
      "&ncap;": "⩃",
      "&ncaron;": "ň",
      "&ncedil;": "ņ",
      "&ncong;": "≇",
      "&ncongdot;": "⩭̸",
      "&ncup;": "⩂",
      "&ncy;": "н",
      "&ndash;": "–",
      "&ne;": "≠",
      "&neArr;": "⇗",
      "&nearhk;": "⤤",
      "&nearr;": "↗",
      "&nearrow;": "↗",
      "&nedot;": "≐̸",
      "&nequiv;": "≢",
      "&nesear;": "⤨",
      "&nesim;": "≂̸",
      "&nexist;": "∄",
      "&nexists;": "∄",
      "&nfr;": "𝔫",
      "&ngE;": "≧̸",
      "&nge;": "≱",
      "&ngeq;": "≱",
      "&ngeqq;": "≧̸",
      "&ngeqslant;": "⩾̸",
      "&nges;": "⩾̸",
      "&ngsim;": "≵",
      "&ngt;": "≯",
      "&ngtr;": "≯",
      "&nhArr;": "⇎",
      "&nharr;": "↮",
      "&nhpar;": "⫲",
      "&ni;": "∋",
      "&nis;": "⋼",
      "&nisd;": "⋺",
      "&niv;": "∋",
      "&njcy;": "њ",
      "&nlArr;": "⇍",
      "&nlE;": "≦̸",
      "&nlarr;": "↚",
      "&nldr;": "‥",
      "&nle;": "≰",
      "&nleftarrow;": "↚",
      "&nleftrightarrow;": "↮",
      "&nleq;": "≰",
      "&nleqq;": "≦̸",
      "&nleqslant;": "⩽̸",
      "&nles;": "⩽̸",
      "&nless;": "≮",
      "&nlsim;": "≴",
      "&nlt;": "≮",
      "&nltri;": "⋪",
      "&nltrie;": "⋬",
      "&nmid;": "∤",
      "&nopf;": "𝕟",
      "&not": "¬",
      "&not;": "¬",
      "&notin;": "∉",
      "&notinE;": "⋹̸",
      "&notindot;": "⋵̸",
      "&notinva;": "∉",
      "&notinvb;": "⋷",
      "&notinvc;": "⋶",
      "&notni;": "∌",
      "&notniva;": "∌",
      "&notnivb;": "⋾",
      "&notnivc;": "⋽",
      "&npar;": "∦",
      "&nparallel;": "∦",
      "&nparsl;": "⫽⃥",
      "&npart;": "∂̸",
      "&npolint;": "⨔",
      "&npr;": "⊀",
      "&nprcue;": "⋠",
      "&npre;": "⪯̸",
      "&nprec;": "⊀",
      "&npreceq;": "⪯̸",
      "&nrArr;": "⇏",
      "&nrarr;": "↛",
      "&nrarrc;": "⤳̸",
      "&nrarrw;": "↝̸",
      "&nrightarrow;": "↛",
      "&nrtri;": "⋫",
      "&nrtrie;": "⋭",
      "&nsc;": "⊁",
      "&nsccue;": "⋡",
      "&nsce;": "⪰̸",
      "&nscr;": "𝓃",
      "&nshortmid;": "∤",
      "&nshortparallel;": "∦",
      "&nsim;": "≁",
      "&nsime;": "≄",
      "&nsimeq;": "≄",
      "&nsmid;": "∤",
      "&nspar;": "∦",
      "&nsqsube;": "⋢",
      "&nsqsupe;": "⋣",
      "&nsub;": "⊄",
      "&nsubE;": "⫅̸",
      "&nsube;": "⊈",
      "&nsubset;": "⊂⃒",
      "&nsubseteq;": "⊈",
      "&nsubseteqq;": "⫅̸",
      "&nsucc;": "⊁",
      "&nsucceq;": "⪰̸",
      "&nsup;": "⊅",
      "&nsupE;": "⫆̸",
      "&nsupe;": "⊉",
      "&nsupset;": "⊃⃒",
      "&nsupseteq;": "⊉",
      "&nsupseteqq;": "⫆̸",
      "&ntgl;": "≹",
      "&ntilde": "ñ",
      "&ntilde;": "ñ",
      "&ntlg;": "≸",
      "&ntriangleleft;": "⋪",
      "&ntrianglelefteq;": "⋬",
      "&ntriangleright;": "⋫",
      "&ntrianglerighteq;": "⋭",
      "&nu;": "ν",
      "&num;": "#",
      "&numero;": "№",
      "&numsp;": " ",
      "&nvDash;": "⊭",
      "&nvHarr;": "⤄",
      "&nvap;": "≍⃒",
      "&nvdash;": "⊬",
      "&nvge;": "≥⃒",
      "&nvgt;": ">⃒",
      "&nvinfin;": "⧞",
      "&nvlArr;": "⤂",
      "&nvle;": "≤⃒",
      "&nvlt;": "<⃒",
      "&nvltrie;": "⊴⃒",
      "&nvrArr;": "⤃",
      "&nvrtrie;": "⊵⃒",
      "&nvsim;": "∼⃒",
      "&nwArr;": "⇖",
      "&nwarhk;": "⤣",
      "&nwarr;": "↖",
      "&nwarrow;": "↖",
      "&nwnear;": "⤧",
      "&oS;": "Ⓢ",
      "&oacute": "ó",
      "&oacute;": "ó",
      "&oast;": "⊛",
      "&ocir;": "⊚",
      "&ocirc": "ô",
      "&ocirc;": "ô",
      "&ocy;": "о",
      "&odash;": "⊝",
      "&odblac;": "ő",
      "&odiv;": "⨸",
      "&odot;": "⊙",
      "&odsold;": "⦼",
      "&oelig;": "œ",
      "&ofcir;": "⦿",
      "&ofr;": "𝔬",
      "&ogon;": "˛",
      "&ograve": "ò",
      "&ograve;": "ò",
      "&ogt;": "⧁",
      "&ohbar;": "⦵",
      "&ohm;": "Ω",
      "&oint;": "∮",
      "&olarr;": "↺",
      "&olcir;": "⦾",
      "&olcross;": "⦻",
      "&oline;": "‾",
      "&olt;": "⧀",
      "&omacr;": "ō",
      "&omega;": "ω",
      "&omicron;": "ο",
      "&omid;": "⦶",
      "&ominus;": "⊖",
      "&oopf;": "𝕠",
      "&opar;": "⦷",
      "&operp;": "⦹",
      "&oplus;": "⊕",
      "&or;": "∨",
      "&orarr;": "↻",
      "&ord;": "⩝",
      "&order;": "ℴ",
      "&orderof;": "ℴ",
      "&ordf": "ª",
      "&ordf;": "ª",
      "&ordm": "º",
      "&ordm;": "º",
      "&origof;": "⊶",
      "&oror;": "⩖",
      "&orslope;": "⩗",
      "&orv;": "⩛",
      "&oscr;": "ℴ",
      "&oslash": "ø",
      "&oslash;": "ø",
      "&osol;": "⊘",
      "&otilde": "õ",
      "&otilde;": "õ",
      "&otimes;": "⊗",
      "&otimesas;": "⨶",
      "&ouml": "ö",
      "&ouml;": "ö",
      "&ovbar;": "⌽",
      "&par;": "∥",
      "&para": "¶",
      "&para;": "¶",
      "&parallel;": "∥",
      "&parsim;": "⫳",
      "&parsl;": "⫽",
      "&part;": "∂",
      "&pcy;": "п",
      "&percnt;": "%",
      "&period;": ".",
      "&permil;": "‰",
      "&perp;": "⊥",
      "&pertenk;": "‱",
      "&pfr;": "𝔭",
      "&phi;": "φ",
      "&phiv;": "ϕ",
      "&phmmat;": "ℳ",
      "&phone;": "☎",
      "&pi;": "π",
      "&pitchfork;": "⋔",
      "&piv;": "ϖ",
      "&planck;": "ℏ",
      "&planckh;": "ℎ",
      "&plankv;": "ℏ",
      "&plus;": "+",
      "&plusacir;": "⨣",
      "&plusb;": "⊞",
      "&pluscir;": "⨢",
      "&plusdo;": "∔",
      "&plusdu;": "⨥",
      "&pluse;": "⩲",
      "&plusmn": "±",
      "&plusmn;": "±",
      "&plussim;": "⨦",
      "&plustwo;": "⨧",
      "&pm;": "±",
      "&pointint;": "⨕",
      "&popf;": "𝕡",
      "&pound": "£",
      "&pound;": "£",
      "&pr;": "≺",
      "&prE;": "⪳",
      "&prap;": "⪷",
      "&prcue;": "≼",
      "&pre;": "⪯",
      "&prec;": "≺",
      "&precapprox;": "⪷",
      "&preccurlyeq;": "≼",
      "&preceq;": "⪯",
      "&precnapprox;": "⪹",
      "&precneqq;": "⪵",
      "&precnsim;": "⋨",
      "&precsim;": "≾",
      "&prime;": "′",
      "&primes;": "ℙ",
      "&prnE;": "⪵",
      "&prnap;": "⪹",
      "&prnsim;": "⋨",
      "&prod;": "∏",
      "&profalar;": "⌮",
      "&profline;": "⌒",
      "&profsurf;": "⌓",
      "&prop;": "∝",
      "&propto;": "∝",
      "&prsim;": "≾",
      "&prurel;": "⊰",
      "&pscr;": "𝓅",
      "&psi;": "ψ",
      "&puncsp;": " ",
      "&qfr;": "𝔮",
      "&qint;": "⨌",
      "&qopf;": "𝕢",
      "&qprime;": "⁗",
      "&qscr;": "𝓆",
      "&quaternions;": "ℍ",
      "&quatint;": "⨖",
      "&quest;": "?",
      "&questeq;": "≟",
      "&quot": '"',
      "&quot;": '"',
      "&rAarr;": "⇛",
      "&rArr;": "⇒",
      "&rAtail;": "⤜",
      "&rBarr;": "⤏",
      "&rHar;": "⥤",
      "&race;": "∽̱",
      "&racute;": "ŕ",
      "&radic;": "√",
      "&raemptyv;": "⦳",
      "&rang;": "⟩",
      "&rangd;": "⦒",
      "&range;": "⦥",
      "&rangle;": "⟩",
      "&raquo": "»",
      "&raquo;": "»",
      "&rarr;": "→",
      "&rarrap;": "⥵",
      "&rarrb;": "⇥",
      "&rarrbfs;": "⤠",
      "&rarrc;": "⤳",
      "&rarrfs;": "⤞",
      "&rarrhk;": "↪",
      "&rarrlp;": "↬",
      "&rarrpl;": "⥅",
      "&rarrsim;": "⥴",
      "&rarrtl;": "↣",
      "&rarrw;": "↝",
      "&ratail;": "⤚",
      "&ratio;": "∶",
      "&rationals;": "ℚ",
      "&rbarr;": "⤍",
      "&rbbrk;": "❳",
      "&rbrace;": "}",
      "&rbrack;": "]",
      "&rbrke;": "⦌",
      "&rbrksld;": "⦎",
      "&rbrkslu;": "⦐",
      "&rcaron;": "ř",
      "&rcedil;": "ŗ",
      "&rceil;": "⌉",
      "&rcub;": "}",
      "&rcy;": "р",
      "&rdca;": "⤷",
      "&rdldhar;": "⥩",
      "&rdquo;": "”",
      "&rdquor;": "”",
      "&rdsh;": "↳",
      "&real;": "ℜ",
      "&realine;": "ℛ",
      "&realpart;": "ℜ",
      "&reals;": "ℝ",
      "&rect;": "▭",
      "&reg": "®",
      "&reg;": "®",
      "&rfisht;": "⥽",
      "&rfloor;": "⌋",
      "&rfr;": "𝔯",
      "&rhard;": "⇁",
      "&rharu;": "⇀",
      "&rharul;": "⥬",
      "&rho;": "ρ",
      "&rhov;": "ϱ",
      "&rightarrow;": "→",
      "&rightarrowtail;": "↣",
      "&rightharpoondown;": "⇁",
      "&rightharpoonup;": "⇀",
      "&rightleftarrows;": "⇄",
      "&rightleftharpoons;": "⇌",
      "&rightrightarrows;": "⇉",
      "&rightsquigarrow;": "↝",
      "&rightthreetimes;": "⋌",
      "&ring;": "˚",
      "&risingdotseq;": "≓",
      "&rlarr;": "⇄",
      "&rlhar;": "⇌",
      "&rlm;": "‏",
      "&rmoust;": "⎱",
      "&rmoustache;": "⎱",
      "&rnmid;": "⫮",
      "&roang;": "⟭",
      "&roarr;": "⇾",
      "&robrk;": "⟧",
      "&ropar;": "⦆",
      "&ropf;": "𝕣",
      "&roplus;": "⨮",
      "&rotimes;": "⨵",
      "&rpar;": ")",
      "&rpargt;": "⦔",
      "&rppolint;": "⨒",
      "&rrarr;": "⇉",
      "&rsaquo;": "›",
      "&rscr;": "𝓇",
      "&rsh;": "↱",
      "&rsqb;": "]",
      "&rsquo;": "’",
      "&rsquor;": "’",
      "&rthree;": "⋌",
      "&rtimes;": "⋊",
      "&rtri;": "▹",
      "&rtrie;": "⊵",
      "&rtrif;": "▸",
      "&rtriltri;": "⧎",
      "&ruluhar;": "⥨",
      "&rx;": "℞",
      "&sacute;": "ś",
      "&sbquo;": "‚",
      "&sc;": "≻",
      "&scE;": "⪴",
      "&scap;": "⪸",
      "&scaron;": "š",
      "&sccue;": "≽",
      "&sce;": "⪰",
      "&scedil;": "ş",
      "&scirc;": "ŝ",
      "&scnE;": "⪶",
      "&scnap;": "⪺",
      "&scnsim;": "⋩",
      "&scpolint;": "⨓",
      "&scsim;": "≿",
      "&scy;": "с",
      "&sdot;": "⋅",
      "&sdotb;": "⊡",
      "&sdote;": "⩦",
      "&seArr;": "⇘",
      "&searhk;": "⤥",
      "&searr;": "↘",
      "&searrow;": "↘",
      "&sect": "§",
      "&sect;": "§",
      "&semi;": ";",
      "&seswar;": "⤩",
      "&setminus;": "∖",
      "&setmn;": "∖",
      "&sext;": "✶",
      "&sfr;": "𝔰",
      "&sfrown;": "⌢",
      "&sharp;": "♯",
      "&shchcy;": "щ",
      "&shcy;": "ш",
      "&shortmid;": "∣",
      "&shortparallel;": "∥",
      "&shy": "­",
      "&shy;": "­",
      "&sigma;": "σ",
      "&sigmaf;": "ς",
      "&sigmav;": "ς",
      "&sim;": "∼",
      "&simdot;": "⩪",
      "&sime;": "≃",
      "&simeq;": "≃",
      "&simg;": "⪞",
      "&simgE;": "⪠",
      "&siml;": "⪝",
      "&simlE;": "⪟",
      "&simne;": "≆",
      "&simplus;": "⨤",
      "&simrarr;": "⥲",
      "&slarr;": "←",
      "&smallsetminus;": "∖",
      "&smashp;": "⨳",
      "&smeparsl;": "⧤",
      "&smid;": "∣",
      "&smile;": "⌣",
      "&smt;": "⪪",
      "&smte;": "⪬",
      "&smtes;": "⪬︀",
      "&softcy;": "ь",
      "&sol;": "/",
      "&solb;": "⧄",
      "&solbar;": "⌿",
      "&sopf;": "𝕤",
      "&spades;": "♠",
      "&spadesuit;": "♠",
      "&spar;": "∥",
      "&sqcap;": "⊓",
      "&sqcaps;": "⊓︀",
      "&sqcup;": "⊔",
      "&sqcups;": "⊔︀",
      "&sqsub;": "⊏",
      "&sqsube;": "⊑",
      "&sqsubset;": "⊏",
      "&sqsubseteq;": "⊑",
      "&sqsup;": "⊐",
      "&sqsupe;": "⊒",
      "&sqsupset;": "⊐",
      "&sqsupseteq;": "⊒",
      "&squ;": "□",
      "&square;": "□",
      "&squarf;": "▪",
      "&squf;": "▪",
      "&srarr;": "→",
      "&sscr;": "𝓈",
      "&ssetmn;": "∖",
      "&ssmile;": "⌣",
      "&sstarf;": "⋆",
      "&star;": "☆",
      "&starf;": "★",
      "&straightepsilon;": "ϵ",
      "&straightphi;": "ϕ",
      "&strns;": "¯",
      "&sub;": "⊂",
      "&subE;": "⫅",
      "&subdot;": "⪽",
      "&sube;": "⊆",
      "&subedot;": "⫃",
      "&submult;": "⫁",
      "&subnE;": "⫋",
      "&subne;": "⊊",
      "&subplus;": "⪿",
      "&subrarr;": "⥹",
      "&subset;": "⊂",
      "&subseteq;": "⊆",
      "&subseteqq;": "⫅",
      "&subsetneq;": "⊊",
      "&subsetneqq;": "⫋",
      "&subsim;": "⫇",
      "&subsub;": "⫕",
      "&subsup;": "⫓",
      "&succ;": "≻",
      "&succapprox;": "⪸",
      "&succcurlyeq;": "≽",
      "&succeq;": "⪰",
      "&succnapprox;": "⪺",
      "&succneqq;": "⪶",
      "&succnsim;": "⋩",
      "&succsim;": "≿",
      "&sum;": "∑",
      "&sung;": "♪",
      "&sup1": "¹",
      "&sup1;": "¹",
      "&sup2": "²",
      "&sup2;": "²",
      "&sup3": "³",
      "&sup3;": "³",
      "&sup;": "⊃",
      "&supE;": "⫆",
      "&supdot;": "⪾",
      "&supdsub;": "⫘",
      "&supe;": "⊇",
      "&supedot;": "⫄",
      "&suphsol;": "⟉",
      "&suphsub;": "⫗",
      "&suplarr;": "⥻",
      "&supmult;": "⫂",
      "&supnE;": "⫌",
      "&supne;": "⊋",
      "&supplus;": "⫀",
      "&supset;": "⊃",
      "&supseteq;": "⊇",
      "&supseteqq;": "⫆",
      "&supsetneq;": "⊋",
      "&supsetneqq;": "⫌",
      "&supsim;": "⫈",
      "&supsub;": "⫔",
      "&supsup;": "⫖",
      "&swArr;": "⇙",
      "&swarhk;": "⤦",
      "&swarr;": "↙",
      "&swarrow;": "↙",
      "&swnwar;": "⤪",
      "&szlig": "ß",
      "&szlig;": "ß",
      "&target;": "⌖",
      "&tau;": "τ",
      "&tbrk;": "⎴",
      "&tcaron;": "ť",
      "&tcedil;": "ţ",
      "&tcy;": "т",
      "&tdot;": "⃛",
      "&telrec;": "⌕",
      "&tfr;": "𝔱",
      "&there4;": "∴",
      "&therefore;": "∴",
      "&theta;": "θ",
      "&thetasym;": "ϑ",
      "&thetav;": "ϑ",
      "&thickapprox;": "≈",
      "&thicksim;": "∼",
      "&thinsp;": " ",
      "&thkap;": "≈",
      "&thksim;": "∼",
      "&thorn": "þ",
      "&thorn;": "þ",
      "&tilde;": "˜",
      "&times": "×",
      "&times;": "×",
      "&timesb;": "⊠",
      "&timesbar;": "⨱",
      "&timesd;": "⨰",
      "&tint;": "∭",
      "&toea;": "⤨",
      "&top;": "⊤",
      "&topbot;": "⌶",
      "&topcir;": "⫱",
      "&topf;": "𝕥",
      "&topfork;": "⫚",
      "&tosa;": "⤩",
      "&tprime;": "‴",
      "&trade;": "™",
      "&triangle;": "▵",
      "&triangledown;": "▿",
      "&triangleleft;": "◃",
      "&trianglelefteq;": "⊴",
      "&triangleq;": "≜",
      "&triangleright;": "▹",
      "&trianglerighteq;": "⊵",
      "&tridot;": "◬",
      "&trie;": "≜",
      "&triminus;": "⨺",
      "&triplus;": "⨹",
      "&trisb;": "⧍",
      "&tritime;": "⨻",
      "&trpezium;": "⏢",
      "&tscr;": "𝓉",
      "&tscy;": "ц",
      "&tshcy;": "ћ",
      "&tstrok;": "ŧ",
      "&twixt;": "≬",
      "&twoheadleftarrow;": "↞",
      "&twoheadrightarrow;": "↠",
      "&uArr;": "⇑",
      "&uHar;": "⥣",
      "&uacute": "ú",
      "&uacute;": "ú",
      "&uarr;": "↑",
      "&ubrcy;": "ў",
      "&ubreve;": "ŭ",
      "&ucirc": "û",
      "&ucirc;": "û",
      "&ucy;": "у",
      "&udarr;": "⇅",
      "&udblac;": "ű",
      "&udhar;": "⥮",
      "&ufisht;": "⥾",
      "&ufr;": "𝔲",
      "&ugrave": "ù",
      "&ugrave;": "ù",
      "&uharl;": "↿",
      "&uharr;": "↾",
      "&uhblk;": "▀",
      "&ulcorn;": "⌜",
      "&ulcorner;": "⌜",
      "&ulcrop;": "⌏",
      "&ultri;": "◸",
      "&umacr;": "ū",
      "&uml": "¨",
      "&uml;": "¨",
      "&uogon;": "ų",
      "&uopf;": "𝕦",
      "&uparrow;": "↑",
      "&updownarrow;": "↕",
      "&upharpoonleft;": "↿",
      "&upharpoonright;": "↾",
      "&uplus;": "⊎",
      "&upsi;": "υ",
      "&upsih;": "ϒ",
      "&upsilon;": "υ",
      "&upuparrows;": "⇈",
      "&urcorn;": "⌝",
      "&urcorner;": "⌝",
      "&urcrop;": "⌎",
      "&uring;": "ů",
      "&urtri;": "◹",
      "&uscr;": "𝓊",
      "&utdot;": "⋰",
      "&utilde;": "ũ",
      "&utri;": "▵",
      "&utrif;": "▴",
      "&uuarr;": "⇈",
      "&uuml": "ü",
      "&uuml;": "ü",
      "&uwangle;": "⦧",
      "&vArr;": "⇕",
      "&vBar;": "⫨",
      "&vBarv;": "⫩",
      "&vDash;": "⊨",
      "&vangrt;": "⦜",
      "&varepsilon;": "ϵ",
      "&varkappa;": "ϰ",
      "&varnothing;": "∅",
      "&varphi;": "ϕ",
      "&varpi;": "ϖ",
      "&varpropto;": "∝",
      "&varr;": "↕",
      "&varrho;": "ϱ",
      "&varsigma;": "ς",
      "&varsubsetneq;": "⊊︀",
      "&varsubsetneqq;": "⫋︀",
      "&varsupsetneq;": "⊋︀",
      "&varsupsetneqq;": "⫌︀",
      "&vartheta;": "ϑ",
      "&vartriangleleft;": "⊲",
      "&vartriangleright;": "⊳",
      "&vcy;": "в",
      "&vdash;": "⊢",
      "&vee;": "∨",
      "&veebar;": "⊻",
      "&veeeq;": "≚",
      "&vellip;": "⋮",
      "&verbar;": "|",
      "&vert;": "|",
      "&vfr;": "𝔳",
      "&vltri;": "⊲",
      "&vnsub;": "⊂⃒",
      "&vnsup;": "⊃⃒",
      "&vopf;": "𝕧",
      "&vprop;": "∝",
      "&vrtri;": "⊳",
      "&vscr;": "𝓋",
      "&vsubnE;": "⫋︀",
      "&vsubne;": "⊊︀",
      "&vsupnE;": "⫌︀",
      "&vsupne;": "⊋︀",
      "&vzigzag;": "⦚",
      "&wcirc;": "ŵ",
      "&wedbar;": "⩟",
      "&wedge;": "∧",
      "&wedgeq;": "≙",
      "&weierp;": "℘",
      "&wfr;": "𝔴",
      "&wopf;": "𝕨",
      "&wp;": "℘",
      "&wr;": "≀",
      "&wreath;": "≀",
      "&wscr;": "𝓌",
      "&xcap;": "⋂",
      "&xcirc;": "◯",
      "&xcup;": "⋃",
      "&xdtri;": "▽",
      "&xfr;": "𝔵",
      "&xhArr;": "⟺",
      "&xharr;": "⟷",
      "&xi;": "ξ",
      "&xlArr;": "⟸",
      "&xlarr;": "⟵",
      "&xmap;": "⟼",
      "&xnis;": "⋻",
      "&xodot;": "⨀",
      "&xopf;": "𝕩",
      "&xoplus;": "⨁",
      "&xotime;": "⨂",
      "&xrArr;": "⟹",
      "&xrarr;": "⟶",
      "&xscr;": "𝓍",
      "&xsqcup;": "⨆",
      "&xuplus;": "⨄",
      "&xutri;": "△",
      "&xvee;": "⋁",
      "&xwedge;": "⋀",
      "&yacute": "ý",
      "&yacute;": "ý",
      "&yacy;": "я",
      "&ycirc;": "ŷ",
      "&ycy;": "ы",
      "&yen": "¥",
      "&yen;": "¥",
      "&yfr;": "𝔶",
      "&yicy;": "ї",
      "&yopf;": "𝕪",
      "&yscr;": "𝓎",
      "&yucy;": "ю",
      "&yuml": "ÿ",
      "&yuml;": "ÿ",
      "&zacute;": "ź",
      "&zcaron;": "ž",
      "&zcy;": "з",
      "&zdot;": "ż",
      "&zeetrf;": "ℨ",
      "&zeta;": "ζ",
      "&zfr;": "𝔷",
      "&zhcy;": "ж",
      "&zigrarr;": "⇝",
      "&zopf;": "𝕫",
      "&zscr;": "𝓏",
      "&zwj;": "‍",
      "&zwnj;": "‌"
    },
    characters: {
      "Æ": "&AElig;",
      "&": "&amp;",
      "Á": "&Aacute;",
      "Ă": "&Abreve;",
      "Â": "&Acirc;",
      "А": "&Acy;",
      "𝔄": "&Afr;",
      "À": "&Agrave;",
      "Α": "&Alpha;",
      "Ā": "&Amacr;",
      "⩓": "&And;",
      "Ą": "&Aogon;",
      "𝔸": "&Aopf;",
      "⁡": "&af;",
      "Å": "&angst;",
      "𝒜": "&Ascr;",
      "≔": "&coloneq;",
      "Ã": "&Atilde;",
      "Ä": "&Auml;",
      "∖": "&ssetmn;",
      "⫧": "&Barv;",
      "⌆": "&doublebarwedge;",
      "Б": "&Bcy;",
      "∵": "&because;",
      "ℬ": "&bernou;",
      "Β": "&Beta;",
      "𝔅": "&Bfr;",
      "𝔹": "&Bopf;",
      "˘": "&breve;",
      "≎": "&bump;",
      "Ч": "&CHcy;",
      "©": "&copy;",
      "Ć": "&Cacute;",
      "⋒": "&Cap;",
      "ⅅ": "&DD;",
      "ℭ": "&Cfr;",
      "Č": "&Ccaron;",
      "Ç": "&Ccedil;",
      "Ĉ": "&Ccirc;",
      "∰": "&Cconint;",
      "Ċ": "&Cdot;",
      "¸": "&cedil;",
      "·": "&middot;",
      "Χ": "&Chi;",
      "⊙": "&odot;",
      "⊖": "&ominus;",
      "⊕": "&oplus;",
      "⊗": "&otimes;",
      "∲": "&cwconint;",
      "”": "&rdquor;",
      "’": "&rsquor;",
      "∷": "&Proportion;",
      "⩴": "&Colone;",
      "≡": "&equiv;",
      "∯": "&DoubleContourIntegral;",
      "∮": "&oint;",
      "ℂ": "&complexes;",
      "∐": "&coprod;",
      "∳": "&awconint;",
      "⨯": "&Cross;",
      "𝒞": "&Cscr;",
      "⋓": "&Cup;",
      "≍": "&asympeq;",
      "⤑": "&DDotrahd;",
      "Ђ": "&DJcy;",
      "Ѕ": "&DScy;",
      "Џ": "&DZcy;",
      "‡": "&ddagger;",
      "↡": "&Darr;",
      "⫤": "&DoubleLeftTee;",
      "Ď": "&Dcaron;",
      "Д": "&Dcy;",
      "∇": "&nabla;",
      "Δ": "&Delta;",
      "𝔇": "&Dfr;",
      "´": "&acute;",
      "˙": "&dot;",
      "˝": "&dblac;",
      "`": "&grave;",
      "˜": "&tilde;",
      "⋄": "&diamond;",
      "ⅆ": "&dd;",
      "𝔻": "&Dopf;",
      "¨": "&uml;",
      "⃜": "&DotDot;",
      "≐": "&esdot;",
      "⇓": "&dArr;",
      "⇐": "&lArr;",
      "⇔": "&iff;",
      "⟸": "&xlArr;",
      "⟺": "&xhArr;",
      "⟹": "&xrArr;",
      "⇒": "&rArr;",
      "⊨": "&vDash;",
      "⇑": "&uArr;",
      "⇕": "&vArr;",
      "∥": "&spar;",
      "↓": "&downarrow;",
      "⤓": "&DownArrowBar;",
      "⇵": "&duarr;",
      "̑": "&DownBreve;",
      "⥐": "&DownLeftRightVector;",
      "⥞": "&DownLeftTeeVector;",
      "↽": "&lhard;",
      "⥖": "&DownLeftVectorBar;",
      "⥟": "&DownRightTeeVector;",
      "⇁": "&rightharpoondown;",
      "⥗": "&DownRightVectorBar;",
      "⊤": "&top;",
      "↧": "&mapstodown;",
      "𝒟": "&Dscr;",
      "Đ": "&Dstrok;",
      "Ŋ": "&ENG;",
      "Ð": "&ETH;",
      "É": "&Eacute;",
      "Ě": "&Ecaron;",
      "Ê": "&Ecirc;",
      "Э": "&Ecy;",
      "Ė": "&Edot;",
      "𝔈": "&Efr;",
      "È": "&Egrave;",
      "∈": "&isinv;",
      "Ē": "&Emacr;",
      "◻": "&EmptySmallSquare;",
      "▫": "&EmptyVerySmallSquare;",
      "Ę": "&Eogon;",
      "𝔼": "&Eopf;",
      "Ε": "&Epsilon;",
      "⩵": "&Equal;",
      "≂": "&esim;",
      "⇌": "&rlhar;",
      "ℰ": "&expectation;",
      "⩳": "&Esim;",
      "Η": "&Eta;",
      "Ë": "&Euml;",
      "∃": "&exist;",
      "ⅇ": "&exponentiale;",
      "Ф": "&Fcy;",
      "𝔉": "&Ffr;",
      "◼": "&FilledSmallSquare;",
      "▪": "&squf;",
      "𝔽": "&Fopf;",
      "∀": "&forall;",
      "ℱ": "&Fscr;",
      "Ѓ": "&GJcy;",
      ">": "&gt;",
      "Γ": "&Gamma;",
      "Ϝ": "&Gammad;",
      "Ğ": "&Gbreve;",
      "Ģ": "&Gcedil;",
      "Ĝ": "&Gcirc;",
      "Г": "&Gcy;",
      "Ġ": "&Gdot;",
      "𝔊": "&Gfr;",
      "⋙": "&ggg;",
      "𝔾": "&Gopf;",
      "≥": "&geq;",
      "⋛": "&gtreqless;",
      "≧": "&geqq;",
      "⪢": "&GreaterGreater;",
      "≷": "&gtrless;",
      "⩾": "&ges;",
      "≳": "&gtrsim;",
      "𝒢": "&Gscr;",
      "≫": "&gg;",
      "Ъ": "&HARDcy;",
      "ˇ": "&caron;",
      "^": "&Hat;",
      "Ĥ": "&Hcirc;",
      "ℌ": "&Poincareplane;",
      "ℋ": "&hamilt;",
      "ℍ": "&quaternions;",
      "─": "&boxh;",
      "Ħ": "&Hstrok;",
      "≏": "&bumpeq;",
      "Е": "&IEcy;",
      "Ĳ": "&IJlig;",
      "Ё": "&IOcy;",
      "Í": "&Iacute;",
      "Î": "&Icirc;",
      "И": "&Icy;",
      "İ": "&Idot;",
      "ℑ": "&imagpart;",
      "Ì": "&Igrave;",
      "Ī": "&Imacr;",
      "ⅈ": "&ii;",
      "∬": "&Int;",
      "∫": "&int;",
      "⋂": "&xcap;",
      "⁣": "&ic;",
      "⁢": "&it;",
      "Į": "&Iogon;",
      "𝕀": "&Iopf;",
      "Ι": "&Iota;",
      "ℐ": "&imagline;",
      "Ĩ": "&Itilde;",
      "І": "&Iukcy;",
      "Ï": "&Iuml;",
      "Ĵ": "&Jcirc;",
      "Й": "&Jcy;",
      "𝔍": "&Jfr;",
      "𝕁": "&Jopf;",
      "𝒥": "&Jscr;",
      "Ј": "&Jsercy;",
      "Є": "&Jukcy;",
      "Х": "&KHcy;",
      "Ќ": "&KJcy;",
      "Κ": "&Kappa;",
      "Ķ": "&Kcedil;",
      "К": "&Kcy;",
      "𝔎": "&Kfr;",
      "𝕂": "&Kopf;",
      "𝒦": "&Kscr;",
      "Љ": "&LJcy;",
      "<": "&lt;",
      "Ĺ": "&Lacute;",
      "Λ": "&Lambda;",
      "⟪": "&Lang;",
      "ℒ": "&lagran;",
      "↞": "&twoheadleftarrow;",
      "Ľ": "&Lcaron;",
      "Ļ": "&Lcedil;",
      "Л": "&Lcy;",
      "⟨": "&langle;",
      "←": "&slarr;",
      "⇤": "&larrb;",
      "⇆": "&lrarr;",
      "⌈": "&lceil;",
      "⟦": "&lobrk;",
      "⥡": "&LeftDownTeeVector;",
      "⇃": "&downharpoonleft;",
      "⥙": "&LeftDownVectorBar;",
      "⌊": "&lfloor;",
      "↔": "&leftrightarrow;",
      "⥎": "&LeftRightVector;",
      "⊣": "&dashv;",
      "↤": "&mapstoleft;",
      "⥚": "&LeftTeeVector;",
      "⊲": "&vltri;",
      "⧏": "&LeftTriangleBar;",
      "⊴": "&trianglelefteq;",
      "⥑": "&LeftUpDownVector;",
      "⥠": "&LeftUpTeeVector;",
      "↿": "&upharpoonleft;",
      "⥘": "&LeftUpVectorBar;",
      "↼": "&lharu;",
      "⥒": "&LeftVectorBar;",
      "⋚": "&lesseqgtr;",
      "≦": "&leqq;",
      "≶": "&lg;",
      "⪡": "&LessLess;",
      "⩽": "&les;",
      "≲": "&lsim;",
      "𝔏": "&Lfr;",
      "⋘": "&Ll;",
      "⇚": "&lAarr;",
      "Ŀ": "&Lmidot;",
      "⟵": "&xlarr;",
      "⟷": "&xharr;",
      "⟶": "&xrarr;",
      "𝕃": "&Lopf;",
      "↙": "&swarrow;",
      "↘": "&searrow;",
      "↰": "&lsh;",
      "Ł": "&Lstrok;",
      "≪": "&ll;",
      "⤅": "&Map;",
      "М": "&Mcy;",
      " ": "&MediumSpace;",
      "ℳ": "&phmmat;",
      "𝔐": "&Mfr;",
      "∓": "&mp;",
      "𝕄": "&Mopf;",
      "Μ": "&Mu;",
      "Њ": "&NJcy;",
      "Ń": "&Nacute;",
      "Ň": "&Ncaron;",
      "Ņ": "&Ncedil;",
      "Н": "&Ncy;",
      "​": "&ZeroWidthSpace;",
      "\n": "&NewLine;",
      "𝔑": "&Nfr;",
      "⁠": "&NoBreak;",
      " ": "&nbsp;",
      "ℕ": "&naturals;",
      "⫬": "&Not;",
      "≢": "&nequiv;",
      "≭": "&NotCupCap;",
      "∦": "&nspar;",
      "∉": "&notinva;",
      "≠": "&ne;",
      "≂̸": "&nesim;",
      "∄": "&nexists;",
      "≯": "&ngtr;",
      "≱": "&ngeq;",
      "≧̸": "&ngeqq;",
      "≫̸": "&nGtv;",
      "≹": "&ntgl;",
      "⩾̸": "&nges;",
      "≵": "&ngsim;",
      "≎̸": "&nbump;",
      "≏̸": "&nbumpe;",
      "⋪": "&ntriangleleft;",
      "⧏̸": "&NotLeftTriangleBar;",
      "⋬": "&ntrianglelefteq;",
      "≮": "&nlt;",
      "≰": "&nleq;",
      "≸": "&ntlg;",
      "≪̸": "&nLtv;",
      "⩽̸": "&nles;",
      "≴": "&nlsim;",
      "⪢̸": "&NotNestedGreaterGreater;",
      "⪡̸": "&NotNestedLessLess;",
      "⊀": "&nprec;",
      "⪯̸": "&npreceq;",
      "⋠": "&nprcue;",
      "∌": "&notniva;",
      "⋫": "&ntriangleright;",
      "⧐̸": "&NotRightTriangleBar;",
      "⋭": "&ntrianglerighteq;",
      "⊏̸": "&NotSquareSubset;",
      "⋢": "&nsqsube;",
      "⊐̸": "&NotSquareSuperset;",
      "⋣": "&nsqsupe;",
      "⊂⃒": "&vnsub;",
      "⊈": "&nsubseteq;",
      "⊁": "&nsucc;",
      "⪰̸": "&nsucceq;",
      "⋡": "&nsccue;",
      "≿̸": "&NotSucceedsTilde;",
      "⊃⃒": "&vnsup;",
      "⊉": "&nsupseteq;",
      "≁": "&nsim;",
      "≄": "&nsimeq;",
      "≇": "&ncong;",
      "≉": "&napprox;",
      "∤": "&nsmid;",
      "𝒩": "&Nscr;",
      "Ñ": "&Ntilde;",
      "Ν": "&Nu;",
      "Œ": "&OElig;",
      "Ó": "&Oacute;",
      "Ô": "&Ocirc;",
      "О": "&Ocy;",
      "Ő": "&Odblac;",
      "𝔒": "&Ofr;",
      "Ò": "&Ograve;",
      "Ō": "&Omacr;",
      "Ω": "&ohm;",
      "Ο": "&Omicron;",
      "𝕆": "&Oopf;",
      "“": "&ldquo;",
      "‘": "&lsquo;",
      "⩔": "&Or;",
      "𝒪": "&Oscr;",
      "Ø": "&Oslash;",
      "Õ": "&Otilde;",
      "⨷": "&Otimes;",
      "Ö": "&Ouml;",
      "‾": "&oline;",
      "⏞": "&OverBrace;",
      "⎴": "&tbrk;",
      "⏜": "&OverParenthesis;",
      "∂": "&part;",
      "П": "&Pcy;",
      "𝔓": "&Pfr;",
      "Φ": "&Phi;",
      "Π": "&Pi;",
      "±": "&pm;",
      "ℙ": "&primes;",
      "⪻": "&Pr;",
      "≺": "&prec;",
      "⪯": "&preceq;",
      "≼": "&preccurlyeq;",
      "≾": "&prsim;",
      "″": "&Prime;",
      "∏": "&prod;",
      "∝": "&vprop;",
      "𝒫": "&Pscr;",
      "Ψ": "&Psi;",
      '"': "&quot;",
      "𝔔": "&Qfr;",
      "ℚ": "&rationals;",
      "𝒬": "&Qscr;",
      "⤐": "&drbkarow;",
      "®": "&reg;",
      "Ŕ": "&Racute;",
      "⟫": "&Rang;",
      "↠": "&twoheadrightarrow;",
      "⤖": "&Rarrtl;",
      "Ř": "&Rcaron;",
      "Ŗ": "&Rcedil;",
      "Р": "&Rcy;",
      "ℜ": "&realpart;",
      "∋": "&niv;",
      "⇋": "&lrhar;",
      "⥯": "&duhar;",
      "Ρ": "&Rho;",
      "⟩": "&rangle;",
      "→": "&srarr;",
      "⇥": "&rarrb;",
      "⇄": "&rlarr;",
      "⌉": "&rceil;",
      "⟧": "&robrk;",
      "⥝": "&RightDownTeeVector;",
      "⇂": "&downharpoonright;",
      "⥕": "&RightDownVectorBar;",
      "⌋": "&rfloor;",
      "⊢": "&vdash;",
      "↦": "&mapsto;",
      "⥛": "&RightTeeVector;",
      "⊳": "&vrtri;",
      "⧐": "&RightTriangleBar;",
      "⊵": "&trianglerighteq;",
      "⥏": "&RightUpDownVector;",
      "⥜": "&RightUpTeeVector;",
      "↾": "&upharpoonright;",
      "⥔": "&RightUpVectorBar;",
      "⇀": "&rightharpoonup;",
      "⥓": "&RightVectorBar;",
      "ℝ": "&reals;",
      "⥰": "&RoundImplies;",
      "⇛": "&rAarr;",
      "ℛ": "&realine;",
      "↱": "&rsh;",
      "⧴": "&RuleDelayed;",
      "Щ": "&SHCHcy;",
      "Ш": "&SHcy;",
      "Ь": "&SOFTcy;",
      "Ś": "&Sacute;",
      "⪼": "&Sc;",
      "Š": "&Scaron;",
      "Ş": "&Scedil;",
      "Ŝ": "&Scirc;",
      "С": "&Scy;",
      "𝔖": "&Sfr;",
      "↑": "&uparrow;",
      "Σ": "&Sigma;",
      "∘": "&compfn;",
      "𝕊": "&Sopf;",
      "√": "&radic;",
      "□": "&square;",
      "⊓": "&sqcap;",
      "⊏": "&sqsubset;",
      "⊑": "&sqsubseteq;",
      "⊐": "&sqsupset;",
      "⊒": "&sqsupseteq;",
      "⊔": "&sqcup;",
      "𝒮": "&Sscr;",
      "⋆": "&sstarf;",
      "⋐": "&Subset;",
      "⊆": "&subseteq;",
      "≻": "&succ;",
      "⪰": "&succeq;",
      "≽": "&succcurlyeq;",
      "≿": "&succsim;",
      "∑": "&sum;",
      "⋑": "&Supset;",
      "⊃": "&supset;",
      "⊇": "&supseteq;",
      "Þ": "&THORN;",
      "™": "&trade;",
      "Ћ": "&TSHcy;",
      "Ц": "&TScy;",
      "\t": "&Tab;",
      "Τ": "&Tau;",
      "Ť": "&Tcaron;",
      "Ţ": "&Tcedil;",
      "Т": "&Tcy;",
      "𝔗": "&Tfr;",
      "∴": "&therefore;",
      "Θ": "&Theta;",
      "  ": "&ThickSpace;",
      " ": "&thinsp;",
      "∼": "&thksim;",
      "≃": "&simeq;",
      "≅": "&cong;",
      "≈": "&thkap;",
      "𝕋": "&Topf;",
      "⃛": "&tdot;",
      "𝒯": "&Tscr;",
      "Ŧ": "&Tstrok;",
      "Ú": "&Uacute;",
      "↟": "&Uarr;",
      "⥉": "&Uarrocir;",
      "Ў": "&Ubrcy;",
      "Ŭ": "&Ubreve;",
      "Û": "&Ucirc;",
      "У": "&Ucy;",
      "Ű": "&Udblac;",
      "𝔘": "&Ufr;",
      "Ù": "&Ugrave;",
      "Ū": "&Umacr;",
      _: "&lowbar;",
      "⏟": "&UnderBrace;",
      "⎵": "&bbrk;",
      "⏝": "&UnderParenthesis;",
      "⋃": "&xcup;",
      "⊎": "&uplus;",
      "Ų": "&Uogon;",
      "𝕌": "&Uopf;",
      "⤒": "&UpArrowBar;",
      "⇅": "&udarr;",
      "↕": "&varr;",
      "⥮": "&udhar;",
      "⊥": "&perp;",
      "↥": "&mapstoup;",
      "↖": "&nwarrow;",
      "↗": "&nearrow;",
      "ϒ": "&upsih;",
      "Υ": "&Upsilon;",
      "Ů": "&Uring;",
      "𝒰": "&Uscr;",
      "Ũ": "&Utilde;",
      "Ü": "&Uuml;",
      "⊫": "&VDash;",
      "⫫": "&Vbar;",
      "В": "&Vcy;",
      "⊩": "&Vdash;",
      "⫦": "&Vdashl;",
      "⋁": "&xvee;",
      "‖": "&Vert;",
      "∣": "&smid;",
      "|": "&vert;",
      "❘": "&VerticalSeparator;",
      "≀": "&wreath;",
      " ": "&hairsp;",
      "𝔙": "&Vfr;",
      "𝕍": "&Vopf;",
      "𝒱": "&Vscr;",
      "⊪": "&Vvdash;",
      "Ŵ": "&Wcirc;",
      "⋀": "&xwedge;",
      "𝔚": "&Wfr;",
      "𝕎": "&Wopf;",
      "𝒲": "&Wscr;",
      "𝔛": "&Xfr;",
      "Ξ": "&Xi;",
      "𝕏": "&Xopf;",
      "𝒳": "&Xscr;",
      "Я": "&YAcy;",
      "Ї": "&YIcy;",
      "Ю": "&YUcy;",
      "Ý": "&Yacute;",
      "Ŷ": "&Ycirc;",
      "Ы": "&Ycy;",
      "𝔜": "&Yfr;",
      "𝕐": "&Yopf;",
      "𝒴": "&Yscr;",
      "Ÿ": "&Yuml;",
      "Ж": "&ZHcy;",
      "Ź": "&Zacute;",
      "Ž": "&Zcaron;",
      "З": "&Zcy;",
      "Ż": "&Zdot;",
      "Ζ": "&Zeta;",
      "ℨ": "&zeetrf;",
      "ℤ": "&integers;",
      "𝒵": "&Zscr;",
      "á": "&aacute;",
      "ă": "&abreve;",
      "∾": "&mstpos;",
      "∾̳": "&acE;",
      "∿": "&acd;",
      "â": "&acirc;",
      "а": "&acy;",
      "æ": "&aelig;",
      "𝔞": "&afr;",
      "à": "&agrave;",
      "ℵ": "&aleph;",
      "α": "&alpha;",
      "ā": "&amacr;",
      "⨿": "&amalg;",
      "∧": "&wedge;",
      "⩕": "&andand;",
      "⩜": "&andd;",
      "⩘": "&andslope;",
      "⩚": "&andv;",
      "∠": "&angle;",
      "⦤": "&ange;",
      "∡": "&measuredangle;",
      "⦨": "&angmsdaa;",
      "⦩": "&angmsdab;",
      "⦪": "&angmsdac;",
      "⦫": "&angmsdad;",
      "⦬": "&angmsdae;",
      "⦭": "&angmsdaf;",
      "⦮": "&angmsdag;",
      "⦯": "&angmsdah;",
      "∟": "&angrt;",
      "⊾": "&angrtvb;",
      "⦝": "&angrtvbd;",
      "∢": "&angsph;",
      "⍼": "&angzarr;",
      "ą": "&aogon;",
      "𝕒": "&aopf;",
      "⩰": "&apE;",
      "⩯": "&apacir;",
      "≊": "&approxeq;",
      "≋": "&apid;",
      "'": "&apos;",
      "å": "&aring;",
      "𝒶": "&ascr;",
      "*": "&midast;",
      "ã": "&atilde;",
      "ä": "&auml;",
      "⨑": "&awint;",
      "⫭": "&bNot;",
      "≌": "&bcong;",
      "϶": "&bepsi;",
      "‵": "&bprime;",
      "∽": "&bsim;",
      "⋍": "&bsime;",
      "⊽": "&barvee;",
      "⌅": "&barwedge;",
      "⎶": "&bbrktbrk;",
      "б": "&bcy;",
      "„": "&ldquor;",
      "⦰": "&bemptyv;",
      "β": "&beta;",
      "ℶ": "&beth;",
      "≬": "&twixt;",
      "𝔟": "&bfr;",
      "◯": "&xcirc;",
      "⨀": "&xodot;",
      "⨁": "&xoplus;",
      "⨂": "&xotime;",
      "⨆": "&xsqcup;",
      "★": "&starf;",
      "▽": "&xdtri;",
      "△": "&xutri;",
      "⨄": "&xuplus;",
      "⤍": "&rbarr;",
      "⧫": "&lozf;",
      "▴": "&utrif;",
      "▾": "&dtrif;",
      "◂": "&ltrif;",
      "▸": "&rtrif;",
      "␣": "&blank;",
      "▒": "&blk12;",
      "░": "&blk14;",
      "▓": "&blk34;",
      "█": "&block;",
      "=⃥": "&bne;",
      "≡⃥": "&bnequiv;",
      "⌐": "&bnot;",
      "𝕓": "&bopf;",
      "⋈": "&bowtie;",
      "╗": "&boxDL;",
      "╔": "&boxDR;",
      "╖": "&boxDl;",
      "╓": "&boxDr;",
      "═": "&boxH;",
      "╦": "&boxHD;",
      "╩": "&boxHU;",
      "╤": "&boxHd;",
      "╧": "&boxHu;",
      "╝": "&boxUL;",
      "╚": "&boxUR;",
      "╜": "&boxUl;",
      "╙": "&boxUr;",
      "║": "&boxV;",
      "╬": "&boxVH;",
      "╣": "&boxVL;",
      "╠": "&boxVR;",
      "╫": "&boxVh;",
      "╢": "&boxVl;",
      "╟": "&boxVr;",
      "⧉": "&boxbox;",
      "╕": "&boxdL;",
      "╒": "&boxdR;",
      "┐": "&boxdl;",
      "┌": "&boxdr;",
      "╥": "&boxhD;",
      "╨": "&boxhU;",
      "┬": "&boxhd;",
      "┴": "&boxhu;",
      "⊟": "&minusb;",
      "⊞": "&plusb;",
      "⊠": "&timesb;",
      "╛": "&boxuL;",
      "╘": "&boxuR;",
      "┘": "&boxul;",
      "└": "&boxur;",
      "│": "&boxv;",
      "╪": "&boxvH;",
      "╡": "&boxvL;",
      "╞": "&boxvR;",
      "┼": "&boxvh;",
      "┤": "&boxvl;",
      "├": "&boxvr;",
      "¦": "&brvbar;",
      "𝒷": "&bscr;",
      "⁏": "&bsemi;",
      "\\": "&bsol;",
      "⧅": "&bsolb;",
      "⟈": "&bsolhsub;",
      "•": "&bullet;",
      "⪮": "&bumpE;",
      "ć": "&cacute;",
      "∩": "&cap;",
      "⩄": "&capand;",
      "⩉": "&capbrcup;",
      "⩋": "&capcap;",
      "⩇": "&capcup;",
      "⩀": "&capdot;",
      "∩︀": "&caps;",
      "⁁": "&caret;",
      "⩍": "&ccaps;",
      "č": "&ccaron;",
      "ç": "&ccedil;",
      "ĉ": "&ccirc;",
      "⩌": "&ccups;",
      "⩐": "&ccupssm;",
      "ċ": "&cdot;",
      "⦲": "&cemptyv;",
      "¢": "&cent;",
      "𝔠": "&cfr;",
      "ч": "&chcy;",
      "✓": "&checkmark;",
      "χ": "&chi;",
      "○": "&cir;",
      "⧃": "&cirE;",
      "ˆ": "&circ;",
      "≗": "&cire;",
      "↺": "&olarr;",
      "↻": "&orarr;",
      "Ⓢ": "&oS;",
      "⊛": "&oast;",
      "⊚": "&ocir;",
      "⊝": "&odash;",
      "⨐": "&cirfnint;",
      "⫯": "&cirmid;",
      "⧂": "&cirscir;",
      "♣": "&clubsuit;",
      ":": "&colon;",
      ",": "&comma;",
      "@": "&commat;",
      "∁": "&complement;",
      "⩭": "&congdot;",
      "𝕔": "&copf;",
      "℗": "&copysr;",
      "↵": "&crarr;",
      "✗": "&cross;",
      "𝒸": "&cscr;",
      "⫏": "&csub;",
      "⫑": "&csube;",
      "⫐": "&csup;",
      "⫒": "&csupe;",
      "⋯": "&ctdot;",
      "⤸": "&cudarrl;",
      "⤵": "&cudarrr;",
      "⋞": "&curlyeqprec;",
      "⋟": "&curlyeqsucc;",
      "↶": "&curvearrowleft;",
      "⤽": "&cularrp;",
      "∪": "&cup;",
      "⩈": "&cupbrcap;",
      "⩆": "&cupcap;",
      "⩊": "&cupcup;",
      "⊍": "&cupdot;",
      "⩅": "&cupor;",
      "∪︀": "&cups;",
      "↷": "&curvearrowright;",
      "⤼": "&curarrm;",
      "⋎": "&cuvee;",
      "⋏": "&cuwed;",
      "¤": "&curren;",
      "∱": "&cwint;",
      "⌭": "&cylcty;",
      "⥥": "&dHar;",
      "†": "&dagger;",
      "ℸ": "&daleth;",
      "‐": "&hyphen;",
      "⤏": "&rBarr;",
      "ď": "&dcaron;",
      "д": "&dcy;",
      "⇊": "&downdownarrows;",
      "⩷": "&eDDot;",
      "°": "&deg;",
      "δ": "&delta;",
      "⦱": "&demptyv;",
      "⥿": "&dfisht;",
      "𝔡": "&dfr;",
      "♦": "&diams;",
      "ϝ": "&gammad;",
      "⋲": "&disin;",
      "÷": "&divide;",
      "⋇": "&divonx;",
      "ђ": "&djcy;",
      "⌞": "&llcorner;",
      "⌍": "&dlcrop;",
      $: "&dollar;",
      "𝕕": "&dopf;",
      "≑": "&eDot;",
      "∸": "&minusd;",
      "∔": "&plusdo;",
      "⊡": "&sdotb;",
      "⌟": "&lrcorner;",
      "⌌": "&drcrop;",
      "𝒹": "&dscr;",
      "ѕ": "&dscy;",
      "⧶": "&dsol;",
      "đ": "&dstrok;",
      "⋱": "&dtdot;",
      "▿": "&triangledown;",
      "⦦": "&dwangle;",
      "џ": "&dzcy;",
      "⟿": "&dzigrarr;",
      "é": "&eacute;",
      "⩮": "&easter;",
      "ě": "&ecaron;",
      "≖": "&eqcirc;",
      "ê": "&ecirc;",
      "≕": "&eqcolon;",
      "э": "&ecy;",
      "ė": "&edot;",
      "≒": "&fallingdotseq;",
      "𝔢": "&efr;",
      "⪚": "&eg;",
      "è": "&egrave;",
      "⪖": "&eqslantgtr;",
      "⪘": "&egsdot;",
      "⪙": "&el;",
      "⏧": "&elinters;",
      "ℓ": "&ell;",
      "⪕": "&eqslantless;",
      "⪗": "&elsdot;",
      "ē": "&emacr;",
      "∅": "&varnothing;",
      " ": "&emsp13;",
      " ": "&emsp14;",
      " ": "&emsp;",
      "ŋ": "&eng;",
      " ": "&ensp;",
      "ę": "&eogon;",
      "𝕖": "&eopf;",
      "⋕": "&epar;",
      "⧣": "&eparsl;",
      "⩱": "&eplus;",
      "ε": "&epsilon;",
      "ϵ": "&varepsilon;",
      "=": "&equals;",
      "≟": "&questeq;",
      "⩸": "&equivDD;",
      "⧥": "&eqvparsl;",
      "≓": "&risingdotseq;",
      "⥱": "&erarr;",
      "ℯ": "&escr;",
      "η": "&eta;",
      "ð": "&eth;",
      "ë": "&euml;",
      "€": "&euro;",
      "!": "&excl;",
      "ф": "&fcy;",
      "♀": "&female;",
      "ﬃ": "&ffilig;",
      "ﬀ": "&fflig;",
      "ﬄ": "&ffllig;",
      "𝔣": "&ffr;",
      "ﬁ": "&filig;",
      fj: "&fjlig;",
      "♭": "&flat;",
      "ﬂ": "&fllig;",
      "▱": "&fltns;",
      "ƒ": "&fnof;",
      "𝕗": "&fopf;",
      "⋔": "&pitchfork;",
      "⫙": "&forkv;",
      "⨍": "&fpartint;",
      "½": "&half;",
      "⅓": "&frac13;",
      "¼": "&frac14;",
      "⅕": "&frac15;",
      "⅙": "&frac16;",
      "⅛": "&frac18;",
      "⅔": "&frac23;",
      "⅖": "&frac25;",
      "¾": "&frac34;",
      "⅗": "&frac35;",
      "⅜": "&frac38;",
      "⅘": "&frac45;",
      "⅚": "&frac56;",
      "⅝": "&frac58;",
      "⅞": "&frac78;",
      "⁄": "&frasl;",
      "⌢": "&sfrown;",
      "𝒻": "&fscr;",
      "⪌": "&gtreqqless;",
      "ǵ": "&gacute;",
      "γ": "&gamma;",
      "⪆": "&gtrapprox;",
      "ğ": "&gbreve;",
      "ĝ": "&gcirc;",
      "г": "&gcy;",
      "ġ": "&gdot;",
      "⪩": "&gescc;",
      "⪀": "&gesdot;",
      "⪂": "&gesdoto;",
      "⪄": "&gesdotol;",
      "⋛︀": "&gesl;",
      "⪔": "&gesles;",
      "𝔤": "&gfr;",
      "ℷ": "&gimel;",
      "ѓ": "&gjcy;",
      "⪒": "&glE;",
      "⪥": "&gla;",
      "⪤": "&glj;",
      "≩": "&gneqq;",
      "⪊": "&gnapprox;",
      "⪈": "&gneq;",
      "⋧": "&gnsim;",
      "𝕘": "&gopf;",
      "ℊ": "&gscr;",
      "⪎": "&gsime;",
      "⪐": "&gsiml;",
      "⪧": "&gtcc;",
      "⩺": "&gtcir;",
      "⋗": "&gtrdot;",
      "⦕": "&gtlPar;",
      "⩼": "&gtquest;",
      "⥸": "&gtrarr;",
      "≩︀": "&gvnE;",
      "ъ": "&hardcy;",
      "⥈": "&harrcir;",
      "↭": "&leftrightsquigarrow;",
      "ℏ": "&plankv;",
      "ĥ": "&hcirc;",
      "♥": "&heartsuit;",
      "…": "&mldr;",
      "⊹": "&hercon;",
      "𝔥": "&hfr;",
      "⤥": "&searhk;",
      "⤦": "&swarhk;",
      "⇿": "&hoarr;",
      "∻": "&homtht;",
      "↩": "&larrhk;",
      "↪": "&rarrhk;",
      "𝕙": "&hopf;",
      "―": "&horbar;",
      "𝒽": "&hscr;",
      "ħ": "&hstrok;",
      "⁃": "&hybull;",
      "í": "&iacute;",
      "î": "&icirc;",
      "и": "&icy;",
      "е": "&iecy;",
      "¡": "&iexcl;",
      "𝔦": "&ifr;",
      "ì": "&igrave;",
      "⨌": "&qint;",
      "∭": "&tint;",
      "⧜": "&iinfin;",
      "℩": "&iiota;",
      "ĳ": "&ijlig;",
      "ī": "&imacr;",
      "ı": "&inodot;",
      "⊷": "&imof;",
      "Ƶ": "&imped;",
      "℅": "&incare;",
      "∞": "&infin;",
      "⧝": "&infintie;",
      "⊺": "&intercal;",
      "⨗": "&intlarhk;",
      "⨼": "&iprod;",
      "ё": "&iocy;",
      "į": "&iogon;",
      "𝕚": "&iopf;",
      "ι": "&iota;",
      "¿": "&iquest;",
      "𝒾": "&iscr;",
      "⋹": "&isinE;",
      "⋵": "&isindot;",
      "⋴": "&isins;",
      "⋳": "&isinsv;",
      "ĩ": "&itilde;",
      "і": "&iukcy;",
      "ï": "&iuml;",
      "ĵ": "&jcirc;",
      "й": "&jcy;",
      "𝔧": "&jfr;",
      "ȷ": "&jmath;",
      "𝕛": "&jopf;",
      "𝒿": "&jscr;",
      "ј": "&jsercy;",
      "є": "&jukcy;",
      "κ": "&kappa;",
      "ϰ": "&varkappa;",
      "ķ": "&kcedil;",
      "к": "&kcy;",
      "𝔨": "&kfr;",
      "ĸ": "&kgreen;",
      "х": "&khcy;",
      "ќ": "&kjcy;",
      "𝕜": "&kopf;",
      "𝓀": "&kscr;",
      "⤛": "&lAtail;",
      "⤎": "&lBarr;",
      "⪋": "&lesseqqgtr;",
      "⥢": "&lHar;",
      "ĺ": "&lacute;",
      "⦴": "&laemptyv;",
      "λ": "&lambda;",
      "⦑": "&langd;",
      "⪅": "&lessapprox;",
      "«": "&laquo;",
      "⤟": "&larrbfs;",
      "⤝": "&larrfs;",
      "↫": "&looparrowleft;",
      "⤹": "&larrpl;",
      "⥳": "&larrsim;",
      "↢": "&leftarrowtail;",
      "⪫": "&lat;",
      "⤙": "&latail;",
      "⪭": "&late;",
      "⪭︀": "&lates;",
      "⤌": "&lbarr;",
      "❲": "&lbbrk;",
      "{": "&lcub;",
      "[": "&lsqb;",
      "⦋": "&lbrke;",
      "⦏": "&lbrksld;",
      "⦍": "&lbrkslu;",
      "ľ": "&lcaron;",
      "ļ": "&lcedil;",
      "л": "&lcy;",
      "⤶": "&ldca;",
      "⥧": "&ldrdhar;",
      "⥋": "&ldrushar;",
      "↲": "&ldsh;",
      "≤": "&leq;",
      "⇇": "&llarr;",
      "⋋": "&lthree;",
      "⪨": "&lescc;",
      "⩿": "&lesdot;",
      "⪁": "&lesdoto;",
      "⪃": "&lesdotor;",
      "⋚︀": "&lesg;",
      "⪓": "&lesges;",
      "⋖": "&ltdot;",
      "⥼": "&lfisht;",
      "𝔩": "&lfr;",
      "⪑": "&lgE;",
      "⥪": "&lharul;",
      "▄": "&lhblk;",
      "љ": "&ljcy;",
      "⥫": "&llhard;",
      "◺": "&lltri;",
      "ŀ": "&lmidot;",
      "⎰": "&lmoustache;",
      "≨": "&lneqq;",
      "⪉": "&lnapprox;",
      "⪇": "&lneq;",
      "⋦": "&lnsim;",
      "⟬": "&loang;",
      "⇽": "&loarr;",
      "⟼": "&xmap;",
      "↬": "&rarrlp;",
      "⦅": "&lopar;",
      "𝕝": "&lopf;",
      "⨭": "&loplus;",
      "⨴": "&lotimes;",
      "∗": "&lowast;",
      "◊": "&lozenge;",
      "(": "&lpar;",
      "⦓": "&lparlt;",
      "⥭": "&lrhard;",
      "‎": "&lrm;",
      "⊿": "&lrtri;",
      "‹": "&lsaquo;",
      "𝓁": "&lscr;",
      "⪍": "&lsime;",
      "⪏": "&lsimg;",
      "‚": "&sbquo;",
      "ł": "&lstrok;",
      "⪦": "&ltcc;",
      "⩹": "&ltcir;",
      "⋉": "&ltimes;",
      "⥶": "&ltlarr;",
      "⩻": "&ltquest;",
      "⦖": "&ltrPar;",
      "◃": "&triangleleft;",
      "⥊": "&lurdshar;",
      "⥦": "&luruhar;",
      "≨︀": "&lvnE;",
      "∺": "&mDDot;",
      "¯": "&strns;",
      "♂": "&male;",
      "✠": "&maltese;",
      "▮": "&marker;",
      "⨩": "&mcomma;",
      "м": "&mcy;",
      "—": "&mdash;",
      "𝔪": "&mfr;",
      "℧": "&mho;",
      "µ": "&micro;",
      "⫰": "&midcir;",
      "−": "&minus;",
      "⨪": "&minusdu;",
      "⫛": "&mlcp;",
      "⊧": "&models;",
      "𝕞": "&mopf;",
      "𝓂": "&mscr;",
      "μ": "&mu;",
      "⊸": "&mumap;",
      "⋙̸": "&nGg;",
      "≫⃒": "&nGt;",
      "⇍": "&nlArr;",
      "⇎": "&nhArr;",
      "⋘̸": "&nLl;",
      "≪⃒": "&nLt;",
      "⇏": "&nrArr;",
      "⊯": "&nVDash;",
      "⊮": "&nVdash;",
      "ń": "&nacute;",
      "∠⃒": "&nang;",
      "⩰̸": "&napE;",
      "≋̸": "&napid;",
      "ŉ": "&napos;",
      "♮": "&natural;",
      "⩃": "&ncap;",
      "ň": "&ncaron;",
      "ņ": "&ncedil;",
      "⩭̸": "&ncongdot;",
      "⩂": "&ncup;",
      "н": "&ncy;",
      "–": "&ndash;",
      "⇗": "&neArr;",
      "⤤": "&nearhk;",
      "≐̸": "&nedot;",
      "⤨": "&toea;",
      "𝔫": "&nfr;",
      "↮": "&nleftrightarrow;",
      "⫲": "&nhpar;",
      "⋼": "&nis;",
      "⋺": "&nisd;",
      "њ": "&njcy;",
      "≦̸": "&nleqq;",
      "↚": "&nleftarrow;",
      "‥": "&nldr;",
      "𝕟": "&nopf;",
      "¬": "&not;",
      "⋹̸": "&notinE;",
      "⋵̸": "&notindot;",
      "⋷": "&notinvb;",
      "⋶": "&notinvc;",
      "⋾": "&notnivb;",
      "⋽": "&notnivc;",
      "⫽⃥": "&nparsl;",
      "∂̸": "&npart;",
      "⨔": "&npolint;",
      "↛": "&nrightarrow;",
      "⤳̸": "&nrarrc;",
      "↝̸": "&nrarrw;",
      "𝓃": "&nscr;",
      "⊄": "&nsub;",
      "⫅̸": "&nsubseteqq;",
      "⊅": "&nsup;",
      "⫆̸": "&nsupseteqq;",
      "ñ": "&ntilde;",
      "ν": "&nu;",
      "#": "&num;",
      "№": "&numero;",
      " ": "&numsp;",
      "⊭": "&nvDash;",
      "⤄": "&nvHarr;",
      "≍⃒": "&nvap;",
      "⊬": "&nvdash;",
      "≥⃒": "&nvge;",
      ">⃒": "&nvgt;",
      "⧞": "&nvinfin;",
      "⤂": "&nvlArr;",
      "≤⃒": "&nvle;",
      "<⃒": "&nvlt;",
      "⊴⃒": "&nvltrie;",
      "⤃": "&nvrArr;",
      "⊵⃒": "&nvrtrie;",
      "∼⃒": "&nvsim;",
      "⇖": "&nwArr;",
      "⤣": "&nwarhk;",
      "⤧": "&nwnear;",
      "ó": "&oacute;",
      "ô": "&ocirc;",
      "о": "&ocy;",
      "ő": "&odblac;",
      "⨸": "&odiv;",
      "⦼": "&odsold;",
      "œ": "&oelig;",
      "⦿": "&ofcir;",
      "𝔬": "&ofr;",
      "˛": "&ogon;",
      "ò": "&ograve;",
      "⧁": "&ogt;",
      "⦵": "&ohbar;",
      "⦾": "&olcir;",
      "⦻": "&olcross;",
      "⧀": "&olt;",
      "ō": "&omacr;",
      "ω": "&omega;",
      "ο": "&omicron;",
      "⦶": "&omid;",
      "𝕠": "&oopf;",
      "⦷": "&opar;",
      "⦹": "&operp;",
      "∨": "&vee;",
      "⩝": "&ord;",
      "ℴ": "&oscr;",
      "ª": "&ordf;",
      "º": "&ordm;",
      "⊶": "&origof;",
      "⩖": "&oror;",
      "⩗": "&orslope;",
      "⩛": "&orv;",
      "ø": "&oslash;",
      "⊘": "&osol;",
      "õ": "&otilde;",
      "⨶": "&otimesas;",
      "ö": "&ouml;",
      "⌽": "&ovbar;",
      "¶": "&para;",
      "⫳": "&parsim;",
      "⫽": "&parsl;",
      "п": "&pcy;",
      "%": "&percnt;",
      ".": "&period;",
      "‰": "&permil;",
      "‱": "&pertenk;",
      "𝔭": "&pfr;",
      "φ": "&phi;",
      "ϕ": "&varphi;",
      "☎": "&phone;",
      "π": "&pi;",
      "ϖ": "&varpi;",
      "ℎ": "&planckh;",
      "+": "&plus;",
      "⨣": "&plusacir;",
      "⨢": "&pluscir;",
      "⨥": "&plusdu;",
      "⩲": "&pluse;",
      "⨦": "&plussim;",
      "⨧": "&plustwo;",
      "⨕": "&pointint;",
      "𝕡": "&popf;",
      "£": "&pound;",
      "⪳": "&prE;",
      "⪷": "&precapprox;",
      "⪹": "&prnap;",
      "⪵": "&prnE;",
      "⋨": "&prnsim;",
      "′": "&prime;",
      "⌮": "&profalar;",
      "⌒": "&profline;",
      "⌓": "&profsurf;",
      "⊰": "&prurel;",
      "𝓅": "&pscr;",
      "ψ": "&psi;",
      " ": "&puncsp;",
      "𝔮": "&qfr;",
      "𝕢": "&qopf;",
      "⁗": "&qprime;",
      "𝓆": "&qscr;",
      "⨖": "&quatint;",
      "?": "&quest;",
      "⤜": "&rAtail;",
      "⥤": "&rHar;",
      "∽̱": "&race;",
      "ŕ": "&racute;",
      "⦳": "&raemptyv;",
      "⦒": "&rangd;",
      "⦥": "&range;",
      "»": "&raquo;",
      "⥵": "&rarrap;",
      "⤠": "&rarrbfs;",
      "⤳": "&rarrc;",
      "⤞": "&rarrfs;",
      "⥅": "&rarrpl;",
      "⥴": "&rarrsim;",
      "↣": "&rightarrowtail;",
      "↝": "&rightsquigarrow;",
      "⤚": "&ratail;",
      "∶": "&ratio;",
      "❳": "&rbbrk;",
      "}": "&rcub;",
      "]": "&rsqb;",
      "⦌": "&rbrke;",
      "⦎": "&rbrksld;",
      "⦐": "&rbrkslu;",
      "ř": "&rcaron;",
      "ŗ": "&rcedil;",
      "р": "&rcy;",
      "⤷": "&rdca;",
      "⥩": "&rdldhar;",
      "↳": "&rdsh;",
      "▭": "&rect;",
      "⥽": "&rfisht;",
      "𝔯": "&rfr;",
      "⥬": "&rharul;",
      "ρ": "&rho;",
      "ϱ": "&varrho;",
      "⇉": "&rrarr;",
      "⋌": "&rthree;",
      "˚": "&ring;",
      "‏": "&rlm;",
      "⎱": "&rmoustache;",
      "⫮": "&rnmid;",
      "⟭": "&roang;",
      "⇾": "&roarr;",
      "⦆": "&ropar;",
      "𝕣": "&ropf;",
      "⨮": "&roplus;",
      "⨵": "&rotimes;",
      ")": "&rpar;",
      "⦔": "&rpargt;",
      "⨒": "&rppolint;",
      "›": "&rsaquo;",
      "𝓇": "&rscr;",
      "⋊": "&rtimes;",
      "▹": "&triangleright;",
      "⧎": "&rtriltri;",
      "⥨": "&ruluhar;",
      "℞": "&rx;",
      "ś": "&sacute;",
      "⪴": "&scE;",
      "⪸": "&succapprox;",
      "š": "&scaron;",
      "ş": "&scedil;",
      "ŝ": "&scirc;",
      "⪶": "&succneqq;",
      "⪺": "&succnapprox;",
      "⋩": "&succnsim;",
      "⨓": "&scpolint;",
      "с": "&scy;",
      "⋅": "&sdot;",
      "⩦": "&sdote;",
      "⇘": "&seArr;",
      "§": "&sect;",
      ";": "&semi;",
      "⤩": "&tosa;",
      "✶": "&sext;",
      "𝔰": "&sfr;",
      "♯": "&sharp;",
      "щ": "&shchcy;",
      "ш": "&shcy;",
      "­": "&shy;",
      "σ": "&sigma;",
      "ς": "&varsigma;",
      "⩪": "&simdot;",
      "⪞": "&simg;",
      "⪠": "&simgE;",
      "⪝": "&siml;",
      "⪟": "&simlE;",
      "≆": "&simne;",
      "⨤": "&simplus;",
      "⥲": "&simrarr;",
      "⨳": "&smashp;",
      "⧤": "&smeparsl;",
      "⌣": "&ssmile;",
      "⪪": "&smt;",
      "⪬": "&smte;",
      "⪬︀": "&smtes;",
      "ь": "&softcy;",
      "/": "&sol;",
      "⧄": "&solb;",
      "⌿": "&solbar;",
      "𝕤": "&sopf;",
      "♠": "&spadesuit;",
      "⊓︀": "&sqcaps;",
      "⊔︀": "&sqcups;",
      "𝓈": "&sscr;",
      "☆": "&star;",
      "⊂": "&subset;",
      "⫅": "&subseteqq;",
      "⪽": "&subdot;",
      "⫃": "&subedot;",
      "⫁": "&submult;",
      "⫋": "&subsetneqq;",
      "⊊": "&subsetneq;",
      "⪿": "&subplus;",
      "⥹": "&subrarr;",
      "⫇": "&subsim;",
      "⫕": "&subsub;",
      "⫓": "&subsup;",
      "♪": "&sung;",
      "¹": "&sup1;",
      "²": "&sup2;",
      "³": "&sup3;",
      "⫆": "&supseteqq;",
      "⪾": "&supdot;",
      "⫘": "&supdsub;",
      "⫄": "&supedot;",
      "⟉": "&suphsol;",
      "⫗": "&suphsub;",
      "⥻": "&suplarr;",
      "⫂": "&supmult;",
      "⫌": "&supsetneqq;",
      "⊋": "&supsetneq;",
      "⫀": "&supplus;",
      "⫈": "&supsim;",
      "⫔": "&supsub;",
      "⫖": "&supsup;",
      "⇙": "&swArr;",
      "⤪": "&swnwar;",
      "ß": "&szlig;",
      "⌖": "&target;",
      "τ": "&tau;",
      "ť": "&tcaron;",
      "ţ": "&tcedil;",
      "т": "&tcy;",
      "⌕": "&telrec;",
      "𝔱": "&tfr;",
      "θ": "&theta;",
      "ϑ": "&vartheta;",
      "þ": "&thorn;",
      "×": "&times;",
      "⨱": "&timesbar;",
      "⨰": "&timesd;",
      "⌶": "&topbot;",
      "⫱": "&topcir;",
      "𝕥": "&topf;",
      "⫚": "&topfork;",
      "‴": "&tprime;",
      "▵": "&utri;",
      "≜": "&trie;",
      "◬": "&tridot;",
      "⨺": "&triminus;",
      "⨹": "&triplus;",
      "⧍": "&trisb;",
      "⨻": "&tritime;",
      "⏢": "&trpezium;",
      "𝓉": "&tscr;",
      "ц": "&tscy;",
      "ћ": "&tshcy;",
      "ŧ": "&tstrok;",
      "⥣": "&uHar;",
      "ú": "&uacute;",
      "ў": "&ubrcy;",
      "ŭ": "&ubreve;",
      "û": "&ucirc;",
      "у": "&ucy;",
      "ű": "&udblac;",
      "⥾": "&ufisht;",
      "𝔲": "&ufr;",
      "ù": "&ugrave;",
      "▀": "&uhblk;",
      "⌜": "&ulcorner;",
      "⌏": "&ulcrop;",
      "◸": "&ultri;",
      "ū": "&umacr;",
      "ų": "&uogon;",
      "𝕦": "&uopf;",
      "υ": "&upsilon;",
      "⇈": "&uuarr;",
      "⌝": "&urcorner;",
      "⌎": "&urcrop;",
      "ů": "&uring;",
      "◹": "&urtri;",
      "𝓊": "&uscr;",
      "⋰": "&utdot;",
      "ũ": "&utilde;",
      "ü": "&uuml;",
      "⦧": "&uwangle;",
      "⫨": "&vBar;",
      "⫩": "&vBarv;",
      "⦜": "&vangrt;",
      "⊊︀": "&vsubne;",
      "⫋︀": "&vsubnE;",
      "⊋︀": "&vsupne;",
      "⫌︀": "&vsupnE;",
      "в": "&vcy;",
      "⊻": "&veebar;",
      "≚": "&veeeq;",
      "⋮": "&vellip;",
      "𝔳": "&vfr;",
      "𝕧": "&vopf;",
      "𝓋": "&vscr;",
      "⦚": "&vzigzag;",
      "ŵ": "&wcirc;",
      "⩟": "&wedbar;",
      "≙": "&wedgeq;",
      "℘": "&wp;",
      "𝔴": "&wfr;",
      "𝕨": "&wopf;",
      "𝓌": "&wscr;",
      "𝔵": "&xfr;",
      "ξ": "&xi;",
      "⋻": "&xnis;",
      "𝕩": "&xopf;",
      "𝓍": "&xscr;",
      "ý": "&yacute;",
      "я": "&yacy;",
      "ŷ": "&ycirc;",
      "ы": "&ycy;",
      "¥": "&yen;",
      "𝔶": "&yfr;",
      "ї": "&yicy;",
      "𝕪": "&yopf;",
      "𝓎": "&yscr;",
      "ю": "&yucy;",
      "ÿ": "&yuml;",
      "ź": "&zacute;",
      "ž": "&zcaron;",
      "з": "&zcy;",
      "ż": "&zdot;",
      "ζ": "&zeta;",
      "𝔷": "&zfr;",
      "ж": "&zhcy;",
      "⇝": "&zigrarr;",
      "𝕫": "&zopf;",
      "𝓏": "&zscr;",
      "‍": "&zwj;",
      "‌": "&zwnj;"
    }
  }
};

/***/ }),

/***/ "./node_modules/html-entities/lib/numeric-unicode-map.js":
/*!***************************************************************!*\
  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numericUnicodeMap = {
  0: 65533,
  128: 8364,
  130: 8218,
  131: 402,
  132: 8222,
  133: 8230,
  134: 8224,
  135: 8225,
  136: 710,
  137: 8240,
  138: 352,
  139: 8249,
  140: 338,
  142: 381,
  145: 8216,
  146: 8217,
  147: 8220,
  148: 8221,
  149: 8226,
  150: 8211,
  151: 8212,
  152: 732,
  153: 8482,
  154: 353,
  155: 8250,
  156: 339,
  158: 382,
  159: 376
};

/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

exports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
  return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);
};

exports.getCodePoint = String.prototype.codePointAt ? function (input, position) {
  return input.codePointAt(position);
} : function (input, position) {
  return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;
};
exports.highSurrogateFrom = 55296;
exports.highSurrogateTo = 56319;

/***/ }),

/***/ "./node_modules/imagesloaded/imagesloaded.js":
/*!***************************************************!*\
  !*** ./node_modules/imagesloaded/imagesloaded.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * imagesLoaded v5.0.0
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
(function (window, factory) {
  // universal module definition
  if ( true && module.exports) {
    // CommonJS
    module.exports = factory(window, __webpack_require__(/*! ev-emitter */ "./node_modules/ev-emitter/ev-emitter.js"));
  } else {
    // browser global
    window.imagesLoaded = factory(window, window.EvEmitter);
  }
})(typeof window !== 'undefined' ? window : this, function factory(window, EvEmitter) {
  let $ = window.jQuery;
  let console = window.console; // -------------------------- helpers -------------------------- //
  // turn element or nodeList into an array

  function makeArray(obj) {
    // use object if already an array
    if (Array.isArray(obj)) return obj;
    let isArrayLike = typeof obj == 'object' && typeof obj.length == 'number'; // convert nodeList to array

    if (isArrayLike) return [...obj]; // array of single index

    return [obj];
  } // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {[Array, Element, NodeList, String]} elem
   * @param {[Object, Function]} options - if function, use as callback
   * @param {Function} onAlways - callback function
   * @returns {ImagesLoaded}
   */


  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    } // use elem as selector string


    let queryElem = elem;

    if (typeof elem == 'string') {
      queryElem = document.querySelectorAll(elem);
    } // bail if bad element


    if (!queryElem) {
      console.error(`Bad element for imagesLoaded ${queryElem || elem}`);
      return;
    }

    this.elements = makeArray(queryElem);
    this.options = {}; // shift arguments if no options set

    if (typeof options == 'function') {
      onAlways = options;
    } else {
      Object.assign(this.options, options);
    }

    if (onAlways) this.on('always', onAlways);
    this.getImages(); // add jQuery Deferred object

    if ($) this.jqDeferred = new $.Deferred(); // HACK check async to allow time to bind listeners

    setTimeout(this.check.bind(this));
  }

  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);

  ImagesLoaded.prototype.getImages = function () {
    this.images = []; // filter & find items if we have an item selector

    this.elements.forEach(this.addElementImages, this);
  };

  const elementNodeTypes = [1, 9, 11];
  /**
   * @param {Node} elem
   */

  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName === 'IMG') {
      this.addImage(elem);
    } // get background image on element


    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    } // find children
    // no non-element nodes, #143


    let {
      nodeType
    } = elem;
    if (!nodeType || !elementNodeTypes.includes(nodeType)) return;
    let childImgs = elem.querySelectorAll('img'); // concat childElems to filterFound array

    for (let img of childImgs) {
      this.addImage(img);
    } // get child background images


    if (typeof this.options.background == 'string') {
      let children = elem.querySelectorAll(this.options.background);

      for (let child of children) {
        this.addElementBackgroundImages(child);
      }
    }
  };

  const reURL = /url\((['"])?(.*?)\1\)/gi;

  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    let style = getComputedStyle(elem); // Firefox returns null if in a hidden iframe https://bugzil.la/548397

    if (!style) return; // get url inside url("...")

    let matches = reURL.exec(style.backgroundImage);

    while (matches !== null) {
      let url = matches && matches[2];

      if (url) {
        this.addBackground(url, elem);
      }

      matches = reURL.exec(style.backgroundImage);
    }
  };
  /**
   * @param {Image} img
   */


  ImagesLoaded.prototype.addImage = function (img) {
    let loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };

  ImagesLoaded.prototype.addBackground = function (url, elem) {
    let background = new Background(url, elem);
    this.images.push(background);
  };

  ImagesLoaded.prototype.check = function () {
    this.progressedCount = 0;
    this.hasAnyBroken = false; // complete if no images

    if (!this.images.length) {
      this.complete();
      return;
    }
    /* eslint-disable-next-line func-style */


    let onProgress = (image, elem, message) => {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(() => {
        this.progress(image, elem, message);
      });
    };

    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };

  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded; // progress event

    this.emitEvent('progress', [this, image, elem]);

    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    } // check if completed


    if (this.progressedCount === this.images.length) {
      this.complete();
    }

    if (this.options.debug && console) {
      console.log(`progress: ${message}`, image, elem);
    }
  };

  ImagesLoaded.prototype.complete = function () {
    let eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);

    if (this.jqDeferred) {
      let jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  }; // --------------------------  -------------------------- //


  function LoadingImage(img) {
    this.img = img;
  }

  LoadingImage.prototype = Object.create(EvEmitter.prototype);

  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    let isComplete = this.getIsImageComplete();

    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    } // If none of the checks above matched, simulate loading on detached element.


    this.proxyImage = new Image(); // add crossOrigin attribute. #204

    if (this.img.crossOrigin) {
      this.proxyImage.crossOrigin = this.img.crossOrigin;
    }

    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this); // bind to image as well for Firefox. #191

    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.currentSrc || this.img.src;
  };

  LoadingImage.prototype.getIsImageComplete = function () {
    // check for non-zero, non-undefined naturalWidth
    // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
    return this.img.complete && this.img.naturalWidth;
  };

  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    let {
      parentNode
    } = this.img; // emit progress with parent <picture> or self <img>

    let elem = parentNode.nodeName === 'PICTURE' ? parentNode : this.img;
    this.emitEvent('progress', [this, elem, message]);
  }; // ----- events ----- //
  // trigger specified handler for event type


  LoadingImage.prototype.handleEvent = function (event) {
    let method = 'on' + event.type;

    if (this[method]) {
      this[method](event);
    }
  };

  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };

  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };

  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  }; // -------------------------- Background -------------------------- //


  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  } // inherit LoadingImage prototype


  Background.prototype = Object.create(LoadingImage.prototype);

  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url; // check if image is already complete

    let isComplete = this.getIsImageComplete();

    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };

  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  }; // -------------------------- jQuery -------------------------- //


  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;
    if (!jQuery) return; // set local variable

    $ = jQuery; // $().imagesLoaded()

    $.fn.imagesLoaded = function (options, onAlways) {
      let instance = new ImagesLoaded(this, options, onAlways);
      return instance.jqDeferred.promise($(this));
    };
  }; // try making plugin


  ImagesLoaded.makeJQueryPlugin(); // --------------------------  -------------------------- //

  return ImagesLoaded;
});

/***/ }),

/***/ "./node_modules/normalize-wheel/index.js":
/*!***********************************************!*\
  !*** ./node_modules/normalize-wheel/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./src/normalizeWheel.js */ "./node_modules/normalize-wheel/src/normalizeWheel.js");

/***/ }),

/***/ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/ExecutionEnvironment.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */


var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */

var ExecutionEnvironment = {
  canUseDOM: canUseDOM,
  canUseWorkers: typeof Worker !== 'undefined',
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};
module.exports = ExecutionEnvironment;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js ***!
  \******************************************************************/
/***/ ((module) => {

/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */

/**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */
var _populated = false; // Browsers

var _ie, _firefox, _opera, _webkit, _chrome; // Actual IE browser for compatibility mode


var _ie_real_version; // Platforms


var _osx, _windows, _linux, _android; // Architectures


var _win64; // Devices


var _iphone, _ipad, _native;

var _mobile;

function _populate() {
  if (_populated) {
    return;
  }

  _populated = true; // To work around buggy JS libraries that can't handle multi-digit
  // version numbers, Opera 10's user agent string claims it's Opera
  // 9, then later includes a Version/X.Y field:
  //
  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10

  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking
  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
  // from either x64 or ia64;  so ultimately, you should just check for Win64
  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
  // Windows will send 'WOW64' instead.

  _win64 = !!/Win64/.exec(uas);

  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN; // IE compatibility mode

    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    } // grab the "true" ie version from the trident token if available


    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;

    if (_webkit) {
      // We do not add the regexp to the above test, because it will always
      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
      // the userAgent string.
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }

  if (os) {
    if (os[1]) {
      // Detect OS X version.  If no version number matches, set _osx to true.
      // Version examples:  10, 10_6_1, 10.7
      // Parses version number as a float, taking only first two sets of
      // digits.  If only one set of digits is found, returns just the major
      // version number.
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
    } else {
      _osx = false;
    }

    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}

var UserAgent_DEPRECATED = {
  /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  ie: function () {
    return _populate() || _ie;
  },

  /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
  ieCompatibilityMode: function () {
    return _populate() || _ie_real_version > _ie;
  },

  /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
  ie64: function () {
    return UserAgent_DEPRECATED.ie() && _win64;
  },

  /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  firefox: function () {
    return _populate() || _firefox;
  },

  /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  opera: function () {
    return _populate() || _opera;
  },

  /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  webkit: function () {
    return _populate() || _webkit;
  },

  /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
  safari: function () {
    return UserAgent_DEPRECATED.webkit();
  },

  /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  chrome: function () {
    return _populate() || _chrome;
  },

  /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
  windows: function () {
    return _populate() || _windows;
  },

  /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
  osx: function () {
    return _populate() || _osx;
  },

  /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
  linux: function () {
    return _populate() || _linux;
  },

  /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
  iphone: function () {
    return _populate() || _iphone;
  },
  mobile: function () {
    return _populate() || _iphone || _ipad || _android || _mobile;
  },
  nativeApp: function () {
    // webviews inside of the native apps
    return _populate() || _native;
  },
  android: function () {
    return _populate() || _android;
  },
  ipad: function () {
    return _populate() || _ipad;
  }
};
module.exports = UserAgent_DEPRECATED;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/isEventSupported.js":
/*!**************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/isEventSupported.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */


var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js");

var useHasFeature;

if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */


function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/normalizeWheel.js":
/*!************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/normalizeWheel.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */


var UserAgent_DEPRECATED = __webpack_require__(/*! ./UserAgent_DEPRECATED */ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js");

var isEventSupported = __webpack_require__(/*! ./isEventSupported */ "./node_modules/normalize-wheel/src/isEventSupported.js"); // Reasonable defaults


var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */

function normalizeWheel(
/*object*/
event)
/*object*/
{
  var sX = 0,
      sY = 0,
      // spinX, spinY
  pX = 0,
      pY = 0; // pixelX, pixelY
  // Legacy

  if ('detail' in event) {
    sY = event.detail;
  }

  if ('wheelDelta' in event) {
    sY = -event.wheelDelta / 120;
  }

  if ('wheelDeltaY' in event) {
    sY = -event.wheelDeltaY / 120;
  }

  if ('wheelDeltaX' in event) {
    sX = -event.wheelDeltaX / 120;
  } // side scrolling on FF with DOMMouseScroll


  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }

  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;

  if ('deltaY' in event) {
    pY = event.deltaY;
  }

  if ('deltaX' in event) {
    pX = event.deltaX;
  }

  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  } // Fall-back if spin cannot be determined


  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }

  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }

  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}
/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */


normalizeWheel.getEventType = function ()
/*string*/
{
  return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';
};

module.exports = normalizeWheel;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebSocketClient)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}



var WebSocketClient = /*#__PURE__*/function () {
  /**
   * @param {string} url
   */
  function WebSocketClient(url) {
    _classCallCheck(this, WebSocketClient);

    this.client = new WebSocket(url);

    this.client.onerror = function (error) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
    };
  }
  /**
   * @param {(...args: any[]) => void} f
   */


  _createClass(WebSocketClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.client.onopen = f;
    }
    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onClose",
    value: function onClose(f) {
      this.client.onclose = f;
    } // call f with the message string as the first argument

    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.client.onmessage = function (e) {
        f(e.data);
      };
    }
  }]);

  return WebSocketClient;
}();



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/******/
(function () {
  // webpackBootstrap

  /******/
  "use strict";
  /******/

  var __webpack_modules__ = {
    /***/
    "./client-src/modules/logger/SyncBailHookFake.js":
    /*!*******************************************************!*\
      !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
      \*******************************************************/

    /***/
    function (module) {
      /**
       * Client stub for tapable SyncBailHook
       */
      module.exports = function clientTapableSyncBailHook() {
        return {
          call: function call() {}
        };
      };
      /***/

    },

    /***/
    "./node_modules/webpack/lib/logging/Logger.js":
    /*!****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/Logger.js ***!
      \****************************************************/

    /***/
    function (__unused_webpack_module, exports) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }

      var LogType = Object.freeze({
        error:
        /** @type {"error"} */
        "error",
        // message, c style arguments
        warn:
        /** @type {"warn"} */
        "warn",
        // message, c style arguments
        info:
        /** @type {"info"} */
        "info",
        // message, c style arguments
        log:
        /** @type {"log"} */
        "log",
        // message, c style arguments
        debug:
        /** @type {"debug"} */
        "debug",
        // message, c style arguments
        trace:
        /** @type {"trace"} */
        "trace",
        // no arguments
        group:
        /** @type {"group"} */
        "group",
        // [label]
        groupCollapsed:
        /** @type {"groupCollapsed"} */
        "groupCollapsed",
        // [label]
        groupEnd:
        /** @type {"groupEnd"} */
        "groupEnd",
        // [label]
        profile:
        /** @type {"profile"} */
        "profile",
        // [profileName]
        profileEnd:
        /** @type {"profileEnd"} */
        "profileEnd",
        // [profileName]
        time:
        /** @type {"time"} */
        "time",
        // name, time as [seconds, nanoseconds]
        clear:
        /** @type {"clear"} */
        "clear",
        // no arguments
        status:
        /** @type {"status"} */
        "status" // message, arguments

      });
      exports.LogType = LogType;
      /** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */

      var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger raw log method");
      var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger times");
      var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger aggregated times");

      var WebpackLogger = /*#__PURE__*/function () {
        /**
         * @param {function(LogTypeEnum, any[]=): void} log log function
         * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger
         */
        function WebpackLogger(log, getChildLogger) {
          _classCallCheck(this, WebpackLogger);

          this[LOG_SYMBOL] = log;
          this.getChildLogger = getChildLogger;
        }

        _createClass(WebpackLogger, [{
          key: "error",
          value: function error() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            this[LOG_SYMBOL](LogType.error, args);
          }
        }, {
          key: "warn",
          value: function warn() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            this[LOG_SYMBOL](LogType.warn, args);
          }
        }, {
          key: "info",
          value: function info() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            this[LOG_SYMBOL](LogType.info, args);
          }
        }, {
          key: "log",
          value: function log() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            this[LOG_SYMBOL](LogType.log, args);
          }
        }, {
          key: "debug",
          value: function debug() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            this[LOG_SYMBOL](LogType.debug, args);
          }
        }, {
          key: "assert",
          value: function assert(assertion) {
            if (!assertion) {
              for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                args[_key6 - 1] = arguments[_key6];
              }

              this[LOG_SYMBOL](LogType.error, args);
            }
          }
        }, {
          key: "trace",
          value: function trace() {
            this[LOG_SYMBOL](LogType.trace, ["Trace"]);
          }
        }, {
          key: "clear",
          value: function clear() {
            this[LOG_SYMBOL](LogType.clear);
          }
        }, {
          key: "status",
          value: function status() {
            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            this[LOG_SYMBOL](LogType.status, args);
          }
        }, {
          key: "group",
          value: function group() {
            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = arguments[_key8];
            }

            this[LOG_SYMBOL](LogType.group, args);
          }
        }, {
          key: "groupCollapsed",
          value: function groupCollapsed() {
            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
              args[_key9] = arguments[_key9];
            }

            this[LOG_SYMBOL](LogType.groupCollapsed, args);
          }
        }, {
          key: "groupEnd",
          value: function groupEnd() {
            for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
              args[_key10] = arguments[_key10];
            }

            this[LOG_SYMBOL](LogType.groupEnd, args);
          }
        }, {
          key: "profile",
          value: function profile(label) {
            this[LOG_SYMBOL](LogType.profile, [label]);
          }
        }, {
          key: "profileEnd",
          value: function profileEnd(label) {
            this[LOG_SYMBOL](LogType.profileEnd, [label]);
          }
        }, {
          key: "time",
          value: function time(label) {
            this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
            this[TIMERS_SYMBOL].set(label, process.hrtime());
          }
        }, {
          key: "timeLog",
          value: function timeLog(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
            }

            var time = process.hrtime(prev);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }
        }, {
          key: "timeEnd",
          value: function timeEnd(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
            }

            var time = process.hrtime(prev);
            this[TIMERS_SYMBOL].delete(label);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }
        }, {
          key: "timeAggregate",
          value: function timeAggregate(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
            }

            var time = process.hrtime(prev);
            this[TIMERS_SYMBOL].delete(label);
            this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
            var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);

            if (current !== undefined) {
              if (time[1] + current[1] > 1e9) {
                time[0] += current[0] + 1;
                time[1] = time[1] - 1e9 + current[1];
              } else {
                time[0] += current[0];
                time[1] += current[1];
              }
            }

            this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
          }
        }, {
          key: "timeAggregateEnd",
          value: function timeAggregateEnd(label) {
            if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
            var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
            if (time === undefined) return;
            this[TIMERS_AGGREGATES_SYMBOL].delete(label);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }
        }]);

        return WebpackLogger;
      }();

      exports.Logger = WebpackLogger;
      /***/
    },

    /***/
    "./node_modules/webpack/lib/logging/createConsoleLogger.js":
    /*!*****************************************************************!*\
      !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
      \*****************************************************************/

    /***/
    function (module, __unused_webpack_exports, __nested_webpack_require_12752__) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var _require = __nested_webpack_require_12752__(
      /*! ./Logger */
      "./node_modules/webpack/lib/logging/Logger.js"),
          LogType = _require.LogType;
      /** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */

      /** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */

      /** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */

      /** @typedef {function(string): boolean} FilterFunction */

      /**
       * @typedef {Object} LoggerConsole
       * @property {function(): void} clear
       * @property {function(): void} trace
       * @property {(...args: any[]) => void} info
       * @property {(...args: any[]) => void} log
       * @property {(...args: any[]) => void} warn
       * @property {(...args: any[]) => void} error
       * @property {(...args: any[]) => void=} debug
       * @property {(...args: any[]) => void=} group
       * @property {(...args: any[]) => void=} groupCollapsed
       * @property {(...args: any[]) => void=} groupEnd
       * @property {(...args: any[]) => void=} status
       * @property {(...args: any[]) => void=} profile
       * @property {(...args: any[]) => void=} profileEnd
       * @property {(...args: any[]) => void=} logTime
       */

      /**
       * @typedef {Object} LoggerOptions
       * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
       * @property {FilterTypes|boolean} debug filter for debug logging
       * @property {LoggerConsole} console the console to log to
       */

      /**
       * @param {FilterItemTypes} item an input item
       * @returns {FilterFunction} filter function
       */


      var filterToFunction = function filterToFunction(item) {
        if (typeof item === "string") {
          var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
          /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
          return function (ident) {
            return regExp.test(ident);
          };
        }

        if (item && typeof item === "object" && typeof item.test === "function") {
          return function (ident) {
            return item.test(ident);
          };
        }

        if (typeof item === "function") {
          return item;
        }

        if (typeof item === "boolean") {
          return function () {
            return item;
          };
        }
      };
      /**
       * @enum {number}
       */


      var LogLevel = {
        none: 6,
        false: 6,
        error: 5,
        warn: 4,
        info: 3,
        log: 2,
        true: 2,
        verbose: 1
      };
      /**
       * @param {LoggerOptions} options options object
       * @returns {function(string, LogTypeEnum, any[]): void} logging function
       */

      module.exports = function (_ref) {
        var _ref$level = _ref.level,
            level = _ref$level === void 0 ? "info" : _ref$level,
            _ref$debug = _ref.debug,
            debug = _ref$debug === void 0 ? false : _ref$debug,
            console = _ref.console;
        var debugFilters = typeof debug === "boolean" ? [function () {
          return debug;
        }] :
        /** @type {FilterItemTypes[]} */
        [].concat(debug).map(filterToFunction);
        /** @type {number} */

        var loglevel = LogLevel["".concat(level)] || 0;
        /**
         * @param {string} name name of the logger
         * @param {LogTypeEnum} type type of the log entry
         * @param {any[]} args arguments of the log entry
         * @returns {void}
         */

        var logger = function logger(name, type, args) {
          var labeledArgs = function labeledArgs() {
            if (Array.isArray(args)) {
              if (args.length > 0 && typeof args[0] === "string") {
                return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
              } else {
                return ["[".concat(name, "]")].concat(_toConsumableArray(args));
              }
            } else {
              return [];
            }
          };

          var debug = debugFilters.some(function (f) {
            return f(name);
          });

          switch (type) {
            case LogType.debug:
              if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

              if (typeof console.debug === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.debug.apply(console, _toConsumableArray(labeledArgs()));
              } else {
                console.log.apply(console, _toConsumableArray(labeledArgs()));
              }

              break;

            case LogType.log:
              if (!debug && loglevel > LogLevel.log) return;
              console.log.apply(console, _toConsumableArray(labeledArgs()));
              break;

            case LogType.info:
              if (!debug && loglevel > LogLevel.info) return;
              console.info.apply(console, _toConsumableArray(labeledArgs()));
              break;

            case LogType.warn:
              if (!debug && loglevel > LogLevel.warn) return;
              console.warn.apply(console, _toConsumableArray(labeledArgs()));
              break;

            case LogType.error:
              if (!debug && loglevel > LogLevel.error) return;
              console.error.apply(console, _toConsumableArray(labeledArgs()));
              break;

            case LogType.trace:
              if (!debug) return;
              console.trace();
              break;

            case LogType.groupCollapsed:
              if (!debug && loglevel > LogLevel.log) return;

              if (!debug && loglevel > LogLevel.verbose) {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                if (typeof console.groupCollapsed === "function") {
                  // eslint-disable-next-line node/no-unsupported-features/node-builtins
                  console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
                } else {
                  console.log.apply(console, _toConsumableArray(labeledArgs()));
                }

                break;
              }

            // falls through

            case LogType.group:
              if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

              if (typeof console.group === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.group.apply(console, _toConsumableArray(labeledArgs()));
              } else {
                console.log.apply(console, _toConsumableArray(labeledArgs()));
              }

              break;

            case LogType.groupEnd:
              if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

              if (typeof console.groupEnd === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.groupEnd();
              }

              break;

            case LogType.time:
              {
                if (!debug && loglevel > LogLevel.log) return;
                var ms = args[1] * 1000 + args[2] / 1000000;
                var msg = "[".concat(name, "] ").concat(args[0], ": ").concat(ms, " ms");

                if (typeof console.logTime === "function") {
                  console.logTime(msg);
                } else {
                  console.log(msg);
                }

                break;
              }

            case LogType.profile:
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              if (typeof console.profile === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.profile.apply(console, _toConsumableArray(labeledArgs()));
              }

              break;

            case LogType.profileEnd:
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              if (typeof console.profileEnd === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
              }

              break;

            case LogType.clear:
              if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

              if (typeof console.clear === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.clear();
              }

              break;

            case LogType.status:
              if (!debug && loglevel > LogLevel.info) return;

              if (typeof console.status === "function") {
                if (args.length === 0) {
                  console.status();
                } else {
                  console.status.apply(console, _toConsumableArray(labeledArgs()));
                }
              } else {
                if (args.length !== 0) {
                  console.info.apply(console, _toConsumableArray(labeledArgs()));
                }
              }

              break;

            default:
              throw new Error("Unexpected LogType ".concat(type));
          }
        };

        return logger;
      };
      /***/

    },

    /***/
    "./node_modules/webpack/lib/logging/runtime.js":
    /*!*****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/runtime.js ***!
      \*****************************************************/

    /***/
    function (__unused_webpack_module, exports, __nested_webpack_require_24417__) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */
      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var SyncBailHook = __nested_webpack_require_24417__(
      /*! tapable/lib/SyncBailHook */
      "./client-src/modules/logger/SyncBailHookFake.js");

      var _require = __nested_webpack_require_24417__(
      /*! ./Logger */
      "./node_modules/webpack/lib/logging/Logger.js"),
          Logger = _require.Logger;

      var createConsoleLogger = __nested_webpack_require_24417__(
      /*! ./createConsoleLogger */
      "./node_modules/webpack/lib/logging/createConsoleLogger.js");
      /** @type {createConsoleLogger.LoggerOptions} */


      var currentDefaultLoggerOptions = {
        level: "info",
        debug: false,
        console: console
      };
      var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
      /**
       * @param {string} name name of the logger
       * @returns {Logger} a logger
       */

      exports.getLogger = function (name) {
        return new Logger(function (type, args) {
          if (exports.hooks.log.call(name, type, args) === undefined) {
            currentDefaultLogger(name, type, args);
          }
        }, function (childName) {
          return exports.getLogger("".concat(name, "/").concat(childName));
        });
      };
      /**
       * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
       * @returns {void}
       */


      exports.configureDefaultLogger = function (options) {
        _extends(currentDefaultLoggerOptions, options);

        currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
      };

      exports.hooks = {
        log: new SyncBailHook(["origin", "type", "args"])
      };
      /***/
    }
    /******/

  };
  /************************************************************************/

  /******/
  // The module cache

  /******/

  var __webpack_module_cache__ = {};
  /******/

  /******/
  // The require function

  /******/

  function __nested_webpack_require_26919__(moduleId) {
    /******/
    // Check if module is in cache

    /******/
    var cachedModule = __webpack_module_cache__[moduleId];
    /******/

    if (cachedModule !== undefined) {
      /******/
      return cachedModule.exports;
      /******/
    }
    /******/
    // Create a new module (and put it into the cache)

    /******/


    var module = __webpack_module_cache__[moduleId] = {
      /******/
      // no module.id needed

      /******/
      // no module.loaded needed

      /******/
      exports: {}
      /******/

    };
    /******/

    /******/
    // Execute the module function

    /******/

    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_26919__);
    /******/

    /******/
    // Return the exports of the module

    /******/


    return module.exports;
    /******/
  }
  /******/

  /************************************************************************/

  /******/

  /* webpack/runtime/define property getters */

  /******/


  !function () {
    /******/
    // define getter functions for harmony exports

    /******/
    __nested_webpack_require_26919__.d = function (exports, definition) {
      /******/
      for (var key in definition) {
        /******/
        if (__nested_webpack_require_26919__.o(definition, key) && !__nested_webpack_require_26919__.o(exports, key)) {
          /******/
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key]
          });
          /******/
        }
        /******/

      }
      /******/

    };
    /******/

  }();
  /******/

  /******/

  /* webpack/runtime/hasOwnProperty shorthand */

  /******/

  !function () {
    /******/
    __nested_webpack_require_26919__.o = function (obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    };
    /******/

  }();
  /******/

  /******/

  /* webpack/runtime/make namespace object */

  /******/

  !function () {
    /******/
    // define __esModule on exports

    /******/
    __nested_webpack_require_26919__.r = function (exports) {
      /******/
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/
        Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module'
        });
        /******/
      }
      /******/


      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      /******/
    };
    /******/

  }();
  /******/

  /************************************************************************/

  var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

  !function () {
    /*!********************************************!*\
      !*** ./client-src/modules/logger/index.js ***!
      \********************************************/
    __nested_webpack_require_26919__.r(__webpack_exports__);
    /* harmony export */


    __nested_webpack_require_26919__.d(__webpack_exports__, {
      /* harmony export */
      "default": function () {
        return (
          /* reexport default export from named module */
          webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__
        );
      }
      /* harmony export */

    });
    /* harmony import */


    var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_26919__(
    /*! webpack/lib/logging/runtime.js */
    "./node_modules/webpack/lib/logging/runtime.js");
  }();
  var __webpack_export_target__ = exports;

  for (var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];

  if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", {
    value: true
  });
  /******/
})();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/******/
(function () {
  // webpackBootstrap

  /******/
  "use strict";
  /******/

  var __webpack_modules__ = {
    /***/
    "./node_modules/strip-ansi/index.js":
    /*!******************************************!*\
      !*** ./node_modules/strip-ansi/index.js ***!
      \******************************************/

    /***/
    function (__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_406__) {
      __nested_webpack_require_406__.r(__webpack_exports__);
      /* harmony export */


      __nested_webpack_require_406__.d(__webpack_exports__, {
        /* harmony export */
        "default": function () {
          return (
            /* binding */
            stripAnsi
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var ansi_regex__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_406__(
      /*! ansi-regex */
      "./node_modules/strip-ansi/node_modules/ansi-regex/index.js");

      function stripAnsi(string) {
        if (typeof string !== 'string') {
          throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
        }

        return string.replace((0, ansi_regex__WEBPACK_IMPORTED_MODULE_0__["default"])(), '');
      }
      /***/

    },

    /***/
    "./node_modules/strip-ansi/node_modules/ansi-regex/index.js":
    /*!******************************************************************!*\
      !*** ./node_modules/strip-ansi/node_modules/ansi-regex/index.js ***!
      \******************************************************************/

    /***/
    function (__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_1632__) {
      __nested_webpack_require_1632__.r(__webpack_exports__);
      /* harmony export */


      __nested_webpack_require_1632__.d(__webpack_exports__, {
        /* harmony export */
        "default": function () {
          return (
            /* binding */
            ansiRegex
          );
        }
        /* harmony export */

      });

      function ansiRegex() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$onlyFirst = _ref.onlyFirst,
            onlyFirst = _ref$onlyFirst === void 0 ? false : _ref$onlyFirst;

        var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
        return new RegExp(pattern, onlyFirst ? undefined : 'g');
      }
      /***/

    }
    /******/

  };
  /************************************************************************/

  /******/
  // The module cache

  /******/

  var __webpack_module_cache__ = {};
  /******/

  /******/
  // The require function

  /******/

  function __nested_webpack_require_2778__(moduleId) {
    /******/
    // Check if module is in cache

    /******/
    var cachedModule = __webpack_module_cache__[moduleId];
    /******/

    if (cachedModule !== undefined) {
      /******/
      return cachedModule.exports;
      /******/
    }
    /******/
    // Create a new module (and put it into the cache)

    /******/


    var module = __webpack_module_cache__[moduleId] = {
      /******/
      // no module.id needed

      /******/
      // no module.loaded needed

      /******/
      exports: {}
      /******/

    };
    /******/

    /******/
    // Execute the module function

    /******/

    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_2778__);
    /******/

    /******/
    // Return the exports of the module

    /******/


    return module.exports;
    /******/
  }
  /******/

  /************************************************************************/

  /******/

  /* webpack/runtime/define property getters */

  /******/


  !function () {
    /******/
    // define getter functions for harmony exports

    /******/
    __nested_webpack_require_2778__.d = function (exports, definition) {
      /******/
      for (var key in definition) {
        /******/
        if (__nested_webpack_require_2778__.o(definition, key) && !__nested_webpack_require_2778__.o(exports, key)) {
          /******/
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key]
          });
          /******/
        }
        /******/

      }
      /******/

    };
    /******/

  }();
  /******/

  /******/

  /* webpack/runtime/hasOwnProperty shorthand */

  /******/

  !function () {
    /******/
    __nested_webpack_require_2778__.o = function (obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    };
    /******/

  }();
  /******/

  /******/

  /* webpack/runtime/make namespace object */

  /******/

  !function () {
    /******/
    // define __esModule on exports

    /******/
    __nested_webpack_require_2778__.r = function (exports) {
      /******/
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/
        Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module'
        });
        /******/
      }
      /******/


      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      /******/
    };
    /******/

  }();
  /******/

  /************************************************************************/

  var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

  !function () {
    /*!************************************************!*\
      !*** ./client-src/modules/strip-ansi/index.js ***!
      \************************************************/
    __nested_webpack_require_2778__.r(__webpack_exports__);
    /* harmony import */


    var strip_ansi__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_2778__(
    /*! strip-ansi */
    "./node_modules/strip-ansi/index.js");
    /* harmony default export */


    __webpack_exports__["default"] = strip_ansi__WEBPACK_IMPORTED_MODULE_0__["default"];
  }();
  var __webpack_export_target__ = exports;

  for (var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];

  if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", {
    value: true
  });
  /******/
})();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatProblem": () => (/* binding */ formatProblem),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js");
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(html_entities__WEBPACK_IMPORTED_MODULE_1__);
// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).


var colors = {
  reset: ["transparent", "transparent"],
  black: "181818",
  red: "E36049",
  green: "B3CB74",
  yellow: "FFD080",
  blue: "7CAFC2",
  magenta: "7FACCA",
  cyan: "C3C2EF",
  lightgrey: "EBE7E3",
  darkgrey: "6D7891"
};
/** @type {HTMLIFrameElement | null | undefined} */

var iframeContainerElement;
/** @type {HTMLDivElement | null | undefined} */

var containerElement;
/** @type {Array<(element: HTMLDivElement) => void>} */

var onLoadQueue = [];
ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);

function createContainer() {
  iframeContainerElement = document.createElement("iframe");
  iframeContainerElement.id = "webpack-dev-server-client-overlay";
  iframeContainerElement.src = "about:blank";
  iframeContainerElement.style.position = "fixed";
  iframeContainerElement.style.left = 0;
  iframeContainerElement.style.top = 0;
  iframeContainerElement.style.right = 0;
  iframeContainerElement.style.bottom = 0;
  iframeContainerElement.style.width = "100vw";
  iframeContainerElement.style.height = "100vh";
  iframeContainerElement.style.border = "none";
  iframeContainerElement.style.zIndex = 9999999999;

  iframeContainerElement.onload = function () {
    containerElement =
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.createElement("div");
    containerElement.id = "webpack-dev-server-client-overlay-div";
    containerElement.style.position = "fixed";
    containerElement.style.boxSizing = "border-box";
    containerElement.style.left = 0;
    containerElement.style.top = 0;
    containerElement.style.right = 0;
    containerElement.style.bottom = 0;
    containerElement.style.width = "100vw";
    containerElement.style.height = "100vh";
    containerElement.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
    containerElement.style.color = "#E8E8E8";
    containerElement.style.fontFamily = "Menlo, Consolas, monospace";
    containerElement.style.fontSize = "large";
    containerElement.style.padding = "2rem";
    containerElement.style.lineHeight = "1.2";
    containerElement.style.whiteSpace = "pre-wrap";
    containerElement.style.overflow = "auto";
    var headerElement = document.createElement("span");
    headerElement.innerText = "Compiled with problems:";
    var closeButtonElement = document.createElement("button");
    closeButtonElement.innerText = "X";
    closeButtonElement.style.background = "transparent";
    closeButtonElement.style.border = "none";
    closeButtonElement.style.fontSize = "20px";
    closeButtonElement.style.fontWeight = "bold";
    closeButtonElement.style.color = "white";
    closeButtonElement.style.cursor = "pointer";
    closeButtonElement.style.cssFloat = "right"; // @ts-ignore

    closeButtonElement.style.styleFloat = "right";
    closeButtonElement.addEventListener("click", function () {
      hide();
    });
    containerElement.appendChild(headerElement);
    containerElement.appendChild(closeButtonElement);
    containerElement.appendChild(document.createElement("br"));
    containerElement.appendChild(document.createElement("br"));
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */

    iframeContainerElement.contentDocument.body.appendChild(containerElement);
    onLoadQueue.forEach(function (onLoad) {
      onLoad(
      /** @type {HTMLDivElement} */
      containerElement);
    });
    onLoadQueue = [];
    /** @type {HTMLIFrameElement} */

    iframeContainerElement.onload = null;
  };

  document.body.appendChild(iframeContainerElement);
}
/**
 * @param {(element: HTMLDivElement) => void} callback
 */


function ensureOverlayExists(callback) {
  if (containerElement) {
    // Everything is ready, call the callback right away.
    callback(containerElement);
    return;
  }

  onLoadQueue.push(callback);

  if (iframeContainerElement) {
    return;
  }

  createContainer();
} // Successful compilation.


function hide() {
  if (!iframeContainerElement) {
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(iframeContainerElement);
  iframeContainerElement = null;
  containerElement = null;
}
/**
 * @param {string} type
 * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string }} item
 * @returns {{ header: string, body: string }}
 */


function formatProblem(type, item) {
  var header = type === "warning" ? "WARNING" : "ERROR";
  var body = "";

  if (typeof item === "string") {
    body += item;
  } else {
    var file = item.file || ""; // eslint-disable-next-line no-nested-ternary

    var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
    var loc = item.loc;
    header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
    body += item.message || "";
  }

  return {
    header: header,
    body: body
  };
} // Compilation with errors (e.g. syntax error or missing modules).

/**
 * @param {string} type
 * @param {Array<string  | { file?: string, moduleName?: string, loc?: string, message?: string }>} messages
 */


function show(type, messages) {
  ensureOverlayExists(function () {
    messages.forEach(function (message) {
      var entryElement = document.createElement("div");
      var typeElement = document.createElement("span");

      var _formatProblem = formatProblem(type, message),
          header = _formatProblem.header,
          body = _formatProblem.body;

      typeElement.innerText = header;
      typeElement.style.color = "#".concat(colors.red); // Make it look similar to our terminal.

      var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()((0,html_entities__WEBPACK_IMPORTED_MODULE_1__.encode)(body));
      var messageTextNode = document.createElement("div");
      messageTextNode.innerHTML = text;
      entryElement.appendChild(typeElement);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(messageTextNode);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      /** @type {HTMLDivElement} */

      containerElement.appendChild(entryElement);
    });
  });
}



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* global __webpack_dev_server_client__ */

 // this WebsocketClient is here as a default fallback, in case the client is not injected

/* eslint-disable camelcase */

var Client = // eslint-disable-next-line no-nested-ternary
typeof __webpack_dev_server_client__ !== "undefined" ? typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
/* eslint-enable camelcase */

var retries = 0;
var maxRetries = 10;
var client = null;
/**
 * @param {string} url
 * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers
 * @param {number} [reconnect]
 */

var socket = function initSocket(url, handlers, reconnect) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;

    if (typeof reconnect !== "undefined") {
      maxRetries = reconnect;
    }
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries < maxRetries) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
      setTimeout(function () {
        socket(url, handlers, reconnect);
      }, retryInMs);
    }
  });
  client.onMessage(
  /**
   * @param {any} data
   */
  function (data) {
    var message = JSON.parse(data);

    if (handlers[message.type]) {
      handlers[message.type](message.data, message.params);
    }
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL
 * @returns {string}
 */
function format(objURL) {
  var protocol = objURL.protocol || "";

  if (protocol && protocol.substr(-1) !== ":") {
    protocol += ":";
  }

  var auth = objURL.auth || "";

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }

  var host = "";

  if (objURL.hostname) {
    host = auth + (objURL.hostname.indexOf(":") === -1 ? objURL.hostname : "[".concat(objURL.hostname, "]"));

    if (objURL.port) {
      host += ":".concat(objURL.port);
    }
  }

  var pathname = objURL.pathname || "";

  if (objURL.slashes) {
    host = "//".concat(host || "");

    if (pathname && pathname.charAt(0) !== "/") {
      pathname = "/".concat(pathname);
    }
  } else if (!host) {
    host = "";
  }

  var search = objURL.search || "";

  if (search && search.charAt(0) !== "?") {
    search = "?".concat(search);
  }

  var hash = objURL.hash || "";

  if (hash && hash.charAt(0) !== "#") {
    hash = "#".concat(hash);
  }

  pathname = pathname.replace(/[?#]/g,
  /**
   * @param {string} match
   * @returns {string}
   */
  function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}
/**
 * @param {URL & { fromCurrentScript?: boolean }} parsedURL
 * @returns {string}
 */


function createSocketURL(parsedURL) {
  var hostname = parsedURL.hostname; // Node.js module parses it as `::`
  // `new URL(urlString, [baseURLString])` parses it as '[::]'

  var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]"; // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
    hostname = self.location.hostname;
  }

  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.

  if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
    socketURLProtocol = self.location.protocol;
  }

  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
  var socketURLAuth = ""; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
  // Parse authentication credentials in case we need them

  if (parsedURL.username) {
    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,
    // we only include password if the username is not empty.

    if (parsedURL.password) {
      // Result: <username>:<password>
      socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
    }
  } // In case the host is a raw IPv6 address, it can be enclosed in
  // the brackets as the brackets are needed in the final URL string.
  // Need to remove those as url.format blindly adds its own set of brackets
  // if the host string contains colons. That would lead to non-working
  // double brackets (e.g. [[::]]) host
  //
  // All of these web socket url params are optionally passed in through resourceQuery,
  // so we need to fall back to the default if they are not provided


  var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
  var socketURLPort = parsedURL.port;

  if (!socketURLPort || socketURLPort === "0") {
    socketURLPort = self.location.port;
  } // If path is provided it'll be passed in via the resourceQuery as a
  // query param so it has to be parsed out of the querystring in order for the
  // client to open the socket to the correct location.


  var socketURLPathname = "/ws";

  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
    socketURLPathname = parsedURL.pathname;
  }

  return format({
    protocol: socketURLProtocol,
    auth: socketURLAuth,
    hostname: socketURLHostname,
    port: socketURLPort,
    pathname: socketURLPathname,
    slashes: true
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createSocketURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @returns {string}
 */
function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute("src");
  } // Fallback to getting all scripts running in the document.


  var scriptElements = document.scripts || [];
  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
    return element.getAttribute("src");
  });

  if (scriptElementsWithSrc.length > 0) {
    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
    return currentScript.getAttribute("src");
  } // Fail as there was no script to use.


  throw new Error("[webpack-dev-server] Failed to get current script source.");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getCurrentScriptSource);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "setLogLevel": () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);

var name = "webpack-dev-server"; // default level is set on the client side, so it does not need
// to be set by the CLI or API

var defaultLevel = "info"; // options new options, merge with old options

/**
 * @param {false | true | "none" | "error" | "warn" | "info" | "log" | "verbose"} level
 * @returns {void}
 */

function setLogLevel(level) {
  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
    level: level
  });
}

setLogLevel(defaultLevel);
var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/parseURL.js":
/*!******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCurrentScriptSource.js */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

/**
 * @param {string} resourceQuery
 * @returns {{ [key: string]: string | boolean }}
 */

function parseURL(resourceQuery) {
  /** @type {{ [key: string]: string }} */
  var options = {};

  if (typeof resourceQuery === "string" && resourceQuery !== "") {
    var searchParams = resourceQuery.substr(1).split("&");

    for (var i = 0; i < searchParams.length; i++) {
      var pair = searchParams[i].split("=");
      options[pair[0]] = decodeURIComponent(pair[1]);
    }
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptSource = (0,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
    var scriptSourceURL;

    try {
      // The placeholder `baseURL` with `window.location.href`,
      // is to allow parsing of path-relative or protocol-relative URLs,
      // and will have no effect if `scriptSource` is a fully valid URL.
      scriptSourceURL = new URL(scriptSource, self.location.href);
    } catch (error) {// URL parsing failed, do nothing.
      // We will still proceed to see if we can recover using `resourceQuery`
    }

    if (scriptSourceURL) {
      options = scriptSourceURL;
      options.fromCurrentScript = true;
    }
  }

  return options;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");


/** @typedef {import("../index").Options} Options
/** @typedef {import("../index").Status} Status

/**
 * @param {Options} options
 * @param {Status} status
 */

function reloadApp(_ref, status) {
  var hot = _ref.hot,
      liveReload = _ref.liveReload;

  if (status.isUnloading) {
    return;
  }

  var currentHash = status.currentHash,
      previousHash = status.previousHash;
  var isInitial = currentHash.indexOf(
  /** @type {string} */
  previousHash) >= 0;

  if (isInitial) {
    return;
  }
  /**
   * @param {Window} rootWindow
   * @param {number} intervalId
   */


  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App updated. Reloading...");
    rootWindow.location.reload();
  }

  var search = self.location.search.toLowerCase();
  var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
  var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;

  if (hot && allowToHot) {
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App hot update...");
    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default().emit("webpackHotUpdate", status.currentHash);

    if (typeof self !== "undefined" && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(status.currentHash), "*");
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload && allowToLiveReload) {
    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== "about:") {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;

        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reloadApp);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* global __resourceQuery WorkerGlobalScope */
// Send messages to the outside, so plugins can consume it.

/**
 * @param {string} type
 * @param {any} [data]
 */
function sendMsg(type, data) {
  if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, "*");
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");

module.exports = new EventEmitter();

/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
  var shouldLog = logLevel === "info" && level === "info" || ["info", "warning"].indexOf(logLevel) >= 0 && level === "warning" || ["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error";
  return shouldLog;
}

function logGroup(logFn) {
  return function (level, msg) {
    if (shouldLog(level)) {
      logFn(msg);
    }
  };
}

module.exports = function (level, msg) {
  if (shouldLog(level)) {
    if (level === "info") {
      console.log(msg);
    } else if (level === "warning") {
      console.warn(msg);
    } else if (level === "error") {
      console.error(msg);
    }
  }
};
/* eslint-disable node/no-unsupported-features/node-builtins */


var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);
module.exports.groupCollapsed = logGroup(groupCollapsed);
module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
  logLevel = level;
};

module.exports.formatError = function (err) {
  var message = err.message;
  var stack = err.stack;

  if (!stack) {
    return message;
  } else if (stack.indexOf(message) < 0) {
    return message + "\n" + stack;
  } else {
    return stack;
  }
};

/***/ }),

/***/ "./datas/sounds.json":
/*!***************************!*\
  !*** ./datas/sounds.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"id":1,"title":"The Descent","link":"sound/BlueWednesdayInMyHead/The Descent.mp3","artist":{"name":"Blue Wednesday"},"album":{"id":1,"title":"In My Head","cover":"sound/BlueWednesdayInMyHead/cover.png"}},{"id":2,"title":"Aura","link":"sound/DaniSogenAWorlOfIllusion/Aura.mp3","artist":{"name":"Dani Sogen"},"album":{"id":2,"title":"A World of Illusion","cover":"sound/DaniSogenAWorlOfIllusion/cover.png"}},{"id":3,"title":"The Look","link":"sound/softyXlucidGreenOvernight/1. The Look.mp3","artist":{"name":"softy x lucid green"},"album":{"id":3,"title":"overnight","cover":"sound/softyXlucidGreenOvernight/cover.png"}}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("ea1a35ea0727243f6bf1")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&reconnect=10 ***!
  \********************************************************************************************************************************************/
var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&reconnect=10";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/strip-ansi/index.js */ "./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js");
/* harmony import */ var _modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parseURL.js */ "./node_modules/webpack-dev-server/client/utils/parseURL.js");
/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
/* harmony import */ var _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/reloadApp.js */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
/* harmony import */ var _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/createSocketURL.js */ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js");
/* global __resourceQuery, __webpack_hash__ */
/// <reference types="webpack/module" />









/**
 * @typedef {Object} Options
 * @property {boolean} hot
 * @property {boolean} liveReload
 * @property {boolean} progress
 * @property {boolean | { warnings?: boolean, errors?: boolean }} overlay
 * @property {string} [logging]
 * @property {number} [reconnect]
 */

/**
 * @typedef {Object} Status
 * @property {boolean} isUnloading
 * @property {string} currentHash
 * @property {string} [previousHash]
 */

/**
 * @type {Status}
 */

var status = {
  isUnloading: false,
  // TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement
  // eslint-disable-next-line camelcase
  currentHash:  true ? __webpack_require__.h() : 0
};
/** @type {Options} */

var options = {
  hot: false,
  liveReload: false,
  progress: false,
  overlay: false
};
var parsedResourceQuery = (0,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])(__resourceQuery);

if (parsedResourceQuery.hot === "true") {
  options.hot = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
}

if (parsedResourceQuery["live-reload"] === "true") {
  options.liveReload = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
}

if (parsedResourceQuery.logging) {
  options.logging = parsedResourceQuery.logging;
}

if (typeof parsedResourceQuery.reconnect !== "undefined") {
  options.reconnect = Number(parsedResourceQuery.reconnect);
}
/**
 * @param {string} level
 */


function setAllLogLevel(level) {
  // This is needed because the HMR logger operate separately from dev server logger
  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.setLogLevel)(level);
}

if (options.logging) {
  setAllLogLevel(options.logging);
}

self.addEventListener("beforeunload", function () {
  status.isUnloading = true;
});
var onSocketMessage = {
  hot: function hot() {
    if (parsedResourceQuery.hot === "false") {
      return;
    }

    options.hot = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
  },
  liveReload: function liveReload() {
    if (parsedResourceQuery["live-reload"] === "false") {
      return;
    }

    options.liveReload = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
  },
  invalid: function invalid() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("App updated. Recompiling..."); // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Invalid");
  },

  /**
   * @param {string} hash
   */
  hash: function hash(_hash) {
    status.previousHash = status.currentHash;
    status.currentHash = _hash;
  },
  logging: setAllLogLevel,

  /**
   * @param {boolean} value
   */
  overlay: function overlay(value) {
    if (typeof document === "undefined") {
      return;
    }

    options.overlay = value;
  },

  /**
   * @param {number} value
   */
  reconnect: function reconnect(value) {
    if (parsedResourceQuery.reconnect === "false") {
      return;
    }

    options.reconnect = value;
  },

  /**
   * @param {boolean} value
   */
  progress: function progress(value) {
    options.progress = value;
  },

  /**
   * @param {{ pluginName?: string, percent: number, msg: string }} data
   */
  "progress-update": function progressUpdate(data) {
    if (options.progress) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Progress", data);
  },
  "still-ok": function stillOk() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Nothing changed.");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("StillOk");
  },
  ok: function ok() {
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Ok");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },
  // TODO: remove in v5 in favor of 'static-changed'

  /**
   * @param {string} file
   */
  "content-changed": function contentChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {string} file
   */
  "static-changed": function staticChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {Error[]} warnings
   * @param {any} params
   */
  warnings: function warnings(_warnings, params) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn("Warnings while compiling.");

    var printableWarnings = _warnings.map(function (error) {
      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("warning", error),
          header = _formatProblem.header,
          body = _formatProblem.body;

      return "".concat(header, "\n").concat(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default()(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Warnings", printableWarnings);

    for (var i = 0; i < printableWarnings.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn(printableWarnings[i]);
    }

    var needShowOverlayForWarnings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;

    if (needShowOverlayForWarnings) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("warning", _warnings);
    }

    if (params && params.preventReloading) {
      return;
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },

  /**
   * @param {Error[]} errors
   */
  errors: function errors(_errors) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Errors while compiling. Reload prevented.");

    var printableErrors = _errors.map(function (error) {
      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("error", error),
          header = _formatProblem2.header,
          body = _formatProblem2.body;

      return "".concat(header, "\n").concat(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default()(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Errors", printableErrors);

    for (var i = 0; i < printableErrors.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(printableErrors[i]);
    }

    var needShowOverlayForErrors = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;

    if (needShowOverlayForErrors) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("error", _errors);
    }
  },

  /**
   * @param {Error} error
   */
  error: function error(_error) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(_error);
  },
  close: function close() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Disconnected!");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Close");
  }
};
var socketURL = (0,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__["default"])(parsedResourceQuery);
(0,_socket_js__WEBPACK_IMPORTED_MODULE_3__["default"])(socketURL, onSocketMessage, options.reconnect);
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _pages_home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pages/home */ "./app/pages/home/index.js");
/* harmony import */ var _pages_about__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/about */ "./app/pages/about/index.js");
/* harmony import */ var _components_Preloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Preloader */ "./app/components/Preloader.js");
/* harmony import */ var _components_Navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/Navigation */ "./app/components/Navigation.js");
/* harmony import */ var _animation_canvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./animation/canvas */ "./app/animation/canvas.js");
/* harmony import */ var _components_widgets_music_player_player__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/widgets/music-player/player */ "./app/components/widgets/music-player/player.js");
/* harmony import */ var _config_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./config/forms */ "./app/config/forms.js");
/* harmony import */ var _components_Services__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Services */ "./app/components/Services.js");
/* harmony import */ var _utils_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/selectors */ "./app/utils/selectors.js");












class App {
  constructor() {
    this.init();
    this.createPreloader();
    this.initNavigation();
    this.getContent();
    this.initPages();
    this.config();
    this.eventListener();
  }

  init() {
    this.canvas = new _animation_canvas__WEBPACK_IMPORTED_MODULE_4__["default"]();
    this.player = new _components_widgets_music_player_player__WEBPACK_IMPORTED_MODULE_5__["default"]();
  }

  createPreloader() {
    this.preloader = new _components_Preloader__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.preloader.once('completed', _ => this.onPreloadEnd());
  }

  onPreloadEnd() {
    this.preloader.destroy();
  }

  getContent() {
    this.content = document.querySelector('#content');
    this.template = this.content.getAttribute('data-template');
  }

  initPages() {
    this.pages = {
      home: new _pages_home__WEBPACK_IMPORTED_MODULE_0__["default"](),
      about: new _pages_about__WEBPACK_IMPORTED_MODULE_1__["default"]()
    };
    console.log(this.template);
    this.page = this.pages[this.template];

    if (this.page && this.page.create()) {
      this.page.create();
    }
  }

  initNavigation() {
    this.navigation = new _components_Navigation__WEBPACK_IMPORTED_MODULE_3__["default"]();
  }

  config() {
    this.formHandler = new _config_forms__WEBPACK_IMPORTED_MODULE_6__["default"]('connect', 'connect', 'POST');
    this.services = new _components_Services__WEBPACK_IMPORTED_MODULE_7__["default"]();
  }

  async onChange({
    url
  }) {
    await this.page.hide();
    const res = await window.fetch(url);

    if (res.status === 200) {
      const html = await res.text();
      window.history.pushState({}, '', url);
      const div = document.createElement('div');
      div.innerHTML = html;
      const divContent = div.querySelector('.content');
      this.template = divContent.getAttribute('data-template');
      this.content.innerHTML = divContent.innerHTML;
      window.scrollTo(0, 0);
      this.page = this.pages[this.template];
      this.page.create();
      this.page.show();
    } else {
      console.error('error: ' + res);
    }
  }

  eventListener() {
    const links = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_8__.$All)('[data-links]');
    links.forEach(link => {
      const {
        href
      } = link;
      const linkData = href.split('#');
      const [url, hash] = linkData;

      if (link.getAttribute('data-links') === 'true') {
        link.onclick = e => {
          e.preventDefault();
          if (url === window.location.href) return;
          this.onChange({
            url: href
          });
        };
      } else {
        link.onclick = e => {
          e.preventDefault();
          if (url === window.location.href) return;
          this.onChange({
            url
          });
          setTimeout(() => {
            scrollToElement(hash);
          }, 300);
        };
      }
    });

    function scrollToElement(className) {
      const element = (0,_utils_selectors__WEBPACK_IMPORTED_MODULE_8__.$)(`.${className}`);
      const top = element.getBoundingClientRect().top;
      window.scrollTo({
        top
      });
    }
  }

} // eslint-disable-next-line no-new


new App();
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**************************!*\
  !*** ./styles/main.scss ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUdELFNBUkQ7QUFTRDtBQUNGLEtBdEJEOztBQXdCQSxhQUFTcUcsZUFBVCxDQUEwQjkwRCxTQUExQixFQUFxQztBQUNuQyxZQUFNMEMsT0FBTyxHQUFHdEIsbURBQUMsQ0FBRSxJQUFHcEIsU0FBVSxFQUFmLENBQWpCO0FBQ0EsWUFBTWYsR0FBRyxHQUFHeUQsT0FBTyxDQUFDd0cscUJBQVIsR0FBZ0NqSyxHQUE1QztBQUNBTSxNQUFBQSxNQUFNLENBQUNvMUQsUUFBUCxDQUFnQjtBQUFFMTFELFFBQUFBO0FBQUYsT0FBaEI7QUFDRDtBQUNGOztBQTdHTyxFQWdIVjs7O0FBQ0EsSUFBSXkwRCxHQUFKLEc7Ozs7Ozs7Ozs7QUM1SEEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvYW5pbWF0aW9uL1NoYXBlcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvYW5pbWF0aW9uL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvY2xhc3Nlcy9Db21wb25lbnRzLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jbGFzc2VzL1BhZ2VzLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL0FsZXJ0LmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL1NlcnZpY2VzLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL3NsaWRlci9TbGlkZXIuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL2NvbXBvbmVudHMvd2lkZ2V0cy9tdXNpYy1wbGF5ZXIvTWVkaWFNYW5hZ2VyLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL3dpZGdldHMvbXVzaWMtcGxheWVyL1RpbWVyLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL2FwcC9jb21wb25lbnRzL3dpZGdldHMvbXVzaWMtcGxheWVyL3BsYXllci5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci92b2x1bWUuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL2NvbmZpZy9mb3Jtcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvcGFnZXMvYWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL3BhZ2VzL2hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL3V0aWxzL1Ntb290aHNjcm9sbC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9hcHAvdXRpbHMvZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL3V0aWxzL3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9udW1lcmljLXVuaWNvZGUtbWFwLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcmVsb2FkQXBwLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Byb2plY3QtbmFtZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Byb2plY3QtbmFtZS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1uYW1lLy4vYXBwL2FwcC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LW5hbWUvLi9zdHlsZXMvbWFpbi5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXBlcyB7XG4gIGNvbnN0cnVjdG9yICh7IHBvc2l0aW9uLCBoZWlnaHQsIHdpZHRoLCBibHVyLCBiYWNrZ3JvdW5kIH0pIHtcbiAgICB0aGlzLnRvcCA9IHBvc2l0aW9uLnRvcCA9PT0gLTEgPyB1bmRlZmluZWQgOiBwb3NpdGlvbi50b3BcbiAgICB0aGlzLmxlZnQgPSBwb3NpdGlvbi5sZWZ0ID09PSAtMSA/IHVuZGVmaW5lZCA6IHBvc2l0aW9uLmxlZnRcbiAgICB0aGlzLnJpZ2h0ID0gcG9zaXRpb24ucmlnaHQgPT09IC0xID8gdW5kZWZpbmVkIDogcG9zaXRpb24ucmlnaHRcbiAgICB0aGlzLmJvdHRvbSA9IHBvc2l0aW9uLmJvdHRvbSA9PT0gLTEgPyB1bmRlZmluZWQgOiBwb3NpdGlvbi5ib3R0b21cbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodFxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuYmx1ciA9IGJsdXJcbiAgICB0aGlzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kXG4gICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG5cbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5jcmVhdGVTaGFwZSgpXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpXG4gICAgdGhpcy5ldmVudHMoKVxuICB9XG5cbiAgY3JlYXRlU2hhcGUgKCkge1xuICAgIHRoaXMuc2hhcGVGcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpXG4gICAgdGhpcy5zaGFwZUZyYW1lLmNsYXNzTmFtZSA9ICdzaGFwZXMnXG4gICAgdGhpcy5pZCA9ICdzaGFwZXMnXG5cbiAgICB0aGlzLnRlc3RCcmVha3BvaW50KClcbiAgICAvLyBzdHlsZVxuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5ib3JkZXJSYWRpdXMgPSB0aGlzLmhlaWdodFsyXSArICdweCdcbiAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5iYWNrZ3JvdW5kXG4gICAgLy8gdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDhzJ1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcblxuICAgIC8vIHNldCBzaGFwZSBwb3NpdGlvblxuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS50b3AgPSB0aGlzLnRvcCArICdweCdcbiAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUubGVmdCA9IHRoaXMubGVmdCArICdweCdcbiAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUucmlnaHQgPSB0aGlzLnJpZ2h0ICsgJ3B4J1xuICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5ib3R0b20gPSB0aGlzLmJvdHRvbSArICdweCdcbiAgfVxuXG4gIGFuaW1zaGFwZXMgKGFuaW1hdGlvbkFycikge1xuICAgIGxldCBpbmRleCA9IDBcbiAgICBsZXQgYW5pbUZsb3cgPSBudWxsXG5cbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoaW5kZXggPj0gYW5pbWF0aW9uQXJyLmxlbmd0aCkgaW5kZXggPSAwXG4gICAgICBhbmltRmxvdyA9IGFuaW1hdGlvbkFycltpbmRleF1cbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS50b3AgPSBhbmltRmxvdy50by50b3AgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUubGVmdCA9IGFuaW1GbG93LnRvLmxlZnQgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuYm90dG9tID0gYW5pbUZsb3cudG8uYm90dG9tICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLnJpZ2h0ID0gYW5pbUZsb3cudG8ucmlnaHQgKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuZmlsdGVyID0gYGJsdXIoJHt0aGlzLmJsdXJ9cHgpYFxuXG4gICAgICBpbmRleCsrXG4gICAgfSwgNDAwMClcbiAgfVxuXG4gIG1vdW50U2hhcGUgKHBhcmVudCkge1xuICAgIHBhcmVudC5hcHBlbmQodGhpcy5zaGFwZUZyYW1lKVxuICB9XG5cbiAgb25XaW5kb3dSZXNpemUgKCkge1xuICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIHRoaXMudGVzdEJyZWFrcG9pbnQoKVxuICB9XG5cbiAgdGVzdEJyZWFrcG9pbnQgKCkge1xuICAgIGlmICh0aGlzLndpbmRvd1dpZHRoID49IDY0MCAmJiB0aGlzLndpbmRvd1dpZHRoIDwgMTAyNCkge1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0WzFdICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFsxXSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5maWx0ZXIgPSBgYmx1cigke3RoaXMuYmx1clswXX1weClgXG4gICAgfSBlbHNlIGlmICh0aGlzLndpbmRvd1dpZHRoID49IDEwMjQpIHtcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodFsyXSArICdweCdcbiAgICAgIHRoaXMuc2hhcGVGcmFtZS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGhbMl0gKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuZmlsdGVyID0gYGJsdXIoJHt0aGlzLmJsdXJbMV19cHgpYFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHRbMF0gKyAncHgnXG4gICAgICB0aGlzLnNoYXBlRnJhbWUuc3R5bGUud2lkdGggPSB0aGlzLndpZHRoWzBdICsgJ3B4J1xuICAgICAgdGhpcy5zaGFwZUZyYW1lLnN0eWxlLmZpbHRlciA9IGBibHVyKCR7dGhpcy5ibHVyWzBdfXB4KWBcbiAgICB9XG4gIH1cblxuICBldmVudHMgKCkge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcbmltcG9ydCBTaGFwZXMgZnJvbSAnLi9TaGFwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuaXNNb3VudGVkID0gZmFsc2VcbiAgICB0aGlzLnNoYXBlR3JhZGllbnQgPSAnIzA2NkQ1QidcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5tb3VudEZyYW1lKClcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKSByZXR1cm5cbiAgICBjb25zdCBzaGFwZTEgPSBuZXcgU2hhcGVzKHtcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHRvcDogLTEsXG4gICAgICAgIHJpZ2h0OiAtMSxcbiAgICAgICAgbGVmdDogLTEwMCxcbiAgICAgICAgYm90dG9tOiAtMTAwXG4gICAgICB9LFxuICAgICAgaGVpZ2h0OiBbNDAwLCA1MDAsIDYwMF0sXG4gICAgICB3aWR0aDogWzQwMCwgNTAwLCA2MDBdLFxuICAgICAgYmx1cjogWzUwLCAxMDBdLFxuICAgICAgYmFja2dyb3VuZDogdGhpcy5zaGFwZUdyYWRpZW50XG4gICAgfSlcbiAgICBjb25zdCBzaGFwZTIgPSBuZXcgU2hhcGVzKHtcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHRvcDogLTIwMCxcbiAgICAgICAgcmlnaHQ6IC0xMDAsXG4gICAgICAgIGxlZnQ6IC0xLFxuICAgICAgICBib3R0b206IC0xXG4gICAgICB9LFxuICAgICAgaGVpZ2h0OiBbNDAwLCA1MDAsIDYwMF0sXG4gICAgICB3aWR0aDogWzQwMCwgNTAwLCA2MDBdLFxuICAgICAgYmx1cjogWzUwLCAxMDBdLFxuICAgICAgYmFja2dyb3VuZDogdGhpcy5zaGFwZUdyYWRpZW50XG4gICAgfSlcbiAgICBzaGFwZTEubW91bnRTaGFwZSgkKCcjZnJhbWUnKSlcbiAgICBzaGFwZTIubW91bnRTaGFwZSgkKCcjZnJhbWUnKSlcbiAgfVxuXG4gIGNyZWF0ZUZyYW1lICgpIHtcbiAgICB0aGlzLmZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgICB0aGlzLmZyYW1lLmNsYXNzTmFtZSA9ICdmcmFtZSdcbiAgICB0aGlzLmZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIHRoaXMuZnJhbWUuc3R5bGUudG9wID0gMFxuICAgIHRoaXMuZnJhbWUuc3R5bGUubGVmdCA9IDBcbiAgICB0aGlzLmZyYW1lLnN0eWxlLndpZHRoID0gYCR7d2luZG93LmlubmVyV2lkdGh9cHhgXG4gICAgdGhpcy5mcmFtZS5zdHlsZS5oZWlnaHQgPSBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgXG4gICAgdGhpcy5mcmFtZS5zdHlsZS56SW5kZXggPSAnLTEnXG4gICAgdGhpcy5mcmFtZS5pZCA9ICdmcmFtZSdcbiAgfVxuXG4gIG1vdW50RnJhbWUgKCkge1xuICAgIHRoaXMuY3JlYXRlRnJhbWUoKVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuZnJhbWUpXG4gICAgdGhpcy5ldmVudExpc3RlbmVyKClcbiAgICB0aGlzLmlzTW91bnRlZCA9IHRydWVcbiAgfVxuXG4gIG9uUmVzaXplIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5tb3VudGVkRnJhbWUgPSAkKCcjZnJhbWUnKVxuICAgIHRoaXMubW91bnRlZEZyYW1lLnN0eWxlLndpZHRoID0gYCR7d2luZG93LmlubmVyV2lkdGh9cHhgXG4gICAgdGhpcy5tb3VudGVkRnJhbWUuc3R5bGUuaGVpZ2h0ID0gYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YFxuICB9XG5cbiAgZXZlbnRMaXN0ZW5lciAoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgeyAkLCAkQWxsIH0gZnJvbSAnLi4vdXRpbHMvc2VsZWN0b3JzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbXBvbmVudE5hbWUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zZWxlY3RvcnMgPSB7XG4gICAgICBwcmVsb2FkZXI6IHtcbiAgICAgICAgZWxlbWVudDogJCgnLnByZWxvYWRlcicpLFxuICAgICAgICB0ZXh0OiAkKCcucHJlbG9hZGVyX190ZXh0X19pdGVtJyksXG4gICAgICAgIGNvbnRhaW5lcjogJCgnLnByZWxvYWRlcl9fdGV4dCcpLFxuICAgICAgICBsb2FkZXI6ICQoJy5wcmVsb2FkZXJfX2xvYWRlcl9fYmFyJyksXG4gICAgICAgIHdyYXBwZXI6ICQoJy5wcmVsb2FkZXJfX3RleHRfX3dyYXBwZXInKVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgaGVhZGVyOiAkKCcuaGVhZGVyJyksXG4gICAgICAgIG5hdkxpc3Q6IFsuLi4kQWxsKCcubWVudV9fbGlua3NfX2l0ZW0nKV0sXG4gICAgICAgIHByZXZpZXdJbWc6ICQoJy5tZW51X19saW5rc19fbWVkaWFfX2ltYWdlJyksXG4gICAgICAgIGNvbnRlbnQ6ICQoJy5tZW51X19jb250ZW50JyksXG4gICAgICAgIG9wZW5NZW51OiAkKCcuYnV0dG9uLW9wZW4nKSxcbiAgICAgICAgY2xvc2VNZW51OiAkKCcuYnV0dG9uLWNsb3NlJylcbiAgICAgIH0sXG4gICAgICBwbGF5ZXI6IHtcbiAgICAgICAgYnV0dG9uOiB7XG4gICAgICAgICAgZXhwYW5kOiAkKCcucGxheWVyX19idXR0b24uZXhwYW5kJyksXG4gICAgICAgICAgY2xvc2U6ICQoJy5wbGF5ZXJfX2J1dHRvbi5jbG9zZScpLFxuICAgICAgICAgIHBsYXk6ICQoJ1tkYXRhLWljb249XCJyb2ItcGxheVwiXScpLFxuICAgICAgICAgIG5leHQ6ICQoJ1tkYXRhLWljb249XCJyb2ItZm9yd2FyZFwiXScpLFxuICAgICAgICAgIHByZXY6ICQoJ1tkYXRhLWljb249XCJyb2ItYmFja3dhcmRcIl0nKVxuICAgICAgICB9LFxuICAgICAgICBjb3ZlckNvbnRhaW5lcjogJCgnLnBsYXllcl9fY292ZXInKSxcbiAgICAgICAgY292ZXI6ICQoJy5wbGF5ZXJfX2NvdmVyIGltZycpLFxuICAgICAgICBzZWxmOiAkKCcucGxheWVyJyksXG4gICAgICAgIG1lZGlhOiAkKCcucGxheWVyX19tZWRpYScpLFxuICAgICAgICBhcnRpc3Q6ICQoJy5wbGF5ZXJfX2RldGFpbF9fbmFtZScpLFxuICAgICAgICB0aXRsZTogJCgnLnBsYXllcl9fZGV0YWlsX190aXRsZScpLFxuICAgICAgICB0aW1lcjoge1xuICAgICAgICAgIHN0YXJ0VGltZTogJCgnLnBsYXllcl9fdGltZXJfX3RpbWVzX19zdGFydHRpbWUnKSxcbiAgICAgICAgICBlbmRUaW1lOiAkKCcucGxheWVyX190aW1lcl9fdGltZXNfX2VuZHRpbWUnKSxcbiAgICAgICAgICByYW5nZTogJCgnLnBsYXllcl9fdGltZXJfX3Byb2dyZXNzX19yYW5nZScpLFxuICAgICAgICAgIHByb2dyZXNzOiAkKCcucGxheWVyX190aW1lcl9fcHJvZ3Jlc3NfX2JhcicpLFxuICAgICAgICAgIHByZWxvYWQ6ICQoJy5wbGF5ZXJfX3RpbWVyX19wcm9ncmVzc19fZWxhcHNlJylcbiAgICAgICAgfSxcbiAgICAgICAgdm9sdW1lOiB7XG4gICAgICAgICAgZ3JhcHBlcjogJCgnLnBsYXllcl9fdm9sdW1lX19ncmFwJyksXG4gICAgICAgICAgc2xpZGVyOiAkKCcucGxheWVyX192b2x1bWVfX3NsaWRlcicpLFxuICAgICAgICAgIGNvbnRhaW5lcjogJCgnLnBsYXllcl9fdm9sdW1lX193cmFwcGVyJylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgY29ubmVjdDoge1xuICAgICAgICAgIGZvcm06ICQoJy5jb25uZWN0X19mb3JtJyksXG4gICAgICAgICAgYnV0dG9uOiAkKCcuY29ubmVjdF9fZm9ybSAuYnV0dG9uJyksXG4gICAgICAgICAgbmFtZTogJCgnLmlucHV0X19uYW1lJyksXG4gICAgICAgICAgbWFpbDogJCgnLmlucHV0X19lbWFpbCcpLFxuICAgICAgICAgIG1lc3NhZ2U6ICQoJyNtZXNzYWdlJyksXG4gICAgICAgICAgbmFtZUFsZXJ0OiAkKCcuaW5wdXRfX2FsZXJ0LW5hbWUnKSxcbiAgICAgICAgICBlbWFpbEFsZXJ0OiAkKCcuaW5wdXRfX2FsZXJ0LWVtYWlsJyksXG4gICAgICAgICAgbWVzc2FnZUFsZXJ0OiAkKCcuaW5wdXRfX2FsZXJ0LW1lc3NhZ2UnKSxcbiAgICAgICAgICBhbGVydDogJEFsbCgnLmlucHV0X19hbGVydCcpXG5cbiAgICAgICAgfSxcbiAgICAgICAgbW9kYWw6IHtcbiAgICAgICAgICBmb3JtOiAkKCcubW9kYWxfX2Zvcm0nKSxcbiAgICAgICAgICBidXR0b246ICQoJy5tb2RhbF9fZm9ybSAuYnV0dG9uJylcbiAgICAgICAgfSxcbiAgICAgICAgYWxlcnQ6ICQoJy5hbGVydCcpXG4gICAgICB9LFxuICAgICAgc2xpZGVyOiB7XG4gICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgIHByZXY6ICQoJyNyYi1zbGlkZXItYnV0dG9uLXByZXYnKSxcbiAgICAgICAgICBuZXh0OiAkKCcjcmItc2xpZGVyLWJ1dHRvbi1uZXh0JylcbiAgICAgICAgfSxcbiAgICAgICAgd3JhcHBlcjogJCgnLnJiLXNsaWRlci13cmFwcGVyJyksXG4gICAgICAgIGl0ZW1zOiAkKCcucmItc2xpZGVyLWl0ZW1zJyksXG4gICAgICAgIGNvbnRhaW5lcjogJCgnLnJiLXNsaWRlcicpXG4gICAgICB9LFxuICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgYnV0dG9uczogJEFsbCgnLnNlcnZpY2VzX19jdGEnKVxuICAgICAgfSxcbiAgICAgIG1vZGFsOiB7XG4gICAgICAgIHNlbGY6ICQoJy5tb2RhbCcpLFxuICAgICAgICBidXR0b246ICQoJy5tb2RhbF9fYnV0dG9uIGJ1dHRvbicpXG4gICAgICB9LFxuICAgICAgaW1hZ2VzOiBbLi4uJEFsbCgnaW1nJyldXG4gICAgfVxuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLnNlbGVjdG9yc1tjb21wb25lbnROYW1lXVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuL0NvbXBvbmVudHMnXG5pbXBvcnQgU21vb3Roc2Nyb2xsIGZyb20gJy4uL3V0aWxzL1Ntb290aHNjcm9sbCdcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgeyAkIH0gZnJvbSAnLi4vdXRpbHMvc2VsZWN0b3JzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlcyBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvciAoZWxlbWVudHMpIHtcbiAgICBzdXBlcihlbGVtZW50cylcbiAgICB0aGlzLndyYXBwZXIgPSAkKCcud3JhcHBlcicpXG4gICAgdGhpcy5kZXZpY2UgPSB7XG4gICAgICBtb2JpbGU6IC9tb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgICAgdGFibGV0OiAhL2lwYWR8dGFibGV0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZSAoKSB7XG4gICAgaWYgKHRoaXMuZGV2aWNlLm1vYmlsZSAmJiB0aGlzLmRldmljZS50YWJsZXQpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSdcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc21vb3RzY3JvbGwgPSBuZXcgU21vb3Roc2Nyb2xsKHRoaXMud3JhcHBlciwgeyBkaXJlY3Rpb246ICd2Jywgc21vb3RoOiAwLjEgfSlcbiAgICB9XG4gIH1cblxuICBzaG93ICgpIHtcbiAgICBjb25zb2xlLmxvZygnc2hvdycpXG4gIH1cblxuICBoaWRlICgpIHtcbiAgICBjb25zb2xlLmxvZygnaGlkZScpXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKClcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMud3JhcHBlciwge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIG9uQ29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgJCB9IGZyb20gJy4uL3V0aWxzL3NlbGVjdG9ycydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxlcnQge1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgdHlwZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuY3JlYXRlKClcbiAgICB0aGlzLnNlbGYgPSAkKCcuYWxlcnQnKVxuICB9XG5cbiAgY3JlYXRlICgpIHtcbiAgICB0aGlzLmRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpXG4gICAgdGhpcy5kaXYuY2xhc3NOYW1lID0gJ2FsZXJ0J1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICdzdWNjZXNzJykgdGhpcy5kaXYuY2xhc3NMaXN0LmFkZCgnYWxlcnRfX3N1Y2Nlc3MnKVxuICAgIGVsc2UgdGhpcy5kaXYuY2xhc3NMaXN0LmFkZCgnYWxlcnRfX2Vycm9yJylcblxuICAgIC8vIENyZWF0ZSBhbGVydF9fd3JhcHBlclxuICAgIGNvbnN0IHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50KCdESVYnLCAnYWxlcnRfX3dyYXBwZXInKVxuICAgIC8vIGNvbnRlbnRcbiAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlRWxlbWVudCgnRElWJywgJ2FsZXJ0X19jb250ZW50JylcbiAgICAvLyBpY29uc1xuICAgIGNvbnN0IGljb24gPSBjcmVhdGVFbGVtZW50KCdTUEFOJywgJ2FsZXJ0X19pY29uJylcbiAgICAvLyBNZXNzYWdlXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUVsZW1lbnQoJ1AnLCAnYWxlcnRfX21lc3NhZ2UnKVxuICAgIG1lc3NhZ2UuaW5uZXJUZXh0ID0gdGhpcy5tZXNzYWdlXG4gICAgLy8gQ2xvc2UgaWNvblxuICAgIGNvbnN0IGNsb3NlSWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ1NQQU4nLCAnYWxlcnRfX2Nsb3NlSWNvbicpXG4gICAgY29uc3QgaSA9IGNyZWF0ZUVsZW1lbnQoJ0knLCAncm9iLWNsb3NlJylcbiAgICBjbG9zZUljb24uYXBwZW5kKGkpXG4gICAgY2xvc2VJY29uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgICAgdGhpcy5kZXN0cm95KClcbiAgICB9XG5cbiAgICAvLyBhcHBuZWQgY2hpbGRcbiAgICBjb250ZW50LmFwcGVuZChpY29uLCBtZXNzYWdlKVxuICAgIHdyYXBwZXIuYXBwZW5kKGNvbnRlbnQsIGNsb3NlSWNvbilcbiAgICB0aGlzLmRpdi5hcHBlbmQod3JhcHBlcilcbiAgICBkb2N1bWVudC5ib2R5LnByZXBlbmQodGhpcy5kaXYpXG4gICAgdGhpcy5zZWxmID0gdGhpcy5kaXZcbiAgICB0aGlzLmhpZGUoKVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAodGFnLCBjbGFzc05hbWUpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZylcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lXG4gICAgICByZXR1cm4gZWxlbWVudFxuICAgIH1cbiAgfVxuXG4gIHNob3cgKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zZWxmLnN0eWxlLnJpZ2h0ID0gJy41cmVtJ1xuICAgIH0sIDEwMDApXG4gIH1cblxuICBoaWRlICgpIHtcbiAgICB0aGlzLnNlbGYuc3R5bGUucmlnaHQgPSAnLTEwMCUnXG4gICAgdGhpcy5zZWxmLnRyYW5zaXRpb24gPSAncmlnaHQgLjZzJ1xuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRpdilcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnLi4vY2xhc3Nlcy9Db21wb25lbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcignbmF2aWdhdGlvbicpXG4gICAgdGhpcy5pbml0KClcbiAgICB0aGlzLmV2ZW50c0xpc3RlbmVyKClcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIGNvbnN0IGRlZmF1bHRTb3VyY2UgPSAnaW1hZ2VzL3ByZXZpZXdzL2ltZy0xJ1xuICAgIHRoaXMuc2VsZWN0b3JzLm5hdmlnYXRpb24ucHJldmlld0ltZy5zcmMgPSBgJHtkZWZhdWx0U291cmNlfS5wbmdgXG4gIH1cblxuICBvbk1vdXNlSG92ZXJMaW5rcyhlKSB7XG4gICAgY29uc3Qgc3JjID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zbmFwLWltYWdlJylcbiAgICB0aGlzLnNlbGVjdG9ycy5uYXZpZ2F0aW9uLnByZXZpZXdJbWcuc3JjID0gYCR7c3JjfS5wbmdgXG4gIH1cblxuICBvcGVuTWVudShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5zZWxlY3RvcnMubmF2aWdhdGlvbi5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ21lbnVfX2NvbnRlbnQtdmlzaWJsZScpXG4gIH1cblxuICBjbG9zZU1lbnUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2VsZWN0b3JzLm5hdmlnYXRpb24uY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdtZW51X19jb250ZW50LXZpc2libGUnKVxuICB9XG5cbiAgZXZlbnRzTGlzdGVuZXIgKCkge1xuICAgIHRoaXMuc2VsZWN0b3JzLm5hdmlnYXRpb24ubmF2TGlzdC5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLm9uTW91c2VIb3ZlckxpbmtzLmJpbmQodGhpcykpXG4gICAgfSlcblxuICAgIHRoaXMuc2VsZWN0b3JzLm5hdmlnYXRpb24ub3Blbk1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5NZW51LmJpbmQodGhpcykpXG4gICAgdGhpcy5zZWxlY3RvcnMubmF2aWdhdGlvbi5jbG9zZU1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTWVudS5iaW5kKHRoaXMpKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gJ2ltYWdlc2xvYWRlZCdcbi8vaW1wb3J0IGF1dG9CaW5kIGZyb20gJ2F1dG8tYmluZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdwcmVsb2FkZXInKVxuXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5zdGFydEluZGV4ID0gMVxuXG4gICAgdGhpcy5zaXplID0ge1xuICAgICAgaGVpZ2h0OiBOdW1iZXIodGhpcy5lbGVtZW50cy50ZXh0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCksXG4gICAgICB3aWR0aDogTnVtYmVyKHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRXaWR0aCksXG4gICAgICBnYXA6IDJcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKClcbiAgfVxuXG4gIGNyZWF0ZVByZWxvYWRlciAoKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0b3JzLmltYWdlcykge1xuICAgICAgY29uc3QgaW1nTG9hZCA9IGltYWdlc0xvYWRlZChkb2N1bWVudC5ib2R5KVxuXG4gICAgICBpbWdMb2FkLm9uKCdwcm9ncmVzcycsIChfKSA9PiB7XG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyhpbWdMb2FkLmltYWdlcy5sZW5ndGgpXG4gICAgICB9KVxuXG4gICAgICBpbWdMb2FkLm9uKCdhbHdheXMnLCAoXykgPT4ge1xuICAgICAgICB0aGlzLm9uTG9hZCgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFuaW1QcmVsb2FkZXJUZXh0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2hpbGRyZW4ubGVuZ3RoXG5cbiAgICAvL0dpdmUgdGhlIHdyYXBwZXIgdGhlIGhlaWdodCBvZiB0aGUgdGV4dFxuICAgIHRoaXMuZWxlbWVudHMuY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuc2l6ZS5oZWlnaHR9cHhgXG4gICAgdGhpcy5lbGVtZW50cy5jb250YWluZXIuc3R5bGUud2lkdGggPSBgJHt0aGlzLnNpemUud2lkdGh9cHhgXG5cbiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3RhcnRJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuc3R5bGUudG9wID0gYCR7KC10aGlzLnNpemUuaGVpZ2h0IC0gdGhpcy5zaXplLmdhcCkgKiB0aGlzLnN0YXJ0SW5kZXh9cHhgXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCsrXG4gICAgICB9XG4gICAgfSwgMTAwMClcbiAgfVxuXG4gIG9uUHJvZ3Jlc3MgKGxlbmd0aCkge1xuICAgIHRoaXMubGVuZ3RoICs9IDFcbiAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5sZW5ndGggLyBsZW5ndGhcblxuICAgIHRoaXMuZWxlbWVudHMubG9hZGVyLnN0eWxlLndpZHRoID0gYCR7TWF0aC5yb3VuZChwZXJjZW50ICogMTAwKX0lYFxuICB9XG5cbiAgb25Mb2FkKCkge1xuICAgIHRoaXMuZW1pdCgnY29tcGxldGVkJylcbiAgfVxuXG4gIG9uUmVzaXplKGUpIHtcbiAgICB0aGlzLnNpemUgPSB7XG4gICAgICBoZWlnaHQgOiAgTnVtYmVyKHRoaXMuZWxlbWVudHMudGV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpLFxuICAgICAgd2lkdGggOiAgTnVtYmVyKHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRXaWR0aCksXG4gICAgICBnYXAgOiAyXG4gICAgfVxuICAgIHRoaXMuYW5pbVByZWxvYWRlclRleHQoZSlcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLmFuaW1QcmVsb2FkZXJUZXh0LmJpbmQodGhpcykpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50cy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50cy5lbGVtZW50KVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcnZpY2VzIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcignc2VydmljZXMnKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmJ1dHRvbnMgPSBbLi4udGhpcy5lbGVtZW50cy5idXR0b25zXVxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBvbkNsaWNrIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYnV0dG9uID0gZS5jdXJyZW50VGFyZ2V0XG4gICAgdGhpcy50eXBlID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1zZXJ2aWNlJylcbiAgICB0aGlzLnNlbGVjdG9ycy5tb2RhbC5zZWxmLmNsYXNzTGlzdC5hZGQoJ21vZGFsLXZpc2libGUnKVxuICB9XG5cbiAgY2xvc2VNb2RhbCAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGlmICh0aGlzLnNlbGVjdG9ycy5tb2RhbC5zZWxmLmNsYXNzTGlzdC5jb250YWlucygnbW9kYWwtdmlzaWJsZScpKSB7XG4gICAgICB0aGlzLnNlbGVjdG9ycy5tb2RhbC5zZWxmLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLXZpc2libGUnKVxuICAgIH1cbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXIgKCkge1xuICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSlcbiAgICB9KVxuXG4gICAgdGhpcy5zZWxlY3RvcnMubW9kYWwuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcykpXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uLy4uL2NsYXNzZXMvQ29tcG9uZW50cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcignc2xpZGVyJylcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5jaGlsZCA9IFsuLi50aGlzLmVsZW1lbnRzLml0ZW1zLmNoaWxkcmVuXVxuICAgIHRoaXMuaW5kZXggPSAxXG4gICAgdGhpcy5wYWRkaW5nID0gMjRcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IDBcbiAgICB0aGlzLnRyZXNob2xkID0gMFxuICAgIHRoaXMuZHJhZ0ludGVydmFsbCA9IDQwXG4gICAgdGhpcy5zZXRDaGlsZFdpZHRoKClcbiAgICB0aGlzLnNldFBvc2l0aW9uKClcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgc2V0Q2hpbGRXaWR0aCAoKSB7XG4gICAgdGhpcy5jaGlsZC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5zdHlsZS5mbGV4ID0gJ25vbmUnXG4gICAgICBpdGVtLnN0eWxlLndpZHRoID0gYCR7d2luZG93LmlubmVyV2lkdGggKiAwLjgwfXB4YFxuICAgIH0pXG4gIH1cblxuICBzZXRQb3NpdGlvbiAoKSB7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudHMuaXRlbXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IC0oKCh0aGlzLndpZHRoIC0gd2luZG93LmlubmVyV2lkdGggLSAyNCkgLyAyKSkgKiB0aGlzLmluZGV4XG4gICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHt0aGlzLmN1cnJlbnRQb3NpdGlvbn1weCwgMCwgMClgXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBvc2l0aW9uXG4gIH1cblxuICBuZXh0ICgpIHtcbiAgICBpZiAodGhpcy5pbmRleCA+PSB0aGlzLmNoaWxkLmxlbmd0aCAtIDEpIHJldHVyblxuICAgIHRoaXMuaW5kZXgrK1xuICAgIGlmICh0aGlzLmluZGV4ID09PSAyKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5lbGVtZW50cy5pdGVtcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSAtKCgodGhpcy53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoKSAvIDIpKSAqIHRoaXMuaW5kZXhcbiAgICAgIHRoaXMuZWxlbWVudHMuaXRlbXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNEKCR7dGhpcy5jdXJyZW50UG9zaXRpb24gLSB0aGlzLnBhZGRpbmd9cHgsIDAsIDApYFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKClcbiAgICB9XG4gIH1cblxuICBwcmV2ICgpIHtcbiAgICBpZiAodGhpcy5pbmRleCA8PSAwKSB7XG4gICAgICB0aGlzLmluZGV4ID0gMFxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuaW5kZXgtLVxuICAgIGlmICh0aGlzLmluZGV4ID09PSAwKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5lbGVtZW50cy5pdGVtcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSAtKCgodGhpcy53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoIC0gMjQpIC8gMikpICogdGhpcy5pbmRleFxuICAgICAgdGhpcy5lbGVtZW50cy5pdGVtcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoJHt0aGlzLnBhZGRpbmd9cHgsIDAsIDApYFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKClcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlRG93biAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuaXNEb3duID0gdHJ1ZVxuICAgIHRoaXMuZHJhZ1N0YXJ0ID0gZS54XG4gICAgdGhpcy5kcmFnU3RhcnR5ID0gZS55XG4gIH1cblxuICBvbk1vdXNlTW92ZSAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGlmICghdGhpcy5pc0Rvd24pIHJldHVyblxuICAgIHRoaXMudHJlc2hvbGQgPSBlLnggLSB0aGlzLmRyYWdTdGFydFxuICAgIHRoaXMuZWxlbWVudHMuaXRlbXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNEKCR7dGhpcy5jdXJyZW50UG9zaXRpb24gKyB0aGlzLnRyZXNob2xkfXB4LCAwLCAwKWBcbiAgfVxuXG4gIG9uTW91c2VVcCAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgaWYgKHRoaXMudHJlc2hvbGQgPiAwICYmIHRoaXMudHJlc2hvbGQgPj0gdGhpcy5kcmFnSW50ZXJ2YWxsKSB7XG4gICAgICB0aGlzLnByZXYoKVxuICAgICAgY29uc29sZS5sb2coJ3ByZXYnKVxuICAgIH0gZWxzZSBpZiAodGhpcy50cmVzaG9sZCA8IDAgJiYgdGhpcy50cmVzaG9sZCA8PSAtdGhpcy5kcmFnSW50ZXJ2YWxsKSB7XG4gICAgICB0aGlzLm5leHQoKVxuICAgICAgY29uc29sZS5sb2coJ25leHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLml0ZW1zLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzRCgke3RoaXMuY3VycmVudFBvc2l0aW9ufXB4LCAwLCAwKWBcbiAgICB9XG5cbiAgICB0aGlzLmlzRG93biA9IGZhbHNlXG4gIH1cblxuICBvbldpbmRvd1Jlc2l6ZSAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2V0Q2hpbGRXaWR0aCgpXG4gICAgdGhpcy5zZXRQb3NpdGlvbigpXG4gIH1cblxuICBldmVudExpc3RlbmVyICgpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5uZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5uZXh0LmJpbmQodGhpcykpXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucHJldi5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpKVxuICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKSlcbiAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSlcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiY29uc3QgZGF0YSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL2RhdGFzL3NvdW5kcy5qc29uJylcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcihzdGFydHRpbWUsIGVuZHRpbWUsIHJhbmdlLCBwcm9ncmVzcywgcHJlbG9hZGVyLCBtZWRpYSkge1xuICAgIHRoaXMuZWxlbWVudHMgPSB7IHN0YXJ0dGltZSwgZW5kdGltZSwgcmFuZ2UsIHByZWxvYWRlciwgcHJvZ3Jlc3MgfVxuICAgIHRoaXMubWVkaWEgPSBtZWRpYVxuICAgIHRoaXMuI2luaXQoKVxuICB9XG5cbiAgI2luaXQoKSB7XG4gICAgdGhpcy4jYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICAjaXNQbGF5KCkge1xuICAgIGNvbnNvbGUubG9nKHRoaXMubWVkaWEuY3VycmVudFRpbWUpXG4gICAgY29uc29sZS5sb2coJ2lzIHN0YXJ0IHBsYXknKVxuICB9XG5cbiAgI29uUGF1c2UoKSB7XG4gICAgY29uc29sZS5sb2coJ1BhdXNlJylcbiAgfVxuXG4gIGlzRW5kZWQoY2IpIHtcbiAgICBjYigpXG4gIH1cblxuICAjc2V0VGltZSgpIHtcbiAgICB0aGlzLmhvdXJzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmN1cnJlbnRUaW1lIC8gMzYwMClcbiAgICB0aGlzLm1pbnV0ZXMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuY3VycmVudFRpbWUgLyA2MClcbiAgICB0aGlzLnNlY29uZHMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuY3VycmVudFRpbWUgLSB0aGlzLm1pbnV0ZXMgKiA2MClcblxuICAgIHRoaXMuaG91cnNWYWx1ZSA9IHRoaXMubWludXRlc1ZhbHVlID0gdGhpcy5zZWNvbmRzVmFsdWUgPSAwXG5cbiAgICBpZiAodGhpcy5ob3VycyA8PSAwKSB7XG4gICAgICB0aGlzLmhvdXJzVmFsdWUgPSBgMCR7dGhpcy5ob3Vyc31gXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaG91cnNWYWx1ZSA9IHRoaXMuaG91cnNcbiAgICB9XG5cbiAgICBpZiAodGhpcy5taW51dGVzIDwgMTApIHtcbiAgICAgIHRoaXMubWludXRlc1ZhbHVlID0gYDAke3RoaXMubWludXRlc31gXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWludXRlc1ZhbHVlID0gdGhpcy5taW51dGVzXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Vjb25kcyA8IDEwKSB7XG4gICAgICB0aGlzLnNlY29uZHNWYWx1ZSA9IGAwJHt0aGlzLnNlY29uZHN9YFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlY29uZHNWYWx1ZSA9IHRoaXMuc2Vjb25kc1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMuc3RhcnR0aW1lLnRleHRDb250ZW50ID0gYCR7dGhpcy5taW51dGVzVmFsdWV9IDogJHt0aGlzLnNlY29uZHNWYWx1ZX1gXG4gICAgdGhpcy4jdXBkYXRlUHJvZ3Jlc3MoKVxuICB9XG5cbiAgI3VwZGF0ZVByb2dyZXNzKCkge1xuICAgIHRoaXMuZWxlbWVudHMucmFuZ2UudmFsdWUgPSB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lXG4gICAgdGhpcy5yYXRpbyA9IHRoaXMuZWxlbWVudHMucmFuZ2UudmFsdWUgLyB0aGlzLmVsZW1lbnRzLnJhbmdlLm1heFxuICAgIHRoaXMuZWxlbWVudHMucHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHt0aGlzLnJhdGlvICogMTAwfSVgXG4gIH1cblxuICAjc2V0RnVsbFRpbWUoKSB7XG4gICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuZHVyYXRpb24gLyAzNjAwKVxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuZHVyYXRpb24gLyA2MClcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcih0aGlzLm1lZGlhLmR1cmF0aW9uIC0gbWludXRlcyAqIDYwKVxuXG4gICAgaWYgKGhvdXJzIDw9IDApIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuZW5kdGltZS50ZXh0Q29udGVudCA9IGAke21pbnV0ZXN9IDogJHtzZWNvbmRzfWBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5lbmR0aW1lLnRleHRDb250ZW50ID0gYCR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfWBcbiAgICB9XG4gIH1cblxuICAjb25UaW1lQ2hhbmdlKCkge1xuICAgIHRoaXMubWVkaWEuY3VycmVudFRpbWUgPSB0aGlzLmVsZW1lbnRzLnJhbmdlLnZhbHVlXG4gICAgdGhpcy4jc2V0VGltZSgpXG4gIH1cblxuICAjcHJvZ3Jlc3MoKSB7XG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLm1lZGlhLmR1cmF0aW9uXG4gICAgY29uc29sZS5sb2coZHVyYXRpb24pXG4gICAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lZGlhLmJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm1lZGlhLmJ1ZmZlcmVkLnN0YXJ0KHRoaXMubWVkaWEuYnVmZmVyZWQubGVuZ3RoIC0gMSAtIGkpIDxcbiAgICAgICAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgdGhpcy5tZWRpYS5idWZmZXJlZC5lbmQoXG4gICAgICAgICAgICAgIHRoaXMubWVkaWEuYnVmZmVyZWQubGVuZ3RoIC0gMSAtIGkgLyBkdXJhdGlvblxuICAgICAgICAgICAgKSAqIDEwMFxuICAgICAgICAgIClcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLnByZWxvYWRlci5zdHlsZS53aWR0aCA9XG4gICAgICAgICAgICAodGhpcy5tZWRpYS5idWZmZXJlZC5lbmQodGhpcy5tZWRpYS5idWZmZXJlZC5sZW5ndGggLSAxIC0gaSkgL1xuICAgICAgICAgICAgICBkdXJhdGlvbikgKlxuICAgICAgICAgICAgICAxMDAgK1xuICAgICAgICAgICAgJyUnXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICNtZXRhRGF0YUxvYWRlZCgpIHtcbiAgICB0aGlzLiNzZXRGdWxsVGltZSgpXG4gICAgdGhpcy5lbGVtZW50cy5yYW5nZS5tYXggPSBNYXRoLmZsb29yKHRoaXMubWVkaWEuZHVyYXRpb24pXG5cbiAgICB0aGlzLmVsZW1lbnRzLnJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy4jb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgdGhpcy4jaXNQbGF5LmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIHRoaXMuI29uUGF1c2UuYmluZCh0aGlzKSlcbiAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5pc0VuZGVkLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy4jc2V0VGltZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgI2FkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHRoaXMuI3Byb2dyZXNzLmJpbmQodGhpcykpXG4gICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2xvYWRlZG1ldGFkYXRhJyxcbiAgICAgIHRoaXMuI21ldGFEYXRhTG9hZGVkLmJpbmQodGhpcylcbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uLy4uLy4uL2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBNZWRpYU1hbmFnZXIgZnJvbSAnLi9NZWRpYU1hbmFnZXInXG5pbXBvcnQgVGltZXIgZnJvbSAnLi9UaW1lcidcbmltcG9ydCBWb2x1bWUgZnJvbSAnLi92b2x1bWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigncGxheWVyJylcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmlzRXhwYW5kID0gZmFsc2VcbiAgICB0aGlzLnNyYyA9IHRoaXMuZWxlbWVudHMubWVkaWEuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgIHRoaXMubWVkaWEgPSB0aGlzLmVsZW1lbnRzLm1lZGlhXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5yYW5kb21JZCA9IDBcbiAgICB0aGlzLnNvdW5kID0gbnVsbFxuICAgIHRoaXMuaWNvbiA9IHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkucXVlcnlTZWxlY3RvcignaScpXG5cbiAgICB0aGlzLm1lZGlhTWFuYWdlciA9IG5ldyBNZWRpYU1hbmFnZXIoKVxuICAgIHRoaXMubGVuZ3RoID0gdGhpcy5tZWRpYU1hbmFnZXIuZGF0YS5sZW5ndGhcbiAgICB0aGlzLnJhbmRvbUlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5sZW5ndGgpXG5cbiAgICB0aGlzLmNvbXBvbmVudHNIYW5kbGVyKHRoaXMucmFuZG9tSWQpXG4gICAgdGhpcy5ldmVudHNMaXN0ZXJuZXIoKVxuICB9XG5cbiAgZXhwYW5kKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdG9ycy5wbGF5ZXIuY292ZXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdpc0V4cGFuZCcpKSB7XG4gICAgICB0aGlzLnNlbGVjdG9ycy5wbGF5ZXIuY292ZXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaXNFeHBhbmQnKVxuICAgICAgdGhpcy5zZWxlY3RvcnMucGxheWVyLmNvdmVyQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcwcHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0b3JzLnBsYXllci5jb3ZlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdpc0V4cGFuZCcpXG4gICAgICB0aGlzLnNlbGVjdG9ycy5wbGF5ZXIuY292ZXJDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzE4MHB4J1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuZWxlbWVudHMuc2VsZi5jbGFzc0xpc3QuYWRkKCdpc0hpZGRlbicpXG4gIH1cblxuICBjb21wb25lbnRzSGFuZGxlcihpZCkge1xuICAgIHRoaXMuc291bmQgPSB0aGlzLm1lZGlhTWFuYWdlci5kYXRhW2lkXVxuICAgIHRoaXMubWVkaWEuc3JjID0gdGhpcy5zb3VuZC5saW5rXG4gICAgdGhpcy5zZXRDb21wb25lbnRzKHRoaXMuc291bmQpXG4gICAgdGhpcy50aW1lckhhbmRsZXIodGhpcy5tZWRpYSlcbiAgfVxuXG4gIHNldENvbXBvbmVudHMoc291bmQpIHtcbiAgICB0aGlzLmNvdmVySGFuZGxlcihzb3VuZClcbiAgICB0aGlzLnZvbHVtZUhhbmRsZXIodGhpcy5tZWRpYSlcbiAgICB0aGlzLnNldFNvdW5kRGV0YWlscyhzb3VuZClcbiAgfVxuXG4gIGNvdmVySGFuZGxlcihzb3VuZCkge1xuICAgIHRoaXMuZWxlbWVudHMuY292ZXIuc3JjID0gc291bmQuYWxidW0uY292ZXJcbiAgfVxuXG4gIHNldFNvdW5kRGV0YWlscyhzb3VuZCkge1xuICAgIHRoaXMuZWxlbWVudHMuYXJ0aXN0LmlubmVyVGV4dCA9IHNvdW5kLmFydGlzdC5uYW1lXG4gICAgdGhpcy5lbGVtZW50cy50aXRsZS5pbm5lclRleHQgPSBzb3VuZC50aXRsZVxuICB9XG5cbiAgcGxheSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5kYXRhc2V0Lmljb24gPT09ICdyb2ItcGxheScpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnBsYXkuc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAncm9iLXBhdXNlJylcbiAgICAgIHRoaXMuaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvYi1wYXVzZScpXG4gICAgICB0aGlzLm1lZGlhLnBsYXkoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ3JvYi1wbGF5JylcbiAgICAgIHRoaXMuaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvYi1wbGF5JylcbiAgICAgIHRoaXMubWVkaWEucGF1c2UoKVxuICAgIH1cbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LmRhdGFzZXQuaWNvbiA9PT0gJ3JvYi1wbGF5Jykge1xuICAgICAgdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdyb2ItcGF1c2UnKVxuICAgICAgdGhpcy5pY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm9iLXBhdXNlJylcbiAgICAgIHRoaXMubWVkaWEucGF1c2UoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ3JvYi1wbGF5JylcbiAgICAgIHRoaXMuaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvYi1wbGF5JylcbiAgICB9XG4gIH1cblxuICBzdG9wKCkge1xuICAgIHRoaXMubWVkaWEucGF1c2UoKVxuICAgIHRoaXMubWVkaWEuY3VycmVudFRpbWUgPSAwXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ucGxheS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdyb2ItcGxheScpXG4gICAgdGhpcy5pY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm9iLXBsYXknKVxuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLnJhbmRvbUlkKytcbiAgICBpZiAodGhpcy5yYW5kb21JZCA+IHRoaXMubGVuZ3RoIC0gMSkgdGhpcy5yYW5kb21JZCA9IDBcbiAgICB0aGlzLnN0b3AoKVxuICAgIHRoaXMuY29tcG9uZW50c0hhbmRsZXIodGhpcy5yYW5kb21JZClcbiAgICB0aGlzLnBsYXkoKVxuICB9XG5cbiAgcHJldigpIHtcbiAgICB0aGlzLnJhbmRvbUlkLS1cbiAgICBpZiAodGhpcy5yYW5kb21JZCA8IDApIHRoaXMucmFuZG9tSWQgPSB0aGlzLmxlbmd0aCAtIDFcbiAgICB0aGlzLnN0b3AoKVxuICAgIHRoaXMuY29tcG9uZW50c0hhbmRsZXIodGhpcy5yYW5kb21JZClcbiAgICB0aGlzLnBsYXkoKVxuICB9XG5cbiAgdGltZXJIYW5kbGVyKG1lZGlhKSB7XG4gICAgdGhpcy50aW1lID0gbmV3IFRpbWVyKFxuICAgICAgdGhpcy5lbGVtZW50cy50aW1lci5zdGFydFRpbWUsXG4gICAgICB0aGlzLmVsZW1lbnRzLnRpbWVyLmVuZFRpbWUsXG4gICAgICB0aGlzLmVsZW1lbnRzLnRpbWVyLnJhbmdlLFxuICAgICAgdGhpcy5lbGVtZW50cy50aW1lci5wcm9ncmVzcyxcbiAgICAgIHRoaXMuZWxlbWVudHMudGltZXIucHJlbG9hZCxcbiAgICAgIG1lZGlhXG4gICAgKVxuICB9XG5cbiAgdm9sdW1lSGFuZGxlcihzb3VuZCkge1xuICAgIHRoaXMudm9sdW1lID0gbmV3IFZvbHVtZShcbiAgICAgIHRoaXMuZWxlbWVudHMudm9sdW1lLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZWxlbWVudHMudm9sdW1lLmdyYXBwZXIsXG4gICAgICB0aGlzLmVsZW1lbnRzLnZvbHVtZS5zbGlkZXIsXG4gICAgICBzb3VuZFxuICAgIClcbiAgfVxuXG4gIGV2ZW50c0xpc3Rlcm5lcigpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5leHBhbmQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLmV4cGFuZC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLmNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKVxuICAgIC8vIENvbnRyb2xcbiAgICB0aGlzLmVsZW1lbnRzLmJ1dHRvbi5wbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbGF5LmJpbmQodGhpcykpXG4gICAgdGhpcy5lbGVtZW50cy5idXR0b24ubmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubmV4dC5iaW5kKHRoaXMpKVxuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLnByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnByZXYuYmluZCh0aGlzKSlcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm9sdW1lIHtcbiAgY29uc3RydWN0b3IgKGNvbnRhaW5lciwgZ3JhcHBlciwgc2xpZGVyLCBtZWRpYSkge1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5ncmFwcGVyID0gZ3JhcHBlclxuICAgIHRoaXMuY29udGFpbmVyQm90dG9tID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tXG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICB0aGlzLmNvbnRhaW5lclRvcCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgIHRoaXMuc2xpZGVyID0gc2xpZGVyXG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhXG4gICAgdGhpcy5pc0Rvd24gPSBmYWxzZVxuICAgIHRoaXMucG9zaXRpb24gPSB7IHN0YXJ0OiAwLCBlbmQ6IDAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBvblBvaW50ZXJEb3duIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5pc0Rvd24gPSB0cnVlXG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwb2ludGVybW92ZScsXG4gICAgICB0aGlzLm9uUG9pbnRlck1vdmUuYmluZCh0aGlzKVxuICAgIClcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlclVwLmJpbmQodGhpcykpXG4gIH1cblxuICBvblBvaW50ZXJNb3ZlIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXG4gICAgdGhpcy5yYXRpbyA9IHRoaXMuY29udGFpbmVySGVpZ2h0IC0gKGUucGFnZVkgLSB0aGlzLmNvbnRhaW5lclRvcClcbiAgICB0aGlzLnNsaWRlci5zdHlsZS5oZWlnaHQgPSBgJHsodGhpcy5yYXRpbyAvIHRoaXMuY29udGFpbmVySGVpZ2h0KSAqIDEwMH0lYFxuICAgIHRoaXMubWVkaWEudm9sdW1lID0gdGhpcy5yYXRpbyAvIHRoaXMuY29udGFpbmVySGVpZ2h0XG4gIH1cblxuICBvblBvaW50ZXJVcCAoKSB7XG4gICAgdGhpcy5pc0Rvd24gPSBmYWxzZVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lciAoKSB7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwb2ludGVyZG93bicsXG4gICAgICB0aGlzLm9uUG9pbnRlckRvd24uYmluZCh0aGlzKSxcbiAgICAgIGZhbHNlXG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vY29tcG9uZW50cy9BbGVydCdcbmltcG9ydCB7IHZhbGlkRW1haWwgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybUhhbmRsZXIgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IgKHR5cGUsIHVybCwgbWV0aG9kKSB7XG4gICAgc3VwZXIoJ2Zvcm0nKVxuICAgIHRoaXMuZm9ybVR5cGUgPSB0eXBlXG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2RcbiAgICB0aGlzLnVybCA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59LyR7dXJsfWBcbiAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5lbGVtZW50c1t0aGlzLmZvcm1UeXBlXVxuICAgIHRoaXMudmFsID0gMFxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKVxuICB9XG5cbiAgLy8gU2VuZFRvRGIgKCkge31cblxuICBhc3luYyBmZXRjaCAodXJsLCBtZXRob2QsIGRhdGEpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgbW9kZTogJ25vLWNvcnMnLFxuICAgICAgYm9keTogZGF0YVxuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgLy8gc3VjY2Vzc1xuICAgICAgcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMuYWxlcnQgPSBuZXcgQWxlcnQoZGF0YS50ZXh0LCBkYXRhLnR5cGUpXG4gICAgICAgIHRoaXMuYWxlcnQuc2hvdygpXG4gICAgICAgIHRoaXMuZWxlbWVudHMuZm9ybS5yZXNldCgpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlcnJvclxuICAgICAgcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMuYWxlcnQgPSBuZXcgQWxlcnQoZGF0YS50ZXh0LCBkYXRhLnR5cGUpXG4gICAgICAgIHRoaXMuYWxlcnQuc2hvdygpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHNlbmREYXRhIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdmFsaWROdW1iZXIgPSB0aGlzLnZlcmlmeURhdGEodGhpcy5lbGVtZW50cy5tYWlsLCB0aGlzLmVsZW1lbnRzLm5hbWUsIHRoaXMuZWxlbWVudHMubWVzc2FnZSlcbiAgICBpZiAoIXZhbGlkTnVtYmVyKSByZXR1cm5cbiAgICB0aGlzLmVsZW1lbnRzLmFsZXJ0LmZvckVhY2goZWwgPT4geyBlbC5pbm5lclRleHQgPSAnJyB9KVxuICAgIGNvbnN0IGZvcm1FbGVtZW50cyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IEZvcm1EYXRhKHRoaXMuZWxlbWVudHMuZm9ybSkpXG4gICAgdGhpcy5mZXRjaCh0aGlzLnVybCwgdGhpcy5tZXRob2QsIGZvcm1FbGVtZW50cylcbiAgfVxuXG4gIHZlcmlmeURhdGEgKG1haWwsIG5hbWUsIG1lc3NhZ2UpIHtcbiAgICB0aGlzLnZhbCA9IDBcbiAgICAvLyBlbWFpbFxuICAgIGlmICh2YWxpZEVtYWlsKG1haWwudmFsdWUpKSB7XG4gICAgICB0aGlzLnZhbCsrXG4gICAgfSBlbHNlIGlmIChtYWlsLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50cy5lbWFpbEFsZXJ0LmlubmVyVGV4dCA9ICdSZXF1aXJlZConXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuZW1haWxBbGVydC5pbm5lclRleHQgPSAnVGhpcyBlbWFpbCBpcyBub3QgdmFsaWQnXG4gICAgfVxuXG4gICAgLy8gbmFtZVxuICAgIGlmIChuYW1lLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50cy5uYW1lQWxlcnQuaW5uZXJUZXh0ID0gJ1JlcXVpcmVkKidcbiAgICB9IGVsc2UgeyB0aGlzLnZhbCsrIH1cblxuICAgIC8vIG1lc3NhZ2VcbiAgICBpZiAobWVzc2FnZS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMubWVzc2FnZUFsZXJ0LmlubmVyVGV4dCA9ICdSZXF1aXJlZConXG4gICAgfSBlbHNlIHsgdGhpcy52YWwrKyB9XG5cbiAgICByZXR1cm4gdGhpcy52YWwgPT09IDNcbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXIgKCkge1xuICAgIHRoaXMuZWxlbWVudHMuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zZW5kRGF0YS5iaW5kKHRoaXMpKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vLi4vY2xhc3Nlcy9QYWdlcydcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0IGV4dGVuZHMgUGFnZXMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoJ2Fib3V0JylcbiAgICBjb25zb2xlLmxvZygnQWJvdXQnKVxuICB9XG5cbiAgY3JlYXRlICgpIHtcbiAgICBzdXBlci5jcmVhdGUoKVxuICB9XG5cbiAgaGlkZSAoKSB7XG4gICAgY29uc29sZS5sb2coJ2hpZGUnKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZXMgZnJvbSAnLi4vLi4vY2xhc3Nlcy9QYWdlcydcbmltcG9ydCBTbGlkZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZXMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoJ2hvbWUnKVxuICAgIGNvbnNvbGUubG9nKCdob21lJylcbiAgICB0aGlzLmNyZWF0ZSgpXG4gIH1cblxuICBjcmVhdGUgKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG4gICAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKClcbiAgfVxuXG4gIGhpZGUgKCkge1xuICAgIGNvbnNvbGUubG9nKCdoaWRlIGhvbWUnKVxuICB9XG59XG4iLCJpbXBvcnQgeyBsZXJwLCBjbGFtcCB9IGZyb20gJy4vZnVuY3Rpb24nXG5pbXBvcnQgbm9ybWFsaXplV2hlZWwgZnJvbSAnbm9ybWFsaXplLXdoZWVsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbW9vdGhzY3JvbGwge1xuICBjb25zdHJ1Y3RvciAoZWxlbWVudCwgb3B0cykge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcblxuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBkaXJlY3Rpb246ICd2JywgLy8gdjogdmVydGljYWwgb3IgIHYtIDogdmVydGljYWwgYm90dG9tIHRvIHRvcDsgIGg6IEhvcml6b250YWwgb3IgaC0gaG9yaXpvbnRhbCByaWdodCB0byBsZWZ0XG4gICAgICBzbW9vdGg6IDAuMSAvLyBTbW9vdGggYW1vdW50IC0+IExlcnAgZnVuY3Rpb25cbiAgICB9XG4gICAgdGhpcy5zbW9vdGhPcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICAuLi5vcHRzXG4gICAgfSlcblxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsaW1pdDogMFxuICAgIH1cbiAgICB0aGlzLm9mZnNldEhlaWdodCA9IDE1NlxuXG4gICAgdGhpcy5zY3JvbGwubGltaXQgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XG5cbiAgICB0aGlzLmFkZExpc3RlbmVyKClcbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICBvbk1vdXNlV2hlZWwgKGUpIHtcbiAgICBjb25zdCBldmVudCA9IG5vcm1hbGl6ZVdoZWVsKGUpXG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuZGlyZWN0aW9uID09PSAndicgfHxcbiAgICAgIHRoaXMuc21vb3RoT3B0aW9ucy5kaXJlY3Rpb24gPT09ICd2LSdcbiAgICApIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBldmVudC5waXhlbFlcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2gnIHx8XG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuZGlyZWN0aW9uID09PSAnaC0nXG4gICAgKSB7XG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gZXZlbnQucGl4ZWxYXG4gICAgfVxuICB9XG5cbiAgb25SZXNpemUgKCkge1xuICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID0gKHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQpIC0gKHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMub2Zmc2V0SGVpZ2h0KVxuICB9XG5cbiAgYWRkTGlzdGVuZXIgKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcykpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHVwZGF0ZSAoKSB7XG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gY2xhbXAodGhpcy5zY3JvbGwudGFyZ2V0LCAwLCB0aGlzLnNjcm9sbC5saW1pdClcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gbGVycChcbiAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQsXG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXQsXG4gICAgICB0aGlzLnNtb290aE9wdGlvbnMuc21vb3RoXG4gICAgKVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPCAwLjAxKSB7XG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gMFxuICAgIH1cblxuICAgIHRoaXMudHJhbnNsYXRlQnlDYXNlKClcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpXG4gIH1cblxuICB0cmFuc2xhdGVCeUNhc2UgKCkge1xuICAgIHN3aXRjaCAodGhpcy5zbW9vdGhPcHRpb25zLmRpcmVjdGlvbikge1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoMCwgLSR7TWF0aC5mbG9vcih0aGlzLnNjcm9sbC5jdXJyZW50KX1weCAsIDApYFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICd2LSc6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM0QoMCwgJHtNYXRoLmZsb29yKHRoaXMuc2Nyb2xsLmN1cnJlbnQpfXB4LCAwKWBcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnaCc6XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgtJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnaC0nOlxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBsZXJwID0gKHN0YXJ0LCBlbmQsIGFtb3VudCkgPT4ge1xuICByZXR1cm4gKDEgLSBhbW91bnQpICogc3RhcnQgKyBhbW91bnQgKiBlbmRcbn1cblxuZXhwb3J0IGNvbnN0IGNsYW1wID0gKHZhbHVlLCBtaW4sIG1heCkgPT4ge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIG1pbiksIG1heClcbn1cblxuLyoqXG4gKiBWw6lyaWZpZSBzaSB1biBmaWNoaWVyIGVzdCBkZSB0eXBlIFBERiwgIERPQyBldCBET1ggYydlc3Qgw6AgZGlyZVxuICogdW4gZG9jdW1lbnQgdGV4dGVcbiAqIEBwYXJhbSB7RklMRX0gZmlsZSAtIGxlIGZpY2hpZXIgcXVpIGRvaXQgw6p0cmUgdsOpcmlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGxlIHR5cGUgZGUgZmljaGllciBkb2N1bWVudCB8IGltYWdlXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhblxuICovXG5leHBvcnQgY29uc3QgdmFsaWRGaWxlVHlwZSA9IChmaWxlLCB0eXBlKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50cyA9IFtcbiAgICAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAnYXBwbGljYXRpb24vZG9jJyxcbiAgICAnYXBwbGljYXRpb24vZG9jeCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50JyxcbiAgICAnYXBwbGljYXRpb24vbXN3b3JkJ1xuICBdXG5cbiAgY29uc3QgaW1hZ2VzID0gW1xuICAgICdpbWFnZS9wbmcnLFxuICAgICdpbWFnZS9qcGVnJyxcbiAgICAnaW1hZ2UvanBnJyxcbiAgICAnaW1hZ2Uvd2VicCcsXG4gICAgJ2ltYWdlL2JtcCdcbiAgXVxuXG4gIGlmICh0eXBlID09PSAnZG9jdW1lbnRzJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZmlsZS50eXBlID09PSBkb2N1bWVudHNbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnaW1hZ2VzJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZmlsZS50eXBlID09PSBpbWFnZXNbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFbDqXJpZmllIHNpIHVuZSBVcmwgcG9pbnRlIHZlcnMgdW5lIHBhZ2UgdmFsaWRlXG4gKlxuICogQGFzeW5jXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gbGUgbGllbiBkZSBsYSBwYWdlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gQm9vbGVhblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gVXJsRXhpc3QgKHVybCkge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1vZGU6ICduby1jb3JzJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonXG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKVxuICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzICE9PSAnNDA0J1xufVxuXG4vKipcbiAqIFZlcmlmaWUgc2kgdW4gZW1haWwgZXN0IHZhbGlkZVxuICogQHBhcmFtIGVtYWlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRFbWFpbCAoZW1haWwpIHtcbiAgY29uc3QgcmVnZXggPVxuICAgIC9eW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOS1dKyg/OlxcLlthLXpBLVowLTktXSspKiQvXG5cbiAgaWYgKHJlZ2V4LnRlc3QoZW1haWwpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuIiwiLyoqXG4gKiBTZWxlY3QgZWxlbWVudCBpbiBET00gSFRNTFxuICogQHBhcmFtIHsqfSBlbGVtZW50IC0gVGhlIGNzcyBzZWxlY3RvciBvZiB0aGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldFxuICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3QgJCA9IChlbGVtZW50KSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke2VsZW1lbnR9YClcbn1cblxuLyoqXG4gKiBTZWxlY3QgZWxlbWVudHMgaW4gRE9NIEhUTUxcbiAqIEBwYXJhbSB7Kn0gZWxlbWVudHMgLSBUaGUgY3NzIHNlbGVjdG9yIG9mIHRoZSBIVE1MIGVsZW1lbnRzIHRvIHRhcmdldFxuICogQHJldHVybnMge05vZGVMaXN0fVxuICovXG5leHBvcnQgY29uc3QgJEFsbCA9IChlbGVtZW50cykgPT4ge1xuICByZXR1cm4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7ZWxlbWVudHN9YCldXG59XG5cbi8qKlxuICogR2V0IEF0dHJpYnV0ZSBvZiBFbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gSFRNTCBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBuYW1lIC0gTmFtZSBvZiBhdHRyaWJ1dGUgKGV4IDogZGF0YS1hbmltYXRpb24pXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgJEF0dHJpYnV0ZSA9IChlbGVtZW50LCBuYW1lKSA9PiB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW5zaUhUTUxcblxuLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleFxudmFyIF9yZWdBTlNJID0gLyg/Oig/OlxcdTAwMWJcXFspfFxcdTAwOWIpKD86KD86WzAtOV17MSwzfSk/KD86KD86O1swLTldezAsM30pKik/W0EtTXxmLW1dKXxcXHUwMDFiW0EtTV0vXG5cbnZhciBfZGVmQ29sb3JzID0ge1xuICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdXG4gIGJsYWNrOiAnMDAwJyxcbiAgcmVkOiAnZmYwMDAwJyxcbiAgZ3JlZW46ICcyMDk4MDUnLFxuICB5ZWxsb3c6ICdlOGJmMDMnLFxuICBibHVlOiAnMDAwMGZmJyxcbiAgbWFnZW50YTogJ2ZmMDBmZicsXG4gIGN5YW46ICcwMGZmZWUnLFxuICBsaWdodGdyZXk6ICdmMGYwZjAnLFxuICBkYXJrZ3JleTogJzg4OCdcbn1cbnZhciBfc3R5bGVzID0ge1xuICAzMDogJ2JsYWNrJyxcbiAgMzE6ICdyZWQnLFxuICAzMjogJ2dyZWVuJyxcbiAgMzM6ICd5ZWxsb3cnLFxuICAzNDogJ2JsdWUnLFxuICAzNTogJ21hZ2VudGEnLFxuICAzNjogJ2N5YW4nLFxuICAzNzogJ2xpZ2h0Z3JleSdcbn1cbnZhciBfb3BlblRhZ3MgPSB7XG4gICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkXG4gICcyJzogJ29wYWNpdHk6MC41JywgLy8gZGltXG4gICczJzogJzxpPicsIC8vIGl0YWxpY1xuICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlXG4gICc4JzogJ2Rpc3BsYXk6bm9uZScsIC8vIGhpZGRlblxuICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlXG59XG52YXIgX2Nsb3NlVGFncyA9IHtcbiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWNcbiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlXG4gICcyOSc6ICc8L2RlbD4nIC8vIHJlc2V0IGRlbGV0ZVxufVxuXG47WzAsIDIxLCAyMiwgMjcsIDI4LCAzOSwgNDldLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+J1xufSlcblxuLyoqXG4gKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gYW5zaUhUTUwgKHRleHQpIHtcbiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLlxuICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLy8gQ2FjaGUgb3BlbmVkIHNlcXVlbmNlLlxuICB2YXIgYW5zaUNvZGVzID0gW11cbiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC5cbiAgdmFyIHJldCA9IHRleHQucmVwbGFjZSgvXFwwMzNcXFsoXFxkKyltL2csIGZ1bmN0aW9uIChtYXRjaCwgc2VxKSB7XG4gICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV1cbiAgICBpZiAob3QpIHtcbiAgICAgIC8vIElmIGN1cnJlbnQgc2VxdWVuY2UgaGFzIGJlZW4gb3BlbmVkLCBjbG9zZSBpdC5cbiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgICByZXR1cm4gJzwvc3Bhbj4nXG4gICAgICB9XG4gICAgICAvLyBPcGVuIHRhZy5cbiAgICAgIGFuc2lDb2Rlcy5wdXNoKHNlcSlcbiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9XCInICsgb3QgKyAnO1wiPidcbiAgICB9XG5cbiAgICB2YXIgY3QgPSBfY2xvc2VUYWdzW3NlcV1cbiAgICBpZiAoY3QpIHtcbiAgICAgIC8vIFBvcCBzZXF1ZW5jZVxuICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICByZXR1cm4gY3RcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0pXG5cbiAgLy8gTWFrZSBzdXJlIHRhZ3MgYXJlIGNsb3NlZC5cbiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoXG4gIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSlcblxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogQ3VzdG9taXplIGNvbG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgcmVmZXJlbmNlIHRvIF9kZWZDb2xvcnNcbiAqL1xuYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICBpZiAodHlwZW9mIGNvbG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKVxuICB9XG5cbiAgdmFyIF9maW5hbENvbG9ycyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7XG4gICAgdmFyIGhleCA9IGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gY29sb3JzW2tleV0gOiBudWxsXG4gICAgaWYgKCFoZXgpIHtcbiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gW2hleF1cbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZXgpIHx8IGhleC5sZW5ndGggPT09IDAgfHwgaGV4LnNvbWUoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJ1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIEFycmF5IGFuZCBlYWNoIGl0ZW0gY291bGQgb25seSBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgICB9XG4gICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGlmICghaGV4WzBdKSB7XG4gICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdXG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSB8fCAhaGV4WzFdKSB7XG4gICAgICAgIGhleCA9IFtoZXhbMF1dXG4gICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKVxuICAgICAgfVxuXG4gICAgICBoZXggPSBoZXguc2xpY2UoMCwgMilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgIH1cbiAgICBfZmluYWxDb2xvcnNba2V5XSA9IGhleFxuICB9XG4gIF9zZXRUYWdzKF9maW5hbENvbG9ycylcbn1cblxuLyoqXG4gKiBSZXNldCBjb2xvcnMuXG4gKi9cbmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBfc2V0VGFncyhfZGVmQ29sb3JzKVxufVxuXG4vKipcbiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hbnNpSFRNTC50YWdzID0ge31cblxuaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9XG4gIH0pXG59IGVsc2Uge1xuICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3NcbiAgYW5zaUhUTUwudGFncy5jbG9zZSA9IF9jbG9zZVRhZ3Ncbn1cblxuZnVuY3Rpb24gX3NldFRhZ3MgKGNvbG9ycykge1xuICAvLyByZXNldCBhbGxcbiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXVxuICAvLyBpbnZlcnNlXG4gIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdXG4gIC8vIGRhcmsgZ3JleVxuICBfb3BlblRhZ3NbJzkwJ10gPSAnY29sb3I6IycgKyBjb2xvcnMuZGFya2dyZXlcblxuICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHtcbiAgICB2YXIgY29sb3IgPSBfc3R5bGVzW2NvZGVdXG4gICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJ1xuICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yXG4gICAgY29kZSA9IHBhcnNlSW50KGNvZGUpXG4gICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvclxuICB9XG59XG5cbmFuc2lIVE1MLnJlc2V0KClcbiIsIi8qKlxuICogRXZFbWl0dGVyIHYyLjEuMVxuICogTGlsJyBldmVudCBlbWl0dGVyXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxubGV0IHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHJldHVybiB0aGlzO1xuXG4gIC8vIHNldCBldmVudHMgaGFzaFxuICBsZXQgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIGxldCBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoICFsaXN0ZW5lcnMuaW5jbHVkZXMoIGxpc3RlbmVyICkgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHJldHVybiB0aGlzO1xuXG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICBsZXQgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgbGV0IG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIGxldCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGFyZ3MgKSB7XG4gIGxldCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKCAwICk7XG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAvLyBvbmNlIHN0dWZmXG4gIGxldCBvbmNlTGlzdGVuZXJzID0gdGhpcy5fb25jZUV2ZW50cyAmJiB0aGlzLl9vbmNlRXZlbnRzWyBldmVudE5hbWUgXTtcblxuICBmb3IgKCBsZXQgbGlzdGVuZXIgb2YgbGlzdGVuZXJzICkge1xuICAgIGxldCBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgaWYgKCBpc09uY2UgKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgICAgIC8vIHVuc2V0IG9uY2UgZmxhZ1xuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgbGlzdGVuZXJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG4gIHJldHVybiB0aGlzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSApICk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMS4wXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5KSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSB0YXJnZXQuX2dzYXAueCA/IHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpOyAvLyBub3RlOiBzY2FsZSB3b3VsZCBtYXAgdG8gXCJzY2FsZVgsc2NhbGVZXCIsIHRodXMgd2UgbG9vcCBhbmQgYXBwbHkgdGhlbSBib3RoLlxuICAgIH1cblxuICAgIHRhcmdldC5fZ3NhcC5zdmcgJiYgKHRoaXMuc3ZnID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgXCJcIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgfVxuXG4gIHN0eWxlICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgc3R5bGVbcHJvcGVydHldKTtcbn0sXG4gICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2NhbGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gIH1cbn0sXG4gICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgaSxcbiAgICAgIHA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcHJvcHNbaSArIDFdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDFdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICBpZiAodGhpcy50Zm0pIHtcbiAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0aGlzLnN2ZyB8fCBcIlwiKTtcblxuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpID0gX3JldmVydGluZygpO1xuXG4gICAgaWYgKGkgJiYgIWkuaXNTdGFydCAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgaWYgKHByb3BlcnR5LnN1YnN0cigwLCAyKSA9PT0gXCJtc1wiIHx8IHByb3BlcnR5LnN1YnN0cigwLCA2KSA9PT0gXCJ3ZWJraXRcIikge1xuICAgICAgICAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHByb3BlcnR5ID0gXCItXCIgKyBwcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHVzZSBcInJlbW92ZUF0dHJpYnV0ZSgpXCIgaW5zdGVhZCBvZiBcInJlbW92ZVByb3BlcnR5KClcIlxuICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgcGx1Z2luLl9wdCA9IHB0O1xuICBwdC5iID0gYmVnaW5uaW5nO1xuICBwdC5lID0gZW5kO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfbm9uQ29udmVydGlibGVVbml0cyA9IHtcbiAgZGVnOiAxLFxuICByYWQ6IDEsXG4gIHR1cm46IDFcbn0sXG4gICAgX25vblN0YW5kYXJkTGF5b3V0cyA9IHtcbiAgZ3JpZDogMSxcbiAgZmxleDogMVxufSxcbiAgICAvL3Rha2VzIGEgc2luZ2xlIHZhbHVlIGxpa2UgMjBweCBhbmQgY29udmVydHMgaXQgdG8gdGhlIHVuaXQgc3BlY2lmaWVkLCBsaWtlIFwiJVwiLCByZXR1cm5pbmcgb25seSB0aGUgbnVtZXJpYyBhbW91bnQuXG5fY29udmVydFRvVW5pdCA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSB7XG4gIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgbGVhdmUgZXh0cmEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIENTUyB2YXJpYWJsZXMsIGhlbmNlIHRoZSBuZWVkIHRvIHRyaW0oKVxuICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgaXNSb290U1ZHID0gdGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIixcbiAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgdG9QaXhlbHMgPSB1bml0ID09PSBcInB4XCIsXG4gICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgIHB4LFxuICAgICAgcGFyZW50LFxuICAgICAgY2FjaGUsXG4gICAgICBpc1NWRztcblxuICBpZiAodW5pdCA9PT0gY3VyVW5pdCB8fCAhY3VyVmFsdWUgfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbdW5pdF0gfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbY3VyVW5pdF0pIHtcbiAgICByZXR1cm4gY3VyVmFsdWU7XG4gIH1cblxuICBjdXJVbml0ICE9PSBcInB4XCIgJiYgIXRvUGl4ZWxzICYmIChjdXJWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBcInB4XCIpKTtcbiAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgIHB4ID0gaXNTVkcgPyB0YXJnZXQuZ2V0QkJveCgpW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA6IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IGVuZDtcbiAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHx8IGVuZDtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydDtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDM2OC1wb3NzaWJsZS1nc2FwLWJ1Zy1zd2l0Y2hpbmctY2xhc3NuYW1lcy1pbi1jaHJvbWUvLlxuICBcdFx0c3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG4gIFx0fVxuICBcdF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHRydWUpOyAvL3RvIGNsZWFyIHRoZSBjYWNoaW5nIG9mIHRyYW5zZm9ybXNcbiAgXHRkYXRhLmNzcyA9IG5ldyBnc2FwLnBsdWdpbnMuY3NzKCk7XG4gIFx0ZGF0YS5jc3MuaW5pdCh0YXJnZXQsIGNoYW5naW5nVmFycywgdHdlZW4pO1xuICBcdHBsdWdpbi5fcHJvcHMucHVzaCguLi5kYXRhLmNzcy5fcHJvcHMpO1xuICBcdHJldHVybiAxO1xuICB9XG4gICovXG5cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFJBTlNGT1JNU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgX2lzTnVsbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9pc051bGxUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG59LFxuICAgIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCkge1xuICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbn0sXG4gICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgcGFyZW50LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICB0ZW1wLFxuICAgICAgYWRkZWRUb0RPTTtcblxuICBpZiAoY2FjaGUuc3ZnICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcbiAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4OyAvL2Vuc3VyZXMgdGhhdCBldmVuIGNvbXBsZXggdmFsdWVzIGxpa2UgXCJ0cmFuc2xhdGUoNTAsNjApIHJvdGF0ZSgxMzUsMCwwKVwiIGFyZSBwYXJzZWQgYmVjYXVzZSBpdCBtYXNoZXMgaXQgaW50byBhIG1hdHJpeC5cblxuICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICByZXR1cm4gbWF0cml4LmpvaW4oXCIsXCIpID09PSBcIjEsMCwwLDEsMCwwXCIgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeDtcbiAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgIC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gICAgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cbiAgICB0ZW1wID0gc3R5bGUuZGlzcGxheTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXRhcmdldC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1XG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyBjc1tfdHJhbnNmb3JtUHJvcF07XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICB0MSA9ICghY2FjaGUudW5jYWNoZSB8fCBvcmlnaW4gPT09IFwiMHB4IDBweFwiKSAmJiAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyBpZiBvcmlnaW4gaXMgMCwwIGFuZCBjYWNoZS51bmNhY2hlIGlzIHRydWUsIGxldCB0aGUgcmVjb3JkZWQgZGF0YS1zdmctb3JpZ2luIHN0YXkuIE90aGVyd2lzZSwgd2hlbmV2ZXIgd2Ugc2V0IGNhY2hlLnVuY2FjaGUgdG8gdHJ1ZSwgd2UnZCBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG4gIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7IC8vc29tZSBicm93c2VycyBwcmlvcml0aXplIENTUyB0cmFuc2Zvcm1zIG92ZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUuIFdoZW4gd2Ugc2Vuc2UgdGhhdCB0aGUgdXNlciBoYXMgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCwgd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB0aGlzIHdheSAob3RoZXJ3aXNlIHNvbWUgYnJvd3NlciBzaW1wbHkgd29uJ3QgcmVuZGVyIHRoZSAgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoY2FjaGUuc2NhbGVZLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gY2FjaGUuc2NhbGVZIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IGlubGluZVByb3BzLnB1c2gocCwgc3R5bGVbcF0pO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMS4wXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8IGNoaWxkLl9pbml0dGVkICYmICFjaGlsZC5fZHVyKSB7XG4gICAgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgPyBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKSA6IGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKGZhbHNlKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Byb3BzID0gW107XG4gIH0gOiBjb25maWcsXG4gICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICByYXdWYXJzOiAwXG4gIH0sXG4gICAgICBzdGF0aWNzID0ge1xuICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgZ2V0OiAwLFxuICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICBhbGlhc2VzOiB7fSxcbiAgICByZWdpc3RlcjogMFxuICB9O1xuXG4gIF93YWtlKCk7XG5cbiAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICB9XG5cbiAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gIH1cblxuICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLXRoaXMuX2RlbGF5LCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtMSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIFJlY29yZGluZy5yZXZlcnQoKSlcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JjZSA9IGZvcmNlIHx8IF9yZXZlcnRpbmc7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoKTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlID0gdmFycy5jYWxsYmFja1Njb3BlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnBhcmVudC5fdGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWcgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpOyAvLyByYXJlIGVkZ2UgY2FzZSwgbGlrZSBpZiBhIHJlbmRlciBpcyBmb3JjZWQgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiBvZiBhIG5vbi1pbml0dGVkIHR3ZWVuLlxuXG4gICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwKSB7XG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZykgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0d2Vlbi5fcHQgPSB0d2Vlbi5fcHRDYWNoZSA9IDA7XG4gICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICBfbGF6eUxvb2t1cFtnc0RhdGEuaWRdICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXG4gICAgICBpbmRleCA9IGZ1bGxUYXJnZXRzID09PSB0YXJnZXRzID8gaSA6IGZ1bGxUYXJnZXRzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGNsZWFuVmFycykge1xuICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICBpZiAoYXV0b092ZXJ3cml0ZSAmJiB0d2Vlbi5fcHQpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpOyAvLyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG5cbiAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7IC8vIGlmIHRoZXJlJ3MgYSAwJSBrZXlmcmFtZSwgaXQnbGwgcmVuZGVyIGluIHRoZSBcImJlZm9yZVwiIHN0YXRlIGZvciBhbnkgc3RhZ2dlcmVkL2RlbGF5ZWQgYW5pbWF0aW9ucyB0aHVzIHdoZW4gdGhlIGZvbGxvd2luZyB0d2VlbiBpbml0aWFsaXplcywgaXQnbGwgdXNlIHRoZSBcImJlZm9yZVwiIHN0YXRlIGluc3RlYWQgb2YgdGhlIFwiYWZ0ZXJcIiBzdGF0ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZXMuXG59LFxuICAgIF91cGRhdGVQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3VwZGF0ZVByb3BUd2VlbnModHdlZW4sIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpIHtcbiAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgcHQsXG4gICAgICByb290UFQsXG4gICAgICBsb29rdXAsXG4gICAgICBpO1xuXG4gIGlmICghcHRDYWNoZSkge1xuICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgaSA9IHR3ZWVuLl90YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHB0ICYmIHB0LmQgJiYgcHQuZC5fcHQpIHtcbiAgICAgICAgLy8gaXQncyBhIHBsdWdpbiwgc28gZmluZCB0aGUgbmVzdGVkIFByb3BUd2VlblxuICAgICAgICBwdCA9IHB0LmQuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAvLyBcImZwXCIgaXMgZnVuY3Rpb25QYXJhbSBmb3IgdGhpbmdzIGxpa2Ugc2V0dGluZyBDU1MgdmFyaWFibGVzIHdoaWNoIHJlcXVpcmUgLnNldFByb3BlcnR5KFwiLS12YXItbmFtZVwiLCB2YWx1ZSlcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcHQpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHByb3BlcnR5LCBzbyB3ZSBtdXN0IEZPUkNFIG9uZSB0byBiZSBjcmVhdGVkIGFuZCBkaXRjaCBvdXQgb2YgdGhpc1xuICAgICAgICAvLyBpZiB0aGUgdHdlZW4gaGFzIG90aGVyIHByb3BlcnRpZXMgdGhhdCBhbHJlYWR5IHJlbmRlcmVkIGF0IG5ldyBwb3NpdGlvbnMsIHdlJ2Qgbm9ybWFsbHkgaGF2ZSB0byByZXdpbmQgdG8gcHV0IHRoZW0gYmFjayBsaWtlIHR3ZWVuLnJlbmRlcigwLCB0cnVlKSBiZWZvcmUgZm9yY2luZyBhbiBfaW5pdFR3ZWVuKCksIGJ1dCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBlZGdlIGNhc2UgbGlrZSB0d2VlbmluZyBhIHRpbWVsaW5lJ3MgcHJvZ3Jlc3Mgd291bGQgdHJpZ2dlciBvblVwZGF0ZXMgdG8gZmlyZSB3aGljaCBjb3VsZCBtb3ZlIG90aGVyIHRoaW5ncyBhcm91bmQuIEl0J3MgYmV0dGVyIHRvIGp1c3QgaW5mb3JtIHVzZXJzIHRoYXQgLnJlc2V0VG8oKSBzaG91bGQgT05MWSBiZSB1c2VkIGZvciB0d2VlbnMgdGhhdCBhbHJlYWR5IGhhdmUgdGhhdCBwcm9wZXJ0eS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBnc2FwLnRvKC4uLnsgeTogMCB9KSBhbmQgdGhlbiB0d2Vlbi5yZXN0VG8oXCJ4XCIsIDIwMCkgZm9yIGV4YW1wbGUuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxOyAvLyBvdGhlcndpc2UsIHdoZW4gd2UgX2FkZFByb3BUd2VlbigpIGFuZCBpdCBmaW5kcyBubyBjaGFuZ2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMsIGl0IHNraXBzIGNyZWF0aW5nIGEgUHJvcFR3ZWVuIChmb3IgZWZmaWNpZW5jeS4uLndoeSB0d2VlbiB3aGVuIHRoZXJlJ3Mgbm8gZGlmZmVyZW5jZT8pIGJ1dCBpbiB0aGlzIGNhc2Ugd2UgTkVFRCB0aGF0IFByb3BUd2VlbiBjcmVhdGVkIHNvIHdlIGNhbiBlZGl0IGl0LlxuXG4gICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMDtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIHB0Q2FjaGUucHVzaChwdCk7XG4gICAgfVxuICB9XG5cbiAgaSA9IHB0Q2FjaGUubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgIHB0ID0gcm9vdFBULl9wdCB8fCByb290UFQ7IC8vIGNvbXBsZXggdmFsdWVzIG1heSBoYXZlIG5lc3RlZCBQcm9wVHdlZW5zLiBXZSBvbmx5IGFjY29tbW9kYXRlIHRoZSBGSVJTVCB2YWx1ZS5cblxuICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgcHQuYyA9IHZhbHVlIC0gcHQucztcbiAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpOyAvLyBtYWlubHkgZm9yIENTU1BsdWdpbiAoZW5kIHZhbHVlKVxuXG4gICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTsgLy8gKGJlZ2lubmluZyB2YWx1ZSlcbiAgfVxufSxcbiAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgcHJvcGVydHlBbGlhc2VzID0gaGFybmVzcyAmJiBoYXJuZXNzLmFsaWFzZXMsXG4gICAgICBjb3B5LFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBhbGlhc2VzO1xuXG4gIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICBmb3IgKHAgaW4gcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICBpID0gYWxpYXNlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vIHBhcnNlcyBtdWx0aXBsZSBmb3JtYXRzLCBsaWtlIHtcIjAlXCI6IHt4OiAxMDB9LCB7XCI1MCVcIjoge3g6IC0yMH19IGFuZCB7IHg6IHtcIjAlXCI6IDEwMCwgXCI1MCVcIjogLTIwfSB9LCBhbmQgYW4gXCJlYXNlXCIgY2FuIGJlIHNldCBvbiBhbnkgb2JqZWN0LiBXZSBwb3B1bGF0ZSBhbiBcImFsbFByb3BzXCIgb2JqZWN0IHdpdGggYW4gQXJyYXkgZm9yIGVhY2ggcHJvcGVydHksIGxpa2Uge3g6IFt7fSwge31dLCB5Olt7fSwge31dfSB3aXRoIGRhdGEgZm9yIGVhY2ggcHJvcGVydHkgdHdlZW4uIFRoZSBvYmplY3RzIGhhdmUgYSBcInRcIiAodGltZSksIFwidlwiLCAodmFsdWUpLCBhbmQgXCJlXCIgKGVhc2UpIHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBwaWVjZSB0b2dldGhlciBhIHRpbWVsaW5lIGxhdGVyLlxuX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICBwLFxuICAgICAgYTtcblxuICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgIGEgPSBhbGxQcm9wc1twcm9wXSB8fCAoYWxsUHJvcHNbcHJvcF0gPSBbXSk7IC8vIHQgPSB0aW1lIChvdXQgb2YgMTAwKSwgdiA9IHZhbHVlLCBlID0gZWFzZVxuXG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgdDogaSAvIChvYmoubGVuZ3RoIC0gMSkgKiAxMDAsXG4gICAgICAgIHY6IHZhbHVlLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgdDogcGFyc2VGbG9hdChwcm9wKSxcbiAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuX2ZvckVhY2hOYW1lKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9XG4gICAgICB9KTtcbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciAmJiBkaXN0cmlidXRlKHN0YWdnZXIpO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3N0YWdnZXJQcm9wc1RvU2tpcCk7XG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyA/IHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgOiAwKTtcbiAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9pbmhlcml0RGVmYXVsdHMoX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGwuX2Vhc2UgPSBfcGFyc2VFYXNlKGtleWZyYW1lcy5lYXNlIHx8IHZhcnMuZWFzZSB8fCBcIm5vbmVcIik7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBrZixcbiAgICAgICAgICAgIHY7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRsLmR1cmF0aW9uKCk7IC8vIHRvIGVuc3VyZSB0bC5fZHVyIGlzIGNhY2hlZCBiZWNhdXNlIHdlIHRhcCBpbnRvIGl0IGZvciBwZXJmb3JtYW5jZSBwdXJwb3NlcyBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEudCAtIGIudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICBlYXNlOiBrZi5lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHZbcF0gPSBrZi52O1xuICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC0gdGwuZHVyYXRpb24oKVxuICAgICAgICAgIH0pOyAvLyBpbiBjYXNlIGtleWZyYW1lcyBkaWRuJ3QgZ28gdG8gMTAwJVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lKSAmJiBfaXNOb3RGYWxzZShpbW1lZGlhdGVSZW5kZXIpICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMykpICYmIHBhcmVudC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblxuICAgICAgX3RoaXMzLnJlbmRlcihNYXRoLm1heCgwLCAtZGVsYXkpKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGVhdCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgdGhpcy52YXJzLm9uUmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUpKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9zdGFydEF0ID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYyk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmKSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiBlLl90YXJnZXRzWzBdICE9PSBlLnZhcnMub25Db21wbGV0ZSAmJiBhLnB1c2goZSk7XG4gICAgfSk7IC8vIGRvbid0IGluY2x1ZGUgZGVsYXllZENhbGxzXG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG4gICAgICB0aGlzLmdldFR3ZWVucygpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICB0OiB0XG4gICAgICAgIH07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLTE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aHkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5pbmRleE9mKHRoaXMpO1xuXG4gICAgICAhIX5pICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMS4wXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuYW1lZF9yZWZlcmVuY2VzXzEgPSByZXF1aXJlKFwiLi9uYW1lZC1yZWZlcmVuY2VzXCIpO1xudmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMSA9IHJlcXVpcmUoXCIuL251bWVyaWMtdW5pY29kZS1tYXBcIik7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgYWxsTmFtZWRSZWZlcmVuY2VzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMpLCB7IGFsbDogbmFtZWRfcmVmZXJlbmNlc18xLm5hbWVkUmVmZXJlbmNlcy5odG1sNSB9KTtcbnZhciBlbmNvZGVSZWdFeHBzID0ge1xuICAgIHNwZWNpYWxDaGFyczogL1s8PidcIiZdL2csXG4gICAgbm9uQXNjaWk6IC8oPzpbPD4nXCImXFx1MDA4MC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nLFxuICAgIG5vbkFzY2lpUHJpbnRhYmxlOiAvKD86Wzw+J1wiJlxceDAxLVxceDA4XFx4MTEtXFx4MTVcXHgxNy1cXHgxRlxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2csXG4gICAgZXh0ZW5zaXZlOiAvKD86W1xceDAxLVxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHgyY1xceDJlLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdkXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkvZ1xufTtcbnZhciBkZWZhdWx0RW5jb2RlT3B0aW9ucyA9IHtcbiAgICBtb2RlOiAnc3BlY2lhbENoYXJzJyxcbiAgICBsZXZlbDogJ2FsbCcsXG4gICAgbnVtZXJpYzogJ2RlY2ltYWwnXG59O1xuLyoqIEVuY29kZXMgYWxsIHRoZSBuZWNlc3NhcnkgKHNwZWNpZmllZCBieSBgbGV2ZWxgKSBjaGFyYWN0ZXJzIGluIHRoZSB0ZXh0ICovXG5mdW5jdGlvbiBlbmNvZGUodGV4dCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdEVuY29kZU9wdGlvbnMgOiBfYSwgX2MgPSBfYi5tb2RlLCBtb2RlID0gX2MgPT09IHZvaWQgMCA/ICdzcGVjaWFsQ2hhcnMnIDogX2MsIF9kID0gX2IubnVtZXJpYywgbnVtZXJpYyA9IF9kID09PSB2b2lkIDAgPyAnZGVjaW1hbCcgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfZTtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgZW5jb2RlUmVnRXhwID0gZW5jb2RlUmVnRXhwc1ttb2RlXTtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uY2hhcmFjdGVycztcbiAgICB2YXIgaXNIZXggPSBudW1lcmljID09PSAnaGV4YWRlY2ltYWwnO1xuICAgIGVuY29kZVJlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBfYiA9IGVuY29kZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgIHZhciBfYztcbiAgICBpZiAoX2IpIHtcbiAgICAgICAgX2MgPSAnJztcbiAgICAgICAgdmFyIF9kID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKF9kICE9PSBfYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kLCBfYi5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2UgPSBfYlswXTtcbiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZmVyZW5jZXNbX2VdO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRfMSkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlXzEgPSBfZS5sZW5ndGggPiAxID8gc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KF9lLCAwKSA6IF9lLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0XzEgPSAoaXNIZXggPyAnJiN4JyArIGNvZGVfMS50b1N0cmluZygxNikgOiAnJiMnICsgY29kZV8xKSArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9jICs9IHJlc3VsdF8xO1xuICAgICAgICAgICAgX2QgPSBfYi5pbmRleCArIF9lLmxlbmd0aDtcbiAgICAgICAgfSB3aGlsZSAoKF9iID0gZW5jb2RlUmVnRXhwLmV4ZWModGV4dCkpKTtcbiAgICAgICAgaWYgKF9kICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfYyA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gX2M7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBkZWZhdWx0RGVjb2RlT3B0aW9ucyA9IHtcbiAgICBzY29wZTogJ2JvZHknLFxuICAgIGxldmVsOiAnYWxsJ1xufTtcbnZhciBzdHJpY3QgPSAvJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7L2c7XG52YXIgYXR0cmlidXRlID0gLyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspWzs9XT8vZztcbnZhciBiYXNlRGVjb2RlUmVnRXhwcyA9IHtcbiAgICB4bWw6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMueG1sXG4gICAgfSxcbiAgICBodG1sNDoge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNFxuICAgIH0sXG4gICAgaHRtbDU6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDVcbiAgICB9XG59O1xudmFyIGRlY29kZVJlZ0V4cHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZURlY29kZVJlZ0V4cHMpLCB7IGFsbDogYmFzZURlY29kZVJlZ0V4cHMuaHRtbDUgfSk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpO1xudmFyIGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zID0ge1xuICAgIGxldmVsOiAnYWxsJ1xufTtcbi8qKiBEZWNvZGVzIGEgc2luZ2xlIGVudGl0eSAqL1xuZnVuY3Rpb24gZGVjb2RlRW50aXR5KGVudGl0eSwgX2EpIHtcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIDogX2EpLmxldmVsLCBsZXZlbCA9IF9iID09PSB2b2lkIDAgPyAnYWxsJyA6IF9iO1xuICAgIGlmICghZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIF9iID0gZW50aXR5O1xuICAgIHZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xID0gZW50aXR5W2VudGl0eS5sZW5ndGggLSAxXTtcbiAgICBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9PT0gJz0nKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSAhPT0gJzsnKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllc1tlbnRpdHldO1xuICAgICAgICBpZiAoZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSkge1xuICAgICAgICAgICAgX2IgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudGl0eVswXSA9PT0gJyYnICYmIGVudGl0eVsxXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8xID0gZW50aXR5WzJdO1xuICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMSA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8xID09ICdYJ1xuICAgICAgICAgICAgICAgID8gcGFyc2VJbnQoZW50aXR5LnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgOiBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgIF9iID1cbiAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzEgPj0gMHgxMGZmZmZcbiAgICAgICAgICAgICAgICAgICAgPyBvdXRPZkJvdW5kc0NoYXJcbiAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzEgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXzFdIHx8IGRlY29kZUNvZGVfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9iO1xufVxuZXhwb3J0cy5kZWNvZGVFbnRpdHkgPSBkZWNvZGVFbnRpdHk7XG4vKiogRGVjb2RlcyBhbGwgZW50aXRpZXMgaW4gdGhlIHRleHQgKi9cbmZ1bmN0aW9uIGRlY29kZSh0ZXh0LCBfYSkge1xuICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzEgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdERlY29kZU9wdGlvbnMgOiBfYSwgZGVjb2RlQ29kZV8xID0gZGVjb2RlU2Vjb25kQ2hhcl8xLmxldmVsLCBsZXZlbCA9IGRlY29kZUNvZGVfMSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBkZWNvZGVDb2RlXzEsIF9iID0gZGVjb2RlU2Vjb25kQ2hhcl8xLnNjb3BlLCBzY29wZSA9IF9iID09PSB2b2lkIDAgPyBsZXZlbCA9PT0gJ3htbCcgPyAnc3RyaWN0JyA6ICdib2R5JyA6IF9iO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBkZWNvZGVSZWdFeHAgPSBkZWNvZGVSZWdFeHBzW2xldmVsXVtzY29wZV07XG4gICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzO1xuICAgIHZhciBpc0F0dHJpYnV0ZSA9IHNjb3BlID09PSAnYXR0cmlidXRlJztcbiAgICB2YXIgaXNTdHJpY3QgPSBzY29wZSA9PT0gJ3N0cmljdCc7XG4gICAgZGVjb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCk7XG4gICAgdmFyIHJlcGxhY2VSZXN1bHRfMTtcbiAgICBpZiAocmVwbGFjZU1hdGNoXzEpIHtcbiAgICAgICAgcmVwbGFjZVJlc3VsdF8xID0gJyc7XG4gICAgICAgIHZhciByZXBsYWNlTGFzdEluZGV4XzEgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSByZXBsYWNlTWF0Y2hfMS5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSB0ZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4XzEsIHJlcGxhY2VNYXRjaF8xLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXBsYWNlSW5wdXRfMSA9IHJlcGxhY2VNYXRjaF8xWzBdO1xuICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdF8xID0gcmVwbGFjZUlucHV0XzE7XG4gICAgICAgICAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xW3JlcGxhY2VJbnB1dF8xLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGlzQXR0cmlidXRlXG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9PT0gJz0nKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiAhPT0gJzsnKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yID0gcmVmZXJlbmNlc1tyZXBsYWNlSW5wdXRfMV07XG4gICAgICAgICAgICAgICAgaWYgKGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBsYWNlSW5wdXRfMVswXSA9PT0gJyYnICYmIHJlcGxhY2VJbnB1dF8xWzFdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlQ29kZV8yID0gZGVjb2RlU2Vjb25kQ2hhcl8yID09ICd4JyB8fCBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ1gnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMiA+PSAweDEwZmZmZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzIgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8yXSB8fCBkZWNvZGVDb2RlXzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSBkZWNvZGVSZXN1bHRfMTtcbiAgICAgICAgICAgIHJlcGxhY2VMYXN0SW5kZXhfMSA9IHJlcGxhY2VNYXRjaF8xLmluZGV4ICsgcmVwbGFjZUlucHV0XzEubGVuZ3RoO1xuICAgICAgICB9IHdoaWxlICgocmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpO1xuICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IHRleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXhfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHRfMSA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmVwbGFjZVJlc3VsdF8xO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuYm9keVJlZ0V4cHM9e3htbDovJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nLGh0bWw0Oi8mKD86bmJzcHxpZXhjbHxjZW50fHBvdW5kfGN1cnJlbnx5ZW58YnJ2YmFyfHNlY3R8dW1sfGNvcHl8b3JkZnxsYXF1b3xub3R8c2h5fHJlZ3xtYWNyfGRlZ3xwbHVzbW58c3VwMnxzdXAzfGFjdXRlfG1pY3JvfHBhcmF8bWlkZG90fGNlZGlsfHN1cDF8b3JkbXxyYXF1b3xmcmFjMTR8ZnJhYzEyfGZyYWMzNHxpcXVlc3R8QWdyYXZlfEFhY3V0ZXxBY2lyY3xBdGlsZGV8QXVtbHxBcmluZ3xBRWxpZ3xDY2VkaWx8RWdyYXZlfEVhY3V0ZXxFY2lyY3xFdW1sfElncmF2ZXxJYWN1dGV8SWNpcmN8SXVtbHxFVEh8TnRpbGRlfE9ncmF2ZXxPYWN1dGV8T2NpcmN8T3RpbGRlfE91bWx8dGltZXN8T3NsYXNofFVncmF2ZXxVYWN1dGV8VWNpcmN8VXVtbHxZYWN1dGV8VEhPUk58c3psaWd8YWdyYXZlfGFhY3V0ZXxhY2lyY3xhdGlsZGV8YXVtbHxhcmluZ3xhZWxpZ3xjY2VkaWx8ZWdyYXZlfGVhY3V0ZXxlY2lyY3xldW1sfGlncmF2ZXxpYWN1dGV8aWNpcmN8aXVtbHxldGh8bnRpbGRlfG9ncmF2ZXxvYWN1dGV8b2NpcmN8b3RpbGRlfG91bWx8ZGl2aWRlfG9zbGFzaHx1Z3JhdmV8dWFjdXRlfHVjaXJjfHV1bWx8eWFjdXRlfHRob3JufHl1bWx8cXVvdHxhbXB8bHR8Z3R8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZ307ZXhwb3J0cy5uYW1lZFJlZmVyZW5jZXM9e3htbDp7ZW50aXRpZXM6e1wiJmx0O1wiOlwiPFwiLFwiJmd0O1wiOlwiPlwiLFwiJnF1b3Q7XCI6J1wiJyxcIiZhcG9zO1wiOlwiJ1wiLFwiJmFtcDtcIjpcIiZcIn0sY2hhcmFjdGVyczp7XCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCImXCI6XCImYW1wO1wifX0saHRtbDQ6e2VudGl0aWVzOntcIiZhcG9zO1wiOlwiJ1wiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImaWV4Y2xcIjpcIsKhXCIsXCImaWV4Y2w7XCI6XCLCoVwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJnllblwiOlwiwqVcIixcIiZ5ZW47XCI6XCLCpVwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJnNlY3RcIjpcIsKnXCIsXCImc2VjdDtcIjpcIsKnXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZub3RcIjpcIsKsXCIsXCImbm90O1wiOlwiwqxcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZyZWdcIjpcIsKuXCIsXCImcmVnO1wiOlwiwq5cIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJnBsdXNtblwiOlwiwrFcIixcIiZwbHVzbW47XCI6XCLCsVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImbWlkZG90XCI6XCLCt1wiLFwiJm1pZGRvdDtcIjpcIsK3XCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImb3JkbVwiOlwiwrpcIixcIiZvcmRtO1wiOlwiwrpcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImZnJhYzE0XCI6XCLCvFwiLFwiJmZyYWMxNDtcIjpcIsK8XCIsXCImZnJhYzEyXCI6XCLCvVwiLFwiJmZyYWMxMjtcIjpcIsK9XCIsXCImZnJhYzM0XCI6XCLCvlwiLFwiJmZyYWMzNDtcIjpcIsK+XCIsXCImaXF1ZXN0XCI6XCLCv1wiLFwiJmlxdWVzdDtcIjpcIsK/XCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWNpcmNcIjpcIsOCXCIsXCImQWNpcmM7XCI6XCLDglwiLFwiJkF0aWxkZVwiOlwiw4NcIixcIiZBdGlsZGU7XCI6XCLDg1wiLFwiJkF1bWxcIjpcIsOEXCIsXCImQXVtbDtcIjpcIsOEXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZFZ3JhdmVcIjpcIsOIXCIsXCImRWdyYXZlO1wiOlwiw4hcIixcIiZFYWN1dGVcIjpcIsOJXCIsXCImRWFjdXRlO1wiOlwiw4lcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZJZ3JhdmVcIjpcIsOMXCIsXCImSWdyYXZlO1wiOlwiw4xcIixcIiZJYWN1dGVcIjpcIsONXCIsXCImSWFjdXRlO1wiOlwiw41cIixcIiZJY2lyY1wiOlwiw45cIixcIiZJY2lyYztcIjpcIsOOXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZFVEhcIjpcIsOQXCIsXCImRVRIO1wiOlwiw5BcIixcIiZOdGlsZGVcIjpcIsORXCIsXCImTnRpbGRlO1wiOlwiw5FcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlV1bWxcIjpcIsOcXCIsXCImVXVtbDtcIjpcIsOcXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhYWN1dGVcIjpcIsOhXCIsXCImYWFjdXRlO1wiOlwiw6FcIixcIiZhY2lyY1wiOlwiw6JcIixcIiZhY2lyYztcIjpcIsOiXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYWVsaWdcIjpcIsOmXCIsXCImYWVsaWc7XCI6XCLDplwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlhY3V0ZVwiOlwiw61cIixcIiZpYWN1dGU7XCI6XCLDrVwiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJm50aWxkZVwiOlwiw7FcIixcIiZudGlsZGU7XCI6XCLDsVwiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9jaXJjXCI6XCLDtFwiLFwiJm9jaXJjO1wiOlwiw7RcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdW1sXCI6XCLDtlwiLFwiJm91bWw7XCI6XCLDtlwiLFwiJmRpdmlkZVwiOlwiw7dcIixcIiZkaXZpZGU7XCI6XCLDt1wiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVhY3V0ZVwiOlwiw7pcIixcIiZ1YWN1dGU7XCI6XCLDulwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnlhY3V0ZVwiOlwiw71cIixcIiZ5YWN1dGU7XCI6XCLDvVwiLFwiJnRob3JuXCI6XCLDvlwiLFwiJnRob3JuO1wiOlwiw75cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZhbXBcIjpcIiZcIixcIiZhbXA7XCI6XCImXCIsXCImbHRcIjpcIjxcIixcIiZsdDtcIjpcIjxcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZzY2Fyb247XCI6XCLFoVwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJmNpcmM7XCI6XCLLhlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW1zcDtcIjpcIuKAg1wiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnp3bmo7XCI6XCLigIxcIixcIiZ6d2o7XCI6XCLigI1cIixcIiZscm07XCI6XCLigI5cIixcIiZybG07XCI6XCLigI9cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImbGRxdW87XCI6XCLigJxcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJmJkcXVvO1wiOlwi4oCeXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImRGFnZ2VyO1wiOlwi4oChXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImcnNhcXVvO1wiOlwi4oC6XCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJkFscGhhO1wiOlwizpFcIixcIiZCZXRhO1wiOlwizpJcIixcIiZHYW1tYTtcIjpcIs6TXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkVwc2lsb247XCI6XCLOlVwiLFwiJlpldGE7XCI6XCLOllwiLFwiJkV0YTtcIjpcIs6XXCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJklvdGE7XCI6XCLOmVwiLFwiJkthcHBhO1wiOlwizppcIixcIiZMYW1iZGE7XCI6XCLOm1wiLFwiJk11O1wiOlwizpxcIixcIiZOdTtcIjpcIs6dXCIsXCImWGk7XCI6XCLOnlwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJlBpO1wiOlwizqBcIixcIiZSaG87XCI6XCLOoVwiLFwiJlNpZ21hO1wiOlwizqNcIixcIiZUYXU7XCI6XCLOpFwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlBoaTtcIjpcIs6mXCIsXCImQ2hpO1wiOlwizqdcIixcIiZQc2k7XCI6XCLOqFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYmV0YTtcIjpcIs6yXCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZ6ZXRhO1wiOlwizrZcIixcIiZldGE7XCI6XCLOt1wiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZpb3RhO1wiOlwizrlcIixcIiZrYXBwYTtcIjpcIs66XCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZtdTtcIjpcIs68XCIsXCImbnU7XCI6XCLOvVwiLFwiJnhpO1wiOlwizr5cIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZwaTtcIjpcIs+AXCIsXCImcmhvO1wiOlwiz4FcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImY2hpO1wiOlwiz4dcIixcIiZwc2k7XCI6XCLPiFwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnBpdjtcIjpcIs+WXCIsXCImYnVsbDtcIjpcIuKAolwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJnByaW1lO1wiOlwi4oCyXCIsXCImUHJpbWU7XCI6XCLigLNcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImd2VpZXJwO1wiOlwi4oSYXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImdHJhZGU7XCI6XCLihKJcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJnVhcnI7XCI6XCLihpFcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZ1QXJyO1wiOlwi4oeRXCIsXCImckFycjtcIjpcIuKHklwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImcGFydDtcIjpcIuKIglwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZuYWJsYTtcIjpcIuKIh1wiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZub3RpbjtcIjpcIuKIiVwiLFwiJm5pO1wiOlwi4oiLXCIsXCImcHJvZDtcIjpcIuKIj1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImcmFkaWM7XCI6XCLiiJpcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImaW5maW47XCI6XCLiiJ5cIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZvcjtcIjpcIuKIqFwiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmN1cDtcIjpcIuKIqlwiLFwiJmludDtcIjpcIuKIq1wiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJmNvbmc7XCI6XCLiiYVcIixcIiZhc3ltcDtcIjpcIuKJiFwiLFwiJm5lO1wiOlwi4omgXCIsXCImZXF1aXY7XCI6XCLiiaFcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmdlO1wiOlwi4omlXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3VwO1wiOlwi4oqDXCIsXCImbnN1YjtcIjpcIuKKhFwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdXBlO1wiOlwi4oqHXCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZwZXJwO1wiOlwi4oqlXCIsXCImc2RvdDtcIjpcIuKLhVwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZyZmxvb3I7XCI6XCLijItcIixcIiZsYW5nO1wiOlwi4oypXCIsXCImcmFuZztcIjpcIuKMqlwiLFwiJmxvejtcIjpcIuKXilwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImaGVhcnRzO1wiOlwi4pmlXCIsXCImZGlhbXM7XCI6XCLimaZcIn0sY2hhcmFjdGVyczp7XCInXCI6XCImYXBvcztcIixcIsKgXCI6XCImbmJzcDtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLCo1wiOlwiJnBvdW5kO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLCpVwiOlwiJnllbjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwiwqdcIjpcIiZzZWN0O1wiLFwiwqhcIjpcIiZ1bWw7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCq1wiOlwiJmxhcXVvO1wiLFwiwqxcIjpcIiZub3Q7XCIsXCLCrVwiOlwiJnNoeTtcIixcIsKuXCI6XCImcmVnO1wiLFwiwq9cIjpcIiZtYWNyO1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLCsVwiOlwiJnBsdXNtbjtcIixcIsKyXCI6XCImc3VwMjtcIixcIsKzXCI6XCImc3VwMztcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLCtVwiOlwiJm1pY3JvO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrpcIjpcIiZvcmRtO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIsK8XCI6XCImZnJhYzE0O1wiLFwiwr1cIjpcIiZmcmFjMTI7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLDgVwiOlwiJkFhY3V0ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLDg1wiOlwiJkF0aWxkZTtcIixcIsOEXCI6XCImQXVtbDtcIixcIsOFXCI6XCImQXJpbmc7XCIsXCLDhlwiOlwiJkFFbGlnO1wiLFwiw4dcIjpcIiZDY2VkaWw7XCIsXCLDiFwiOlwiJkVncmF2ZTtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcIsOLXCI6XCImRXVtbDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwiw49cIjpcIiZJdW1sO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIsOSXCI6XCImT2dyYXZlO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwiw5VcIjpcIiZPdGlsZGU7XCIsXCLDllwiOlwiJk91bWw7XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsOaXCI6XCImVWFjdXRlO1wiLFwiw5tcIjpcIiZVY2lyYztcIixcIsOcXCI6XCImVXVtbDtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsOoXCI6XCImZWdyYXZlO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLDqlwiOlwiJmVjaXJjO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLDsFwiOlwiJmV0aDtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLDs1wiOlwiJm9hY3V0ZTtcIixcIsO0XCI6XCImb2NpcmM7XCIsXCLDtVwiOlwiJm90aWxkZTtcIixcIsO2XCI6XCImb3VtbDtcIixcIsO3XCI6XCImZGl2aWRlO1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIsO6XCI6XCImdWFjdXRlO1wiLFwiw7tcIjpcIiZ1Y2lyYztcIixcIsO8XCI6XCImdXVtbDtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsO/XCI6XCImeXVtbDtcIiwnXCInOlwiJnF1b3Q7XCIsXCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsWTXCI6XCImb2VsaWc7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWhXCI6XCImc2Nhcm9uO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwiy5xcIjpcIiZ0aWxkZTtcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oCMXCI6XCImenduajtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKAj1wiOlwiJnJsbTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKAmVwiOlwiJnJzcXVvO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLigJxcIjpcIiZsZHF1bztcIixcIuKAnVwiOlwiJnJkcXVvO1wiLFwi4oCeXCI6XCImYmRxdW87XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLigKFcIjpcIiZEYWdnZXI7XCIsXCLigLBcIjpcIiZwZXJtaWw7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLigLpcIjpcIiZyc2FxdW87XCIsXCLigqxcIjpcIiZldXJvO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwizpFcIjpcIiZBbHBoYTtcIixcIs6SXCI6XCImQmV0YTtcIixcIs6TXCI6XCImR2FtbWE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwizpZcIjpcIiZaZXRhO1wiLFwizpdcIjpcIiZFdGE7XCIsXCLOmFwiOlwiJlRoZXRhO1wiLFwizplcIjpcIiZJb3RhO1wiLFwizppcIjpcIiZLYXBwYTtcIixcIs6bXCI6XCImTGFtYmRhO1wiLFwizpxcIjpcIiZNdTtcIixcIs6dXCI6XCImTnU7XCIsXCLOnlwiOlwiJlhpO1wiLFwizp9cIjpcIiZPbWljcm9uO1wiLFwizqBcIjpcIiZQaTtcIixcIs6hXCI6XCImUmhvO1wiLFwizqNcIjpcIiZTaWdtYTtcIixcIs6kXCI6XCImVGF1O1wiLFwizqVcIjpcIiZVcHNpbG9uO1wiLFwizqZcIjpcIiZQaGk7XCIsXCLOp1wiOlwiJkNoaTtcIixcIs6oXCI6XCImUHNpO1wiLFwizqlcIjpcIiZPbWVnYTtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLOslwiOlwiJmJldGE7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIs61XCI6XCImZXBzaWxvbjtcIixcIs62XCI6XCImemV0YTtcIixcIs63XCI6XCImZXRhO1wiLFwizrhcIjpcIiZ0aGV0YTtcIixcIs65XCI6XCImaW90YTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIs68XCI6XCImbXU7XCIsXCLOvVwiOlwiJm51O1wiLFwizr5cIjpcIiZ4aTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIs+AXCI6XCImcGk7XCIsXCLPgVwiOlwiJnJobztcIixcIs+CXCI6XCImc2lnbWFmO1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+EXCI6XCImdGF1O1wiLFwiz4VcIjpcIiZ1cHNpbG9uO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPh1wiOlwiJmNoaTtcIixcIs+IXCI6XCImcHNpO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs+RXCI6XCImdGhldGFzeW07XCIsXCLPklwiOlwiJnVwc2loO1wiLFwiz5ZcIjpcIiZwaXY7XCIsXCLigKJcIjpcIiZidWxsO1wiLFwi4oCmXCI6XCImaGVsbGlwO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLigLNcIjpcIiZQcmltZTtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLihJhcIjpcIiZ3ZWllcnA7XCIsXCLihJFcIjpcIiZpbWFnZTtcIixcIuKEnFwiOlwiJnJlYWw7XCIsXCLihKJcIjpcIiZ0cmFkZTtcIixcIuKEtVwiOlwiJmFsZWZzeW07XCIsXCLihpBcIjpcIiZsYXJyO1wiLFwi4oaRXCI6XCImdWFycjtcIixcIuKGklwiOlwiJnJhcnI7XCIsXCLihpNcIjpcIiZkYXJyO1wiLFwi4oaUXCI6XCImaGFycjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHlFwiOlwiJmhBcnI7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLiiIJcIjpcIiZwYXJ0O1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLiiIVcIjpcIiZlbXB0eTtcIixcIuKIh1wiOlwiJm5hYmxhO1wiLFwi4oiIXCI6XCImaXNpbjtcIixcIuKIiVwiOlwiJm5vdGluO1wiLFwi4oiLXCI6XCImbmk7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4oiSXCI6XCImbWludXM7XCIsXCLiiJdcIjpcIiZsb3dhc3Q7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKInVwiOlwiJnByb3A7XCIsXCLiiJ5cIjpcIiZpbmZpbjtcIixcIuKIoFwiOlwiJmFuZztcIixcIuKIp1wiOlwiJmFuZDtcIixcIuKIqFwiOlwiJm9yO1wiLFwi4oipXCI6XCImY2FwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4oirXCI6XCImaW50O1wiLFwi4oi0XCI6XCImdGhlcmU0O1wiLFwi4oi8XCI6XCImc2ltO1wiLFwi4omFXCI6XCImY29uZztcIixcIuKJiFwiOlwiJmFzeW1wO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKJpFwiOlwiJmxlO1wiLFwi4omlXCI6XCImZ2U7XCIsXCLiioJcIjpcIiZzdWI7XCIsXCLiioNcIjpcIiZzdXA7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4oqGXCI6XCImc3ViZTtcIixcIuKKh1wiOlwiJnN1cGU7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLijIlcIjpcIiZyY2VpbDtcIixcIuKMilwiOlwiJmxmbG9vcjtcIixcIuKMi1wiOlwiJnJmbG9vcjtcIixcIuKMqVwiOlwiJmxhbmc7XCIsXCLijKpcIjpcIiZyYW5nO1wiLFwi4peKXCI6XCImbG96O1wiLFwi4pmgXCI6XCImc3BhZGVzO1wiLFwi4pmjXCI6XCImY2x1YnM7XCIsXCLimaVcIjpcIiZoZWFydHM7XCIsXCLimaZcIjpcIiZkaWFtcztcIn19LGh0bWw1OntlbnRpdGllczp7XCImQUVsaWdcIjpcIsOGXCIsXCImQUVsaWc7XCI6XCLDhlwiLFwiJkFNUFwiOlwiJlwiLFwiJkFNUDtcIjpcIiZcIixcIiZBYWN1dGVcIjpcIsOBXCIsXCImQWFjdXRlO1wiOlwiw4FcIixcIiZBYnJldmU7XCI6XCLEglwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBY3k7XCI6XCLQkFwiLFwiJkFmcjtcIjpcIvCdlIRcIixcIiZBZ3JhdmVcIjpcIsOAXCIsXCImQWdyYXZlO1wiOlwiw4BcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQW1hY3I7XCI6XCLEgFwiLFwiJkFuZDtcIjpcIuKpk1wiLFwiJkFvZ29uO1wiOlwixIRcIixcIiZBb3BmO1wiOlwi8J2UuFwiLFwiJkFwcGx5RnVuY3Rpb247XCI6XCLigaFcIixcIiZBcmluZ1wiOlwiw4VcIixcIiZBcmluZztcIjpcIsOFXCIsXCImQXNjcjtcIjpcIvCdkpxcIixcIiZBc3NpZ247XCI6XCLiiZRcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkJhY2tzbGFzaDtcIjpcIuKIllwiLFwiJkJhcnY7XCI6XCLiq6dcIixcIiZCYXJ3ZWQ7XCI6XCLijIZcIixcIiZCY3k7XCI6XCLQkVwiLFwiJkJlY2F1c2U7XCI6XCLiiLVcIixcIiZCZXJub3VsbGlzO1wiOlwi4oSsXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImQmZyO1wiOlwi8J2UhVwiLFwiJkJvcGY7XCI6XCLwnZS5XCIsXCImQnJldmU7XCI6XCLLmFwiLFwiJkJzY3I7XCI6XCLihKxcIixcIiZCdW1wZXE7XCI6XCLiiY5cIixcIiZDSGN5O1wiOlwi0KdcIixcIiZDT1BZXCI6XCLCqVwiLFwiJkNPUFk7XCI6XCLCqVwiLFwiJkNhY3V0ZTtcIjpcIsSGXCIsXCImQ2FwO1wiOlwi4ouSXCIsXCImQ2FwaXRhbERpZmZlcmVudGlhbEQ7XCI6XCLihYVcIixcIiZDYXlsZXlzO1wiOlwi4oStXCIsXCImQ2Nhcm9uO1wiOlwixIxcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZDY2lyYztcIjpcIsSIXCIsXCImQ2NvbmludDtcIjpcIuKIsFwiLFwiJkNkb3Q7XCI6XCLEilwiLFwiJkNlZGlsbGE7XCI6XCLCuFwiLFwiJkNlbnRlckRvdDtcIjpcIsK3XCIsXCImQ2ZyO1wiOlwi4oStXCIsXCImQ2hpO1wiOlwizqdcIixcIiZDaXJjbGVEb3Q7XCI6XCLiiplcIixcIiZDaXJjbGVNaW51cztcIjpcIuKKllwiLFwiJkNpcmNsZVBsdXM7XCI6XCLiipVcIixcIiZDaXJjbGVUaW1lcztcIjpcIuKKl1wiLFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIslwiLFwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIjpcIuKAnVwiLFwiJkNsb3NlQ3VybHlRdW90ZTtcIjpcIuKAmVwiLFwiJkNvbG9uO1wiOlwi4oi3XCIsXCImQ29sb25lO1wiOlwi4qm0XCIsXCImQ29uZ3J1ZW50O1wiOlwi4omhXCIsXCImQ29uaW50O1wiOlwi4oivXCIsXCImQ29udG91ckludGVncmFsO1wiOlwi4oiuXCIsXCImQ29wZjtcIjpcIuKEglwiLFwiJkNvcHJvZHVjdDtcIjpcIuKIkFwiLFwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLNcIixcIiZDcm9zcztcIjpcIuKor1wiLFwiJkNzY3I7XCI6XCLwnZKeXCIsXCImQ3VwO1wiOlwi4ouTXCIsXCImQ3VwQ2FwO1wiOlwi4omNXCIsXCImREQ7XCI6XCLihYVcIixcIiZERG90cmFoZDtcIjpcIuKkkVwiLFwiJkRKY3k7XCI6XCLQglwiLFwiJkRTY3k7XCI6XCLQhVwiLFwiJkRaY3k7XCI6XCLQj1wiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJkRhcnI7XCI6XCLihqFcIixcIiZEYXNodjtcIjpcIuKrpFwiLFwiJkRjYXJvbjtcIjpcIsSOXCIsXCImRGN5O1wiOlwi0JRcIixcIiZEZWw7XCI6XCLiiIdcIixcIiZEZWx0YTtcIjpcIs6UXCIsXCImRGZyO1wiOlwi8J2Uh1wiLFwiJkRpYWNyaXRpY2FsQWN1dGU7XCI6XCLCtFwiLFwiJkRpYWNyaXRpY2FsRG90O1wiOlwiy5lcIixcIiZEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOlwiy51cIixcIiZEaWFjcml0aWNhbEdyYXZlO1wiOlwiYFwiLFwiJkRpYWNyaXRpY2FsVGlsZGU7XCI6XCLLnFwiLFwiJkRpYW1vbmQ7XCI6XCLii4RcIixcIiZEaWZmZXJlbnRpYWxEO1wiOlwi4oWGXCIsXCImRG9wZjtcIjpcIvCdlLtcIixcIiZEb3Q7XCI6XCLCqFwiLFwiJkRvdERvdDtcIjpcIuKDnFwiLFwiJkRvdEVxdWFsO1wiOlwi4omQXCIsXCImRG91YmxlQ29udG91ckludGVncmFsO1wiOlwi4oivXCIsXCImRG91YmxlRG90O1wiOlwiwqhcIixcIiZEb3VibGVEb3duQXJyb3c7XCI6XCLih5NcIixcIiZEb3VibGVMZWZ0QXJyb3c7XCI6XCLih5BcIixcIiZEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjpcIuKHlFwiLFwiJkRvdWJsZUxlZnRUZWU7XCI6XCLiq6RcIixcIiZEb3VibGVMb25nTGVmdEFycm93O1wiOlwi4p+4XCIsXCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOlwi4p+6XCIsXCImRG91YmxlTG9uZ1JpZ2h0QXJyb3c7XCI6XCLin7lcIixcIiZEb3VibGVSaWdodEFycm93O1wiOlwi4oeSXCIsXCImRG91YmxlUmlnaHRUZWU7XCI6XCLiiqhcIixcIiZEb3VibGVVcEFycm93O1wiOlwi4oeRXCIsXCImRG91YmxlVXBEb3duQXJyb3c7XCI6XCLih5VcIixcIiZEb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIpVwiLFwiJkRvd25BcnJvdztcIjpcIuKGk1wiLFwiJkRvd25BcnJvd0JhcjtcIjpcIuKkk1wiLFwiJkRvd25BcnJvd1VwQXJyb3c7XCI6XCLih7VcIixcIiZEb3duQnJldmU7XCI6XCLMkVwiLFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6XCLipZBcIixcIiZEb3duTGVmdFRlZVZlY3RvcjtcIjpcIuKlnlwiLFwiJkRvd25MZWZ0VmVjdG9yO1wiOlwi4oa9XCIsXCImRG93bkxlZnRWZWN0b3JCYXI7XCI6XCLipZZcIixcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCI6XCLipZ9cIixcIiZEb3duUmlnaHRWZWN0b3I7XCI6XCLih4FcIixcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCI6XCLipZdcIixcIiZEb3duVGVlO1wiOlwi4oqkXCIsXCImRG93blRlZUFycm93O1wiOlwi4oanXCIsXCImRG93bmFycm93O1wiOlwi4oeTXCIsXCImRHNjcjtcIjpcIvCdkp9cIixcIiZEc3Ryb2s7XCI6XCLEkFwiLFwiJkVORztcIjpcIsWKXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNhcm9uO1wiOlwixJpcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRWN5O1wiOlwi0K1cIixcIiZFZG90O1wiOlwixJZcIixcIiZFZnI7XCI6XCLwnZSIXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWxlbWVudDtcIjpcIuKIiFwiLFwiJkVtYWNyO1wiOlwixJJcIixcIiZFbXB0eVNtYWxsU3F1YXJlO1wiOlwi4pe7XCIsXCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCI6XCLilqtcIixcIiZFb2dvbjtcIjpcIsSYXCIsXCImRW9wZjtcIjpcIvCdlLxcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZFcXVhbDtcIjpcIuKptVwiLFwiJkVxdWFsVGlsZGU7XCI6XCLiiYJcIixcIiZFcXVpbGlicml1bTtcIjpcIuKHjFwiLFwiJkVzY3I7XCI6XCLihLBcIixcIiZFc2ltO1wiOlwi4qmzXCIsXCImRXRhO1wiOlwizpdcIixcIiZFdW1sXCI6XCLDi1wiLFwiJkV1bWw7XCI6XCLDi1wiLFwiJkV4aXN0cztcIjpcIuKIg1wiLFwiJkV4cG9uZW50aWFsRTtcIjpcIuKFh1wiLFwiJkZjeTtcIjpcItCkXCIsXCImRmZyO1wiOlwi8J2UiVwiLFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiOlwi4pe8XCIsXCImRmlsbGVkVmVyeVNtYWxsU3F1YXJlO1wiOlwi4paqXCIsXCImRm9wZjtcIjpcIvCdlL1cIixcIiZGb3JBbGw7XCI6XCLiiIBcIixcIiZGb3VyaWVydHJmO1wiOlwi4oSxXCIsXCImRnNjcjtcIjpcIuKEsVwiLFwiJkdKY3k7XCI6XCLQg1wiLFwiJkdUXCI6XCI+XCIsXCImR1Q7XCI6XCI+XCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkdhbW1hZDtcIjpcIs+cXCIsXCImR2JyZXZlO1wiOlwixJ5cIixcIiZHY2VkaWw7XCI6XCLEolwiLFwiJkdjaXJjO1wiOlwixJxcIixcIiZHY3k7XCI6XCLQk1wiLFwiJkdkb3Q7XCI6XCLEoFwiLFwiJkdmcjtcIjpcIvCdlIpcIixcIiZHZztcIjpcIuKLmVwiLFwiJkdvcGY7XCI6XCLwnZS+XCIsXCImR3JlYXRlckVxdWFsO1wiOlwi4omlXCIsXCImR3JlYXRlckVxdWFsTGVzcztcIjpcIuKLm1wiLFwiJkdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiadcIixcIiZHcmVhdGVyR3JlYXRlcjtcIjpcIuKqolwiLFwiJkdyZWF0ZXJMZXNzO1wiOlwi4om3XCIsXCImR3JlYXRlclNsYW50RXF1YWw7XCI6XCLiqb5cIixcIiZHcmVhdGVyVGlsZGU7XCI6XCLiibNcIixcIiZHc2NyO1wiOlwi8J2SolwiLFwiJkd0O1wiOlwi4omrXCIsXCImSEFSRGN5O1wiOlwi0KpcIixcIiZIYWNlaztcIjpcIsuHXCIsXCImSGF0O1wiOlwiXlwiLFwiJkhjaXJjO1wiOlwixKRcIixcIiZIZnI7XCI6XCLihIxcIixcIiZIaWxiZXJ0U3BhY2U7XCI6XCLihItcIixcIiZIb3BmO1wiOlwi4oSNXCIsXCImSG9yaXpvbnRhbExpbmU7XCI6XCLilIBcIixcIiZIc2NyO1wiOlwi4oSLXCIsXCImSHN0cm9rO1wiOlwixKZcIixcIiZIdW1wRG93bkh1bXA7XCI6XCLiiY5cIixcIiZIdW1wRXF1YWw7XCI6XCLiiY9cIixcIiZJRWN5O1wiOlwi0JVcIixcIiZJSmxpZztcIjpcIsSyXCIsXCImSU9jeTtcIjpcItCBXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkljeTtcIjpcItCYXCIsXCImSWRvdDtcIjpcIsSwXCIsXCImSWZyO1wiOlwi4oSRXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSW07XCI6XCLihJFcIixcIiZJbWFjcjtcIjpcIsSqXCIsXCImSW1hZ2luYXJ5STtcIjpcIuKFiFwiLFwiJkltcGxpZXM7XCI6XCLih5JcIixcIiZJbnQ7XCI6XCLiiKxcIixcIiZJbnRlZ3JhbDtcIjpcIuKIq1wiLFwiJkludGVyc2VjdGlvbjtcIjpcIuKLglwiLFwiJkludmlzaWJsZUNvbW1hO1wiOlwi4oGjXCIsXCImSW52aXNpYmxlVGltZXM7XCI6XCLigaJcIixcIiZJb2dvbjtcIjpcIsSuXCIsXCImSW9wZjtcIjpcIvCdlYBcIixcIiZJb3RhO1wiOlwizplcIixcIiZJc2NyO1wiOlwi4oSQXCIsXCImSXRpbGRlO1wiOlwixKhcIixcIiZJdWtjeTtcIjpcItCGXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZKY2lyYztcIjpcIsS0XCIsXCImSmN5O1wiOlwi0JlcIixcIiZKZnI7XCI6XCLwnZSNXCIsXCImSm9wZjtcIjpcIvCdlYFcIixcIiZKc2NyO1wiOlwi8J2SpVwiLFwiJkpzZXJjeTtcIjpcItCIXCIsXCImSnVrY3k7XCI6XCLQhFwiLFwiJktIY3k7XCI6XCLQpVwiLFwiJktKY3k7XCI6XCLQjFwiLFwiJkthcHBhO1wiOlwizppcIixcIiZLY2VkaWw7XCI6XCLEtlwiLFwiJktjeTtcIjpcItCaXCIsXCImS2ZyO1wiOlwi8J2UjlwiLFwiJktvcGY7XCI6XCLwnZWCXCIsXCImS3NjcjtcIjpcIvCdkqZcIixcIiZMSmN5O1wiOlwi0IlcIixcIiZMVFwiOlwiPFwiLFwiJkxUO1wiOlwiPFwiLFwiJkxhY3V0ZTtcIjpcIsS5XCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZMYW5nO1wiOlwi4p+qXCIsXCImTGFwbGFjZXRyZjtcIjpcIuKEklwiLFwiJkxhcnI7XCI6XCLihp5cIixcIiZMY2Fyb247XCI6XCLEvVwiLFwiJkxjZWRpbDtcIjpcIsS7XCIsXCImTGN5O1wiOlwi0JtcIixcIiZMZWZ0QW5nbGVCcmFja2V0O1wiOlwi4p+oXCIsXCImTGVmdEFycm93O1wiOlwi4oaQXCIsXCImTGVmdEFycm93QmFyO1wiOlwi4oekXCIsXCImTGVmdEFycm93UmlnaHRBcnJvdztcIjpcIuKHhlwiLFwiJkxlZnRDZWlsaW5nO1wiOlwi4oyIXCIsXCImTGVmdERvdWJsZUJyYWNrZXQ7XCI6XCLin6ZcIixcIiZMZWZ0RG93blRlZVZlY3RvcjtcIjpcIuKloVwiLFwiJkxlZnREb3duVmVjdG9yO1wiOlwi4oeDXCIsXCImTGVmdERvd25WZWN0b3JCYXI7XCI6XCLipZlcIixcIiZMZWZ0Rmxvb3I7XCI6XCLijIpcIixcIiZMZWZ0UmlnaHRBcnJvdztcIjpcIuKGlFwiLFwiJkxlZnRSaWdodFZlY3RvcjtcIjpcIuKljlwiLFwiJkxlZnRUZWU7XCI6XCLiiqNcIixcIiZMZWZ0VGVlQXJyb3c7XCI6XCLihqRcIixcIiZMZWZ0VGVlVmVjdG9yO1wiOlwi4qWaXCIsXCImTGVmdFRyaWFuZ2xlO1wiOlwi4oqyXCIsXCImTGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePXCIsXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLiirRcIixcIiZMZWZ0VXBEb3duVmVjdG9yO1wiOlwi4qWRXCIsXCImTGVmdFVwVGVlVmVjdG9yO1wiOlwi4qWgXCIsXCImTGVmdFVwVmVjdG9yO1wiOlwi4oa/XCIsXCImTGVmdFVwVmVjdG9yQmFyO1wiOlwi4qWYXCIsXCImTGVmdFZlY3RvcjtcIjpcIuKGvFwiLFwiJkxlZnRWZWN0b3JCYXI7XCI6XCLipZJcIixcIiZMZWZ0YXJyb3c7XCI6XCLih5BcIixcIiZMZWZ0cmlnaHRhcnJvdztcIjpcIuKHlFwiLFwiJkxlc3NFcXVhbEdyZWF0ZXI7XCI6XCLii5pcIixcIiZMZXNzRnVsbEVxdWFsO1wiOlwi4ommXCIsXCImTGVzc0dyZWF0ZXI7XCI6XCLiibZcIixcIiZMZXNzTGVzcztcIjpcIuKqoVwiLFwiJkxlc3NTbGFudEVxdWFsO1wiOlwi4qm9XCIsXCImTGVzc1RpbGRlO1wiOlwi4omyXCIsXCImTGZyO1wiOlwi8J2Uj1wiLFwiJkxsO1wiOlwi4ouYXCIsXCImTGxlZnRhcnJvdztcIjpcIuKHmlwiLFwiJkxtaWRvdDtcIjpcIsS/XCIsXCImTG9uZ0xlZnRBcnJvdztcIjpcIuKftVwiLFwiJkxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKft1wiLFwiJkxvbmdSaWdodEFycm93O1wiOlwi4p+2XCIsXCImTG9uZ2xlZnRhcnJvdztcIjpcIuKfuFwiLFwiJkxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKfulwiLFwiJkxvbmdyaWdodGFycm93O1wiOlwi4p+5XCIsXCImTG9wZjtcIjpcIvCdlYNcIixcIiZMb3dlckxlZnRBcnJvdztcIjpcIuKGmVwiLFwiJkxvd2VyUmlnaHRBcnJvdztcIjpcIuKGmFwiLFwiJkxzY3I7XCI6XCLihJJcIixcIiZMc2g7XCI6XCLihrBcIixcIiZMc3Ryb2s7XCI6XCLFgVwiLFwiJkx0O1wiOlwi4omqXCIsXCImTWFwO1wiOlwi4qSFXCIsXCImTWN5O1wiOlwi0JxcIixcIiZNZWRpdW1TcGFjZTtcIjpcIuKBn1wiLFwiJk1lbGxpbnRyZjtcIjpcIuKEs1wiLFwiJk1mcjtcIjpcIvCdlJBcIixcIiZNaW51c1BsdXM7XCI6XCLiiJNcIixcIiZNb3BmO1wiOlwi8J2VhFwiLFwiJk1zY3I7XCI6XCLihLNcIixcIiZNdTtcIjpcIs6cXCIsXCImTkpjeTtcIjpcItCKXCIsXCImTmFjdXRlO1wiOlwixYNcIixcIiZOY2Fyb247XCI6XCLFh1wiLFwiJk5jZWRpbDtcIjpcIsWFXCIsXCImTmN5O1wiOlwi0J1cIixcIiZOZWdhdGl2ZU1lZGl1bVNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGlja1NwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq1wiLFwiJk5lc3RlZExlc3NMZXNzO1wiOlwi4omqXCIsXCImTmV3TGluZTtcIjpcIlxcblwiLFwiJk5mcjtcIjpcIvCdlJFcIixcIiZOb0JyZWFrO1wiOlwi4oGgXCIsXCImTm9uQnJlYWtpbmdTcGFjZTtcIjpcIsKgXCIsXCImTm9wZjtcIjpcIuKElVwiLFwiJk5vdDtcIjpcIuKrrFwiLFwiJk5vdENvbmdydWVudDtcIjpcIuKJolwiLFwiJk5vdEN1cENhcDtcIjpcIuKJrVwiLFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOlwi4oimXCIsXCImTm90RWxlbWVudDtcIjpcIuKIiVwiLFwiJk5vdEVxdWFsO1wiOlwi4omgXCIsXCImTm90RXF1YWxUaWxkZTtcIjpcIuKJgsy4XCIsXCImTm90RXhpc3RzO1wiOlwi4oiEXCIsXCImTm90R3JlYXRlcjtcIjpcIuKJr1wiLFwiJk5vdEdyZWF0ZXJFcXVhbDtcIjpcIuKJsVwiLFwiJk5vdEdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiafMuFwiLFwiJk5vdEdyZWF0ZXJHcmVhdGVyO1wiOlwi4omrzLhcIixcIiZOb3RHcmVhdGVyTGVzcztcIjpcIuKJuVwiLFwiJk5vdEdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+zLhcIixcIiZOb3RHcmVhdGVyVGlsZGU7XCI6XCLiibVcIixcIiZOb3RIdW1wRG93bkh1bXA7XCI6XCLiiY7MuFwiLFwiJk5vdEh1bXBFcXVhbDtcIjpcIuKJj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlO1wiOlwi4ouqXCIsXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePzLhcIixcIiZOb3RMZWZ0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrFwiLFwiJk5vdExlc3M7XCI6XCLiia5cIixcIiZOb3RMZXNzRXF1YWw7XCI6XCLiibBcIixcIiZOb3RMZXNzR3JlYXRlcjtcIjpcIuKJuFwiLFwiJk5vdExlc3NMZXNzO1wiOlwi4omqzLhcIixcIiZOb3RMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvcy4XCIsXCImTm90TGVzc1RpbGRlO1wiOlwi4om0XCIsXCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqLMuFwiLFwiJk5vdE5lc3RlZExlc3NMZXNzO1wiOlwi4qqhzLhcIixcIiZOb3RQcmVjZWRlcztcIjpcIuKKgFwiLFwiJk5vdFByZWNlZGVzRXF1YWw7XCI6XCLiqq/MuFwiLFwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKLoFwiLFwiJk5vdFJldmVyc2VFbGVtZW50O1wiOlwi4oiMXCIsXCImTm90UmlnaHRUcmlhbmdsZTtcIjpcIuKLq1wiLFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5DMuFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrVwiLFwiJk5vdFNxdWFyZVN1YnNldDtcIjpcIuKKj8y4XCIsXCImTm90U3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLii6JcIixcIiZOb3RTcXVhcmVTdXBlcnNldDtcIjpcIuKKkMy4XCIsXCImTm90U3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKLo1wiLFwiJk5vdFN1YnNldDtcIjpcIuKKguKDklwiLFwiJk5vdFN1YnNldEVxdWFsO1wiOlwi4oqIXCIsXCImTm90U3VjY2VlZHM7XCI6XCLiioFcIixcIiZOb3RTdWNjZWVkc0VxdWFsO1wiOlwi4qqwzLhcIixcIiZOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLii6FcIixcIiZOb3RTdWNjZWVkc1RpbGRlO1wiOlwi4om/zLhcIixcIiZOb3RTdXBlcnNldDtcIjpcIuKKg+KDklwiLFwiJk5vdFN1cGVyc2V0RXF1YWw7XCI6XCLiiolcIixcIiZOb3RUaWxkZTtcIjpcIuKJgVwiLFwiJk5vdFRpbGRlRXF1YWw7XCI6XCLiiYRcIixcIiZOb3RUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJh1wiLFwiJk5vdFRpbGRlVGlsZGU7XCI6XCLiiYlcIixcIiZOb3RWZXJ0aWNhbEJhcjtcIjpcIuKIpFwiLFwiJk5zY3I7XCI6XCLwnZKpXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImTnU7XCI6XCLOnVwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT2N5O1wiOlwi0J5cIixcIiZPZGJsYWM7XCI6XCLFkFwiLFwiJk9mcjtcIjpcIvCdlJJcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPbWFjcjtcIjpcIsWMXCIsXCImT21lZ2E7XCI6XCLOqVwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJk9vcGY7XCI6XCLwnZWGXCIsXCImT3BlbkN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJxcIixcIiZPcGVuQ3VybHlRdW90ZTtcIjpcIuKAmFwiLFwiJk9yO1wiOlwi4qmUXCIsXCImT3NjcjtcIjpcIvCdkqpcIixcIiZPc2xhc2hcIjpcIsOYXCIsXCImT3NsYXNoO1wiOlwiw5hcIixcIiZPdGlsZGVcIjpcIsOVXCIsXCImT3RpbGRlO1wiOlwiw5VcIixcIiZPdGltZXM7XCI6XCLiqLdcIixcIiZPdW1sXCI6XCLDllwiLFwiJk91bWw7XCI6XCLDllwiLFwiJk92ZXJCYXI7XCI6XCLigL5cIixcIiZPdmVyQnJhY2U7XCI6XCLij55cIixcIiZPdmVyQnJhY2tldDtcIjpcIuKOtFwiLFwiJk92ZXJQYXJlbnRoZXNpcztcIjpcIuKPnFwiLFwiJlBhcnRpYWxEO1wiOlwi4oiCXCIsXCImUGN5O1wiOlwi0J9cIixcIiZQZnI7XCI6XCLwnZSTXCIsXCImUGhpO1wiOlwizqZcIixcIiZQaTtcIjpcIs6gXCIsXCImUGx1c01pbnVzO1wiOlwiwrFcIixcIiZQb2luY2FyZXBsYW5lO1wiOlwi4oSMXCIsXCImUG9wZjtcIjpcIuKEmVwiLFwiJlByO1wiOlwi4qq7XCIsXCImUHJlY2VkZXM7XCI6XCLiibpcIixcIiZQcmVjZWRlc0VxdWFsO1wiOlwi4qqvXCIsXCImUHJlY2VkZXNTbGFudEVxdWFsO1wiOlwi4om8XCIsXCImUHJlY2VkZXNUaWxkZTtcIjpcIuKJvlwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImUHJvZHVjdDtcIjpcIuKIj1wiLFwiJlByb3BvcnRpb247XCI6XCLiiLdcIixcIiZQcm9wb3J0aW9uYWw7XCI6XCLiiJ1cIixcIiZQc2NyO1wiOlwi8J2Sq1wiLFwiJlBzaTtcIjpcIs6oXCIsXCImUVVPVFwiOidcIicsXCImUVVPVDtcIjonXCInLFwiJlFmcjtcIjpcIvCdlJRcIixcIiZRb3BmO1wiOlwi4oSaXCIsXCImUXNjcjtcIjpcIvCdkqxcIixcIiZSQmFycjtcIjpcIuKkkFwiLFwiJlJFR1wiOlwiwq5cIixcIiZSRUc7XCI6XCLCrlwiLFwiJlJhY3V0ZTtcIjpcIsWUXCIsXCImUmFuZztcIjpcIuKfq1wiLFwiJlJhcnI7XCI6XCLihqBcIixcIiZSYXJydGw7XCI6XCLipJZcIixcIiZSY2Fyb247XCI6XCLFmFwiLFwiJlJjZWRpbDtcIjpcIsWWXCIsXCImUmN5O1wiOlwi0KBcIixcIiZSZTtcIjpcIuKEnFwiLFwiJlJldmVyc2VFbGVtZW50O1wiOlwi4oiLXCIsXCImUmV2ZXJzZUVxdWlsaWJyaXVtO1wiOlwi4oeLXCIsXCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07XCI6XCLipa9cIixcIiZSZnI7XCI6XCLihJxcIixcIiZSaG87XCI6XCLOoVwiLFwiJlJpZ2h0QW5nbGVCcmFja2V0O1wiOlwi4p+pXCIsXCImUmlnaHRBcnJvdztcIjpcIuKGklwiLFwiJlJpZ2h0QXJyb3dCYXI7XCI6XCLih6VcIixcIiZSaWdodEFycm93TGVmdEFycm93O1wiOlwi4oeEXCIsXCImUmlnaHRDZWlsaW5nO1wiOlwi4oyJXCIsXCImUmlnaHREb3VibGVCcmFja2V0O1wiOlwi4p+nXCIsXCImUmlnaHREb3duVGVlVmVjdG9yO1wiOlwi4qWdXCIsXCImUmlnaHREb3duVmVjdG9yO1wiOlwi4oeCXCIsXCImUmlnaHREb3duVmVjdG9yQmFyO1wiOlwi4qWVXCIsXCImUmlnaHRGbG9vcjtcIjpcIuKMi1wiLFwiJlJpZ2h0VGVlO1wiOlwi4oqiXCIsXCImUmlnaHRUZWVBcnJvdztcIjpcIuKGplwiLFwiJlJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWbXCIsXCImUmlnaHRUcmlhbmdsZTtcIjpcIuKKs1wiLFwiJlJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5BcIixcIiZSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLiirVcIixcIiZSaWdodFVwRG93blZlY3RvcjtcIjpcIuKlj1wiLFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCI6XCLipZxcIixcIiZSaWdodFVwVmVjdG9yO1wiOlwi4oa+XCIsXCImUmlnaHRVcFZlY3RvckJhcjtcIjpcIuKllFwiLFwiJlJpZ2h0VmVjdG9yO1wiOlwi4oeAXCIsXCImUmlnaHRWZWN0b3JCYXI7XCI6XCLipZNcIixcIiZSaWdodGFycm93O1wiOlwi4oeSXCIsXCImUm9wZjtcIjpcIuKEnVwiLFwiJlJvdW5kSW1wbGllcztcIjpcIuKlsFwiLFwiJlJyaWdodGFycm93O1wiOlwi4oebXCIsXCImUnNjcjtcIjpcIuKEm1wiLFwiJlJzaDtcIjpcIuKGsVwiLFwiJlJ1bGVEZWxheWVkO1wiOlwi4qe0XCIsXCImU0hDSGN5O1wiOlwi0KlcIixcIiZTSGN5O1wiOlwi0KhcIixcIiZTT0ZUY3k7XCI6XCLQrFwiLFwiJlNhY3V0ZTtcIjpcIsWaXCIsXCImU2M7XCI6XCLiqrxcIixcIiZTY2Fyb247XCI6XCLFoFwiLFwiJlNjZWRpbDtcIjpcIsWeXCIsXCImU2NpcmM7XCI6XCLFnFwiLFwiJlNjeTtcIjpcItChXCIsXCImU2ZyO1wiOlwi8J2UllwiLFwiJlNob3J0RG93bkFycm93O1wiOlwi4oaTXCIsXCImU2hvcnRMZWZ0QXJyb3c7XCI6XCLihpBcIixcIiZTaG9ydFJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZTaG9ydFVwQXJyb3c7XCI6XCLihpFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImU21hbGxDaXJjbGU7XCI6XCLiiJhcIixcIiZTb3BmO1wiOlwi8J2VilwiLFwiJlNxcnQ7XCI6XCLiiJpcIixcIiZTcXVhcmU7XCI6XCLilqFcIixcIiZTcXVhcmVJbnRlcnNlY3Rpb247XCI6XCLiipNcIixcIiZTcXVhcmVTdWJzZXQ7XCI6XCLiio9cIixcIiZTcXVhcmVTdWJzZXRFcXVhbDtcIjpcIuKKkVwiLFwiJlNxdWFyZVN1cGVyc2V0O1wiOlwi4oqQXCIsXCImU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKKklwiLFwiJlNxdWFyZVVuaW9uO1wiOlwi4oqUXCIsXCImU3NjcjtcIjpcIvCdkq5cIixcIiZTdGFyO1wiOlwi4ouGXCIsXCImU3ViO1wiOlwi4ouQXCIsXCImU3Vic2V0O1wiOlwi4ouQXCIsXCImU3Vic2V0RXF1YWw7XCI6XCLiioZcIixcIiZTdWNjZWVkcztcIjpcIuKJu1wiLFwiJlN1Y2NlZWRzRXF1YWw7XCI6XCLiqrBcIixcIiZTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLiib1cIixcIiZTdWNjZWVkc1RpbGRlO1wiOlwi4om/XCIsXCImU3VjaFRoYXQ7XCI6XCLiiItcIixcIiZTdW07XCI6XCLiiJFcIixcIiZTdXA7XCI6XCLii5FcIixcIiZTdXBlcnNldDtcIjpcIuKKg1wiLFwiJlN1cGVyc2V0RXF1YWw7XCI6XCLiiodcIixcIiZTdXBzZXQ7XCI6XCLii5FcIixcIiZUSE9STlwiOlwiw55cIixcIiZUSE9STjtcIjpcIsOeXCIsXCImVFJBREU7XCI6XCLihKJcIixcIiZUU0hjeTtcIjpcItCLXCIsXCImVFNjeTtcIjpcItCmXCIsXCImVGFiO1wiOlwiXFx0XCIsXCImVGF1O1wiOlwizqRcIixcIiZUY2Fyb247XCI6XCLFpFwiLFwiJlRjZWRpbDtcIjpcIsWiXCIsXCImVGN5O1wiOlwi0KJcIixcIiZUZnI7XCI6XCLwnZSXXCIsXCImVGhlcmVmb3JlO1wiOlwi4oi0XCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJlRoaWNrU3BhY2U7XCI6XCLigZ/igIpcIixcIiZUaGluU3BhY2U7XCI6XCLigIlcIixcIiZUaWxkZTtcIjpcIuKIvFwiLFwiJlRpbGRlRXF1YWw7XCI6XCLiiYNcIixcIiZUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJhVwiLFwiJlRpbGRlVGlsZGU7XCI6XCLiiYhcIixcIiZUb3BmO1wiOlwi8J2Vi1wiLFwiJlRyaXBsZURvdDtcIjpcIuKDm1wiLFwiJlRzY3I7XCI6XCLwnZKvXCIsXCImVHN0cm9rO1wiOlwixaZcIixcIiZVYWN1dGVcIjpcIsOaXCIsXCImVWFjdXRlO1wiOlwiw5pcIixcIiZVYXJyO1wiOlwi4oafXCIsXCImVWFycm9jaXI7XCI6XCLipYlcIixcIiZVYnJjeTtcIjpcItCOXCIsXCImVWJyZXZlO1wiOlwixaxcIixcIiZVY2lyY1wiOlwiw5tcIixcIiZVY2lyYztcIjpcIsObXCIsXCImVWN5O1wiOlwi0KNcIixcIiZVZGJsYWM7XCI6XCLFsFwiLFwiJlVmcjtcIjpcIvCdlJhcIixcIiZVZ3JhdmVcIjpcIsOZXCIsXCImVWdyYXZlO1wiOlwiw5lcIixcIiZVbWFjcjtcIjpcIsWqXCIsXCImVW5kZXJCYXI7XCI6XCJfXCIsXCImVW5kZXJCcmFjZTtcIjpcIuKPn1wiLFwiJlVuZGVyQnJhY2tldDtcIjpcIuKOtVwiLFwiJlVuZGVyUGFyZW50aGVzaXM7XCI6XCLij51cIixcIiZVbmlvbjtcIjpcIuKLg1wiLFwiJlVuaW9uUGx1cztcIjpcIuKKjlwiLFwiJlVvZ29uO1wiOlwixbJcIixcIiZVb3BmO1wiOlwi8J2VjFwiLFwiJlVwQXJyb3c7XCI6XCLihpFcIixcIiZVcEFycm93QmFyO1wiOlwi4qSSXCIsXCImVXBBcnJvd0Rvd25BcnJvdztcIjpcIuKHhVwiLFwiJlVwRG93bkFycm93O1wiOlwi4oaVXCIsXCImVXBFcXVpbGlicml1bTtcIjpcIuKlrlwiLFwiJlVwVGVlO1wiOlwi4oqlXCIsXCImVXBUZWVBcnJvdztcIjpcIuKGpVwiLFwiJlVwYXJyb3c7XCI6XCLih5FcIixcIiZVcGRvd25hcnJvdztcIjpcIuKHlVwiLFwiJlVwcGVyTGVmdEFycm93O1wiOlwi4oaWXCIsXCImVXBwZXJSaWdodEFycm93O1wiOlwi4oaXXCIsXCImVXBzaTtcIjpcIs+SXCIsXCImVXBzaWxvbjtcIjpcIs6lXCIsXCImVXJpbmc7XCI6XCLFrlwiLFwiJlVzY3I7XCI6XCLwnZKwXCIsXCImVXRpbGRlO1wiOlwixahcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJlZEYXNoO1wiOlwi4oqrXCIsXCImVmJhcjtcIjpcIuKrq1wiLFwiJlZjeTtcIjpcItCSXCIsXCImVmRhc2g7XCI6XCLiiqlcIixcIiZWZGFzaGw7XCI6XCLiq6ZcIixcIiZWZWU7XCI6XCLii4FcIixcIiZWZXJiYXI7XCI6XCLigJZcIixcIiZWZXJ0O1wiOlwi4oCWXCIsXCImVmVydGljYWxCYXI7XCI6XCLiiKNcIixcIiZWZXJ0aWNhbExpbmU7XCI6XCJ8XCIsXCImVmVydGljYWxTZXBhcmF0b3I7XCI6XCLinZhcIixcIiZWZXJ0aWNhbFRpbGRlO1wiOlwi4omAXCIsXCImVmVyeVRoaW5TcGFjZTtcIjpcIuKAilwiLFwiJlZmcjtcIjpcIvCdlJlcIixcIiZWb3BmO1wiOlwi8J2VjVwiLFwiJlZzY3I7XCI6XCLwnZKxXCIsXCImVnZkYXNoO1wiOlwi4oqqXCIsXCImV2NpcmM7XCI6XCLFtFwiLFwiJldlZGdlO1wiOlwi4ouAXCIsXCImV2ZyO1wiOlwi8J2UmlwiLFwiJldvcGY7XCI6XCLwnZWOXCIsXCImV3NjcjtcIjpcIvCdkrJcIixcIiZYZnI7XCI6XCLwnZSbXCIsXCImWGk7XCI6XCLOnlwiLFwiJlhvcGY7XCI6XCLwnZWPXCIsXCImWHNjcjtcIjpcIvCdkrNcIixcIiZZQWN5O1wiOlwi0K9cIixcIiZZSWN5O1wiOlwi0IdcIixcIiZZVWN5O1wiOlwi0K5cIixcIiZZYWN1dGVcIjpcIsOdXCIsXCImWWFjdXRlO1wiOlwiw51cIixcIiZZY2lyYztcIjpcIsW2XCIsXCImWWN5O1wiOlwi0KtcIixcIiZZZnI7XCI6XCLwnZScXCIsXCImWW9wZjtcIjpcIvCdlZBcIixcIiZZc2NyO1wiOlwi8J2StFwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJlpIY3k7XCI6XCLQllwiLFwiJlphY3V0ZTtcIjpcIsW5XCIsXCImWmNhcm9uO1wiOlwixb1cIixcIiZaY3k7XCI6XCLQl1wiLFwiJlpkb3Q7XCI6XCLFu1wiLFwiJlplcm9XaWR0aFNwYWNlO1wiOlwi4oCLXCIsXCImWmV0YTtcIjpcIs6WXCIsXCImWmZyO1wiOlwi4oSoXCIsXCImWm9wZjtcIjpcIuKEpFwiLFwiJlpzY3I7XCI6XCLwnZK1XCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWJyZXZlO1wiOlwixINcIixcIiZhYztcIjpcIuKIvlwiLFwiJmFjRTtcIjpcIuKIvsyzXCIsXCImYWNkO1wiOlwi4oi/XCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmFjdXRlXCI6XCLCtFwiLFwiJmFjdXRlO1wiOlwiwrRcIixcIiZhY3k7XCI6XCLQsFwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZhZjtcIjpcIuKBoVwiLFwiJmFmcjtcIjpcIvCdlJ5cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImYWxlcGg7XCI6XCLihLVcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYW1hY3I7XCI6XCLEgVwiLFwiJmFtYWxnO1wiOlwi4qi/XCIsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmFuZDtcIjpcIuKIp1wiLFwiJmFuZGFuZDtcIjpcIuKplVwiLFwiJmFuZGQ7XCI6XCLiqZxcIixcIiZhbmRzbG9wZTtcIjpcIuKpmFwiLFwiJmFuZHY7XCI6XCLiqZpcIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmdlO1wiOlwi4qakXCIsXCImYW5nbGU7XCI6XCLiiKBcIixcIiZhbmdtc2Q7XCI6XCLiiKFcIixcIiZhbmdtc2RhYTtcIjpcIuKmqFwiLFwiJmFuZ21zZGFiO1wiOlwi4qapXCIsXCImYW5nbXNkYWM7XCI6XCLipqpcIixcIiZhbmdtc2RhZDtcIjpcIuKmq1wiLFwiJmFuZ21zZGFlO1wiOlwi4qasXCIsXCImYW5nbXNkYWY7XCI6XCLipq1cIixcIiZhbmdtc2RhZztcIjpcIuKmrlwiLFwiJmFuZ21zZGFoO1wiOlwi4qavXCIsXCImYW5ncnQ7XCI6XCLiiJ9cIixcIiZhbmdydHZiO1wiOlwi4oq+XCIsXCImYW5ncnR2YmQ7XCI6XCLipp1cIixcIiZhbmdzcGg7XCI6XCLiiKJcIixcIiZhbmdzdDtcIjpcIsOFXCIsXCImYW5nemFycjtcIjpcIuKNvFwiLFwiJmFvZ29uO1wiOlwixIVcIixcIiZhb3BmO1wiOlwi8J2VklwiLFwiJmFwO1wiOlwi4omIXCIsXCImYXBFO1wiOlwi4qmwXCIsXCImYXBhY2lyO1wiOlwi4qmvXCIsXCImYXBlO1wiOlwi4omKXCIsXCImYXBpZDtcIjpcIuKJi1wiLFwiJmFwb3M7XCI6XCInXCIsXCImYXBwcm94O1wiOlwi4omIXCIsXCImYXBwcm94ZXE7XCI6XCLiiYpcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYXNjcjtcIjpcIvCdkrZcIixcIiZhc3Q7XCI6XCIqXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZhc3ltcGVxO1wiOlwi4omNXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhd2NvbmludDtcIjpcIuKIs1wiLFwiJmF3aW50O1wiOlwi4qiRXCIsXCImYk5vdDtcIjpcIuKrrVwiLFwiJmJhY2tjb25nO1wiOlwi4omMXCIsXCImYmFja2Vwc2lsb247XCI6XCLPtlwiLFwiJmJhY2twcmltZTtcIjpcIuKAtVwiLFwiJmJhY2tzaW07XCI6XCLiiL1cIixcIiZiYWNrc2ltZXE7XCI6XCLii41cIixcIiZiYXJ2ZWU7XCI6XCLiir1cIixcIiZiYXJ3ZWQ7XCI6XCLijIVcIixcIiZiYXJ3ZWRnZTtcIjpcIuKMhVwiLFwiJmJicms7XCI6XCLijrVcIixcIiZiYnJrdGJyaztcIjpcIuKOtlwiLFwiJmJjb25nO1wiOlwi4omMXCIsXCImYmN5O1wiOlwi0LFcIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmJlY2F1cztcIjpcIuKItVwiLFwiJmJlY2F1c2U7XCI6XCLiiLVcIixcIiZiZW1wdHl2O1wiOlwi4qawXCIsXCImYmVwc2k7XCI6XCLPtlwiLFwiJmJlcm5vdTtcIjpcIuKErFwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmJldGg7XCI6XCLihLZcIixcIiZiZXR3ZWVuO1wiOlwi4omsXCIsXCImYmZyO1wiOlwi8J2Un1wiLFwiJmJpZ2NhcDtcIjpcIuKLglwiLFwiJmJpZ2NpcmM7XCI6XCLil69cIixcIiZiaWdjdXA7XCI6XCLii4NcIixcIiZiaWdvZG90O1wiOlwi4qiAXCIsXCImYmlnb3BsdXM7XCI6XCLiqIFcIixcIiZiaWdvdGltZXM7XCI6XCLiqIJcIixcIiZiaWdzcWN1cDtcIjpcIuKohlwiLFwiJmJpZ3N0YXI7XCI6XCLimIVcIixcIiZiaWd0cmlhbmdsZWRvd247XCI6XCLilr1cIixcIiZiaWd0cmlhbmdsZXVwO1wiOlwi4pazXCIsXCImYmlndXBsdXM7XCI6XCLiqIRcIixcIiZiaWd2ZWU7XCI6XCLii4FcIixcIiZiaWd3ZWRnZTtcIjpcIuKLgFwiLFwiJmJrYXJvdztcIjpcIuKkjVwiLFwiJmJsYWNrbG96ZW5nZTtcIjpcIuKnq1wiLFwiJmJsYWNrc3F1YXJlO1wiOlwi4paqXCIsXCImYmxhY2t0cmlhbmdsZTtcIjpcIuKWtFwiLFwiJmJsYWNrdHJpYW5nbGVkb3duO1wiOlwi4pa+XCIsXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCI6XCLil4JcIixcIiZibGFja3RyaWFuZ2xlcmlnaHQ7XCI6XCLilrhcIixcIiZibGFuaztcIjpcIuKQo1wiLFwiJmJsazEyO1wiOlwi4paSXCIsXCImYmxrMTQ7XCI6XCLilpFcIixcIiZibGszNDtcIjpcIuKWk1wiLFwiJmJsb2NrO1wiOlwi4paIXCIsXCImYm5lO1wiOlwiPeKDpVwiLFwiJmJuZXF1aXY7XCI6XCLiiaHig6VcIixcIiZibm90O1wiOlwi4oyQXCIsXCImYm9wZjtcIjpcIvCdlZNcIixcIiZib3Q7XCI6XCLiiqVcIixcIiZib3R0b207XCI6XCLiiqVcIixcIiZib3d0aWU7XCI6XCLii4hcIixcIiZib3hETDtcIjpcIuKVl1wiLFwiJmJveERSO1wiOlwi4pWUXCIsXCImYm94RGw7XCI6XCLilZZcIixcIiZib3hEcjtcIjpcIuKVk1wiLFwiJmJveEg7XCI6XCLilZBcIixcIiZib3hIRDtcIjpcIuKVplwiLFwiJmJveEhVO1wiOlwi4pWpXCIsXCImYm94SGQ7XCI6XCLilaRcIixcIiZib3hIdTtcIjpcIuKVp1wiLFwiJmJveFVMO1wiOlwi4pWdXCIsXCImYm94VVI7XCI6XCLilZpcIixcIiZib3hVbDtcIjpcIuKVnFwiLFwiJmJveFVyO1wiOlwi4pWZXCIsXCImYm94VjtcIjpcIuKVkVwiLFwiJmJveFZIO1wiOlwi4pWsXCIsXCImYm94Vkw7XCI6XCLilaNcIixcIiZib3hWUjtcIjpcIuKVoFwiLFwiJmJveFZoO1wiOlwi4pWrXCIsXCImYm94Vmw7XCI6XCLilaJcIixcIiZib3hWcjtcIjpcIuKVn1wiLFwiJmJveGJveDtcIjpcIuKniVwiLFwiJmJveGRMO1wiOlwi4pWVXCIsXCImYm94ZFI7XCI6XCLilZJcIixcIiZib3hkbDtcIjpcIuKUkFwiLFwiJmJveGRyO1wiOlwi4pSMXCIsXCImYm94aDtcIjpcIuKUgFwiLFwiJmJveGhEO1wiOlwi4pWlXCIsXCImYm94aFU7XCI6XCLilahcIixcIiZib3hoZDtcIjpcIuKUrFwiLFwiJmJveGh1O1wiOlwi4pS0XCIsXCImYm94bWludXM7XCI6XCLiip9cIixcIiZib3hwbHVzO1wiOlwi4oqeXCIsXCImYm94dGltZXM7XCI6XCLiiqBcIixcIiZib3h1TDtcIjpcIuKVm1wiLFwiJmJveHVSO1wiOlwi4pWYXCIsXCImYm94dWw7XCI6XCLilJhcIixcIiZib3h1cjtcIjpcIuKUlFwiLFwiJmJveHY7XCI6XCLilIJcIixcIiZib3h2SDtcIjpcIuKVqlwiLFwiJmJveHZMO1wiOlwi4pWhXCIsXCImYm94dlI7XCI6XCLilZ5cIixcIiZib3h2aDtcIjpcIuKUvFwiLFwiJmJveHZsO1wiOlwi4pSkXCIsXCImYm94dnI7XCI6XCLilJxcIixcIiZicHJpbWU7XCI6XCLigLVcIixcIiZicmV2ZTtcIjpcIsuYXCIsXCImYnJ2YmFyXCI6XCLCplwiLFwiJmJydmJhcjtcIjpcIsKmXCIsXCImYnNjcjtcIjpcIvCdkrdcIixcIiZic2VtaTtcIjpcIuKBj1wiLFwiJmJzaW07XCI6XCLiiL1cIixcIiZic2ltZTtcIjpcIuKLjVwiLFwiJmJzb2w7XCI6XCJcXFxcXCIsXCImYnNvbGI7XCI6XCLip4VcIixcIiZic29saHN1YjtcIjpcIuKfiFwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZidWxsZXQ7XCI6XCLigKJcIixcIiZidW1wO1wiOlwi4omOXCIsXCImYnVtcEU7XCI6XCLiqq5cIixcIiZidW1wZTtcIjpcIuKJj1wiLFwiJmJ1bXBlcTtcIjpcIuKJj1wiLFwiJmNhY3V0ZTtcIjpcIsSHXCIsXCImY2FwO1wiOlwi4oipXCIsXCImY2FwYW5kO1wiOlwi4qmEXCIsXCImY2FwYnJjdXA7XCI6XCLiqYlcIixcIiZjYXBjYXA7XCI6XCLiqYtcIixcIiZjYXBjdXA7XCI6XCLiqYdcIixcIiZjYXBkb3Q7XCI6XCLiqYBcIixcIiZjYXBzO1wiOlwi4oip77iAXCIsXCImY2FyZXQ7XCI6XCLigYFcIixcIiZjYXJvbjtcIjpcIsuHXCIsXCImY2NhcHM7XCI6XCLiqY1cIixcIiZjY2Fyb247XCI6XCLEjVwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmNjaXJjO1wiOlwixIlcIixcIiZjY3VwcztcIjpcIuKpjFwiLFwiJmNjdXBzc207XCI6XCLiqZBcIixcIiZjZG90O1wiOlwixItcIixcIiZjZWRpbFwiOlwiwrhcIixcIiZjZWRpbDtcIjpcIsK4XCIsXCImY2VtcHR5djtcIjpcIuKmslwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImY2VudGVyZG90O1wiOlwiwrdcIixcIiZjZnI7XCI6XCLwnZSgXCIsXCImY2hjeTtcIjpcItGHXCIsXCImY2hlY2s7XCI6XCLinJNcIixcIiZjaGVja21hcms7XCI6XCLinJNcIixcIiZjaGk7XCI6XCLPh1wiLFwiJmNpcjtcIjpcIuKXi1wiLFwiJmNpckU7XCI6XCLip4NcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZjaXJjZXE7XCI6XCLiiZdcIixcIiZjaXJjbGVhcnJvd2xlZnQ7XCI6XCLihrpcIixcIiZjaXJjbGVhcnJvd3JpZ2h0O1wiOlwi4oa7XCIsXCImY2lyY2xlZFI7XCI6XCLCrlwiLFwiJmNpcmNsZWRTO1wiOlwi4pOIXCIsXCImY2lyY2xlZGFzdDtcIjpcIuKKm1wiLFwiJmNpcmNsZWRjaXJjO1wiOlwi4oqaXCIsXCImY2lyY2xlZGRhc2g7XCI6XCLiip1cIixcIiZjaXJlO1wiOlwi4omXXCIsXCImY2lyZm5pbnQ7XCI6XCLiqJBcIixcIiZjaXJtaWQ7XCI6XCLiq69cIixcIiZjaXJzY2lyO1wiOlwi4qeCXCIsXCImY2x1YnM7XCI6XCLimaNcIixcIiZjbHVic3VpdDtcIjpcIuKZo1wiLFwiJmNvbG9uO1wiOlwiOlwiLFwiJmNvbG9uZTtcIjpcIuKJlFwiLFwiJmNvbG9uZXE7XCI6XCLiiZRcIixcIiZjb21tYTtcIjpcIixcIixcIiZjb21tYXQ7XCI6XCJAXCIsXCImY29tcDtcIjpcIuKIgVwiLFwiJmNvbXBmbjtcIjpcIuKImFwiLFwiJmNvbXBsZW1lbnQ7XCI6XCLiiIFcIixcIiZjb21wbGV4ZXM7XCI6XCLihIJcIixcIiZjb25nO1wiOlwi4omFXCIsXCImY29uZ2RvdDtcIjpcIuKprVwiLFwiJmNvbmludDtcIjpcIuKIrlwiLFwiJmNvcGY7XCI6XCLwnZWUXCIsXCImY29wcm9kO1wiOlwi4oiQXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZjb3B5c3I7XCI6XCLihJdcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmNyb3NzO1wiOlwi4pyXXCIsXCImY3NjcjtcIjpcIvCdkrhcIixcIiZjc3ViO1wiOlwi4quPXCIsXCImY3N1YmU7XCI6XCLiq5FcIixcIiZjc3VwO1wiOlwi4quQXCIsXCImY3N1cGU7XCI6XCLiq5JcIixcIiZjdGRvdDtcIjpcIuKLr1wiLFwiJmN1ZGFycmw7XCI6XCLipLhcIixcIiZjdWRhcnJyO1wiOlwi4qS1XCIsXCImY3VlcHI7XCI6XCLii55cIixcIiZjdWVzYztcIjpcIuKLn1wiLFwiJmN1bGFycjtcIjpcIuKGtlwiLFwiJmN1bGFycnA7XCI6XCLipL1cIixcIiZjdXA7XCI6XCLiiKpcIixcIiZjdXBicmNhcDtcIjpcIuKpiFwiLFwiJmN1cGNhcDtcIjpcIuKphlwiLFwiJmN1cGN1cDtcIjpcIuKpilwiLFwiJmN1cGRvdDtcIjpcIuKKjVwiLFwiJmN1cG9yO1wiOlwi4qmFXCIsXCImY3VwcztcIjpcIuKIqu+4gFwiLFwiJmN1cmFycjtcIjpcIuKGt1wiLFwiJmN1cmFycm07XCI6XCLipLxcIixcIiZjdXJseWVxcHJlYztcIjpcIuKLnlwiLFwiJmN1cmx5ZXFzdWNjO1wiOlwi4oufXCIsXCImY3VybHl2ZWU7XCI6XCLii45cIixcIiZjdXJseXdlZGdlO1wiOlwi4ouPXCIsXCImY3VycmVuXCI6XCLCpFwiLFwiJmN1cnJlbjtcIjpcIsKkXCIsXCImY3VydmVhcnJvd2xlZnQ7XCI6XCLihrZcIixcIiZjdXJ2ZWFycm93cmlnaHQ7XCI6XCLihrdcIixcIiZjdXZlZTtcIjpcIuKLjlwiLFwiJmN1d2VkO1wiOlwi4ouPXCIsXCImY3djb25pbnQ7XCI6XCLiiLJcIixcIiZjd2ludDtcIjpcIuKIsVwiLFwiJmN5bGN0eTtcIjpcIuKMrVwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZkSGFyO1wiOlwi4qWlXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImZGFsZXRoO1wiOlwi4oS4XCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmRhc2g7XCI6XCLigJBcIixcIiZkYXNodjtcIjpcIuKKo1wiLFwiJmRia2Fyb3c7XCI6XCLipI9cIixcIiZkYmxhYztcIjpcIsudXCIsXCImZGNhcm9uO1wiOlwixI9cIixcIiZkY3k7XCI6XCLQtFwiLFwiJmRkO1wiOlwi4oWGXCIsXCImZGRhZ2dlcjtcIjpcIuKAoVwiLFwiJmRkYXJyO1wiOlwi4oeKXCIsXCImZGRvdHNlcTtcIjpcIuKpt1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZkZW1wdHl2O1wiOlwi4qaxXCIsXCImZGZpc2h0O1wiOlwi4qW/XCIsXCImZGZyO1wiOlwi8J2UoVwiLFwiJmRoYXJsO1wiOlwi4oeDXCIsXCImZGhhcnI7XCI6XCLih4JcIixcIiZkaWFtO1wiOlwi4ouEXCIsXCImZGlhbW9uZDtcIjpcIuKLhFwiLFwiJmRpYW1vbmRzdWl0O1wiOlwi4pmmXCIsXCImZGlhbXM7XCI6XCLimaZcIixcIiZkaWU7XCI6XCLCqFwiLFwiJmRpZ2FtbWE7XCI6XCLPnVwiLFwiJmRpc2luO1wiOlwi4ouyXCIsXCImZGl2O1wiOlwiw7dcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZkaXZpZGVvbnRpbWVzO1wiOlwi4ouHXCIsXCImZGl2b254O1wiOlwi4ouHXCIsXCImZGpjeTtcIjpcItGSXCIsXCImZGxjb3JuO1wiOlwi4oyeXCIsXCImZGxjcm9wO1wiOlwi4oyNXCIsXCImZG9sbGFyO1wiOlwiJFwiLFwiJmRvcGY7XCI6XCLwnZWVXCIsXCImZG90O1wiOlwiy5lcIixcIiZkb3RlcTtcIjpcIuKJkFwiLFwiJmRvdGVxZG90O1wiOlwi4omRXCIsXCImZG90bWludXM7XCI6XCLiiLhcIixcIiZkb3RwbHVzO1wiOlwi4oiUXCIsXCImZG90c3F1YXJlO1wiOlwi4oqhXCIsXCImZG91YmxlYmFyd2VkZ2U7XCI6XCLijIZcIixcIiZkb3duYXJyb3c7XCI6XCLihpNcIixcIiZkb3duZG93bmFycm93cztcIjpcIuKHilwiLFwiJmRvd25oYXJwb29ubGVmdDtcIjpcIuKHg1wiLFwiJmRvd25oYXJwb29ucmlnaHQ7XCI6XCLih4JcIixcIiZkcmJrYXJvdztcIjpcIuKkkFwiLFwiJmRyY29ybjtcIjpcIuKMn1wiLFwiJmRyY3JvcDtcIjpcIuKMjFwiLFwiJmRzY3I7XCI6XCLwnZK5XCIsXCImZHNjeTtcIjpcItGVXCIsXCImZHNvbDtcIjpcIuKntlwiLFwiJmRzdHJvaztcIjpcIsSRXCIsXCImZHRkb3Q7XCI6XCLii7FcIixcIiZkdHJpO1wiOlwi4pa/XCIsXCImZHRyaWY7XCI6XCLilr5cIixcIiZkdWFycjtcIjpcIuKHtVwiLFwiJmR1aGFyO1wiOlwi4qWvXCIsXCImZHdhbmdsZTtcIjpcIuKmplwiLFwiJmR6Y3k7XCI6XCLRn1wiLFwiJmR6aWdyYXJyO1wiOlwi4p+/XCIsXCImZUREb3Q7XCI6XCLiqbdcIixcIiZlRG90O1wiOlwi4omRXCIsXCImZWFjdXRlXCI6XCLDqVwiLFwiJmVhY3V0ZTtcIjpcIsOpXCIsXCImZWFzdGVyO1wiOlwi4qmuXCIsXCImZWNhcm9uO1wiOlwixJtcIixcIiZlY2lyO1wiOlwi4omWXCIsXCImZWNpcmNcIjpcIsOqXCIsXCImZWNpcmM7XCI6XCLDqlwiLFwiJmVjb2xvbjtcIjpcIuKJlVwiLFwiJmVjeTtcIjpcItGNXCIsXCImZWRvdDtcIjpcIsSXXCIsXCImZWU7XCI6XCLihYdcIixcIiZlZkRvdDtcIjpcIuKJklwiLFwiJmVmcjtcIjpcIvCdlKJcIixcIiZlZztcIjpcIuKqmlwiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVncztcIjpcIuKqllwiLFwiJmVnc2RvdDtcIjpcIuKqmFwiLFwiJmVsO1wiOlwi4qqZXCIsXCImZWxpbnRlcnM7XCI6XCLij6dcIixcIiZlbGw7XCI6XCLihJNcIixcIiZlbHM7XCI6XCLiqpVcIixcIiZlbHNkb3Q7XCI6XCLiqpdcIixcIiZlbWFjcjtcIjpcIsSTXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZlbXB0eXNldDtcIjpcIuKIhVwiLFwiJmVtcHR5djtcIjpcIuKIhVwiLFwiJmVtc3AxMztcIjpcIuKAhFwiLFwiJmVtc3AxNDtcIjpcIuKAhVwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZlbmc7XCI6XCLFi1wiLFwiJmVuc3A7XCI6XCLigIJcIixcIiZlb2dvbjtcIjpcIsSZXCIsXCImZW9wZjtcIjpcIvCdlZZcIixcIiZlcGFyO1wiOlwi4ouVXCIsXCImZXBhcnNsO1wiOlwi4qejXCIsXCImZXBsdXM7XCI6XCLiqbFcIixcIiZlcHNpO1wiOlwizrVcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZlcHNpdjtcIjpcIs+1XCIsXCImZXFjaXJjO1wiOlwi4omWXCIsXCImZXFjb2xvbjtcIjpcIuKJlVwiLFwiJmVxc2ltO1wiOlwi4omCXCIsXCImZXFzbGFudGd0cjtcIjpcIuKqllwiLFwiJmVxc2xhbnRsZXNzO1wiOlwi4qqVXCIsXCImZXF1YWxzO1wiOlwiPVwiLFwiJmVxdWVzdDtcIjpcIuKJn1wiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImZXF1aXZERDtcIjpcIuKpuFwiLFwiJmVxdnBhcnNsO1wiOlwi4qelXCIsXCImZXJEb3Q7XCI6XCLiiZNcIixcIiZlcmFycjtcIjpcIuKlsVwiLFwiJmVzY3I7XCI6XCLihK9cIixcIiZlc2RvdDtcIjpcIuKJkFwiLFwiJmVzaW07XCI6XCLiiYJcIixcIiZldGE7XCI6XCLOt1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJmV1bWxcIjpcIsOrXCIsXCImZXVtbDtcIjpcIsOrXCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmV4Y2w7XCI6XCIhXCIsXCImZXhpc3Q7XCI6XCLiiINcIixcIiZleHBlY3RhdGlvbjtcIjpcIuKEsFwiLFwiJmV4cG9uZW50aWFsZTtcIjpcIuKFh1wiLFwiJmZhbGxpbmdkb3RzZXE7XCI6XCLiiZJcIixcIiZmY3k7XCI6XCLRhFwiLFwiJmZlbWFsZTtcIjpcIuKZgFwiLFwiJmZmaWxpZztcIjpcIu+sg1wiLFwiJmZmbGlnO1wiOlwi76yAXCIsXCImZmZsbGlnO1wiOlwi76yEXCIsXCImZmZyO1wiOlwi8J2Uo1wiLFwiJmZpbGlnO1wiOlwi76yBXCIsXCImZmpsaWc7XCI6XCJmalwiLFwiJmZsYXQ7XCI6XCLima1cIixcIiZmbGxpZztcIjpcIu+sglwiLFwiJmZsdG5zO1wiOlwi4paxXCIsXCImZm5vZjtcIjpcIsaSXCIsXCImZm9wZjtcIjpcIvCdlZdcIixcIiZmb3JhbGw7XCI6XCLiiIBcIixcIiZmb3JrO1wiOlwi4ouUXCIsXCImZm9ya3Y7XCI6XCLiq5lcIixcIiZmcGFydGludDtcIjpcIuKojVwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMxMztcIjpcIuKFk1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxNTtcIjpcIuKFlVwiLFwiJmZyYWMxNjtcIjpcIuKFmVwiLFwiJmZyYWMxODtcIjpcIuKFm1wiLFwiJmZyYWMyMztcIjpcIuKFlFwiLFwiJmZyYWMyNTtcIjpcIuKFllwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmZyYWMzNTtcIjpcIuKFl1wiLFwiJmZyYWMzODtcIjpcIuKFnFwiLFwiJmZyYWM0NTtcIjpcIuKFmFwiLFwiJmZyYWM1NjtcIjpcIuKFmlwiLFwiJmZyYWM1ODtcIjpcIuKFnVwiLFwiJmZyYWM3ODtcIjpcIuKFnlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImZnJvd247XCI6XCLijKJcIixcIiZmc2NyO1wiOlwi8J2Su1wiLFwiJmdFO1wiOlwi4omnXCIsXCImZ0VsO1wiOlwi4qqMXCIsXCImZ2FjdXRlO1wiOlwix7VcIixcIiZnYW1tYTtcIjpcIs6zXCIsXCImZ2FtbWFkO1wiOlwiz51cIixcIiZnYXA7XCI6XCLiqoZcIixcIiZnYnJldmU7XCI6XCLEn1wiLFwiJmdjaXJjO1wiOlwixJ1cIixcIiZnY3k7XCI6XCLQs1wiLFwiJmdkb3Q7XCI6XCLEoVwiLFwiJmdlO1wiOlwi4omlXCIsXCImZ2VsO1wiOlwi4oubXCIsXCImZ2VxO1wiOlwi4omlXCIsXCImZ2VxcTtcIjpcIuKJp1wiLFwiJmdlcXNsYW50O1wiOlwi4qm+XCIsXCImZ2VzO1wiOlwi4qm+XCIsXCImZ2VzY2M7XCI6XCLiqqlcIixcIiZnZXNkb3Q7XCI6XCLiqoBcIixcIiZnZXNkb3RvO1wiOlwi4qqCXCIsXCImZ2VzZG90b2w7XCI6XCLiqoRcIixcIiZnZXNsO1wiOlwi4oub77iAXCIsXCImZ2VzbGVzO1wiOlwi4qqUXCIsXCImZ2ZyO1wiOlwi8J2UpFwiLFwiJmdnO1wiOlwi4omrXCIsXCImZ2dnO1wiOlwi4ouZXCIsXCImZ2ltZWw7XCI6XCLihLdcIixcIiZnamN5O1wiOlwi0ZNcIixcIiZnbDtcIjpcIuKJt1wiLFwiJmdsRTtcIjpcIuKqklwiLFwiJmdsYTtcIjpcIuKqpVwiLFwiJmdsajtcIjpcIuKqpFwiLFwiJmduRTtcIjpcIuKJqVwiLFwiJmduYXA7XCI6XCLiqopcIixcIiZnbmFwcHJveDtcIjpcIuKqilwiLFwiJmduZTtcIjpcIuKqiFwiLFwiJmduZXE7XCI6XCLiqohcIixcIiZnbmVxcTtcIjpcIuKJqVwiLFwiJmduc2ltO1wiOlwi4ounXCIsXCImZ29wZjtcIjpcIvCdlZhcIixcIiZncmF2ZTtcIjpcImBcIixcIiZnc2NyO1wiOlwi4oSKXCIsXCImZ3NpbTtcIjpcIuKJs1wiLFwiJmdzaW1lO1wiOlwi4qqOXCIsXCImZ3NpbWw7XCI6XCLiqpBcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJmd0Y2M7XCI6XCLiqqdcIixcIiZndGNpcjtcIjpcIuKpulwiLFwiJmd0ZG90O1wiOlwi4ouXXCIsXCImZ3RsUGFyO1wiOlwi4qaVXCIsXCImZ3RxdWVzdDtcIjpcIuKpvFwiLFwiJmd0cmFwcHJveDtcIjpcIuKqhlwiLFwiJmd0cmFycjtcIjpcIuKluFwiLFwiJmd0cmRvdDtcIjpcIuKLl1wiLFwiJmd0cmVxbGVzcztcIjpcIuKLm1wiLFwiJmd0cmVxcWxlc3M7XCI6XCLiqoxcIixcIiZndHJsZXNzO1wiOlwi4om3XCIsXCImZ3Ryc2ltO1wiOlwi4omzXCIsXCImZ3ZlcnRuZXFxO1wiOlwi4omp77iAXCIsXCImZ3ZuRTtcIjpcIuKJqe+4gFwiLFwiJmhBcnI7XCI6XCLih5RcIixcIiZoYWlyc3A7XCI6XCLigIpcIixcIiZoYWxmO1wiOlwiwr1cIixcIiZoYW1pbHQ7XCI6XCLihItcIixcIiZoYXJkY3k7XCI6XCLRilwiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZoYXJyY2lyO1wiOlwi4qWIXCIsXCImaGFycnc7XCI6XCLihq1cIixcIiZoYmFyO1wiOlwi4oSPXCIsXCImaGNpcmM7XCI6XCLEpVwiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmhlYXJ0c3VpdDtcIjpcIuKZpVwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJmhlcmNvbjtcIjpcIuKKuVwiLFwiJmhmcjtcIjpcIvCdlKVcIixcIiZoa3NlYXJvdztcIjpcIuKkpVwiLFwiJmhrc3dhcm93O1wiOlwi4qSmXCIsXCImaG9hcnI7XCI6XCLih79cIixcIiZob210aHQ7XCI6XCLiiLtcIixcIiZob29rbGVmdGFycm93O1wiOlwi4oapXCIsXCImaG9va3JpZ2h0YXJyb3c7XCI6XCLihqpcIixcIiZob3BmO1wiOlwi8J2VmVwiLFwiJmhvcmJhcjtcIjpcIuKAlVwiLFwiJmhzY3I7XCI6XCLwnZK9XCIsXCImaHNsYXNoO1wiOlwi4oSPXCIsXCImaHN0cm9rO1wiOlwixKdcIixcIiZoeWJ1bGw7XCI6XCLigYNcIixcIiZoeXBoZW47XCI6XCLigJBcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpYztcIjpcIuKBo1wiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpY3k7XCI6XCLQuFwiLFwiJmllY3k7XCI6XCLQtVwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZpZmY7XCI6XCLih5RcIixcIiZpZnI7XCI6XCLwnZSmXCIsXCImaWdyYXZlXCI6XCLDrFwiLFwiJmlncmF2ZTtcIjpcIsOsXCIsXCImaWk7XCI6XCLihYhcIixcIiZpaWlpbnQ7XCI6XCLiqIxcIixcIiZpaWludDtcIjpcIuKIrVwiLFwiJmlpbmZpbjtcIjpcIuKnnFwiLFwiJmlpb3RhO1wiOlwi4oSpXCIsXCImaWpsaWc7XCI6XCLEs1wiLFwiJmltYWNyO1wiOlwixKtcIixcIiZpbWFnZTtcIjpcIuKEkVwiLFwiJmltYWdsaW5lO1wiOlwi4oSQXCIsXCImaW1hZ3BhcnQ7XCI6XCLihJFcIixcIiZpbWF0aDtcIjpcIsSxXCIsXCImaW1vZjtcIjpcIuKKt1wiLFwiJmltcGVkO1wiOlwixrVcIixcIiZpbjtcIjpcIuKIiFwiLFwiJmluY2FyZTtcIjpcIuKEhVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImaW5maW50aWU7XCI6XCLip51cIixcIiZpbm9kb3Q7XCI6XCLEsVwiLFwiJmludDtcIjpcIuKIq1wiLFwiJmludGNhbDtcIjpcIuKKulwiLFwiJmludGVnZXJzO1wiOlwi4oSkXCIsXCImaW50ZXJjYWw7XCI6XCLiirpcIixcIiZpbnRsYXJoaztcIjpcIuKol1wiLFwiJmludHByb2Q7XCI6XCLiqLxcIixcIiZpb2N5O1wiOlwi0ZFcIixcIiZpb2dvbjtcIjpcIsSvXCIsXCImaW9wZjtcIjpcIvCdlZpcIixcIiZpb3RhO1wiOlwizrlcIixcIiZpcHJvZDtcIjpcIuKovFwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJmlzY3I7XCI6XCLwnZK+XCIsXCImaXNpbjtcIjpcIuKIiFwiLFwiJmlzaW5FO1wiOlwi4ou5XCIsXCImaXNpbmRvdDtcIjpcIuKLtVwiLFwiJmlzaW5zO1wiOlwi4ou0XCIsXCImaXNpbnN2O1wiOlwi4ouzXCIsXCImaXNpbnY7XCI6XCLiiIhcIixcIiZpdDtcIjpcIuKBolwiLFwiJml0aWxkZTtcIjpcIsSpXCIsXCImaXVrY3k7XCI6XCLRllwiLFwiJml1bWxcIjpcIsOvXCIsXCImaXVtbDtcIjpcIsOvXCIsXCImamNpcmM7XCI6XCLEtVwiLFwiJmpjeTtcIjpcItC5XCIsXCImamZyO1wiOlwi8J2Up1wiLFwiJmptYXRoO1wiOlwiyLdcIixcIiZqb3BmO1wiOlwi8J2Vm1wiLFwiJmpzY3I7XCI6XCLwnZK/XCIsXCImanNlcmN5O1wiOlwi0ZhcIixcIiZqdWtjeTtcIjpcItGUXCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmthcHBhdjtcIjpcIs+wXCIsXCIma2NlZGlsO1wiOlwixLdcIixcIiZrY3k7XCI6XCLQulwiLFwiJmtmcjtcIjpcIvCdlKhcIixcIiZrZ3JlZW47XCI6XCLEuFwiLFwiJmtoY3k7XCI6XCLRhVwiLFwiJmtqY3k7XCI6XCLRnFwiLFwiJmtvcGY7XCI6XCLwnZWcXCIsXCIma3NjcjtcIjpcIvCdk4BcIixcIiZsQWFycjtcIjpcIuKHmlwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZsQXRhaWw7XCI6XCLipJtcIixcIiZsQmFycjtcIjpcIuKkjlwiLFwiJmxFO1wiOlwi4ommXCIsXCImbEVnO1wiOlwi4qqLXCIsXCImbEhhcjtcIjpcIuKlolwiLFwiJmxhY3V0ZTtcIjpcIsS6XCIsXCImbGFlbXB0eXY7XCI6XCLiprRcIixcIiZsYWdyYW47XCI6XCLihJJcIixcIiZsYW1iZGE7XCI6XCLOu1wiLFwiJmxhbmc7XCI6XCLin6hcIixcIiZsYW5nZDtcIjpcIuKmkVwiLFwiJmxhbmdsZTtcIjpcIuKfqFwiLFwiJmxhcDtcIjpcIuKqhVwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZsYXJyO1wiOlwi4oaQXCIsXCImbGFycmI7XCI6XCLih6RcIixcIiZsYXJyYmZzO1wiOlwi4qSfXCIsXCImbGFycmZzO1wiOlwi4qSdXCIsXCImbGFycmhrO1wiOlwi4oapXCIsXCImbGFycmxwO1wiOlwi4oarXCIsXCImbGFycnBsO1wiOlwi4qS5XCIsXCImbGFycnNpbTtcIjpcIuKls1wiLFwiJmxhcnJ0bDtcIjpcIuKGolwiLFwiJmxhdDtcIjpcIuKqq1wiLFwiJmxhdGFpbDtcIjpcIuKkmVwiLFwiJmxhdGU7XCI6XCLiqq1cIixcIiZsYXRlcztcIjpcIuKqre+4gFwiLFwiJmxiYXJyO1wiOlwi4qSMXCIsXCImbGJicms7XCI6XCLinbJcIixcIiZsYnJhY2U7XCI6XCJ7XCIsXCImbGJyYWNrO1wiOlwiW1wiLFwiJmxicmtlO1wiOlwi4qaLXCIsXCImbGJya3NsZDtcIjpcIuKmj1wiLFwiJmxicmtzbHU7XCI6XCLipo1cIixcIiZsY2Fyb247XCI6XCLEvlwiLFwiJmxjZWRpbDtcIjpcIsS8XCIsXCImbGNlaWw7XCI6XCLijIhcIixcIiZsY3ViO1wiOlwie1wiLFwiJmxjeTtcIjpcItC7XCIsXCImbGRjYTtcIjpcIuKktlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImbGRxdW9yO1wiOlwi4oCeXCIsXCImbGRyZGhhcjtcIjpcIuKlp1wiLFwiJmxkcnVzaGFyO1wiOlwi4qWLXCIsXCImbGRzaDtcIjpcIuKGslwiLFwiJmxlO1wiOlwi4omkXCIsXCImbGVmdGFycm93O1wiOlwi4oaQXCIsXCImbGVmdGFycm93dGFpbDtcIjpcIuKGolwiLFwiJmxlZnRoYXJwb29uZG93bjtcIjpcIuKGvVwiLFwiJmxlZnRoYXJwb29udXA7XCI6XCLihrxcIixcIiZsZWZ0bGVmdGFycm93cztcIjpcIuKHh1wiLFwiJmxlZnRyaWdodGFycm93O1wiOlwi4oaUXCIsXCImbGVmdHJpZ2h0YXJyb3dzO1wiOlwi4oeGXCIsXCImbGVmdHJpZ2h0aGFycG9vbnM7XCI6XCLih4tcIixcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiOlwi4oatXCIsXCImbGVmdHRocmVldGltZXM7XCI6XCLii4tcIixcIiZsZWc7XCI6XCLii5pcIixcIiZsZXE7XCI6XCLiiaRcIixcIiZsZXFxO1wiOlwi4ommXCIsXCImbGVxc2xhbnQ7XCI6XCLiqb1cIixcIiZsZXM7XCI6XCLiqb1cIixcIiZsZXNjYztcIjpcIuKqqFwiLFwiJmxlc2RvdDtcIjpcIuKpv1wiLFwiJmxlc2RvdG87XCI6XCLiqoFcIixcIiZsZXNkb3RvcjtcIjpcIuKqg1wiLFwiJmxlc2c7XCI6XCLii5rvuIBcIixcIiZsZXNnZXM7XCI6XCLiqpNcIixcIiZsZXNzYXBwcm94O1wiOlwi4qqFXCIsXCImbGVzc2RvdDtcIjpcIuKLllwiLFwiJmxlc3NlcWd0cjtcIjpcIuKLmlwiLFwiJmxlc3NlcXFndHI7XCI6XCLiqotcIixcIiZsZXNzZ3RyO1wiOlwi4om2XCIsXCImbGVzc3NpbTtcIjpcIuKJslwiLFwiJmxmaXNodDtcIjpcIuKlvFwiLFwiJmxmbG9vcjtcIjpcIuKMilwiLFwiJmxmcjtcIjpcIvCdlKlcIixcIiZsZztcIjpcIuKJtlwiLFwiJmxnRTtcIjpcIuKqkVwiLFwiJmxoYXJkO1wiOlwi4oa9XCIsXCImbGhhcnU7XCI6XCLihrxcIixcIiZsaGFydWw7XCI6XCLipapcIixcIiZsaGJsaztcIjpcIuKWhFwiLFwiJmxqY3k7XCI6XCLRmVwiLFwiJmxsO1wiOlwi4omqXCIsXCImbGxhcnI7XCI6XCLih4dcIixcIiZsbGNvcm5lcjtcIjpcIuKMnlwiLFwiJmxsaGFyZDtcIjpcIuKlq1wiLFwiJmxsdHJpO1wiOlwi4pe6XCIsXCImbG1pZG90O1wiOlwixYBcIixcIiZsbW91c3Q7XCI6XCLijrBcIixcIiZsbW91c3RhY2hlO1wiOlwi4o6wXCIsXCImbG5FO1wiOlwi4omoXCIsXCImbG5hcDtcIjpcIuKqiVwiLFwiJmxuYXBwcm94O1wiOlwi4qqJXCIsXCImbG5lO1wiOlwi4qqHXCIsXCImbG5lcTtcIjpcIuKqh1wiLFwiJmxuZXFxO1wiOlwi4omoXCIsXCImbG5zaW07XCI6XCLii6ZcIixcIiZsb2FuZztcIjpcIuKfrFwiLFwiJmxvYXJyO1wiOlwi4oe9XCIsXCImbG9icms7XCI6XCLin6ZcIixcIiZsb25nbGVmdGFycm93O1wiOlwi4p+1XCIsXCImbG9uZ2xlZnRyaWdodGFycm93O1wiOlwi4p+3XCIsXCImbG9uZ21hcHN0bztcIjpcIuKfvFwiLFwiJmxvbmdyaWdodGFycm93O1wiOlwi4p+2XCIsXCImbG9vcGFycm93bGVmdDtcIjpcIuKGq1wiLFwiJmxvb3BhcnJvd3JpZ2h0O1wiOlwi4oasXCIsXCImbG9wYXI7XCI6XCLipoVcIixcIiZsb3BmO1wiOlwi8J2VnVwiLFwiJmxvcGx1cztcIjpcIuKorVwiLFwiJmxvdGltZXM7XCI6XCLiqLRcIixcIiZsb3dhc3Q7XCI6XCLiiJdcIixcIiZsb3diYXI7XCI6XCJfXCIsXCImbG96O1wiOlwi4peKXCIsXCImbG96ZW5nZTtcIjpcIuKXilwiLFwiJmxvemY7XCI6XCLip6tcIixcIiZscGFyO1wiOlwiKFwiLFwiJmxwYXJsdDtcIjpcIuKmk1wiLFwiJmxyYXJyO1wiOlwi4oeGXCIsXCImbHJjb3JuZXI7XCI6XCLijJ9cIixcIiZscmhhcjtcIjpcIuKHi1wiLFwiJmxyaGFyZDtcIjpcIuKlrVwiLFwiJmxybTtcIjpcIuKAjlwiLFwiJmxydHJpO1wiOlwi4oq/XCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImbHNjcjtcIjpcIvCdk4FcIixcIiZsc2g7XCI6XCLihrBcIixcIiZsc2ltO1wiOlwi4omyXCIsXCImbHNpbWU7XCI6XCLiqo1cIixcIiZsc2ltZztcIjpcIuKqj1wiLFwiJmxzcWI7XCI6XCJbXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZsc3F1b3I7XCI6XCLigJpcIixcIiZsc3Ryb2s7XCI6XCLFglwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImbHRjYztcIjpcIuKqplwiLFwiJmx0Y2lyO1wiOlwi4qm5XCIsXCImbHRkb3Q7XCI6XCLii5ZcIixcIiZsdGhyZWU7XCI6XCLii4tcIixcIiZsdGltZXM7XCI6XCLii4lcIixcIiZsdGxhcnI7XCI6XCLipbZcIixcIiZsdHF1ZXN0O1wiOlwi4qm7XCIsXCImbHRyUGFyO1wiOlwi4qaWXCIsXCImbHRyaTtcIjpcIuKXg1wiLFwiJmx0cmllO1wiOlwi4oq0XCIsXCImbHRyaWY7XCI6XCLil4JcIixcIiZsdXJkc2hhcjtcIjpcIuKlilwiLFwiJmx1cnVoYXI7XCI6XCLipaZcIixcIiZsdmVydG5lcXE7XCI6XCLiiajvuIBcIixcIiZsdm5FO1wiOlwi4omo77iAXCIsXCImbUREb3Q7XCI6XCLiiLpcIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJm1hbGU7XCI6XCLimYJcIixcIiZtYWx0O1wiOlwi4pygXCIsXCImbWFsdGVzZTtcIjpcIuKcoFwiLFwiJm1hcDtcIjpcIuKGplwiLFwiJm1hcHN0bztcIjpcIuKGplwiLFwiJm1hcHN0b2Rvd247XCI6XCLihqdcIixcIiZtYXBzdG9sZWZ0O1wiOlwi4oakXCIsXCImbWFwc3RvdXA7XCI6XCLihqVcIixcIiZtYXJrZXI7XCI6XCLilq5cIixcIiZtY29tbWE7XCI6XCLiqKlcIixcIiZtY3k7XCI6XCLQvFwiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbWVhc3VyZWRhbmdsZTtcIjpcIuKIoVwiLFwiJm1mcjtcIjpcIvCdlKpcIixcIiZtaG87XCI6XCLihKdcIixcIiZtaWNyb1wiOlwiwrVcIixcIiZtaWNybztcIjpcIsK1XCIsXCImbWlkO1wiOlwi4oijXCIsXCImbWlkYXN0O1wiOlwiKlwiLFwiJm1pZGNpcjtcIjpcIuKrsFwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbWludXNiO1wiOlwi4oqfXCIsXCImbWludXNkO1wiOlwi4oi4XCIsXCImbWludXNkdTtcIjpcIuKoqlwiLFwiJm1sY3A7XCI6XCLiq5tcIixcIiZtbGRyO1wiOlwi4oCmXCIsXCImbW5wbHVzO1wiOlwi4oiTXCIsXCImbW9kZWxzO1wiOlwi4oqnXCIsXCImbW9wZjtcIjpcIvCdlZ5cIixcIiZtcDtcIjpcIuKIk1wiLFwiJm1zY3I7XCI6XCLwnZOCXCIsXCImbXN0cG9zO1wiOlwi4oi+XCIsXCImbXU7XCI6XCLOvFwiLFwiJm11bHRpbWFwO1wiOlwi4oq4XCIsXCImbXVtYXA7XCI6XCLiirhcIixcIiZuR2c7XCI6XCLii5nMuFwiLFwiJm5HdDtcIjpcIuKJq+KDklwiLFwiJm5HdHY7XCI6XCLiiavMuFwiLFwiJm5MZWZ0YXJyb3c7XCI6XCLih41cIixcIiZuTGVmdHJpZ2h0YXJyb3c7XCI6XCLih45cIixcIiZuTGw7XCI6XCLii5jMuFwiLFwiJm5MdDtcIjpcIuKJquKDklwiLFwiJm5MdHY7XCI6XCLiiarMuFwiLFwiJm5SaWdodGFycm93O1wiOlwi4oePXCIsXCImblZEYXNoO1wiOlwi4oqvXCIsXCImblZkYXNoO1wiOlwi4oquXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZuYWN1dGU7XCI6XCLFhFwiLFwiJm5hbmc7XCI6XCLiiKDig5JcIixcIiZuYXA7XCI6XCLiiYlcIixcIiZuYXBFO1wiOlwi4qmwzLhcIixcIiZuYXBpZDtcIjpcIuKJi8y4XCIsXCImbmFwb3M7XCI6XCLFiVwiLFwiJm5hcHByb3g7XCI6XCLiiYlcIixcIiZuYXR1cjtcIjpcIuKZrlwiLFwiJm5hdHVyYWw7XCI6XCLima5cIixcIiZuYXR1cmFscztcIjpcIuKElVwiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImbmJ1bXA7XCI6XCLiiY7MuFwiLFwiJm5idW1wZTtcIjpcIuKJj8y4XCIsXCImbmNhcDtcIjpcIuKpg1wiLFwiJm5jYXJvbjtcIjpcIsWIXCIsXCImbmNlZGlsO1wiOlwixYZcIixcIiZuY29uZztcIjpcIuKJh1wiLFwiJm5jb25nZG90O1wiOlwi4qmtzLhcIixcIiZuY3VwO1wiOlwi4qmCXCIsXCImbmN5O1wiOlwi0L1cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm5lO1wiOlwi4omgXCIsXCImbmVBcnI7XCI6XCLih5dcIixcIiZuZWFyaGs7XCI6XCLipKRcIixcIiZuZWFycjtcIjpcIuKGl1wiLFwiJm5lYXJyb3c7XCI6XCLihpdcIixcIiZuZWRvdDtcIjpcIuKJkMy4XCIsXCImbmVxdWl2O1wiOlwi4omiXCIsXCImbmVzZWFyO1wiOlwi4qSoXCIsXCImbmVzaW07XCI6XCLiiYLMuFwiLFwiJm5leGlzdDtcIjpcIuKIhFwiLFwiJm5leGlzdHM7XCI6XCLiiIRcIixcIiZuZnI7XCI6XCLwnZSrXCIsXCImbmdFO1wiOlwi4omnzLhcIixcIiZuZ2U7XCI6XCLiibFcIixcIiZuZ2VxO1wiOlwi4omxXCIsXCImbmdlcXE7XCI6XCLiiafMuFwiLFwiJm5nZXFzbGFudDtcIjpcIuKpvsy4XCIsXCImbmdlcztcIjpcIuKpvsy4XCIsXCImbmdzaW07XCI6XCLiibVcIixcIiZuZ3Q7XCI6XCLiia9cIixcIiZuZ3RyO1wiOlwi4omvXCIsXCImbmhBcnI7XCI6XCLih45cIixcIiZuaGFycjtcIjpcIuKGrlwiLFwiJm5ocGFyO1wiOlwi4quyXCIsXCImbmk7XCI6XCLiiItcIixcIiZuaXM7XCI6XCLii7xcIixcIiZuaXNkO1wiOlwi4ou6XCIsXCImbml2O1wiOlwi4oiLXCIsXCImbmpjeTtcIjpcItGaXCIsXCImbmxBcnI7XCI6XCLih41cIixcIiZubEU7XCI6XCLiiabMuFwiLFwiJm5sYXJyO1wiOlwi4oaaXCIsXCImbmxkcjtcIjpcIuKApVwiLFwiJm5sZTtcIjpcIuKJsFwiLFwiJm5sZWZ0YXJyb3c7XCI6XCLihppcIixcIiZubGVmdHJpZ2h0YXJyb3c7XCI6XCLihq5cIixcIiZubGVxO1wiOlwi4omwXCIsXCImbmxlcXE7XCI6XCLiiabMuFwiLFwiJm5sZXFzbGFudDtcIjpcIuKpvcy4XCIsXCImbmxlcztcIjpcIuKpvcy4XCIsXCImbmxlc3M7XCI6XCLiia5cIixcIiZubHNpbTtcIjpcIuKJtFwiLFwiJm5sdDtcIjpcIuKJrlwiLFwiJm5sdHJpO1wiOlwi4ouqXCIsXCImbmx0cmllO1wiOlwi4ousXCIsXCImbm1pZDtcIjpcIuKIpFwiLFwiJm5vcGY7XCI6XCLwnZWfXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZub3RpbkU7XCI6XCLii7nMuFwiLFwiJm5vdGluZG90O1wiOlwi4ou1zLhcIixcIiZub3RpbnZhO1wiOlwi4oiJXCIsXCImbm90aW52YjtcIjpcIuKLt1wiLFwiJm5vdGludmM7XCI6XCLii7ZcIixcIiZub3RuaTtcIjpcIuKIjFwiLFwiJm5vdG5pdmE7XCI6XCLiiIxcIixcIiZub3RuaXZiO1wiOlwi4ou+XCIsXCImbm90bml2YztcIjpcIuKLvVwiLFwiJm5wYXI7XCI6XCLiiKZcIixcIiZucGFyYWxsZWw7XCI6XCLiiKZcIixcIiZucGFyc2w7XCI6XCLiq73ig6VcIixcIiZucGFydDtcIjpcIuKIgsy4XCIsXCImbnBvbGludDtcIjpcIuKolFwiLFwiJm5wcjtcIjpcIuKKgFwiLFwiJm5wcmN1ZTtcIjpcIuKLoFwiLFwiJm5wcmU7XCI6XCLiqq/MuFwiLFwiJm5wcmVjO1wiOlwi4oqAXCIsXCImbnByZWNlcTtcIjpcIuKqr8y4XCIsXCImbnJBcnI7XCI6XCLih49cIixcIiZucmFycjtcIjpcIuKGm1wiLFwiJm5yYXJyYztcIjpcIuKks8y4XCIsXCImbnJhcnJ3O1wiOlwi4oadzLhcIixcIiZucmlnaHRhcnJvdztcIjpcIuKGm1wiLFwiJm5ydHJpO1wiOlwi4ourXCIsXCImbnJ0cmllO1wiOlwi4outXCIsXCImbnNjO1wiOlwi4oqBXCIsXCImbnNjY3VlO1wiOlwi4ouhXCIsXCImbnNjZTtcIjpcIuKqsMy4XCIsXCImbnNjcjtcIjpcIvCdk4NcIixcIiZuc2hvcnRtaWQ7XCI6XCLiiKRcIixcIiZuc2hvcnRwYXJhbGxlbDtcIjpcIuKIplwiLFwiJm5zaW07XCI6XCLiiYFcIixcIiZuc2ltZTtcIjpcIuKJhFwiLFwiJm5zaW1lcTtcIjpcIuKJhFwiLFwiJm5zbWlkO1wiOlwi4oikXCIsXCImbnNwYXI7XCI6XCLiiKZcIixcIiZuc3FzdWJlO1wiOlwi4ouiXCIsXCImbnNxc3VwZTtcIjpcIuKLo1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZuc3ViRTtcIjpcIuKrhcy4XCIsXCImbnN1YmU7XCI6XCLiiohcIixcIiZuc3Vic2V0O1wiOlwi4oqC4oOSXCIsXCImbnN1YnNldGVxO1wiOlwi4oqIXCIsXCImbnN1YnNldGVxcTtcIjpcIuKrhcy4XCIsXCImbnN1Y2M7XCI6XCLiioFcIixcIiZuc3VjY2VxO1wiOlwi4qqwzLhcIixcIiZuc3VwO1wiOlwi4oqFXCIsXCImbnN1cEU7XCI6XCLiq4bMuFwiLFwiJm5zdXBlO1wiOlwi4oqJXCIsXCImbnN1cHNldDtcIjpcIuKKg+KDklwiLFwiJm5zdXBzZXRlcTtcIjpcIuKKiVwiLFwiJm5zdXBzZXRlcXE7XCI6XCLiq4bMuFwiLFwiJm50Z2w7XCI6XCLiiblcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZudGxnO1wiOlwi4om4XCIsXCImbnRyaWFuZ2xlbGVmdDtcIjpcIuKLqlwiLFwiJm50cmlhbmdsZWxlZnRlcTtcIjpcIuKLrFwiLFwiJm50cmlhbmdsZXJpZ2h0O1wiOlwi4ourXCIsXCImbnRyaWFuZ2xlcmlnaHRlcTtcIjpcIuKLrVwiLFwiJm51O1wiOlwizr1cIixcIiZudW07XCI6XCIjXCIsXCImbnVtZXJvO1wiOlwi4oSWXCIsXCImbnVtc3A7XCI6XCLigIdcIixcIiZudkRhc2g7XCI6XCLiiq1cIixcIiZudkhhcnI7XCI6XCLipIRcIixcIiZudmFwO1wiOlwi4omN4oOSXCIsXCImbnZkYXNoO1wiOlwi4oqsXCIsXCImbnZnZTtcIjpcIuKJpeKDklwiLFwiJm52Z3Q7XCI6XCI+4oOSXCIsXCImbnZpbmZpbjtcIjpcIuKnnlwiLFwiJm52bEFycjtcIjpcIuKkglwiLFwiJm52bGU7XCI6XCLiiaTig5JcIixcIiZudmx0O1wiOlwiPOKDklwiLFwiJm52bHRyaWU7XCI6XCLiirTig5JcIixcIiZudnJBcnI7XCI6XCLipINcIixcIiZudnJ0cmllO1wiOlwi4oq14oOSXCIsXCImbnZzaW07XCI6XCLiiLzig5JcIixcIiZud0FycjtcIjpcIuKHllwiLFwiJm53YXJoaztcIjpcIuKko1wiLFwiJm53YXJyO1wiOlwi4oaWXCIsXCImbndhcnJvdztcIjpcIuKGllwiLFwiJm53bmVhcjtcIjpcIuKkp1wiLFwiJm9TO1wiOlwi4pOIXCIsXCImb2FjdXRlXCI6XCLDs1wiLFwiJm9hY3V0ZTtcIjpcIsOzXCIsXCImb2FzdDtcIjpcIuKKm1wiLFwiJm9jaXI7XCI6XCLiippcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb2N5O1wiOlwi0L5cIixcIiZvZGFzaDtcIjpcIuKKnVwiLFwiJm9kYmxhYztcIjpcIsWRXCIsXCImb2RpdjtcIjpcIuKouFwiLFwiJm9kb3Q7XCI6XCLiiplcIixcIiZvZHNvbGQ7XCI6XCLiprxcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImb2ZjaXI7XCI6XCLipr9cIixcIiZvZnI7XCI6XCLwnZSsXCIsXCImb2dvbjtcIjpcIsubXCIsXCImb2dyYXZlXCI6XCLDslwiLFwiJm9ncmF2ZTtcIjpcIsOyXCIsXCImb2d0O1wiOlwi4qeBXCIsXCImb2hiYXI7XCI6XCLiprVcIixcIiZvaG07XCI6XCLOqVwiLFwiJm9pbnQ7XCI6XCLiiK5cIixcIiZvbGFycjtcIjpcIuKGulwiLFwiJm9sY2lyO1wiOlwi4qa+XCIsXCImb2xjcm9zcztcIjpcIuKmu1wiLFwiJm9saW5lO1wiOlwi4oC+XCIsXCImb2x0O1wiOlwi4qeAXCIsXCImb21hY3I7XCI6XCLFjVwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZvbWlkO1wiOlwi4qa2XCIsXCImb21pbnVzO1wiOlwi4oqWXCIsXCImb29wZjtcIjpcIvCdlaBcIixcIiZvcGFyO1wiOlwi4qa3XCIsXCImb3BlcnA7XCI6XCLiprlcIixcIiZvcGx1cztcIjpcIuKKlVwiLFwiJm9yO1wiOlwi4oioXCIsXCImb3JhcnI7XCI6XCLihrtcIixcIiZvcmQ7XCI6XCLiqZ1cIixcIiZvcmRlcjtcIjpcIuKEtFwiLFwiJm9yZGVyb2Y7XCI6XCLihLRcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImb3JpZ29mO1wiOlwi4oq2XCIsXCImb3JvcjtcIjpcIuKpllwiLFwiJm9yc2xvcGU7XCI6XCLiqZdcIixcIiZvcnY7XCI6XCLiqZtcIixcIiZvc2NyO1wiOlwi4oS0XCIsXCImb3NsYXNoXCI6XCLDuFwiLFwiJm9zbGFzaDtcIjpcIsO4XCIsXCImb3NvbDtcIjpcIuKKmFwiLFwiJm90aWxkZVwiOlwiw7VcIixcIiZvdGlsZGU7XCI6XCLDtVwiLFwiJm90aW1lcztcIjpcIuKKl1wiLFwiJm90aW1lc2FzO1wiOlwi4qi2XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZvdmJhcjtcIjpcIuKMvVwiLFwiJnBhcjtcIjpcIuKIpVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImcGFyYWxsZWw7XCI6XCLiiKVcIixcIiZwYXJzaW07XCI6XCLiq7NcIixcIiZwYXJzbDtcIjpcIuKrvVwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZwY3k7XCI6XCLQv1wiLFwiJnBlcmNudDtcIjpcIiVcIixcIiZwZXJpb2Q7XCI6XCIuXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnBlcnRlbms7XCI6XCLigLFcIixcIiZwZnI7XCI6XCLwnZStXCIsXCImcGhpO1wiOlwiz4ZcIixcIiZwaGl2O1wiOlwiz5VcIixcIiZwaG1tYXQ7XCI6XCLihLNcIixcIiZwaG9uZTtcIjpcIuKYjlwiLFwiJnBpO1wiOlwiz4BcIixcIiZwaXRjaGZvcms7XCI6XCLii5RcIixcIiZwaXY7XCI6XCLPllwiLFwiJnBsYW5jaztcIjpcIuKEj1wiLFwiJnBsYW5ja2g7XCI6XCLihI5cIixcIiZwbGFua3Y7XCI6XCLihI9cIixcIiZwbHVzO1wiOlwiK1wiLFwiJnBsdXNhY2lyO1wiOlwi4qijXCIsXCImcGx1c2I7XCI6XCLiip5cIixcIiZwbHVzY2lyO1wiOlwi4qiiXCIsXCImcGx1c2RvO1wiOlwi4oiUXCIsXCImcGx1c2R1O1wiOlwi4qilXCIsXCImcGx1c2U7XCI6XCLiqbJcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZwbHVzc2ltO1wiOlwi4qimXCIsXCImcGx1c3R3bztcIjpcIuKop1wiLFwiJnBtO1wiOlwiwrFcIixcIiZwb2ludGludDtcIjpcIuKolVwiLFwiJnBvcGY7XCI6XCLwnZWhXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJnByO1wiOlwi4om6XCIsXCImcHJFO1wiOlwi4qqzXCIsXCImcHJhcDtcIjpcIuKqt1wiLFwiJnByY3VlO1wiOlwi4om8XCIsXCImcHJlO1wiOlwi4qqvXCIsXCImcHJlYztcIjpcIuKJulwiLFwiJnByZWNhcHByb3g7XCI6XCLiqrdcIixcIiZwcmVjY3VybHllcTtcIjpcIuKJvFwiLFwiJnByZWNlcTtcIjpcIuKqr1wiLFwiJnByZWNuYXBwcm94O1wiOlwi4qq5XCIsXCImcHJlY25lcXE7XCI6XCLiqrVcIixcIiZwcmVjbnNpbTtcIjpcIuKLqFwiLFwiJnByZWNzaW07XCI6XCLiib5cIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJnByaW1lcztcIjpcIuKEmVwiLFwiJnBybkU7XCI6XCLiqrVcIixcIiZwcm5hcDtcIjpcIuKquVwiLFwiJnBybnNpbTtcIjpcIuKLqFwiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZwcm9mYWxhcjtcIjpcIuKMrlwiLFwiJnByb2ZsaW5lO1wiOlwi4oySXCIsXCImcHJvZnN1cmY7XCI6XCLijJNcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImcHJvcHRvO1wiOlwi4oidXCIsXCImcHJzaW07XCI6XCLiib5cIixcIiZwcnVyZWw7XCI6XCLiirBcIixcIiZwc2NyO1wiOlwi8J2ThVwiLFwiJnBzaTtcIjpcIs+IXCIsXCImcHVuY3NwO1wiOlwi4oCIXCIsXCImcWZyO1wiOlwi8J2UrlwiLFwiJnFpbnQ7XCI6XCLiqIxcIixcIiZxb3BmO1wiOlwi8J2VolwiLFwiJnFwcmltZTtcIjpcIuKBl1wiLFwiJnFzY3I7XCI6XCLwnZOGXCIsXCImcXVhdGVybmlvbnM7XCI6XCLihI1cIixcIiZxdWF0aW50O1wiOlwi4qiWXCIsXCImcXVlc3Q7XCI6XCI/XCIsXCImcXVlc3RlcTtcIjpcIuKJn1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZyQWFycjtcIjpcIuKHm1wiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZyQXRhaWw7XCI6XCLipJxcIixcIiZyQmFycjtcIjpcIuKkj1wiLFwiJnJIYXI7XCI6XCLipaRcIixcIiZyYWNlO1wiOlwi4oi9zLFcIixcIiZyYWN1dGU7XCI6XCLFlVwiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcmFlbXB0eXY7XCI6XCLiprNcIixcIiZyYW5nO1wiOlwi4p+pXCIsXCImcmFuZ2Q7XCI6XCLippJcIixcIiZyYW5nZTtcIjpcIuKmpVwiLFwiJnJhbmdsZTtcIjpcIuKfqVwiLFwiJnJhcXVvXCI6XCLCu1wiLFwiJnJhcXVvO1wiOlwiwrtcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImcmFycmFwO1wiOlwi4qW1XCIsXCImcmFycmI7XCI6XCLih6VcIixcIiZyYXJyYmZzO1wiOlwi4qSgXCIsXCImcmFycmM7XCI6XCLipLNcIixcIiZyYXJyZnM7XCI6XCLipJ5cIixcIiZyYXJyaGs7XCI6XCLihqpcIixcIiZyYXJybHA7XCI6XCLihqxcIixcIiZyYXJycGw7XCI6XCLipYVcIixcIiZyYXJyc2ltO1wiOlwi4qW0XCIsXCImcmFycnRsO1wiOlwi4oajXCIsXCImcmFycnc7XCI6XCLihp1cIixcIiZyYXRhaWw7XCI6XCLipJpcIixcIiZyYXRpbztcIjpcIuKItlwiLFwiJnJhdGlvbmFscztcIjpcIuKEmlwiLFwiJnJiYXJyO1wiOlwi4qSNXCIsXCImcmJicms7XCI6XCLinbNcIixcIiZyYnJhY2U7XCI6XCJ9XCIsXCImcmJyYWNrO1wiOlwiXVwiLFwiJnJicmtlO1wiOlwi4qaMXCIsXCImcmJya3NsZDtcIjpcIuKmjlwiLFwiJnJicmtzbHU7XCI6XCLippBcIixcIiZyY2Fyb247XCI6XCLFmVwiLFwiJnJjZWRpbDtcIjpcIsWXXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZyY3ViO1wiOlwifVwiLFwiJnJjeTtcIjpcItGAXCIsXCImcmRjYTtcIjpcIuKkt1wiLFwiJnJkbGRoYXI7XCI6XCLipalcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJnJkcXVvcjtcIjpcIuKAnVwiLFwiJnJkc2g7XCI6XCLihrNcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImcmVhbGluZTtcIjpcIuKEm1wiLFwiJnJlYWxwYXJ0O1wiOlwi4oScXCIsXCImcmVhbHM7XCI6XCLihJ1cIixcIiZyZWN0O1wiOlwi4patXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImcmZpc2h0O1wiOlwi4qW9XCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImcmZyO1wiOlwi8J2Ur1wiLFwiJnJoYXJkO1wiOlwi4oeBXCIsXCImcmhhcnU7XCI6XCLih4BcIixcIiZyaGFydWw7XCI6XCLipaxcIixcIiZyaG87XCI6XCLPgVwiLFwiJnJob3Y7XCI6XCLPsVwiLFwiJnJpZ2h0YXJyb3c7XCI6XCLihpJcIixcIiZyaWdodGFycm93dGFpbDtcIjpcIuKGo1wiLFwiJnJpZ2h0aGFycG9vbmRvd247XCI6XCLih4FcIixcIiZyaWdodGhhcnBvb251cDtcIjpcIuKHgFwiLFwiJnJpZ2h0bGVmdGFycm93cztcIjpcIuKHhFwiLFwiJnJpZ2h0bGVmdGhhcnBvb25zO1wiOlwi4oeMXCIsXCImcmlnaHRyaWdodGFycm93cztcIjpcIuKHiVwiLFwiJnJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGnVwiLFwiJnJpZ2h0dGhyZWV0aW1lcztcIjpcIuKLjFwiLFwiJnJpbmc7XCI6XCLLmlwiLFwiJnJpc2luZ2RvdHNlcTtcIjpcIuKJk1wiLFwiJnJsYXJyO1wiOlwi4oeEXCIsXCImcmxoYXI7XCI6XCLih4xcIixcIiZybG07XCI6XCLigI9cIixcIiZybW91c3Q7XCI6XCLijrFcIixcIiZybW91c3RhY2hlO1wiOlwi4o6xXCIsXCImcm5taWQ7XCI6XCLiq65cIixcIiZyb2FuZztcIjpcIuKfrVwiLFwiJnJvYXJyO1wiOlwi4oe+XCIsXCImcm9icms7XCI6XCLin6dcIixcIiZyb3BhcjtcIjpcIuKmhlwiLFwiJnJvcGY7XCI6XCLwnZWjXCIsXCImcm9wbHVzO1wiOlwi4qiuXCIsXCImcm90aW1lcztcIjpcIuKotVwiLFwiJnJwYXI7XCI6XCIpXCIsXCImcnBhcmd0O1wiOlwi4qaUXCIsXCImcnBwb2xpbnQ7XCI6XCLiqJJcIixcIiZycmFycjtcIjpcIuKHiVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJnJzY3I7XCI6XCLwnZOHXCIsXCImcnNoO1wiOlwi4oaxXCIsXCImcnNxYjtcIjpcIl1cIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnJzcXVvcjtcIjpcIuKAmVwiLFwiJnJ0aHJlZTtcIjpcIuKLjFwiLFwiJnJ0aW1lcztcIjpcIuKLilwiLFwiJnJ0cmk7XCI6XCLilrlcIixcIiZydHJpZTtcIjpcIuKKtVwiLFwiJnJ0cmlmO1wiOlwi4pa4XCIsXCImcnRyaWx0cmk7XCI6XCLip45cIixcIiZydWx1aGFyO1wiOlwi4qWoXCIsXCImcng7XCI6XCLihJ5cIixcIiZzYWN1dGU7XCI6XCLFm1wiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImc2M7XCI6XCLiibtcIixcIiZzY0U7XCI6XCLiqrRcIixcIiZzY2FwO1wiOlwi4qq4XCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZzY2N1ZTtcIjpcIuKJvVwiLFwiJnNjZTtcIjpcIuKqsFwiLFwiJnNjZWRpbDtcIjpcIsWfXCIsXCImc2NpcmM7XCI6XCLFnVwiLFwiJnNjbkU7XCI6XCLiqrZcIixcIiZzY25hcDtcIjpcIuKqulwiLFwiJnNjbnNpbTtcIjpcIuKLqVwiLFwiJnNjcG9saW50O1wiOlwi4qiTXCIsXCImc2NzaW07XCI6XCLiib9cIixcIiZzY3k7XCI6XCLRgVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZzZG90YjtcIjpcIuKKoVwiLFwiJnNkb3RlO1wiOlwi4qmmXCIsXCImc2VBcnI7XCI6XCLih5hcIixcIiZzZWFyaGs7XCI6XCLipKVcIixcIiZzZWFycjtcIjpcIuKGmFwiLFwiJnNlYXJyb3c7XCI6XCLihphcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnNlbWk7XCI6XCI7XCIsXCImc2Vzd2FyO1wiOlwi4qSpXCIsXCImc2V0bWludXM7XCI6XCLiiJZcIixcIiZzZXRtbjtcIjpcIuKIllwiLFwiJnNleHQ7XCI6XCLinLZcIixcIiZzZnI7XCI6XCLwnZSwXCIsXCImc2Zyb3duO1wiOlwi4oyiXCIsXCImc2hhcnA7XCI6XCLima9cIixcIiZzaGNoY3k7XCI6XCLRiVwiLFwiJnNoY3k7XCI6XCLRiFwiLFwiJnNob3J0bWlkO1wiOlwi4oijXCIsXCImc2hvcnRwYXJhbGxlbDtcIjpcIuKIpVwiLFwiJnNoeVwiOlwiwq1cIixcIiZzaHk7XCI6XCLCrVwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hdjtcIjpcIs+CXCIsXCImc2ltO1wiOlwi4oi8XCIsXCImc2ltZG90O1wiOlwi4qmqXCIsXCImc2ltZTtcIjpcIuKJg1wiLFwiJnNpbWVxO1wiOlwi4omDXCIsXCImc2ltZztcIjpcIuKqnlwiLFwiJnNpbWdFO1wiOlwi4qqgXCIsXCImc2ltbDtcIjpcIuKqnVwiLFwiJnNpbWxFO1wiOlwi4qqfXCIsXCImc2ltbmU7XCI6XCLiiYZcIixcIiZzaW1wbHVzO1wiOlwi4qikXCIsXCImc2ltcmFycjtcIjpcIuKlslwiLFwiJnNsYXJyO1wiOlwi4oaQXCIsXCImc21hbGxzZXRtaW51cztcIjpcIuKIllwiLFwiJnNtYXNocDtcIjpcIuKos1wiLFwiJnNtZXBhcnNsO1wiOlwi4qekXCIsXCImc21pZDtcIjpcIuKIo1wiLFwiJnNtaWxlO1wiOlwi4oyjXCIsXCImc210O1wiOlwi4qqqXCIsXCImc210ZTtcIjpcIuKqrFwiLFwiJnNtdGVzO1wiOlwi4qqs77iAXCIsXCImc29mdGN5O1wiOlwi0YxcIixcIiZzb2w7XCI6XCIvXCIsXCImc29sYjtcIjpcIuKnhFwiLFwiJnNvbGJhcjtcIjpcIuKMv1wiLFwiJnNvcGY7XCI6XCLwnZWkXCIsXCImc3BhZGVzO1wiOlwi4pmgXCIsXCImc3BhZGVzdWl0O1wiOlwi4pmgXCIsXCImc3BhcjtcIjpcIuKIpVwiLFwiJnNxY2FwO1wiOlwi4oqTXCIsXCImc3FjYXBzO1wiOlwi4oqT77iAXCIsXCImc3FjdXA7XCI6XCLiipRcIixcIiZzcWN1cHM7XCI6XCLiipTvuIBcIixcIiZzcXN1YjtcIjpcIuKKj1wiLFwiJnNxc3ViZTtcIjpcIuKKkVwiLFwiJnNxc3Vic2V0O1wiOlwi4oqPXCIsXCImc3FzdWJzZXRlcTtcIjpcIuKKkVwiLFwiJnNxc3VwO1wiOlwi4oqQXCIsXCImc3FzdXBlO1wiOlwi4oqSXCIsXCImc3FzdXBzZXQ7XCI6XCLiipBcIixcIiZzcXN1cHNldGVxO1wiOlwi4oqSXCIsXCImc3F1O1wiOlwi4pahXCIsXCImc3F1YXJlO1wiOlwi4pahXCIsXCImc3F1YXJmO1wiOlwi4paqXCIsXCImc3F1ZjtcIjpcIuKWqlwiLFwiJnNyYXJyO1wiOlwi4oaSXCIsXCImc3NjcjtcIjpcIvCdk4hcIixcIiZzc2V0bW47XCI6XCLiiJZcIixcIiZzc21pbGU7XCI6XCLijKNcIixcIiZzc3RhcmY7XCI6XCLii4ZcIixcIiZzdGFyO1wiOlwi4piGXCIsXCImc3RhcmY7XCI6XCLimIVcIixcIiZzdHJhaWdodGVwc2lsb247XCI6XCLPtVwiLFwiJnN0cmFpZ2h0cGhpO1wiOlwiz5VcIixcIiZzdHJucztcIjpcIsKvXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3ViRTtcIjpcIuKrhVwiLFwiJnN1YmRvdDtcIjpcIuKqvVwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdWJlZG90O1wiOlwi4quDXCIsXCImc3VibXVsdDtcIjpcIuKrgVwiLFwiJnN1Ym5FO1wiOlwi4quLXCIsXCImc3VibmU7XCI6XCLiiopcIixcIiZzdWJwbHVzO1wiOlwi4qq/XCIsXCImc3VicmFycjtcIjpcIuKluVwiLFwiJnN1YnNldDtcIjpcIuKKglwiLFwiJnN1YnNldGVxO1wiOlwi4oqGXCIsXCImc3Vic2V0ZXFxO1wiOlwi4quFXCIsXCImc3Vic2V0bmVxO1wiOlwi4oqKXCIsXCImc3Vic2V0bmVxcTtcIjpcIuKri1wiLFwiJnN1YnNpbTtcIjpcIuKrh1wiLFwiJnN1YnN1YjtcIjpcIuKrlVwiLFwiJnN1YnN1cDtcIjpcIuKrk1wiLFwiJnN1Y2M7XCI6XCLiibtcIixcIiZzdWNjYXBwcm94O1wiOlwi4qq4XCIsXCImc3VjY2N1cmx5ZXE7XCI6XCLiib1cIixcIiZzdWNjZXE7XCI6XCLiqrBcIixcIiZzdWNjbmFwcHJveDtcIjpcIuKqulwiLFwiJnN1Y2NuZXFxO1wiOlwi4qq2XCIsXCImc3VjY25zaW07XCI6XCLii6lcIixcIiZzdWNjc2ltO1wiOlwi4om/XCIsXCImc3VtO1wiOlwi4oiRXCIsXCImc3VuZztcIjpcIuKZqlwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImc3VwMlwiOlwiwrJcIixcIiZzdXAyO1wiOlwiwrJcIixcIiZzdXAzXCI6XCLCs1wiLFwiJnN1cDM7XCI6XCLCs1wiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJnN1cEU7XCI6XCLiq4ZcIixcIiZzdXBkb3Q7XCI6XCLiqr5cIixcIiZzdXBkc3ViO1wiOlwi4quYXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJnN1cGVkb3Q7XCI6XCLiq4RcIixcIiZzdXBoc29sO1wiOlwi4p+JXCIsXCImc3VwaHN1YjtcIjpcIuKrl1wiLFwiJnN1cGxhcnI7XCI6XCLipbtcIixcIiZzdXBtdWx0O1wiOlwi4quCXCIsXCImc3VwbkU7XCI6XCLiq4xcIixcIiZzdXBuZTtcIjpcIuKKi1wiLFwiJnN1cHBsdXM7XCI6XCLiq4BcIixcIiZzdXBzZXQ7XCI6XCLiioNcIixcIiZzdXBzZXRlcTtcIjpcIuKKh1wiLFwiJnN1cHNldGVxcTtcIjpcIuKrhlwiLFwiJnN1cHNldG5lcTtcIjpcIuKKi1wiLFwiJnN1cHNldG5lcXE7XCI6XCLiq4xcIixcIiZzdXBzaW07XCI6XCLiq4hcIixcIiZzdXBzdWI7XCI6XCLiq5RcIixcIiZzdXBzdXA7XCI6XCLiq5ZcIixcIiZzd0FycjtcIjpcIuKHmVwiLFwiJnN3YXJoaztcIjpcIuKkplwiLFwiJnN3YXJyO1wiOlwi4oaZXCIsXCImc3dhcnJvdztcIjpcIuKGmVwiLFwiJnN3bndhcjtcIjpcIuKkqlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZ0YXJnZXQ7XCI6XCLijJZcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnRicms7XCI6XCLijrRcIixcIiZ0Y2Fyb247XCI6XCLFpVwiLFwiJnRjZWRpbDtcIjpcIsWjXCIsXCImdGN5O1wiOlwi0YJcIixcIiZ0ZG90O1wiOlwi4oObXCIsXCImdGVscmVjO1wiOlwi4oyVXCIsXCImdGZyO1wiOlwi8J2UsVwiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdGhldGF2O1wiOlwiz5FcIixcIiZ0aGlja2FwcHJveDtcIjpcIuKJiFwiLFwiJnRoaWNrc2ltO1wiOlwi4oi8XCIsXCImdGhpbnNwO1wiOlwi4oCJXCIsXCImdGhrYXA7XCI6XCLiiYhcIixcIiZ0aGtzaW07XCI6XCLiiLxcIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImdGlsZGU7XCI6XCLLnFwiLFwiJnRpbWVzXCI6XCLDl1wiLFwiJnRpbWVzO1wiOlwiw5dcIixcIiZ0aW1lc2I7XCI6XCLiiqBcIixcIiZ0aW1lc2JhcjtcIjpcIuKosVwiLFwiJnRpbWVzZDtcIjpcIuKosFwiLFwiJnRpbnQ7XCI6XCLiiK1cIixcIiZ0b2VhO1wiOlwi4qSoXCIsXCImdG9wO1wiOlwi4oqkXCIsXCImdG9wYm90O1wiOlwi4oy2XCIsXCImdG9wY2lyO1wiOlwi4quxXCIsXCImdG9wZjtcIjpcIvCdlaVcIixcIiZ0b3Bmb3JrO1wiOlwi4quaXCIsXCImdG9zYTtcIjpcIuKkqVwiLFwiJnRwcmltZTtcIjpcIuKAtFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImdHJpYW5nbGU7XCI6XCLilrVcIixcIiZ0cmlhbmdsZWRvd247XCI6XCLilr9cIixcIiZ0cmlhbmdsZWxlZnQ7XCI6XCLil4NcIixcIiZ0cmlhbmdsZWxlZnRlcTtcIjpcIuKKtFwiLFwiJnRyaWFuZ2xlcTtcIjpcIuKJnFwiLFwiJnRyaWFuZ2xlcmlnaHQ7XCI6XCLilrlcIixcIiZ0cmlhbmdsZXJpZ2h0ZXE7XCI6XCLiirVcIixcIiZ0cmlkb3Q7XCI6XCLil6xcIixcIiZ0cmllO1wiOlwi4omcXCIsXCImdHJpbWludXM7XCI6XCLiqLpcIixcIiZ0cmlwbHVzO1wiOlwi4qi5XCIsXCImdHJpc2I7XCI6XCLip41cIixcIiZ0cml0aW1lO1wiOlwi4qi7XCIsXCImdHJwZXppdW07XCI6XCLij6JcIixcIiZ0c2NyO1wiOlwi8J2TiVwiLFwiJnRzY3k7XCI6XCLRhlwiLFwiJnRzaGN5O1wiOlwi0ZtcIixcIiZ0c3Ryb2s7XCI6XCLFp1wiLFwiJnR3aXh0O1wiOlwi4omsXCIsXCImdHdvaGVhZGxlZnRhcnJvdztcIjpcIuKGnlwiLFwiJnR3b2hlYWRyaWdodGFycm93O1wiOlwi4oagXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnVIYXI7XCI6XCLipaNcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImdWJyY3k7XCI6XCLRnlwiLFwiJnVicmV2ZTtcIjpcIsWtXCIsXCImdWNpcmNcIjpcIsO7XCIsXCImdWNpcmM7XCI6XCLDu1wiLFwiJnVjeTtcIjpcItGDXCIsXCImdWRhcnI7XCI6XCLih4VcIixcIiZ1ZGJsYWM7XCI6XCLFsVwiLFwiJnVkaGFyO1wiOlwi4qWuXCIsXCImdWZpc2h0O1wiOlwi4qW+XCIsXCImdWZyO1wiOlwi8J2UslwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVoYXJsO1wiOlwi4oa/XCIsXCImdWhhcnI7XCI6XCLihr5cIixcIiZ1aGJsaztcIjpcIuKWgFwiLFwiJnVsY29ybjtcIjpcIuKMnFwiLFwiJnVsY29ybmVyO1wiOlwi4oycXCIsXCImdWxjcm9wO1wiOlwi4oyPXCIsXCImdWx0cmk7XCI6XCLil7hcIixcIiZ1bWFjcjtcIjpcIsWrXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImdW9nb247XCI6XCLFs1wiLFwiJnVvcGY7XCI6XCLwnZWmXCIsXCImdXBhcnJvdztcIjpcIuKGkVwiLFwiJnVwZG93bmFycm93O1wiOlwi4oaVXCIsXCImdXBoYXJwb29ubGVmdDtcIjpcIuKGv1wiLFwiJnVwaGFycG9vbnJpZ2h0O1wiOlwi4oa+XCIsXCImdXBsdXM7XCI6XCLiio5cIixcIiZ1cHNpO1wiOlwiz4VcIixcIiZ1cHNpaDtcIjpcIs+SXCIsXCImdXBzaWxvbjtcIjpcIs+FXCIsXCImdXB1cGFycm93cztcIjpcIuKHiFwiLFwiJnVyY29ybjtcIjpcIuKMnVwiLFwiJnVyY29ybmVyO1wiOlwi4oydXCIsXCImdXJjcm9wO1wiOlwi4oyOXCIsXCImdXJpbmc7XCI6XCLFr1wiLFwiJnVydHJpO1wiOlwi4pe5XCIsXCImdXNjcjtcIjpcIvCdk4pcIixcIiZ1dGRvdDtcIjpcIuKLsFwiLFwiJnV0aWxkZTtcIjpcIsWpXCIsXCImdXRyaTtcIjpcIuKWtVwiLFwiJnV0cmlmO1wiOlwi4pa0XCIsXCImdXVhcnI7XCI6XCLih4hcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnV3YW5nbGU7XCI6XCLipqdcIixcIiZ2QXJyO1wiOlwi4oeVXCIsXCImdkJhcjtcIjpcIuKrqFwiLFwiJnZCYXJ2O1wiOlwi4qupXCIsXCImdkRhc2g7XCI6XCLiiqhcIixcIiZ2YW5ncnQ7XCI6XCLippxcIixcIiZ2YXJlcHNpbG9uO1wiOlwiz7VcIixcIiZ2YXJrYXBwYTtcIjpcIs+wXCIsXCImdmFybm90aGluZztcIjpcIuKIhVwiLFwiJnZhcnBoaTtcIjpcIs+VXCIsXCImdmFycGk7XCI6XCLPllwiLFwiJnZhcnByb3B0bztcIjpcIuKInVwiLFwiJnZhcnI7XCI6XCLihpVcIixcIiZ2YXJyaG87XCI6XCLPsVwiLFwiJnZhcnNpZ21hO1wiOlwiz4JcIixcIiZ2YXJzdWJzZXRuZXE7XCI6XCLiiorvuIBcIixcIiZ2YXJzdWJzZXRuZXFxO1wiOlwi4quL77iAXCIsXCImdmFyc3Vwc2V0bmVxO1wiOlwi4oqL77iAXCIsXCImdmFyc3Vwc2V0bmVxcTtcIjpcIuKrjO+4gFwiLFwiJnZhcnRoZXRhO1wiOlwiz5FcIixcIiZ2YXJ0cmlhbmdsZWxlZnQ7XCI6XCLiirJcIixcIiZ2YXJ0cmlhbmdsZXJpZ2h0O1wiOlwi4oqzXCIsXCImdmN5O1wiOlwi0LJcIixcIiZ2ZGFzaDtcIjpcIuKKolwiLFwiJnZlZTtcIjpcIuKIqFwiLFwiJnZlZWJhcjtcIjpcIuKKu1wiLFwiJnZlZWVxO1wiOlwi4omaXCIsXCImdmVsbGlwO1wiOlwi4ouuXCIsXCImdmVyYmFyO1wiOlwifFwiLFwiJnZlcnQ7XCI6XCJ8XCIsXCImdmZyO1wiOlwi8J2Us1wiLFwiJnZsdHJpO1wiOlwi4oqyXCIsXCImdm5zdWI7XCI6XCLiioLig5JcIixcIiZ2bnN1cDtcIjpcIuKKg+KDklwiLFwiJnZvcGY7XCI6XCLwnZWnXCIsXCImdnByb3A7XCI6XCLiiJ1cIixcIiZ2cnRyaTtcIjpcIuKKs1wiLFwiJnZzY3I7XCI6XCLwnZOLXCIsXCImdnN1Ym5FO1wiOlwi4quL77iAXCIsXCImdnN1Ym5lO1wiOlwi4oqK77iAXCIsXCImdnN1cG5FO1wiOlwi4quM77iAXCIsXCImdnN1cG5lO1wiOlwi4oqL77iAXCIsXCImdnppZ3phZztcIjpcIuKmmlwiLFwiJndjaXJjO1wiOlwixbVcIixcIiZ3ZWRiYXI7XCI6XCLiqZ9cIixcIiZ3ZWRnZTtcIjpcIuKIp1wiLFwiJndlZGdlcTtcIjpcIuKJmVwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJndmcjtcIjpcIvCdlLRcIixcIiZ3b3BmO1wiOlwi8J2VqFwiLFwiJndwO1wiOlwi4oSYXCIsXCImd3I7XCI6XCLiiYBcIixcIiZ3cmVhdGg7XCI6XCLiiYBcIixcIiZ3c2NyO1wiOlwi8J2TjFwiLFwiJnhjYXA7XCI6XCLii4JcIixcIiZ4Y2lyYztcIjpcIuKXr1wiLFwiJnhjdXA7XCI6XCLii4NcIixcIiZ4ZHRyaTtcIjpcIuKWvVwiLFwiJnhmcjtcIjpcIvCdlLVcIixcIiZ4aEFycjtcIjpcIuKfulwiLFwiJnhoYXJyO1wiOlwi4p+3XCIsXCImeGk7XCI6XCLOvlwiLFwiJnhsQXJyO1wiOlwi4p+4XCIsXCImeGxhcnI7XCI6XCLin7VcIixcIiZ4bWFwO1wiOlwi4p+8XCIsXCImeG5pcztcIjpcIuKLu1wiLFwiJnhvZG90O1wiOlwi4qiAXCIsXCImeG9wZjtcIjpcIvCdlalcIixcIiZ4b3BsdXM7XCI6XCLiqIFcIixcIiZ4b3RpbWU7XCI6XCLiqIJcIixcIiZ4ckFycjtcIjpcIuKfuVwiLFwiJnhyYXJyO1wiOlwi4p+2XCIsXCImeHNjcjtcIjpcIvCdk41cIixcIiZ4c3FjdXA7XCI6XCLiqIZcIixcIiZ4dXBsdXM7XCI6XCLiqIRcIixcIiZ4dXRyaTtcIjpcIuKWs1wiLFwiJnh2ZWU7XCI6XCLii4FcIixcIiZ4d2VkZ2U7XCI6XCLii4BcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ5YWN5O1wiOlwi0Y9cIixcIiZ5Y2lyYztcIjpcIsW3XCIsXCImeWN5O1wiOlwi0YtcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZ5ZnI7XCI6XCLwnZS2XCIsXCImeWljeTtcIjpcItGXXCIsXCImeW9wZjtcIjpcIvCdlapcIixcIiZ5c2NyO1wiOlwi8J2TjlwiLFwiJnl1Y3k7XCI6XCLRjlwiLFwiJnl1bWxcIjpcIsO/XCIsXCImeXVtbDtcIjpcIsO/XCIsXCImemFjdXRlO1wiOlwixbpcIixcIiZ6Y2Fyb247XCI6XCLFvlwiLFwiJnpjeTtcIjpcItC3XCIsXCImemRvdDtcIjpcIsW8XCIsXCImemVldHJmO1wiOlwi4oSoXCIsXCImemV0YTtcIjpcIs62XCIsXCImemZyO1wiOlwi8J2Ut1wiLFwiJnpoY3k7XCI6XCLQtlwiLFwiJnppZ3JhcnI7XCI6XCLih51cIixcIiZ6b3BmO1wiOlwi8J2Vq1wiLFwiJnpzY3I7XCI6XCLwnZOPXCIsXCImendqO1wiOlwi4oCNXCIsXCImenduajtcIjpcIuKAjFwifSxjaGFyYWN0ZXJzOntcIsOGXCI6XCImQUVsaWc7XCIsXCImXCI6XCImYW1wO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLEglwiOlwiJkFicmV2ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLQkFwiOlwiJkFjeTtcIixcIvCdlIRcIjpcIiZBZnI7XCIsXCLDgFwiOlwiJkFncmF2ZTtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLEgFwiOlwiJkFtYWNyO1wiLFwi4qmTXCI6XCImQW5kO1wiLFwixIRcIjpcIiZBb2dvbjtcIixcIvCdlLhcIjpcIiZBb3BmO1wiLFwi4oGhXCI6XCImYWY7XCIsXCLDhVwiOlwiJmFuZ3N0O1wiLFwi8J2SnFwiOlwiJkFzY3I7XCIsXCLiiZRcIjpcIiZjb2xvbmVxO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLiiJZcIjpcIiZzc2V0bW47XCIsXCLiq6dcIjpcIiZCYXJ2O1wiLFwi4oyGXCI6XCImZG91YmxlYmFyd2VkZ2U7XCIsXCLQkVwiOlwiJkJjeTtcIixcIuKItVwiOlwiJmJlY2F1c2U7XCIsXCLihKxcIjpcIiZiZXJub3U7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLwnZSFXCI6XCImQmZyO1wiLFwi8J2UuVwiOlwiJkJvcGY7XCIsXCLLmFwiOlwiJmJyZXZlO1wiLFwi4omOXCI6XCImYnVtcDtcIixcItCnXCI6XCImQ0hjeTtcIixcIsKpXCI6XCImY29weTtcIixcIsSGXCI6XCImQ2FjdXRlO1wiLFwi4ouSXCI6XCImQ2FwO1wiLFwi4oWFXCI6XCImREQ7XCIsXCLihK1cIjpcIiZDZnI7XCIsXCLEjFwiOlwiJkNjYXJvbjtcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwixIhcIjpcIiZDY2lyYztcIixcIuKIsFwiOlwiJkNjb25pbnQ7XCIsXCLEilwiOlwiJkNkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLOp1wiOlwiJkNoaTtcIixcIuKKmVwiOlwiJm9kb3Q7XCIsXCLiipZcIjpcIiZvbWludXM7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKIslwiOlwiJmN3Y29uaW50O1wiLFwi4oCdXCI6XCImcmRxdW9yO1wiLFwi4oCZXCI6XCImcnNxdW9yO1wiLFwi4oi3XCI6XCImUHJvcG9ydGlvbjtcIixcIuKptFwiOlwiJkNvbG9uZTtcIixcIuKJoVwiOlwiJmVxdWl2O1wiLFwi4oivXCI6XCImRG91YmxlQ29udG91ckludGVncmFsO1wiLFwi4oiuXCI6XCImb2ludDtcIixcIuKEglwiOlwiJmNvbXBsZXhlcztcIixcIuKIkFwiOlwiJmNvcHJvZDtcIixcIuKIs1wiOlwiJmF3Y29uaW50O1wiLFwi4qivXCI6XCImQ3Jvc3M7XCIsXCLwnZKeXCI6XCImQ3NjcjtcIixcIuKLk1wiOlwiJkN1cDtcIixcIuKJjVwiOlwiJmFzeW1wZXE7XCIsXCLipJFcIjpcIiZERG90cmFoZDtcIixcItCCXCI6XCImREpjeTtcIixcItCFXCI6XCImRFNjeTtcIixcItCPXCI6XCImRFpjeTtcIixcIuKAoVwiOlwiJmRkYWdnZXI7XCIsXCLihqFcIjpcIiZEYXJyO1wiLFwi4qukXCI6XCImRG91YmxlTGVmdFRlZTtcIixcIsSOXCI6XCImRGNhcm9uO1wiLFwi0JRcIjpcIiZEY3k7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIs6UXCI6XCImRGVsdGE7XCIsXCLwnZSHXCI6XCImRGZyO1wiLFwiwrRcIjpcIiZhY3V0ZTtcIixcIsuZXCI6XCImZG90O1wiLFwiy51cIjpcIiZkYmxhYztcIixcImBcIjpcIiZncmF2ZTtcIixcIsucXCI6XCImdGlsZGU7XCIsXCLii4RcIjpcIiZkaWFtb25kO1wiLFwi4oWGXCI6XCImZGQ7XCIsXCLwnZS7XCI6XCImRG9wZjtcIixcIsKoXCI6XCImdW1sO1wiLFwi4oOcXCI6XCImRG90RG90O1wiLFwi4omQXCI6XCImZXNkb3Q7XCIsXCLih5NcIjpcIiZkQXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHlFwiOlwiJmlmZjtcIixcIuKfuFwiOlwiJnhsQXJyO1wiLFwi4p+6XCI6XCImeGhBcnI7XCIsXCLin7lcIjpcIiZ4ckFycjtcIixcIuKHklwiOlwiJnJBcnI7XCIsXCLiiqhcIjpcIiZ2RGFzaDtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5VcIjpcIiZ2QXJyO1wiLFwi4oilXCI6XCImc3BhcjtcIixcIuKGk1wiOlwiJmRvd25hcnJvdztcIixcIuKkk1wiOlwiJkRvd25BcnJvd0JhcjtcIixcIuKHtVwiOlwiJmR1YXJyO1wiLFwizJFcIjpcIiZEb3duQnJldmU7XCIsXCLipZBcIjpcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiLFwi4qWeXCI6XCImRG93bkxlZnRUZWVWZWN0b3I7XCIsXCLihr1cIjpcIiZsaGFyZDtcIixcIuKlllwiOlwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiLFwi4qWfXCI6XCImRG93blJpZ2h0VGVlVmVjdG9yO1wiLFwi4oeBXCI6XCImcmlnaHRoYXJwb29uZG93bjtcIixcIuKll1wiOlwiJkRvd25SaWdodFZlY3RvckJhcjtcIixcIuKKpFwiOlwiJnRvcDtcIixcIuKGp1wiOlwiJm1hcHN0b2Rvd247XCIsXCLwnZKfXCI6XCImRHNjcjtcIixcIsSQXCI6XCImRHN0cm9rO1wiLFwixYpcIjpcIiZFTkc7XCIsXCLDkFwiOlwiJkVUSDtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwixJpcIjpcIiZFY2Fyb247XCIsXCLDilwiOlwiJkVjaXJjO1wiLFwi0K1cIjpcIiZFY3k7XCIsXCLEllwiOlwiJkVkb3Q7XCIsXCLwnZSIXCI6XCImRWZyO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLiiIhcIjpcIiZpc2ludjtcIixcIsSSXCI6XCImRW1hY3I7XCIsXCLil7tcIjpcIiZFbXB0eVNtYWxsU3F1YXJlO1wiLFwi4parXCI6XCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCIsXCLEmFwiOlwiJkVvZ29uO1wiLFwi8J2UvFwiOlwiJkVvcGY7XCIsXCLOlVwiOlwiJkVwc2lsb247XCIsXCLiqbVcIjpcIiZFcXVhbDtcIixcIuKJglwiOlwiJmVzaW07XCIsXCLih4xcIjpcIiZybGhhcjtcIixcIuKEsFwiOlwiJmV4cGVjdGF0aW9uO1wiLFwi4qmzXCI6XCImRXNpbTtcIixcIs6XXCI6XCImRXRhO1wiLFwiw4tcIjpcIiZFdW1sO1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLihYdcIjpcIiZleHBvbmVudGlhbGU7XCIsXCLQpFwiOlwiJkZjeTtcIixcIvCdlIlcIjpcIiZGZnI7XCIsXCLil7xcIjpcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIixcIuKWqlwiOlwiJnNxdWY7XCIsXCLwnZS9XCI6XCImRm9wZjtcIixcIuKIgFwiOlwiJmZvcmFsbDtcIixcIuKEsVwiOlwiJkZzY3I7XCIsXCLQg1wiOlwiJkdKY3k7XCIsXCI+XCI6XCImZ3Q7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwiz5xcIjpcIiZHYW1tYWQ7XCIsXCLEnlwiOlwiJkdicmV2ZTtcIixcIsSiXCI6XCImR2NlZGlsO1wiLFwixJxcIjpcIiZHY2lyYztcIixcItCTXCI6XCImR2N5O1wiLFwixKBcIjpcIiZHZG90O1wiLFwi8J2UilwiOlwiJkdmcjtcIixcIuKLmVwiOlwiJmdnZztcIixcIvCdlL5cIjpcIiZHb3BmO1wiLFwi4omlXCI6XCImZ2VxO1wiLFwi4oubXCI6XCImZ3RyZXFsZXNzO1wiLFwi4omnXCI6XCImZ2VxcTtcIixcIuKqolwiOlwiJkdyZWF0ZXJHcmVhdGVyO1wiLFwi4om3XCI6XCImZ3RybGVzcztcIixcIuKpvlwiOlwiJmdlcztcIixcIuKJs1wiOlwiJmd0cnNpbTtcIixcIvCdkqJcIjpcIiZHc2NyO1wiLFwi4omrXCI6XCImZ2c7XCIsXCLQqlwiOlwiJkhBUkRjeTtcIixcIsuHXCI6XCImY2Fyb247XCIsXCJeXCI6XCImSGF0O1wiLFwixKRcIjpcIiZIY2lyYztcIixcIuKEjFwiOlwiJlBvaW5jYXJlcGxhbmU7XCIsXCLihItcIjpcIiZoYW1pbHQ7XCIsXCLihI1cIjpcIiZxdWF0ZXJuaW9ucztcIixcIuKUgFwiOlwiJmJveGg7XCIsXCLEplwiOlwiJkhzdHJvaztcIixcIuKJj1wiOlwiJmJ1bXBlcTtcIixcItCVXCI6XCImSUVjeTtcIixcIsSyXCI6XCImSUpsaWc7XCIsXCLQgVwiOlwiJklPY3k7XCIsXCLDjVwiOlwiJklhY3V0ZTtcIixcIsOOXCI6XCImSWNpcmM7XCIsXCLQmFwiOlwiJkljeTtcIixcIsSwXCI6XCImSWRvdDtcIixcIuKEkVwiOlwiJmltYWdwYXJ0O1wiLFwiw4xcIjpcIiZJZ3JhdmU7XCIsXCLEqlwiOlwiJkltYWNyO1wiLFwi4oWIXCI6XCImaWk7XCIsXCLiiKxcIjpcIiZJbnQ7XCIsXCLiiKtcIjpcIiZpbnQ7XCIsXCLii4JcIjpcIiZ4Y2FwO1wiLFwi4oGjXCI6XCImaWM7XCIsXCLigaJcIjpcIiZpdDtcIixcIsSuXCI6XCImSW9nb247XCIsXCLwnZWAXCI6XCImSW9wZjtcIixcIs6ZXCI6XCImSW90YTtcIixcIuKEkFwiOlwiJmltYWdsaW5lO1wiLFwixKhcIjpcIiZJdGlsZGU7XCIsXCLQhlwiOlwiJkl1a2N5O1wiLFwiw49cIjpcIiZJdW1sO1wiLFwixLRcIjpcIiZKY2lyYztcIixcItCZXCI6XCImSmN5O1wiLFwi8J2UjVwiOlwiJkpmcjtcIixcIvCdlYFcIjpcIiZKb3BmO1wiLFwi8J2SpVwiOlwiJkpzY3I7XCIsXCLQiFwiOlwiJkpzZXJjeTtcIixcItCEXCI6XCImSnVrY3k7XCIsXCLQpVwiOlwiJktIY3k7XCIsXCLQjFwiOlwiJktKY3k7XCIsXCLOmlwiOlwiJkthcHBhO1wiLFwixLZcIjpcIiZLY2VkaWw7XCIsXCLQmlwiOlwiJktjeTtcIixcIvCdlI5cIjpcIiZLZnI7XCIsXCLwnZWCXCI6XCImS29wZjtcIixcIvCdkqZcIjpcIiZLc2NyO1wiLFwi0IlcIjpcIiZMSmN5O1wiLFwiPFwiOlwiJmx0O1wiLFwixLlcIjpcIiZMYWN1dGU7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIuKfqlwiOlwiJkxhbmc7XCIsXCLihJJcIjpcIiZsYWdyYW47XCIsXCLihp5cIjpcIiZ0d29oZWFkbGVmdGFycm93O1wiLFwixL1cIjpcIiZMY2Fyb247XCIsXCLEu1wiOlwiJkxjZWRpbDtcIixcItCbXCI6XCImTGN5O1wiLFwi4p+oXCI6XCImbGFuZ2xlO1wiLFwi4oaQXCI6XCImc2xhcnI7XCIsXCLih6RcIjpcIiZsYXJyYjtcIixcIuKHhlwiOlwiJmxyYXJyO1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLin6ZcIjpcIiZsb2JyaztcIixcIuKloVwiOlwiJkxlZnREb3duVGVlVmVjdG9yO1wiLFwi4oeDXCI6XCImZG93bmhhcnBvb25sZWZ0O1wiLFwi4qWZXCI6XCImTGVmdERvd25WZWN0b3JCYXI7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLihpRcIjpcIiZsZWZ0cmlnaHRhcnJvdztcIixcIuKljlwiOlwiJkxlZnRSaWdodFZlY3RvcjtcIixcIuKKo1wiOlwiJmRhc2h2O1wiLFwi4oakXCI6XCImbWFwc3RvbGVmdDtcIixcIuKlmlwiOlwiJkxlZnRUZWVWZWN0b3I7XCIsXCLiirJcIjpcIiZ2bHRyaTtcIixcIuKnj1wiOlwiJkxlZnRUcmlhbmdsZUJhcjtcIixcIuKKtFwiOlwiJnRyaWFuZ2xlbGVmdGVxO1wiLFwi4qWRXCI6XCImTGVmdFVwRG93blZlY3RvcjtcIixcIuKloFwiOlwiJkxlZnRVcFRlZVZlY3RvcjtcIixcIuKGv1wiOlwiJnVwaGFycG9vbmxlZnQ7XCIsXCLipZhcIjpcIiZMZWZ0VXBWZWN0b3JCYXI7XCIsXCLihrxcIjpcIiZsaGFydTtcIixcIuKlklwiOlwiJkxlZnRWZWN0b3JCYXI7XCIsXCLii5pcIjpcIiZsZXNzZXFndHI7XCIsXCLiiaZcIjpcIiZsZXFxO1wiLFwi4om2XCI6XCImbGc7XCIsXCLiqqFcIjpcIiZMZXNzTGVzcztcIixcIuKpvVwiOlwiJmxlcztcIixcIuKJslwiOlwiJmxzaW07XCIsXCLwnZSPXCI6XCImTGZyO1wiLFwi4ouYXCI6XCImTGw7XCIsXCLih5pcIjpcIiZsQWFycjtcIixcIsS/XCI6XCImTG1pZG90O1wiLFwi4p+1XCI6XCImeGxhcnI7XCIsXCLin7dcIjpcIiZ4aGFycjtcIixcIuKftlwiOlwiJnhyYXJyO1wiLFwi8J2Vg1wiOlwiJkxvcGY7XCIsXCLihplcIjpcIiZzd2Fycm93O1wiLFwi4oaYXCI6XCImc2VhcnJvdztcIixcIuKGsFwiOlwiJmxzaDtcIixcIsWBXCI6XCImTHN0cm9rO1wiLFwi4omqXCI6XCImbGw7XCIsXCLipIVcIjpcIiZNYXA7XCIsXCLQnFwiOlwiJk1jeTtcIixcIuKBn1wiOlwiJk1lZGl1bVNwYWNlO1wiLFwi4oSzXCI6XCImcGhtbWF0O1wiLFwi8J2UkFwiOlwiJk1mcjtcIixcIuKIk1wiOlwiJm1wO1wiLFwi8J2VhFwiOlwiJk1vcGY7XCIsXCLOnFwiOlwiJk11O1wiLFwi0IpcIjpcIiZOSmN5O1wiLFwixYNcIjpcIiZOYWN1dGU7XCIsXCLFh1wiOlwiJk5jYXJvbjtcIixcIsWFXCI6XCImTmNlZGlsO1wiLFwi0J1cIjpcIiZOY3k7XCIsXCLigItcIjpcIiZaZXJvV2lkdGhTcGFjZTtcIixcIlxcblwiOlwiJk5ld0xpbmU7XCIsXCLwnZSRXCI6XCImTmZyO1wiLFwi4oGgXCI6XCImTm9CcmVhaztcIixcIsKgXCI6XCImbmJzcDtcIixcIuKElVwiOlwiJm5hdHVyYWxzO1wiLFwi4qusXCI6XCImTm90O1wiLFwi4omiXCI6XCImbmVxdWl2O1wiLFwi4omtXCI6XCImTm90Q3VwQ2FwO1wiLFwi4oimXCI6XCImbnNwYXI7XCIsXCLiiIlcIjpcIiZub3RpbnZhO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiYLMuFwiOlwiJm5lc2ltO1wiLFwi4oiEXCI6XCImbmV4aXN0cztcIixcIuKJr1wiOlwiJm5ndHI7XCIsXCLiibFcIjpcIiZuZ2VxO1wiLFwi4omnzLhcIjpcIiZuZ2VxcTtcIixcIuKJq8y4XCI6XCImbkd0djtcIixcIuKJuVwiOlwiJm50Z2w7XCIsXCLiqb7MuFwiOlwiJm5nZXM7XCIsXCLiibVcIjpcIiZuZ3NpbTtcIixcIuKJjsy4XCI6XCImbmJ1bXA7XCIsXCLiiY/MuFwiOlwiJm5idW1wZTtcIixcIuKLqlwiOlwiJm50cmlhbmdsZWxlZnQ7XCIsXCLip4/MuFwiOlwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIixcIuKLrFwiOlwiJm50cmlhbmdsZWxlZnRlcTtcIixcIuKJrlwiOlwiJm5sdDtcIixcIuKJsFwiOlwiJm5sZXE7XCIsXCLiibhcIjpcIiZudGxnO1wiLFwi4omqzLhcIjpcIiZuTHR2O1wiLFwi4qm9zLhcIjpcIiZubGVzO1wiLFwi4om0XCI6XCImbmxzaW07XCIsXCLiqqLMuFwiOlwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiLFwi4qqhzLhcIjpcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIixcIuKKgFwiOlwiJm5wcmVjO1wiLFwi4qqvzLhcIjpcIiZucHJlY2VxO1wiLFwi4ougXCI6XCImbnByY3VlO1wiLFwi4oiMXCI6XCImbm90bml2YTtcIixcIuKLq1wiOlwiJm50cmlhbmdsZXJpZ2h0O1wiLFwi4qeQzLhcIjpcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4outXCI6XCImbnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKKj8y4XCI6XCImTm90U3F1YXJlU3Vic2V0O1wiLFwi4ouiXCI6XCImbnNxc3ViZTtcIixcIuKKkMy4XCI6XCImTm90U3F1YXJlU3VwZXJzZXQ7XCIsXCLii6NcIjpcIiZuc3FzdXBlO1wiLFwi4oqC4oOSXCI6XCImdm5zdWI7XCIsXCLiiohcIjpcIiZuc3Vic2V0ZXE7XCIsXCLiioFcIjpcIiZuc3VjYztcIixcIuKqsMy4XCI6XCImbnN1Y2NlcTtcIixcIuKLoVwiOlwiJm5zY2N1ZTtcIixcIuKJv8y4XCI6XCImTm90U3VjY2VlZHNUaWxkZTtcIixcIuKKg+KDklwiOlwiJnZuc3VwO1wiLFwi4oqJXCI6XCImbnN1cHNldGVxO1wiLFwi4omBXCI6XCImbnNpbTtcIixcIuKJhFwiOlwiJm5zaW1lcTtcIixcIuKJh1wiOlwiJm5jb25nO1wiLFwi4omJXCI6XCImbmFwcHJveDtcIixcIuKIpFwiOlwiJm5zbWlkO1wiLFwi8J2SqVwiOlwiJk5zY3I7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIs6dXCI6XCImTnU7XCIsXCLFklwiOlwiJk9FbGlnO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwi0J5cIjpcIiZPY3k7XCIsXCLFkFwiOlwiJk9kYmxhYztcIixcIvCdlJJcIjpcIiZPZnI7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsWMXCI6XCImT21hY3I7XCIsXCLOqVwiOlwiJm9obTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIvCdlYZcIjpcIiZPb3BmO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKplFwiOlwiJk9yO1wiLFwi8J2SqlwiOlwiJk9zY3I7XCIsXCLDmFwiOlwiJk9zbGFzaDtcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwi4qi3XCI6XCImT3RpbWVzO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwi4oC+XCI6XCImb2xpbmU7XCIsXCLij55cIjpcIiZPdmVyQnJhY2U7XCIsXCLijrRcIjpcIiZ0YnJrO1wiLFwi4o+cXCI6XCImT3ZlclBhcmVudGhlc2lzO1wiLFwi4oiCXCI6XCImcGFydDtcIixcItCfXCI6XCImUGN5O1wiLFwi8J2Uk1wiOlwiJlBmcjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqBcIjpcIiZQaTtcIixcIsKxXCI6XCImcG07XCIsXCLihJlcIjpcIiZwcmltZXM7XCIsXCLiqrtcIjpcIiZQcjtcIixcIuKJulwiOlwiJnByZWM7XCIsXCLiqq9cIjpcIiZwcmVjZXE7XCIsXCLiibxcIjpcIiZwcmVjY3VybHllcTtcIixcIuKJvlwiOlwiJnByc2ltO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oidXCI6XCImdnByb3A7XCIsXCLwnZKrXCI6XCImUHNjcjtcIixcIs6oXCI6XCImUHNpO1wiLCdcIic6XCImcXVvdDtcIixcIvCdlJRcIjpcIiZRZnI7XCIsXCLihJpcIjpcIiZyYXRpb25hbHM7XCIsXCLwnZKsXCI6XCImUXNjcjtcIixcIuKkkFwiOlwiJmRyYmthcm93O1wiLFwiwq5cIjpcIiZyZWc7XCIsXCLFlFwiOlwiJlJhY3V0ZTtcIixcIuKfq1wiOlwiJlJhbmc7XCIsXCLihqBcIjpcIiZ0d29oZWFkcmlnaHRhcnJvdztcIixcIuKkllwiOlwiJlJhcnJ0bDtcIixcIsWYXCI6XCImUmNhcm9uO1wiLFwixZZcIjpcIiZSY2VkaWw7XCIsXCLQoFwiOlwiJlJjeTtcIixcIuKEnFwiOlwiJnJlYWxwYXJ0O1wiLFwi4oiLXCI6XCImbml2O1wiLFwi4oeLXCI6XCImbHJoYXI7XCIsXCLipa9cIjpcIiZkdWhhcjtcIixcIs6hXCI6XCImUmhvO1wiLFwi4p+pXCI6XCImcmFuZ2xlO1wiLFwi4oaSXCI6XCImc3JhcnI7XCIsXCLih6VcIjpcIiZyYXJyYjtcIixcIuKHhFwiOlwiJnJsYXJyO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLin6dcIjpcIiZyb2JyaztcIixcIuKlnVwiOlwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIixcIuKHglwiOlwiJmRvd25oYXJwb29ucmlnaHQ7XCIsXCLipZVcIjpcIiZSaWdodERvd25WZWN0b3JCYXI7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLiiqJcIjpcIiZ2ZGFzaDtcIixcIuKGplwiOlwiJm1hcHN0bztcIixcIuKlm1wiOlwiJlJpZ2h0VGVlVmVjdG9yO1wiLFwi4oqzXCI6XCImdnJ0cmk7XCIsXCLip5BcIjpcIiZSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4oq1XCI6XCImdHJpYW5nbGVyaWdodGVxO1wiLFwi4qWPXCI6XCImUmlnaHRVcERvd25WZWN0b3I7XCIsXCLipZxcIjpcIiZSaWdodFVwVGVlVmVjdG9yO1wiLFwi4oa+XCI6XCImdXBoYXJwb29ucmlnaHQ7XCIsXCLipZRcIjpcIiZSaWdodFVwVmVjdG9yQmFyO1wiLFwi4oeAXCI6XCImcmlnaHRoYXJwb29udXA7XCIsXCLipZNcIjpcIiZSaWdodFZlY3RvckJhcjtcIixcIuKEnVwiOlwiJnJlYWxzO1wiLFwi4qWwXCI6XCImUm91bmRJbXBsaWVzO1wiLFwi4oebXCI6XCImckFhcnI7XCIsXCLihJtcIjpcIiZyZWFsaW5lO1wiLFwi4oaxXCI6XCImcnNoO1wiLFwi4qe0XCI6XCImUnVsZURlbGF5ZWQ7XCIsXCLQqVwiOlwiJlNIQ0hjeTtcIixcItCoXCI6XCImU0hjeTtcIixcItCsXCI6XCImU09GVGN5O1wiLFwixZpcIjpcIiZTYWN1dGU7XCIsXCLiqrxcIjpcIiZTYztcIixcIsWgXCI6XCImU2Nhcm9uO1wiLFwixZ5cIjpcIiZTY2VkaWw7XCIsXCLFnFwiOlwiJlNjaXJjO1wiLFwi0KFcIjpcIiZTY3k7XCIsXCLwnZSWXCI6XCImU2ZyO1wiLFwi4oaRXCI6XCImdXBhcnJvdztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLiiJhcIjpcIiZjb21wZm47XCIsXCLwnZWKXCI6XCImU29wZjtcIixcIuKImlwiOlwiJnJhZGljO1wiLFwi4pahXCI6XCImc3F1YXJlO1wiLFwi4oqTXCI6XCImc3FjYXA7XCIsXCLiio9cIjpcIiZzcXN1YnNldDtcIixcIuKKkVwiOlwiJnNxc3Vic2V0ZXE7XCIsXCLiipBcIjpcIiZzcXN1cHNldDtcIixcIuKKklwiOlwiJnNxc3Vwc2V0ZXE7XCIsXCLiipRcIjpcIiZzcWN1cDtcIixcIvCdkq5cIjpcIiZTc2NyO1wiLFwi4ouGXCI6XCImc3N0YXJmO1wiLFwi4ouQXCI6XCImU3Vic2V0O1wiLFwi4oqGXCI6XCImc3Vic2V0ZXE7XCIsXCLiibtcIjpcIiZzdWNjO1wiLFwi4qqwXCI6XCImc3VjY2VxO1wiLFwi4om9XCI6XCImc3VjY2N1cmx5ZXE7XCIsXCLiib9cIjpcIiZzdWNjc2ltO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4ouRXCI6XCImU3Vwc2V0O1wiLFwi4oqDXCI6XCImc3Vwc2V0O1wiLFwi4oqHXCI6XCImc3Vwc2V0ZXE7XCIsXCLDnlwiOlwiJlRIT1JOO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLQi1wiOlwiJlRTSGN5O1wiLFwi0KZcIjpcIiZUU2N5O1wiLFwiXFx0XCI6XCImVGFiO1wiLFwizqRcIjpcIiZUYXU7XCIsXCLFpFwiOlwiJlRjYXJvbjtcIixcIsWiXCI6XCImVGNlZGlsO1wiLFwi0KJcIjpcIiZUY3k7XCIsXCLwnZSXXCI6XCImVGZyO1wiLFwi4oi0XCI6XCImdGhlcmVmb3JlO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIuKBn+KAilwiOlwiJlRoaWNrU3BhY2U7XCIsXCLigIlcIjpcIiZ0aGluc3A7XCIsXCLiiLxcIjpcIiZ0aGtzaW07XCIsXCLiiYNcIjpcIiZzaW1lcTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZ0aGthcDtcIixcIvCdlYtcIjpcIiZUb3BmO1wiLFwi4oObXCI6XCImdGRvdDtcIixcIvCdkq9cIjpcIiZUc2NyO1wiLFwixaZcIjpcIiZUc3Ryb2s7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIuKGn1wiOlwiJlVhcnI7XCIsXCLipYlcIjpcIiZVYXJyb2NpcjtcIixcItCOXCI6XCImVWJyY3k7XCIsXCLFrFwiOlwiJlVicmV2ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLQo1wiOlwiJlVjeTtcIixcIsWwXCI6XCImVWRibGFjO1wiLFwi8J2UmFwiOlwiJlVmcjtcIixcIsOZXCI6XCImVWdyYXZlO1wiLFwixapcIjpcIiZVbWFjcjtcIixfOlwiJmxvd2JhcjtcIixcIuKPn1wiOlwiJlVuZGVyQnJhY2U7XCIsXCLijrVcIjpcIiZiYnJrO1wiLFwi4o+dXCI6XCImVW5kZXJQYXJlbnRoZXNpcztcIixcIuKLg1wiOlwiJnhjdXA7XCIsXCLiio5cIjpcIiZ1cGx1cztcIixcIsWyXCI6XCImVW9nb247XCIsXCLwnZWMXCI6XCImVW9wZjtcIixcIuKkklwiOlwiJlVwQXJyb3dCYXI7XCIsXCLih4VcIjpcIiZ1ZGFycjtcIixcIuKGlVwiOlwiJnZhcnI7XCIsXCLipa5cIjpcIiZ1ZGhhcjtcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLihqVcIjpcIiZtYXBzdG91cDtcIixcIuKGllwiOlwiJm53YXJyb3c7XCIsXCLihpdcIjpcIiZuZWFycm93O1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIsWuXCI6XCImVXJpbmc7XCIsXCLwnZKwXCI6XCImVXNjcjtcIixcIsWoXCI6XCImVXRpbGRlO1wiLFwiw5xcIjpcIiZVdW1sO1wiLFwi4oqrXCI6XCImVkRhc2g7XCIsXCLiq6tcIjpcIiZWYmFyO1wiLFwi0JJcIjpcIiZWY3k7XCIsXCLiiqlcIjpcIiZWZGFzaDtcIixcIuKrplwiOlwiJlZkYXNobDtcIixcIuKLgVwiOlwiJnh2ZWU7XCIsXCLigJZcIjpcIiZWZXJ0O1wiLFwi4oijXCI6XCImc21pZDtcIixcInxcIjpcIiZ2ZXJ0O1wiLFwi4p2YXCI6XCImVmVydGljYWxTZXBhcmF0b3I7XCIsXCLiiYBcIjpcIiZ3cmVhdGg7XCIsXCLigIpcIjpcIiZoYWlyc3A7XCIsXCLwnZSZXCI6XCImVmZyO1wiLFwi8J2VjVwiOlwiJlZvcGY7XCIsXCLwnZKxXCI6XCImVnNjcjtcIixcIuKKqlwiOlwiJlZ2ZGFzaDtcIixcIsW0XCI6XCImV2NpcmM7XCIsXCLii4BcIjpcIiZ4d2VkZ2U7XCIsXCLwnZSaXCI6XCImV2ZyO1wiLFwi8J2VjlwiOlwiJldvcGY7XCIsXCLwnZKyXCI6XCImV3NjcjtcIixcIvCdlJtcIjpcIiZYZnI7XCIsXCLOnlwiOlwiJlhpO1wiLFwi8J2Vj1wiOlwiJlhvcGY7XCIsXCLwnZKzXCI6XCImWHNjcjtcIixcItCvXCI6XCImWUFjeTtcIixcItCHXCI6XCImWUljeTtcIixcItCuXCI6XCImWVVjeTtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwixbZcIjpcIiZZY2lyYztcIixcItCrXCI6XCImWWN5O1wiLFwi8J2UnFwiOlwiJllmcjtcIixcIvCdlZBcIjpcIiZZb3BmO1wiLFwi8J2StFwiOlwiJllzY3I7XCIsXCLFuFwiOlwiJll1bWw7XCIsXCLQllwiOlwiJlpIY3k7XCIsXCLFuVwiOlwiJlphY3V0ZTtcIixcIsW9XCI6XCImWmNhcm9uO1wiLFwi0JdcIjpcIiZaY3k7XCIsXCLFu1wiOlwiJlpkb3Q7XCIsXCLOllwiOlwiJlpldGE7XCIsXCLihKhcIjpcIiZ6ZWV0cmY7XCIsXCLihKRcIjpcIiZpbnRlZ2VycztcIixcIvCdkrVcIjpcIiZac2NyO1wiLFwiw6FcIjpcIiZhYWN1dGU7XCIsXCLEg1wiOlwiJmFicmV2ZTtcIixcIuKIvlwiOlwiJm1zdHBvcztcIixcIuKIvsyzXCI6XCImYWNFO1wiLFwi4oi/XCI6XCImYWNkO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcItCwXCI6XCImYWN5O1wiLFwiw6ZcIjpcIiZhZWxpZztcIixcIvCdlJ5cIjpcIiZhZnI7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIuKEtVwiOlwiJmFsZXBoO1wiLFwizrFcIjpcIiZhbHBoYTtcIixcIsSBXCI6XCImYW1hY3I7XCIsXCLiqL9cIjpcIiZhbWFsZztcIixcIuKIp1wiOlwiJndlZGdlO1wiLFwi4qmVXCI6XCImYW5kYW5kO1wiLFwi4qmcXCI6XCImYW5kZDtcIixcIuKpmFwiOlwiJmFuZHNsb3BlO1wiLFwi4qmaXCI6XCImYW5kdjtcIixcIuKIoFwiOlwiJmFuZ2xlO1wiLFwi4qakXCI6XCImYW5nZTtcIixcIuKIoVwiOlwiJm1lYXN1cmVkYW5nbGU7XCIsXCLipqhcIjpcIiZhbmdtc2RhYTtcIixcIuKmqVwiOlwiJmFuZ21zZGFiO1wiLFwi4qaqXCI6XCImYW5nbXNkYWM7XCIsXCLipqtcIjpcIiZhbmdtc2RhZDtcIixcIuKmrFwiOlwiJmFuZ21zZGFlO1wiLFwi4qatXCI6XCImYW5nbXNkYWY7XCIsXCLipq5cIjpcIiZhbmdtc2RhZztcIixcIuKmr1wiOlwiJmFuZ21zZGFoO1wiLFwi4oifXCI6XCImYW5ncnQ7XCIsXCLiir5cIjpcIiZhbmdydHZiO1wiLFwi4qadXCI6XCImYW5ncnR2YmQ7XCIsXCLiiKJcIjpcIiZhbmdzcGg7XCIsXCLijbxcIjpcIiZhbmd6YXJyO1wiLFwixIVcIjpcIiZhb2dvbjtcIixcIvCdlZJcIjpcIiZhb3BmO1wiLFwi4qmwXCI6XCImYXBFO1wiLFwi4qmvXCI6XCImYXBhY2lyO1wiLFwi4omKXCI6XCImYXBwcm94ZXE7XCIsXCLiiYtcIjpcIiZhcGlkO1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCLDpVwiOlwiJmFyaW5nO1wiLFwi8J2StlwiOlwiJmFzY3I7XCIsXCIqXCI6XCImbWlkYXN0O1wiLFwiw6NcIjpcIiZhdGlsZGU7XCIsXCLDpFwiOlwiJmF1bWw7XCIsXCLiqJFcIjpcIiZhd2ludDtcIixcIuKrrVwiOlwiJmJOb3Q7XCIsXCLiiYxcIjpcIiZiY29uZztcIixcIs+2XCI6XCImYmVwc2k7XCIsXCLigLVcIjpcIiZicHJpbWU7XCIsXCLiiL1cIjpcIiZic2ltO1wiLFwi4ouNXCI6XCImYnNpbWU7XCIsXCLiir1cIjpcIiZiYXJ2ZWU7XCIsXCLijIVcIjpcIiZiYXJ3ZWRnZTtcIixcIuKOtlwiOlwiJmJicmt0YnJrO1wiLFwi0LFcIjpcIiZiY3k7XCIsXCLigJ5cIjpcIiZsZHF1b3I7XCIsXCLiprBcIjpcIiZiZW1wdHl2O1wiLFwizrJcIjpcIiZiZXRhO1wiLFwi4oS2XCI6XCImYmV0aDtcIixcIuKJrFwiOlwiJnR3aXh0O1wiLFwi8J2Un1wiOlwiJmJmcjtcIixcIuKXr1wiOlwiJnhjaXJjO1wiLFwi4qiAXCI6XCImeG9kb3Q7XCIsXCLiqIFcIjpcIiZ4b3BsdXM7XCIsXCLiqIJcIjpcIiZ4b3RpbWU7XCIsXCLiqIZcIjpcIiZ4c3FjdXA7XCIsXCLimIVcIjpcIiZzdGFyZjtcIixcIuKWvVwiOlwiJnhkdHJpO1wiLFwi4pazXCI6XCImeHV0cmk7XCIsXCLiqIRcIjpcIiZ4dXBsdXM7XCIsXCLipI1cIjpcIiZyYmFycjtcIixcIuKnq1wiOlwiJmxvemY7XCIsXCLilrRcIjpcIiZ1dHJpZjtcIixcIuKWvlwiOlwiJmR0cmlmO1wiLFwi4peCXCI6XCImbHRyaWY7XCIsXCLilrhcIjpcIiZydHJpZjtcIixcIuKQo1wiOlwiJmJsYW5rO1wiLFwi4paSXCI6XCImYmxrMTI7XCIsXCLilpFcIjpcIiZibGsxNDtcIixcIuKWk1wiOlwiJmJsazM0O1wiLFwi4paIXCI6XCImYmxvY2s7XCIsXCI94oOlXCI6XCImYm5lO1wiLFwi4omh4oOlXCI6XCImYm5lcXVpdjtcIixcIuKMkFwiOlwiJmJub3Q7XCIsXCLwnZWTXCI6XCImYm9wZjtcIixcIuKLiFwiOlwiJmJvd3RpZTtcIixcIuKVl1wiOlwiJmJveERMO1wiLFwi4pWUXCI6XCImYm94RFI7XCIsXCLilZZcIjpcIiZib3hEbDtcIixcIuKVk1wiOlwiJmJveERyO1wiLFwi4pWQXCI6XCImYm94SDtcIixcIuKVplwiOlwiJmJveEhEO1wiLFwi4pWpXCI6XCImYm94SFU7XCIsXCLilaRcIjpcIiZib3hIZDtcIixcIuKVp1wiOlwiJmJveEh1O1wiLFwi4pWdXCI6XCImYm94VUw7XCIsXCLilZpcIjpcIiZib3hVUjtcIixcIuKVnFwiOlwiJmJveFVsO1wiLFwi4pWZXCI6XCImYm94VXI7XCIsXCLilZFcIjpcIiZib3hWO1wiLFwi4pWsXCI6XCImYm94Vkg7XCIsXCLilaNcIjpcIiZib3hWTDtcIixcIuKVoFwiOlwiJmJveFZSO1wiLFwi4pWrXCI6XCImYm94Vmg7XCIsXCLilaJcIjpcIiZib3hWbDtcIixcIuKVn1wiOlwiJmJveFZyO1wiLFwi4qeJXCI6XCImYm94Ym94O1wiLFwi4pWVXCI6XCImYm94ZEw7XCIsXCLilZJcIjpcIiZib3hkUjtcIixcIuKUkFwiOlwiJmJveGRsO1wiLFwi4pSMXCI6XCImYm94ZHI7XCIsXCLilaVcIjpcIiZib3hoRDtcIixcIuKVqFwiOlwiJmJveGhVO1wiLFwi4pSsXCI6XCImYm94aGQ7XCIsXCLilLRcIjpcIiZib3hodTtcIixcIuKKn1wiOlwiJm1pbnVzYjtcIixcIuKKnlwiOlwiJnBsdXNiO1wiLFwi4oqgXCI6XCImdGltZXNiO1wiLFwi4pWbXCI6XCImYm94dUw7XCIsXCLilZhcIjpcIiZib3h1UjtcIixcIuKUmFwiOlwiJmJveHVsO1wiLFwi4pSUXCI6XCImYm94dXI7XCIsXCLilIJcIjpcIiZib3h2O1wiLFwi4pWqXCI6XCImYm94dkg7XCIsXCLilaFcIjpcIiZib3h2TDtcIixcIuKVnlwiOlwiJmJveHZSO1wiLFwi4pS8XCI6XCImYm94dmg7XCIsXCLilKRcIjpcIiZib3h2bDtcIixcIuKUnFwiOlwiJmJveHZyO1wiLFwiwqZcIjpcIiZicnZiYXI7XCIsXCLwnZK3XCI6XCImYnNjcjtcIixcIuKBj1wiOlwiJmJzZW1pO1wiLFwiXFxcXFwiOlwiJmJzb2w7XCIsXCLip4VcIjpcIiZic29sYjtcIixcIuKfiFwiOlwiJmJzb2xoc3ViO1wiLFwi4oCiXCI6XCImYnVsbGV0O1wiLFwi4qquXCI6XCImYnVtcEU7XCIsXCLEh1wiOlwiJmNhY3V0ZTtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKphFwiOlwiJmNhcGFuZDtcIixcIuKpiVwiOlwiJmNhcGJyY3VwO1wiLFwi4qmLXCI6XCImY2FwY2FwO1wiLFwi4qmHXCI6XCImY2FwY3VwO1wiLFwi4qmAXCI6XCImY2FwZG90O1wiLFwi4oip77iAXCI6XCImY2FwcztcIixcIuKBgVwiOlwiJmNhcmV0O1wiLFwi4qmNXCI6XCImY2NhcHM7XCIsXCLEjVwiOlwiJmNjYXJvbjtcIixcIsOnXCI6XCImY2NlZGlsO1wiLFwixIlcIjpcIiZjY2lyYztcIixcIuKpjFwiOlwiJmNjdXBzO1wiLFwi4qmQXCI6XCImY2N1cHNzbTtcIixcIsSLXCI6XCImY2RvdDtcIixcIuKmslwiOlwiJmNlbXB0eXY7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLwnZSgXCI6XCImY2ZyO1wiLFwi0YdcIjpcIiZjaGN5O1wiLFwi4pyTXCI6XCImY2hlY2ttYXJrO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLil4tcIjpcIiZjaXI7XCIsXCLip4NcIjpcIiZjaXJFO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwi4omXXCI6XCImY2lyZTtcIixcIuKGulwiOlwiJm9sYXJyO1wiLFwi4oa7XCI6XCImb3JhcnI7XCIsXCLik4hcIjpcIiZvUztcIixcIuKKm1wiOlwiJm9hc3Q7XCIsXCLiippcIjpcIiZvY2lyO1wiLFwi4oqdXCI6XCImb2Rhc2g7XCIsXCLiqJBcIjpcIiZjaXJmbmludDtcIixcIuKrr1wiOlwiJmNpcm1pZDtcIixcIuKnglwiOlwiJmNpcnNjaXI7XCIsXCLimaNcIjpcIiZjbHVic3VpdDtcIixcIjpcIjpcIiZjb2xvbjtcIixcIixcIjpcIiZjb21tYTtcIixcIkBcIjpcIiZjb21tYXQ7XCIsXCLiiIFcIjpcIiZjb21wbGVtZW50O1wiLFwi4qmtXCI6XCImY29uZ2RvdDtcIixcIvCdlZRcIjpcIiZjb3BmO1wiLFwi4oSXXCI6XCImY29weXNyO1wiLFwi4oa1XCI6XCImY3JhcnI7XCIsXCLinJdcIjpcIiZjcm9zcztcIixcIvCdkrhcIjpcIiZjc2NyO1wiLFwi4quPXCI6XCImY3N1YjtcIixcIuKrkVwiOlwiJmNzdWJlO1wiLFwi4quQXCI6XCImY3N1cDtcIixcIuKrklwiOlwiJmNzdXBlO1wiLFwi4ouvXCI6XCImY3Rkb3Q7XCIsXCLipLhcIjpcIiZjdWRhcnJsO1wiLFwi4qS1XCI6XCImY3VkYXJycjtcIixcIuKLnlwiOlwiJmN1cmx5ZXFwcmVjO1wiLFwi4oufXCI6XCImY3VybHllcXN1Y2M7XCIsXCLihrZcIjpcIiZjdXJ2ZWFycm93bGVmdDtcIixcIuKkvVwiOlwiJmN1bGFycnA7XCIsXCLiiKpcIjpcIiZjdXA7XCIsXCLiqYhcIjpcIiZjdXBicmNhcDtcIixcIuKphlwiOlwiJmN1cGNhcDtcIixcIuKpilwiOlwiJmN1cGN1cDtcIixcIuKKjVwiOlwiJmN1cGRvdDtcIixcIuKphVwiOlwiJmN1cG9yO1wiLFwi4oiq77iAXCI6XCImY3VwcztcIixcIuKGt1wiOlwiJmN1cnZlYXJyb3dyaWdodDtcIixcIuKkvFwiOlwiJmN1cmFycm07XCIsXCLii45cIjpcIiZjdXZlZTtcIixcIuKLj1wiOlwiJmN1d2VkO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLiiLFcIjpcIiZjd2ludDtcIixcIuKMrVwiOlwiJmN5bGN0eTtcIixcIuKlpVwiOlwiJmRIYXI7XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLihLhcIjpcIiZkYWxldGg7XCIsXCLigJBcIjpcIiZoeXBoZW47XCIsXCLipI9cIjpcIiZyQmFycjtcIixcIsSPXCI6XCImZGNhcm9uO1wiLFwi0LRcIjpcIiZkY3k7XCIsXCLih4pcIjpcIiZkb3duZG93bmFycm93cztcIixcIuKpt1wiOlwiJmVERG90O1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLOtFwiOlwiJmRlbHRhO1wiLFwi4qaxXCI6XCImZGVtcHR5djtcIixcIuKlv1wiOlwiJmRmaXNodDtcIixcIvCdlKFcIjpcIiZkZnI7XCIsXCLimaZcIjpcIiZkaWFtcztcIixcIs+dXCI6XCImZ2FtbWFkO1wiLFwi4ouyXCI6XCImZGlzaW47XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIuKLh1wiOlwiJmRpdm9ueDtcIixcItGSXCI6XCImZGpjeTtcIixcIuKMnlwiOlwiJmxsY29ybmVyO1wiLFwi4oyNXCI6XCImZGxjcm9wO1wiLCQ6XCImZG9sbGFyO1wiLFwi8J2VlVwiOlwiJmRvcGY7XCIsXCLiiZFcIjpcIiZlRG90O1wiLFwi4oi4XCI6XCImbWludXNkO1wiLFwi4oiUXCI6XCImcGx1c2RvO1wiLFwi4oqhXCI6XCImc2RvdGI7XCIsXCLijJ9cIjpcIiZscmNvcm5lcjtcIixcIuKMjFwiOlwiJmRyY3JvcDtcIixcIvCdkrlcIjpcIiZkc2NyO1wiLFwi0ZVcIjpcIiZkc2N5O1wiLFwi4qe2XCI6XCImZHNvbDtcIixcIsSRXCI6XCImZHN0cm9rO1wiLFwi4ouxXCI6XCImZHRkb3Q7XCIsXCLilr9cIjpcIiZ0cmlhbmdsZWRvd247XCIsXCLipqZcIjpcIiZkd2FuZ2xlO1wiLFwi0Z9cIjpcIiZkemN5O1wiLFwi4p+/XCI6XCImZHppZ3JhcnI7XCIsXCLDqVwiOlwiJmVhY3V0ZTtcIixcIuKprlwiOlwiJmVhc3RlcjtcIixcIsSbXCI6XCImZWNhcm9uO1wiLFwi4omWXCI6XCImZXFjaXJjO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIuKJlVwiOlwiJmVxY29sb247XCIsXCLRjVwiOlwiJmVjeTtcIixcIsSXXCI6XCImZWRvdDtcIixcIuKJklwiOlwiJmZhbGxpbmdkb3RzZXE7XCIsXCLwnZSiXCI6XCImZWZyO1wiLFwi4qqaXCI6XCImZWc7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIuKqllwiOlwiJmVxc2xhbnRndHI7XCIsXCLiqphcIjpcIiZlZ3Nkb3Q7XCIsXCLiqplcIjpcIiZlbDtcIixcIuKPp1wiOlwiJmVsaW50ZXJzO1wiLFwi4oSTXCI6XCImZWxsO1wiLFwi4qqVXCI6XCImZXFzbGFudGxlc3M7XCIsXCLiqpdcIjpcIiZlbHNkb3Q7XCIsXCLEk1wiOlwiJmVtYWNyO1wiLFwi4oiFXCI6XCImdmFybm90aGluZztcIixcIuKAhFwiOlwiJmVtc3AxMztcIixcIuKAhVwiOlwiJmVtc3AxNDtcIixcIuKAg1wiOlwiJmVtc3A7XCIsXCLFi1wiOlwiJmVuZztcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLEmVwiOlwiJmVvZ29uO1wiLFwi8J2VllwiOlwiJmVvcGY7XCIsXCLii5VcIjpcIiZlcGFyO1wiLFwi4qejXCI6XCImZXBhcnNsO1wiLFwi4qmxXCI6XCImZXBsdXM7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLPtVwiOlwiJnZhcmVwc2lsb247XCIsXCI9XCI6XCImZXF1YWxzO1wiLFwi4omfXCI6XCImcXVlc3RlcTtcIixcIuKpuFwiOlwiJmVxdWl2REQ7XCIsXCLip6VcIjpcIiZlcXZwYXJzbDtcIixcIuKJk1wiOlwiJnJpc2luZ2RvdHNlcTtcIixcIuKlsVwiOlwiJmVyYXJyO1wiLFwi4oSvXCI6XCImZXNjcjtcIixcIs63XCI6XCImZXRhO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDq1wiOlwiJmV1bWw7XCIsXCLigqxcIjpcIiZldXJvO1wiLFwiIVwiOlwiJmV4Y2w7XCIsXCLRhFwiOlwiJmZjeTtcIixcIuKZgFwiOlwiJmZlbWFsZTtcIixcIu+sg1wiOlwiJmZmaWxpZztcIixcIu+sgFwiOlwiJmZmbGlnO1wiLFwi76yEXCI6XCImZmZsbGlnO1wiLFwi8J2Uo1wiOlwiJmZmcjtcIixcIu+sgVwiOlwiJmZpbGlnO1wiLGZqOlwiJmZqbGlnO1wiLFwi4pmtXCI6XCImZmxhdDtcIixcIu+sglwiOlwiJmZsbGlnO1wiLFwi4paxXCI6XCImZmx0bnM7XCIsXCLGklwiOlwiJmZub2Y7XCIsXCLwnZWXXCI6XCImZm9wZjtcIixcIuKLlFwiOlwiJnBpdGNoZm9yaztcIixcIuKrmVwiOlwiJmZvcmt2O1wiLFwi4qiNXCI6XCImZnBhcnRpbnQ7XCIsXCLCvVwiOlwiJmhhbGY7XCIsXCLihZNcIjpcIiZmcmFjMTM7XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIuKFlVwiOlwiJmZyYWMxNTtcIixcIuKFmVwiOlwiJmZyYWMxNjtcIixcIuKFm1wiOlwiJmZyYWMxODtcIixcIuKFlFwiOlwiJmZyYWMyMztcIixcIuKFllwiOlwiJmZyYWMyNTtcIixcIsK+XCI6XCImZnJhYzM0O1wiLFwi4oWXXCI6XCImZnJhYzM1O1wiLFwi4oWcXCI6XCImZnJhYzM4O1wiLFwi4oWYXCI6XCImZnJhYzQ1O1wiLFwi4oWaXCI6XCImZnJhYzU2O1wiLFwi4oWdXCI6XCImZnJhYzU4O1wiLFwi4oWeXCI6XCImZnJhYzc4O1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLijKJcIjpcIiZzZnJvd247XCIsXCLwnZK7XCI6XCImZnNjcjtcIixcIuKqjFwiOlwiJmd0cmVxcWxlc3M7XCIsXCLHtVwiOlwiJmdhY3V0ZTtcIixcIs6zXCI6XCImZ2FtbWE7XCIsXCLiqoZcIjpcIiZndHJhcHByb3g7XCIsXCLEn1wiOlwiJmdicmV2ZTtcIixcIsSdXCI6XCImZ2NpcmM7XCIsXCLQs1wiOlwiJmdjeTtcIixcIsShXCI6XCImZ2RvdDtcIixcIuKqqVwiOlwiJmdlc2NjO1wiLFwi4qqAXCI6XCImZ2VzZG90O1wiLFwi4qqCXCI6XCImZ2VzZG90bztcIixcIuKqhFwiOlwiJmdlc2RvdG9sO1wiLFwi4oub77iAXCI6XCImZ2VzbDtcIixcIuKqlFwiOlwiJmdlc2xlcztcIixcIvCdlKRcIjpcIiZnZnI7XCIsXCLihLdcIjpcIiZnaW1lbDtcIixcItGTXCI6XCImZ2pjeTtcIixcIuKqklwiOlwiJmdsRTtcIixcIuKqpVwiOlwiJmdsYTtcIixcIuKqpFwiOlwiJmdsajtcIixcIuKJqVwiOlwiJmduZXFxO1wiLFwi4qqKXCI6XCImZ25hcHByb3g7XCIsXCLiqohcIjpcIiZnbmVxO1wiLFwi4ounXCI6XCImZ25zaW07XCIsXCLwnZWYXCI6XCImZ29wZjtcIixcIuKEilwiOlwiJmdzY3I7XCIsXCLiqo5cIjpcIiZnc2ltZTtcIixcIuKqkFwiOlwiJmdzaW1sO1wiLFwi4qqnXCI6XCImZ3RjYztcIixcIuKpulwiOlwiJmd0Y2lyO1wiLFwi4ouXXCI6XCImZ3RyZG90O1wiLFwi4qaVXCI6XCImZ3RsUGFyO1wiLFwi4qm8XCI6XCImZ3RxdWVzdDtcIixcIuKluFwiOlwiJmd0cmFycjtcIixcIuKJqe+4gFwiOlwiJmd2bkU7XCIsXCLRilwiOlwiJmhhcmRjeTtcIixcIuKliFwiOlwiJmhhcnJjaXI7XCIsXCLihq1cIjpcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiLFwi4oSPXCI6XCImcGxhbmt2O1wiLFwixKVcIjpcIiZoY2lyYztcIixcIuKZpVwiOlwiJmhlYXJ0c3VpdDtcIixcIuKAplwiOlwiJm1sZHI7XCIsXCLiirlcIjpcIiZoZXJjb247XCIsXCLwnZSlXCI6XCImaGZyO1wiLFwi4qSlXCI6XCImc2VhcmhrO1wiLFwi4qSmXCI6XCImc3dhcmhrO1wiLFwi4oe/XCI6XCImaG9hcnI7XCIsXCLiiLtcIjpcIiZob210aHQ7XCIsXCLihqlcIjpcIiZsYXJyaGs7XCIsXCLihqpcIjpcIiZyYXJyaGs7XCIsXCLwnZWZXCI6XCImaG9wZjtcIixcIuKAlVwiOlwiJmhvcmJhcjtcIixcIvCdkr1cIjpcIiZoc2NyO1wiLFwixKdcIjpcIiZoc3Ryb2s7XCIsXCLigYNcIjpcIiZoeWJ1bGw7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLQuFwiOlwiJmljeTtcIixcItC1XCI6XCImaWVjeTtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLwnZSmXCI6XCImaWZyO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLiqIxcIjpcIiZxaW50O1wiLFwi4oitXCI6XCImdGludDtcIixcIuKnnFwiOlwiJmlpbmZpbjtcIixcIuKEqVwiOlwiJmlpb3RhO1wiLFwixLNcIjpcIiZpamxpZztcIixcIsSrXCI6XCImaW1hY3I7XCIsXCLEsVwiOlwiJmlub2RvdDtcIixcIuKKt1wiOlwiJmltb2Y7XCIsXCLGtVwiOlwiJmltcGVkO1wiLFwi4oSFXCI6XCImaW5jYXJlO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLip51cIjpcIiZpbmZpbnRpZTtcIixcIuKKulwiOlwiJmludGVyY2FsO1wiLFwi4qiXXCI6XCImaW50bGFyaGs7XCIsXCLiqLxcIjpcIiZpcHJvZDtcIixcItGRXCI6XCImaW9jeTtcIixcIsSvXCI6XCImaW9nb247XCIsXCLwnZWaXCI6XCImaW9wZjtcIixcIs65XCI6XCImaW90YTtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwi8J2SvlwiOlwiJmlzY3I7XCIsXCLii7lcIjpcIiZpc2luRTtcIixcIuKLtVwiOlwiJmlzaW5kb3Q7XCIsXCLii7RcIjpcIiZpc2lucztcIixcIuKLs1wiOlwiJmlzaW5zdjtcIixcIsSpXCI6XCImaXRpbGRlO1wiLFwi0ZZcIjpcIiZpdWtjeTtcIixcIsOvXCI6XCImaXVtbDtcIixcIsS1XCI6XCImamNpcmM7XCIsXCLQuVwiOlwiJmpjeTtcIixcIvCdlKdcIjpcIiZqZnI7XCIsXCLIt1wiOlwiJmptYXRoO1wiLFwi8J2Vm1wiOlwiJmpvcGY7XCIsXCLwnZK/XCI6XCImanNjcjtcIixcItGYXCI6XCImanNlcmN5O1wiLFwi0ZRcIjpcIiZqdWtjeTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLPsFwiOlwiJnZhcmthcHBhO1wiLFwixLdcIjpcIiZrY2VkaWw7XCIsXCLQulwiOlwiJmtjeTtcIixcIvCdlKhcIjpcIiZrZnI7XCIsXCLEuFwiOlwiJmtncmVlbjtcIixcItGFXCI6XCIma2hjeTtcIixcItGcXCI6XCIma2pjeTtcIixcIvCdlZxcIjpcIiZrb3BmO1wiLFwi8J2TgFwiOlwiJmtzY3I7XCIsXCLipJtcIjpcIiZsQXRhaWw7XCIsXCLipI5cIjpcIiZsQmFycjtcIixcIuKqi1wiOlwiJmxlc3NlcXFndHI7XCIsXCLipaJcIjpcIiZsSGFyO1wiLFwixLpcIjpcIiZsYWN1dGU7XCIsXCLiprRcIjpcIiZsYWVtcHR5djtcIixcIs67XCI6XCImbGFtYmRhO1wiLFwi4qaRXCI6XCImbGFuZ2Q7XCIsXCLiqoVcIjpcIiZsZXNzYXBwcm94O1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIuKkn1wiOlwiJmxhcnJiZnM7XCIsXCLipJ1cIjpcIiZsYXJyZnM7XCIsXCLihqtcIjpcIiZsb29wYXJyb3dsZWZ0O1wiLFwi4qS5XCI6XCImbGFycnBsO1wiLFwi4qWzXCI6XCImbGFycnNpbTtcIixcIuKGolwiOlwiJmxlZnRhcnJvd3RhaWw7XCIsXCLiqqtcIjpcIiZsYXQ7XCIsXCLipJlcIjpcIiZsYXRhaWw7XCIsXCLiqq1cIjpcIiZsYXRlO1wiLFwi4qqt77iAXCI6XCImbGF0ZXM7XCIsXCLipIxcIjpcIiZsYmFycjtcIixcIuKdslwiOlwiJmxiYnJrO1wiLFwie1wiOlwiJmxjdWI7XCIsXCJbXCI6XCImbHNxYjtcIixcIuKmi1wiOlwiJmxicmtlO1wiLFwi4qaPXCI6XCImbGJya3NsZDtcIixcIuKmjVwiOlwiJmxicmtzbHU7XCIsXCLEvlwiOlwiJmxjYXJvbjtcIixcIsS8XCI6XCImbGNlZGlsO1wiLFwi0LtcIjpcIiZsY3k7XCIsXCLipLZcIjpcIiZsZGNhO1wiLFwi4qWnXCI6XCImbGRyZGhhcjtcIixcIuKli1wiOlwiJmxkcnVzaGFyO1wiLFwi4oayXCI6XCImbGRzaDtcIixcIuKJpFwiOlwiJmxlcTtcIixcIuKHh1wiOlwiJmxsYXJyO1wiLFwi4ouLXCI6XCImbHRocmVlO1wiLFwi4qqoXCI6XCImbGVzY2M7XCIsXCLiqb9cIjpcIiZsZXNkb3Q7XCIsXCLiqoFcIjpcIiZsZXNkb3RvO1wiLFwi4qqDXCI6XCImbGVzZG90b3I7XCIsXCLii5rvuIBcIjpcIiZsZXNnO1wiLFwi4qqTXCI6XCImbGVzZ2VzO1wiLFwi4ouWXCI6XCImbHRkb3Q7XCIsXCLipbxcIjpcIiZsZmlzaHQ7XCIsXCLwnZSpXCI6XCImbGZyO1wiLFwi4qqRXCI6XCImbGdFO1wiLFwi4qWqXCI6XCImbGhhcnVsO1wiLFwi4paEXCI6XCImbGhibGs7XCIsXCLRmVwiOlwiJmxqY3k7XCIsXCLipatcIjpcIiZsbGhhcmQ7XCIsXCLil7pcIjpcIiZsbHRyaTtcIixcIsWAXCI6XCImbG1pZG90O1wiLFwi4o6wXCI6XCImbG1vdXN0YWNoZTtcIixcIuKJqFwiOlwiJmxuZXFxO1wiLFwi4qqJXCI6XCImbG5hcHByb3g7XCIsXCLiqodcIjpcIiZsbmVxO1wiLFwi4oumXCI6XCImbG5zaW07XCIsXCLin6xcIjpcIiZsb2FuZztcIixcIuKHvVwiOlwiJmxvYXJyO1wiLFwi4p+8XCI6XCImeG1hcDtcIixcIuKGrFwiOlwiJnJhcnJscDtcIixcIuKmhVwiOlwiJmxvcGFyO1wiLFwi8J2VnVwiOlwiJmxvcGY7XCIsXCLiqK1cIjpcIiZsb3BsdXM7XCIsXCLiqLRcIjpcIiZsb3RpbWVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4peKXCI6XCImbG96ZW5nZTtcIixcIihcIjpcIiZscGFyO1wiLFwi4qaTXCI6XCImbHBhcmx0O1wiLFwi4qWtXCI6XCImbHJoYXJkO1wiLFwi4oCOXCI6XCImbHJtO1wiLFwi4oq/XCI6XCImbHJ0cmk7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLwnZOBXCI6XCImbHNjcjtcIixcIuKqjVwiOlwiJmxzaW1lO1wiLFwi4qqPXCI6XCImbHNpbWc7XCIsXCLigJpcIjpcIiZzYnF1bztcIixcIsWCXCI6XCImbHN0cm9rO1wiLFwi4qqmXCI6XCImbHRjYztcIixcIuKpuVwiOlwiJmx0Y2lyO1wiLFwi4ouJXCI6XCImbHRpbWVzO1wiLFwi4qW2XCI6XCImbHRsYXJyO1wiLFwi4qm7XCI6XCImbHRxdWVzdDtcIixcIuKmllwiOlwiJmx0clBhcjtcIixcIuKXg1wiOlwiJnRyaWFuZ2xlbGVmdDtcIixcIuKlilwiOlwiJmx1cmRzaGFyO1wiLFwi4qWmXCI6XCImbHVydWhhcjtcIixcIuKJqO+4gFwiOlwiJmx2bkU7XCIsXCLiiLpcIjpcIiZtRERvdDtcIixcIsKvXCI6XCImc3RybnM7XCIsXCLimYJcIjpcIiZtYWxlO1wiLFwi4pygXCI6XCImbWFsdGVzZTtcIixcIuKWrlwiOlwiJm1hcmtlcjtcIixcIuKoqVwiOlwiJm1jb21tYTtcIixcItC8XCI6XCImbWN5O1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLwnZSqXCI6XCImbWZyO1wiLFwi4oSnXCI6XCImbWhvO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIuKrsFwiOlwiJm1pZGNpcjtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4qiqXCI6XCImbWludXNkdTtcIixcIuKrm1wiOlwiJm1sY3A7XCIsXCLiiqdcIjpcIiZtb2RlbHM7XCIsXCLwnZWeXCI6XCImbW9wZjtcIixcIvCdk4JcIjpcIiZtc2NyO1wiLFwizrxcIjpcIiZtdTtcIixcIuKKuFwiOlwiJm11bWFwO1wiLFwi4ouZzLhcIjpcIiZuR2c7XCIsXCLiiavig5JcIjpcIiZuR3Q7XCIsXCLih41cIjpcIiZubEFycjtcIixcIuKHjlwiOlwiJm5oQXJyO1wiLFwi4ouYzLhcIjpcIiZuTGw7XCIsXCLiiarig5JcIjpcIiZuTHQ7XCIsXCLih49cIjpcIiZuckFycjtcIixcIuKKr1wiOlwiJm5WRGFzaDtcIixcIuKKrlwiOlwiJm5WZGFzaDtcIixcIsWEXCI6XCImbmFjdXRlO1wiLFwi4oig4oOSXCI6XCImbmFuZztcIixcIuKpsMy4XCI6XCImbmFwRTtcIixcIuKJi8y4XCI6XCImbmFwaWQ7XCIsXCLFiVwiOlwiJm5hcG9zO1wiLFwi4pmuXCI6XCImbmF0dXJhbDtcIixcIuKpg1wiOlwiJm5jYXA7XCIsXCLFiFwiOlwiJm5jYXJvbjtcIixcIsWGXCI6XCImbmNlZGlsO1wiLFwi4qmtzLhcIjpcIiZuY29uZ2RvdDtcIixcIuKpglwiOlwiJm5jdXA7XCIsXCLQvVwiOlwiJm5jeTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oeXXCI6XCImbmVBcnI7XCIsXCLipKRcIjpcIiZuZWFyaGs7XCIsXCLiiZDMuFwiOlwiJm5lZG90O1wiLFwi4qSoXCI6XCImdG9lYTtcIixcIvCdlKtcIjpcIiZuZnI7XCIsXCLihq5cIjpcIiZubGVmdHJpZ2h0YXJyb3c7XCIsXCLiq7JcIjpcIiZuaHBhcjtcIixcIuKLvFwiOlwiJm5pcztcIixcIuKLulwiOlwiJm5pc2Q7XCIsXCLRmlwiOlwiJm5qY3k7XCIsXCLiiabMuFwiOlwiJm5sZXFxO1wiLFwi4oaaXCI6XCImbmxlZnRhcnJvdztcIixcIuKApVwiOlwiJm5sZHI7XCIsXCLwnZWfXCI6XCImbm9wZjtcIixcIsKsXCI6XCImbm90O1wiLFwi4ou5zLhcIjpcIiZub3RpbkU7XCIsXCLii7XMuFwiOlwiJm5vdGluZG90O1wiLFwi4ou3XCI6XCImbm90aW52YjtcIixcIuKLtlwiOlwiJm5vdGludmM7XCIsXCLii75cIjpcIiZub3RuaXZiO1wiLFwi4ou9XCI6XCImbm90bml2YztcIixcIuKrveKDpVwiOlwiJm5wYXJzbDtcIixcIuKIgsy4XCI6XCImbnBhcnQ7XCIsXCLiqJRcIjpcIiZucG9saW50O1wiLFwi4oabXCI6XCImbnJpZ2h0YXJyb3c7XCIsXCLipLPMuFwiOlwiJm5yYXJyYztcIixcIuKGncy4XCI6XCImbnJhcnJ3O1wiLFwi8J2Tg1wiOlwiJm5zY3I7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4quFzLhcIjpcIiZuc3Vic2V0ZXFxO1wiLFwi4oqFXCI6XCImbnN1cDtcIixcIuKrhsy4XCI6XCImbnN1cHNldGVxcTtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwizr1cIjpcIiZudTtcIixcIiNcIjpcIiZudW07XCIsXCLihJZcIjpcIiZudW1lcm87XCIsXCLigIdcIjpcIiZudW1zcDtcIixcIuKKrVwiOlwiJm52RGFzaDtcIixcIuKkhFwiOlwiJm52SGFycjtcIixcIuKJjeKDklwiOlwiJm52YXA7XCIsXCLiiqxcIjpcIiZudmRhc2g7XCIsXCLiiaXig5JcIjpcIiZudmdlO1wiLFwiPuKDklwiOlwiJm52Z3Q7XCIsXCLip55cIjpcIiZudmluZmluO1wiLFwi4qSCXCI6XCImbnZsQXJyO1wiLFwi4omk4oOSXCI6XCImbnZsZTtcIixcIjzig5JcIjpcIiZudmx0O1wiLFwi4oq04oOSXCI6XCImbnZsdHJpZTtcIixcIuKkg1wiOlwiJm52ckFycjtcIixcIuKKteKDklwiOlwiJm52cnRyaWU7XCIsXCLiiLzig5JcIjpcIiZudnNpbTtcIixcIuKHllwiOlwiJm53QXJyO1wiLFwi4qSjXCI6XCImbndhcmhrO1wiLFwi4qSnXCI6XCImbnduZWFyO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwi0L5cIjpcIiZvY3k7XCIsXCLFkVwiOlwiJm9kYmxhYztcIixcIuKouFwiOlwiJm9kaXY7XCIsXCLiprxcIjpcIiZvZHNvbGQ7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwi4qa/XCI6XCImb2ZjaXI7XCIsXCLwnZSsXCI6XCImb2ZyO1wiLFwiy5tcIjpcIiZvZ29uO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLip4FcIjpcIiZvZ3Q7XCIsXCLiprVcIjpcIiZvaGJhcjtcIixcIuKmvlwiOlwiJm9sY2lyO1wiLFwi4qa7XCI6XCImb2xjcm9zcztcIixcIuKngFwiOlwiJm9sdDtcIixcIsWNXCI6XCImb21hY3I7XCIsXCLPiVwiOlwiJm9tZWdhO1wiLFwizr9cIjpcIiZvbWljcm9uO1wiLFwi4qa2XCI6XCImb21pZDtcIixcIvCdlaBcIjpcIiZvb3BmO1wiLFwi4qa3XCI6XCImb3BhcjtcIixcIuKmuVwiOlwiJm9wZXJwO1wiLFwi4oioXCI6XCImdmVlO1wiLFwi4qmdXCI6XCImb3JkO1wiLFwi4oS0XCI6XCImb3NjcjtcIixcIsKqXCI6XCImb3JkZjtcIixcIsK6XCI6XCImb3JkbTtcIixcIuKKtlwiOlwiJm9yaWdvZjtcIixcIuKpllwiOlwiJm9yb3I7XCIsXCLiqZdcIjpcIiZvcnNsb3BlO1wiLFwi4qmbXCI6XCImb3J2O1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLiiphcIjpcIiZvc29sO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLiqLZcIjpcIiZvdGltZXNhcztcIixcIsO2XCI6XCImb3VtbDtcIixcIuKMvVwiOlwiJm92YmFyO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwi4quzXCI6XCImcGFyc2ltO1wiLFwi4qu9XCI6XCImcGFyc2w7XCIsXCLQv1wiOlwiJnBjeTtcIixcIiVcIjpcIiZwZXJjbnQ7XCIsXCIuXCI6XCImcGVyaW9kO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oCxXCI6XCImcGVydGVuaztcIixcIvCdlK1cIjpcIiZwZnI7XCIsXCLPhlwiOlwiJnBoaTtcIixcIs+VXCI6XCImdmFycGhpO1wiLFwi4piOXCI6XCImcGhvbmU7XCIsXCLPgFwiOlwiJnBpO1wiLFwiz5ZcIjpcIiZ2YXJwaTtcIixcIuKEjlwiOlwiJnBsYW5ja2g7XCIsXCIrXCI6XCImcGx1cztcIixcIuKoo1wiOlwiJnBsdXNhY2lyO1wiLFwi4qiiXCI6XCImcGx1c2NpcjtcIixcIuKopVwiOlwiJnBsdXNkdTtcIixcIuKpslwiOlwiJnBsdXNlO1wiLFwi4qimXCI6XCImcGx1c3NpbTtcIixcIuKop1wiOlwiJnBsdXN0d287XCIsXCLiqJVcIjpcIiZwb2ludGludDtcIixcIvCdlaFcIjpcIiZwb3BmO1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIuKqs1wiOlwiJnByRTtcIixcIuKqt1wiOlwiJnByZWNhcHByb3g7XCIsXCLiqrlcIjpcIiZwcm5hcDtcIixcIuKqtVwiOlwiJnBybkU7XCIsXCLii6hcIjpcIiZwcm5zaW07XCIsXCLigLJcIjpcIiZwcmltZTtcIixcIuKMrlwiOlwiJnByb2ZhbGFyO1wiLFwi4oySXCI6XCImcHJvZmxpbmU7XCIsXCLijJNcIjpcIiZwcm9mc3VyZjtcIixcIuKKsFwiOlwiJnBydXJlbDtcIixcIvCdk4VcIjpcIiZwc2NyO1wiLFwiz4hcIjpcIiZwc2k7XCIsXCLigIhcIjpcIiZwdW5jc3A7XCIsXCLwnZSuXCI6XCImcWZyO1wiLFwi8J2VolwiOlwiJnFvcGY7XCIsXCLigZdcIjpcIiZxcHJpbWU7XCIsXCLwnZOGXCI6XCImcXNjcjtcIixcIuKollwiOlwiJnF1YXRpbnQ7XCIsXCI/XCI6XCImcXVlc3Q7XCIsXCLipJxcIjpcIiZyQXRhaWw7XCIsXCLipaRcIjpcIiZySGFyO1wiLFwi4oi9zLFcIjpcIiZyYWNlO1wiLFwixZVcIjpcIiZyYWN1dGU7XCIsXCLiprNcIjpcIiZyYWVtcHR5djtcIixcIuKmklwiOlwiJnJhbmdkO1wiLFwi4qalXCI6XCImcmFuZ2U7XCIsXCLCu1wiOlwiJnJhcXVvO1wiLFwi4qW1XCI6XCImcmFycmFwO1wiLFwi4qSgXCI6XCImcmFycmJmcztcIixcIuKks1wiOlwiJnJhcnJjO1wiLFwi4qSeXCI6XCImcmFycmZzO1wiLFwi4qWFXCI6XCImcmFycnBsO1wiLFwi4qW0XCI6XCImcmFycnNpbTtcIixcIuKGo1wiOlwiJnJpZ2h0YXJyb3d0YWlsO1wiLFwi4oadXCI6XCImcmlnaHRzcXVpZ2Fycm93O1wiLFwi4qSaXCI6XCImcmF0YWlsO1wiLFwi4oi2XCI6XCImcmF0aW87XCIsXCLinbNcIjpcIiZyYmJyaztcIixcIn1cIjpcIiZyY3ViO1wiLFwiXVwiOlwiJnJzcWI7XCIsXCLipoxcIjpcIiZyYnJrZTtcIixcIuKmjlwiOlwiJnJicmtzbGQ7XCIsXCLippBcIjpcIiZyYnJrc2x1O1wiLFwixZlcIjpcIiZyY2Fyb247XCIsXCLFl1wiOlwiJnJjZWRpbDtcIixcItGAXCI6XCImcmN5O1wiLFwi4qS3XCI6XCImcmRjYTtcIixcIuKlqVwiOlwiJnJkbGRoYXI7XCIsXCLihrNcIjpcIiZyZHNoO1wiLFwi4patXCI6XCImcmVjdDtcIixcIuKlvVwiOlwiJnJmaXNodDtcIixcIvCdlK9cIjpcIiZyZnI7XCIsXCLipaxcIjpcIiZyaGFydWw7XCIsXCLPgVwiOlwiJnJobztcIixcIs+xXCI6XCImdmFycmhvO1wiLFwi4oeJXCI6XCImcnJhcnI7XCIsXCLii4xcIjpcIiZydGhyZWU7XCIsXCLLmlwiOlwiJnJpbmc7XCIsXCLigI9cIjpcIiZybG07XCIsXCLijrFcIjpcIiZybW91c3RhY2hlO1wiLFwi4quuXCI6XCImcm5taWQ7XCIsXCLin61cIjpcIiZyb2FuZztcIixcIuKHvlwiOlwiJnJvYXJyO1wiLFwi4qaGXCI6XCImcm9wYXI7XCIsXCLwnZWjXCI6XCImcm9wZjtcIixcIuKorlwiOlwiJnJvcGx1cztcIixcIuKotVwiOlwiJnJvdGltZXM7XCIsXCIpXCI6XCImcnBhcjtcIixcIuKmlFwiOlwiJnJwYXJndDtcIixcIuKoklwiOlwiJnJwcG9saW50O1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi8J2Th1wiOlwiJnJzY3I7XCIsXCLii4pcIjpcIiZydGltZXM7XCIsXCLilrlcIjpcIiZ0cmlhbmdsZXJpZ2h0O1wiLFwi4qeOXCI6XCImcnRyaWx0cmk7XCIsXCLipahcIjpcIiZydWx1aGFyO1wiLFwi4oSeXCI6XCImcng7XCIsXCLFm1wiOlwiJnNhY3V0ZTtcIixcIuKqtFwiOlwiJnNjRTtcIixcIuKquFwiOlwiJnN1Y2NhcHByb3g7XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsWfXCI6XCImc2NlZGlsO1wiLFwixZ1cIjpcIiZzY2lyYztcIixcIuKqtlwiOlwiJnN1Y2NuZXFxO1wiLFwi4qq6XCI6XCImc3VjY25hcHByb3g7XCIsXCLii6lcIjpcIiZzdWNjbnNpbTtcIixcIuKok1wiOlwiJnNjcG9saW50O1wiLFwi0YFcIjpcIiZzY3k7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4qmmXCI6XCImc2RvdGU7XCIsXCLih5hcIjpcIiZzZUFycjtcIixcIsKnXCI6XCImc2VjdDtcIixcIjtcIjpcIiZzZW1pO1wiLFwi4qSpXCI6XCImdG9zYTtcIixcIuKctlwiOlwiJnNleHQ7XCIsXCLwnZSwXCI6XCImc2ZyO1wiLFwi4pmvXCI6XCImc2hhcnA7XCIsXCLRiVwiOlwiJnNoY2hjeTtcIixcItGIXCI6XCImc2hjeTtcIixcIsKtXCI6XCImc2h5O1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+CXCI6XCImdmFyc2lnbWE7XCIsXCLiqapcIjpcIiZzaW1kb3Q7XCIsXCLiqp5cIjpcIiZzaW1nO1wiLFwi4qqgXCI6XCImc2ltZ0U7XCIsXCLiqp1cIjpcIiZzaW1sO1wiLFwi4qqfXCI6XCImc2ltbEU7XCIsXCLiiYZcIjpcIiZzaW1uZTtcIixcIuKopFwiOlwiJnNpbXBsdXM7XCIsXCLipbJcIjpcIiZzaW1yYXJyO1wiLFwi4qizXCI6XCImc21hc2hwO1wiLFwi4qekXCI6XCImc21lcGFyc2w7XCIsXCLijKNcIjpcIiZzc21pbGU7XCIsXCLiqqpcIjpcIiZzbXQ7XCIsXCLiqqxcIjpcIiZzbXRlO1wiLFwi4qqs77iAXCI6XCImc210ZXM7XCIsXCLRjFwiOlwiJnNvZnRjeTtcIixcIi9cIjpcIiZzb2w7XCIsXCLip4RcIjpcIiZzb2xiO1wiLFwi4oy/XCI6XCImc29sYmFyO1wiLFwi8J2VpFwiOlwiJnNvcGY7XCIsXCLimaBcIjpcIiZzcGFkZXN1aXQ7XCIsXCLiipPvuIBcIjpcIiZzcWNhcHM7XCIsXCLiipTvuIBcIjpcIiZzcWN1cHM7XCIsXCLwnZOIXCI6XCImc3NjcjtcIixcIuKYhlwiOlwiJnN0YXI7XCIsXCLiioJcIjpcIiZzdWJzZXQ7XCIsXCLiq4VcIjpcIiZzdWJzZXRlcXE7XCIsXCLiqr1cIjpcIiZzdWJkb3Q7XCIsXCLiq4NcIjpcIiZzdWJlZG90O1wiLFwi4quBXCI6XCImc3VibXVsdDtcIixcIuKri1wiOlwiJnN1YnNldG5lcXE7XCIsXCLiiopcIjpcIiZzdWJzZXRuZXE7XCIsXCLiqr9cIjpcIiZzdWJwbHVzO1wiLFwi4qW5XCI6XCImc3VicmFycjtcIixcIuKrh1wiOlwiJnN1YnNpbTtcIixcIuKrlVwiOlwiJnN1YnN1YjtcIixcIuKrk1wiOlwiJnN1YnN1cDtcIixcIuKZqlwiOlwiJnN1bmc7XCIsXCLCuVwiOlwiJnN1cDE7XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLiq4ZcIjpcIiZzdXBzZXRlcXE7XCIsXCLiqr5cIjpcIiZzdXBkb3Q7XCIsXCLiq5hcIjpcIiZzdXBkc3ViO1wiLFwi4quEXCI6XCImc3VwZWRvdDtcIixcIuKfiVwiOlwiJnN1cGhzb2w7XCIsXCLiq5dcIjpcIiZzdXBoc3ViO1wiLFwi4qW7XCI6XCImc3VwbGFycjtcIixcIuKrglwiOlwiJnN1cG11bHQ7XCIsXCLiq4xcIjpcIiZzdXBzZXRuZXFxO1wiLFwi4oqLXCI6XCImc3Vwc2V0bmVxO1wiLFwi4quAXCI6XCImc3VwcGx1cztcIixcIuKriFwiOlwiJnN1cHNpbTtcIixcIuKrlFwiOlwiJnN1cHN1YjtcIixcIuKrllwiOlwiJnN1cHN1cDtcIixcIuKHmVwiOlwiJnN3QXJyO1wiLFwi4qSqXCI6XCImc3dud2FyO1wiLFwiw59cIjpcIiZzemxpZztcIixcIuKMllwiOlwiJnRhcmdldDtcIixcIs+EXCI6XCImdGF1O1wiLFwixaVcIjpcIiZ0Y2Fyb247XCIsXCLFo1wiOlwiJnRjZWRpbDtcIixcItGCXCI6XCImdGN5O1wiLFwi4oyVXCI6XCImdGVscmVjO1wiLFwi8J2UsVwiOlwiJnRmcjtcIixcIs64XCI6XCImdGhldGE7XCIsXCLPkVwiOlwiJnZhcnRoZXRhO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsOXXCI6XCImdGltZXM7XCIsXCLiqLFcIjpcIiZ0aW1lc2JhcjtcIixcIuKosFwiOlwiJnRpbWVzZDtcIixcIuKMtlwiOlwiJnRvcGJvdDtcIixcIuKrsVwiOlwiJnRvcGNpcjtcIixcIvCdlaVcIjpcIiZ0b3BmO1wiLFwi4quaXCI6XCImdG9wZm9yaztcIixcIuKAtFwiOlwiJnRwcmltZTtcIixcIuKWtVwiOlwiJnV0cmk7XCIsXCLiiZxcIjpcIiZ0cmllO1wiLFwi4pesXCI6XCImdHJpZG90O1wiLFwi4qi6XCI6XCImdHJpbWludXM7XCIsXCLiqLlcIjpcIiZ0cmlwbHVzO1wiLFwi4qeNXCI6XCImdHJpc2I7XCIsXCLiqLtcIjpcIiZ0cml0aW1lO1wiLFwi4o+iXCI6XCImdHJwZXppdW07XCIsXCLwnZOJXCI6XCImdHNjcjtcIixcItGGXCI6XCImdHNjeTtcIixcItGbXCI6XCImdHNoY3k7XCIsXCLFp1wiOlwiJnRzdHJvaztcIixcIuKlo1wiOlwiJnVIYXI7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcItGeXCI6XCImdWJyY3k7XCIsXCLFrVwiOlwiJnVicmV2ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLRg1wiOlwiJnVjeTtcIixcIsWxXCI6XCImdWRibGFjO1wiLFwi4qW+XCI6XCImdWZpc2h0O1wiLFwi8J2UslwiOlwiJnVmcjtcIixcIsO5XCI6XCImdWdyYXZlO1wiLFwi4paAXCI6XCImdWhibGs7XCIsXCLijJxcIjpcIiZ1bGNvcm5lcjtcIixcIuKMj1wiOlwiJnVsY3JvcDtcIixcIuKXuFwiOlwiJnVsdHJpO1wiLFwixatcIjpcIiZ1bWFjcjtcIixcIsWzXCI6XCImdW9nb247XCIsXCLwnZWmXCI6XCImdW9wZjtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIuKHiFwiOlwiJnV1YXJyO1wiLFwi4oydXCI6XCImdXJjb3JuZXI7XCIsXCLijI5cIjpcIiZ1cmNyb3A7XCIsXCLFr1wiOlwiJnVyaW5nO1wiLFwi4pe5XCI6XCImdXJ0cmk7XCIsXCLwnZOKXCI6XCImdXNjcjtcIixcIuKLsFwiOlwiJnV0ZG90O1wiLFwixalcIjpcIiZ1dGlsZGU7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLipqdcIjpcIiZ1d2FuZ2xlO1wiLFwi4quoXCI6XCImdkJhcjtcIixcIuKrqVwiOlwiJnZCYXJ2O1wiLFwi4qacXCI6XCImdmFuZ3J0O1wiLFwi4oqK77iAXCI6XCImdnN1Ym5lO1wiLFwi4quL77iAXCI6XCImdnN1Ym5FO1wiLFwi4oqL77iAXCI6XCImdnN1cG5lO1wiLFwi4quM77iAXCI6XCImdnN1cG5FO1wiLFwi0LJcIjpcIiZ2Y3k7XCIsXCLiirtcIjpcIiZ2ZWViYXI7XCIsXCLiiZpcIjpcIiZ2ZWVlcTtcIixcIuKLrlwiOlwiJnZlbGxpcDtcIixcIvCdlLNcIjpcIiZ2ZnI7XCIsXCLwnZWnXCI6XCImdm9wZjtcIixcIvCdk4tcIjpcIiZ2c2NyO1wiLFwi4qaaXCI6XCImdnppZ3phZztcIixcIsW1XCI6XCImd2NpcmM7XCIsXCLiqZ9cIjpcIiZ3ZWRiYXI7XCIsXCLiiZlcIjpcIiZ3ZWRnZXE7XCIsXCLihJhcIjpcIiZ3cDtcIixcIvCdlLRcIjpcIiZ3ZnI7XCIsXCLwnZWoXCI6XCImd29wZjtcIixcIvCdk4xcIjpcIiZ3c2NyO1wiLFwi8J2UtVwiOlwiJnhmcjtcIixcIs6+XCI6XCImeGk7XCIsXCLii7tcIjpcIiZ4bmlzO1wiLFwi8J2VqVwiOlwiJnhvcGY7XCIsXCLwnZONXCI6XCImeHNjcjtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwi0Y9cIjpcIiZ5YWN5O1wiLFwixbdcIjpcIiZ5Y2lyYztcIixcItGLXCI6XCImeWN5O1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLwnZS2XCI6XCImeWZyO1wiLFwi0ZdcIjpcIiZ5aWN5O1wiLFwi8J2VqlwiOlwiJnlvcGY7XCIsXCLwnZOOXCI6XCImeXNjcjtcIixcItGOXCI6XCImeXVjeTtcIixcIsO/XCI6XCImeXVtbDtcIixcIsW6XCI6XCImemFjdXRlO1wiLFwixb5cIjpcIiZ6Y2Fyb247XCIsXCLQt1wiOlwiJnpjeTtcIixcIsW8XCI6XCImemRvdDtcIixcIs62XCI6XCImemV0YTtcIixcIvCdlLdcIjpcIiZ6ZnI7XCIsXCLQtlwiOlwiJnpoY3k7XCIsXCLih51cIjpcIiZ6aWdyYXJyO1wiLFwi8J2Vq1wiOlwiJnpvcGY7XCIsXCLwnZOPXCI6XCImenNjcjtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjFwiOlwiJnp3bmo7XCJ9fX07IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLm51bWVyaWNVbmljb2RlTWFwPXswOjY1NTMzLDEyODo4MzY0LDEzMDo4MjE4LDEzMTo0MDIsMTMyOjgyMjIsMTMzOjgyMzAsMTM0OjgyMjQsMTM1OjgyMjUsMTM2OjcxMCwxMzc6ODI0MCwxMzg6MzUyLDEzOTo4MjQ5LDE0MDozMzgsMTQyOjM4MSwxNDU6ODIxNiwxNDY6ODIxNywxNDc6ODIyMCwxNDg6ODIyMSwxNDk6ODIyNiwxNTA6ODIxMSwxNTE6ODIxMiwxNTI6NzMyLDE1Mzo4NDgyLDE1NDozNTMsMTU1OjgyNTAsMTU2OjMzOSwxNTg6MzgyLDE1OTozNzZ9OyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTsiLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2NS4wLjBcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggd2luZG93LCByZXF1aXJlKCdldi1lbWl0dGVyJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KCB3aW5kb3csIHdpbmRvdy5FdkVtaXR0ZXIgKTtcbiAgfVxuXG59ICkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcbiAgICBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxubGV0ICQgPSB3aW5kb3cualF1ZXJ5O1xubGV0IGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkgcmV0dXJuIG9iajtcblxuICBsZXQgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gIGlmICggaXNBcnJheUxpa2UgKSByZXR1cm4gWyAuLi5vYmogXTtcblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7W0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nXX0gZWxlbVxuICogQHBhcmFtIHtbT2JqZWN0LCBGdW5jdGlvbl19IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7SW1hZ2VzTG9hZGVkfVxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgbGV0IHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEJhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgJHtxdWVyeUVsZW0gfHwgZWxlbX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0ge307XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5hc3NpZ24oIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG4gIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gIGlmICggJCApIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbmNvbnN0IGVsZW1lbnROb2RlVHlwZXMgPSBbIDEsIDksIDExIF07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgbGV0IHsgbm9kZVR5cGUgfSA9IGVsZW07XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzLmluY2x1ZGVzKCBub2RlVHlwZSApICkgcmV0dXJuO1xuXG4gIGxldCBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCBsZXQgaW1nIG9mIGNoaWxkSW1ncyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggbGV0IGNoaWxkIG9mIGNoaWxkcmVuICkge1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gIGlmICggIXN0eWxlICkgcmV0dXJuO1xuXG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICBsZXQgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgbGV0IHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIGxldCBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICBsZXQgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLXN0eWxlICovXG4gIGxldCBvblByb2dyZXNzID0gKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApID0+IHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSApO1xuICB9O1xuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggYHByb2dyZXNzOiAke21lc3NhZ2V9YCwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgbGV0IGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIC8vIGFkZCBjcm9zc09yaWdpbiBhdHRyaWJ1dGUuICMyMDRcbiAgaWYgKCB0aGlzLmltZy5jcm9zc09yaWdpbiApIHtcbiAgICB0aGlzLnByb3h5SW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmltZy5jcm9zc09yaWdpbjtcbiAgfVxuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuY3VycmVudFNyYyB8fCB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgbGV0IHsgcGFyZW50Tm9kZSB9ID0gdGhpcy5pbWc7XG4gIC8vIGVtaXQgcHJvZ3Jlc3Mgd2l0aCBwYXJlbnQgPHBpY3R1cmU+IG9yIHNlbGYgPGltZz5cbiAgbGV0IGVsZW0gPSBwYXJlbnROb2RlLm5vZGVOYW1lID09PSAnUElDVFVSRScgPyBwYXJlbnROb2RlIDogdGhpcy5pbWc7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGVsZW0sIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSByZXR1cm47XG5cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgICBsZXQgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQoIHRoaXMgKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3JtYWxpemVXaGVlbC5qcycpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBVc2VyQWdlbnRfREVQUkVDQVRFRFxuICovXG5cbi8qKlxuICogIFByb3ZpZGVzIGVudGlyZWx5IGNsaWVudC1zaWRlIFVzZXIgQWdlbnQgYW5kIE9TIGRldGVjdGlvbi4gWW91IHNob3VsZCBwcmVmZXJcbiAqICB0aGUgbm9uLWRlcHJlY2F0ZWQgVXNlckFnZW50IG1vZHVsZSB3aGVuIHBvc3NpYmxlLCB3aGljaCBleHBvc2VzIG91clxuICogIGF1dGhvcml0YXRpdmUgc2VydmVyLXNpZGUgUEhQLWJhc2VkIGRldGVjdGlvbiB0byB0aGUgY2xpZW50LlxuICpcbiAqICBVc2FnZSBpcyBzdHJhaWdodGZvcndhcmQ6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkpIHtcbiAqICAgICAgLy8gIElFXG4gKiAgICB9XG4gKlxuICogIFlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNoZWNrczpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA+PSA3KSB7XG4gKiAgICAgIC8vICBJRTcgb3IgYmV0dGVyXG4gKiAgICB9XG4gKlxuICogIFRoZSBicm93c2VyIGZ1bmN0aW9ucyB3aWxsIHJldHVybiBOYU4gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3QgbWF0Y2gsIHNvXG4gKiAgeW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY29tcGFyZXMgdGhlIG90aGVyIHdheTpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA8IDcpIHtcbiAqICAgICAgLy8gIElFNiBvciB3b3JzZVxuICogICAgfVxuICpcbiAqICBOb3RlIHRoYXQgdGhlIHZlcnNpb24gaXMgYSBmbG9hdCBhbmQgbWF5IGluY2x1ZGUgYSBtaW5vciB2ZXJzaW9uIG51bWJlcixcbiAqICBzbyB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgcmFuZ2Ugb3BlcmF0b3JzIHRvIHBlcmZvcm0gY29tcGFyaXNvbnMsIG5vdFxuICogIHN0cmljdCBlcXVhbGl0eS5cbiAqXG4gKiAgKipOb3RlOioqIFlvdSBzaG91bGQgKipzdHJvbmdseSoqIHByZWZlciBjYXBhYmlsaXR5IGRldGVjdGlvbiB0byBicm93c2VyXG4gKiAgdmVyc2lvbiBkZXRlY3Rpb24gd2hlcmUgaXQncyByZWFzb25hYmxlOlxuICpcbiAqICAgIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvc3VwcG9ydC5odG1sXG4gKlxuICogIEZ1cnRoZXIsIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgbWF0dXJlIHdyYXBwZXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gKiAgd2hpY2ggYWJzdHJhY3QgYXdheSBtYW55IGJyb3dzZXIgaXJyZWd1bGFyaXRpZXMuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uLFxuICogIGdyZXAgZm9yIHRoaW5ncywgb3IgYXNrIG9uIGphdmFzY3JpcHRAbGlzdHMuZmFjZWJvb2suY29tIGJlZm9yZSB3cml0aW5nIHlldFxuICogIGFub3RoZXIgY29weSBvZiBcImV2ZW50IHx8IHdpbmRvdy5ldmVudFwiLlxuICpcbiAqL1xuXG52YXIgX3BvcHVsYXRlZCA9IGZhbHNlO1xuXG4vLyBCcm93c2Vyc1xudmFyIF9pZSwgX2ZpcmVmb3gsIF9vcGVyYSwgX3dlYmtpdCwgX2Nocm9tZTtcblxuLy8gQWN0dWFsIElFIGJyb3dzZXIgZm9yIGNvbXBhdGliaWxpdHkgbW9kZVxudmFyIF9pZV9yZWFsX3ZlcnNpb247XG5cbi8vIFBsYXRmb3Jtc1xudmFyIF9vc3gsIF93aW5kb3dzLCBfbGludXgsIF9hbmRyb2lkO1xuXG4vLyBBcmNoaXRlY3R1cmVzXG52YXIgX3dpbjY0O1xuXG4vLyBEZXZpY2VzXG52YXIgX2lwaG9uZSwgX2lwYWQsIF9uYXRpdmU7XG5cbnZhciBfbW9iaWxlO1xuXG5mdW5jdGlvbiBfcG9wdWxhdGUoKSB7XG4gIGlmIChfcG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3BvcHVsYXRlZCA9IHRydWU7XG5cbiAgLy8gVG8gd29yayBhcm91bmQgYnVnZ3kgSlMgbGlicmFyaWVzIHRoYXQgY2FuJ3QgaGFuZGxlIG11bHRpLWRpZ2l0XG4gIC8vIHZlcnNpb24gbnVtYmVycywgT3BlcmEgMTAncyB1c2VyIGFnZW50IHN0cmluZyBjbGFpbXMgaXQncyBPcGVyYVxuICAvLyA5LCB0aGVuIGxhdGVyIGluY2x1ZGVzIGEgVmVyc2lvbi9YLlkgZmllbGQ6XG4gIC8vXG4gIC8vIE9wZXJhLzkuODAgKGZvbykgUHJlc3RvLzIuMi4xNSBWZXJzaW9uLzEwLjEwXG4gIHZhciB1YXMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgYWdlbnQgPSAvKD86TVNJRS4oXFxkK1xcLlxcZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcXGQrXFwuXFxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcXGQrXFwuXFxkKykpfCg/OkFwcGxlV2ViS2l0LihcXGQrKD86XFwuXFxkKyk/KSl8KD86VHJpZGVudFxcL1xcZCtcXC5cXGQrLipydjooXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICB2YXIgb3MgICAgPSAvKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyh1YXMpO1xuXG4gIF9pcGhvbmUgPSAvXFxiKGlQaG9uZXxpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfaXBhZCA9IC9cXGIoaVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2FuZHJvaWQgPSAvQW5kcm9pZC9pLmV4ZWModWFzKTtcbiAgX25hdGl2ZSA9IC9GQkFOXFwvXFx3KzsvaS5leGVjKHVhcyk7XG4gIF9tb2JpbGUgPSAvTW9iaWxlL2kuZXhlYyh1YXMpO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgSUUgdGVhbSBibG9nIHdvdWxkIGhhdmUgeW91IGJlbGlldmUgeW91IHNob3VsZCBiZSBjaGVja2luZ1xuICAvLyBmb3IgJ1dpbjY0OyB4NjQnLiAgQnV0IE1TRE4gdGhlbiByZXZlYWxzIHRoYXQgeW91IGNhbiBhY3R1YWxseSBiZSBjb21pbmdcbiAgLy8gZnJvbSBlaXRoZXIgeDY0IG9yIGlhNjQ7ICBzbyB1bHRpbWF0ZWx5LCB5b3Ugc2hvdWxkIGp1c3QgY2hlY2sgZm9yIFdpbjY0XG4gIC8vIGFzIGluIGluZGljYXRvciBvZiB3aGV0aGVyIHlvdSdyZSBpbiA2NC1iaXQgSUUuICAzMi1iaXQgSUUgb24gNjQtYml0XG4gIC8vIFdpbmRvd3Mgd2lsbCBzZW5kICdXT1c2NCcgaW5zdGVhZC5cbiAgX3dpbjY0ID0gISEoL1dpbjY0Ly5leGVjKHVhcykpO1xuXG4gIGlmIChhZ2VudCkge1xuICAgIF9pZSA9IGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiAoXG4gICAgICAgICAgYWdlbnRbNV0gPyBwYXJzZUZsb2F0KGFnZW50WzVdKSA6IE5hTik7XG4gICAgLy8gSUUgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgaWYgKF9pZSAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcbiAgICAgIF9pZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICB9XG4gICAgLy8gZ3JhYiB0aGUgXCJ0cnVlXCIgaWUgdmVyc2lvbiBmcm9tIHRoZSB0cmlkZW50IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIHZhciB0cmlkZW50ID0gLyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICBfaWVfcmVhbF92ZXJzaW9uID0gdHJpZGVudCA/IHBhcnNlRmxvYXQodHJpZGVudFsxXSkgKyA0IDogX2llO1xuXG4gICAgX2ZpcmVmb3ggPSBhZ2VudFsyXSA/IHBhcnNlRmxvYXQoYWdlbnRbMl0pIDogTmFOO1xuICAgIF9vcGVyYSAgID0gYWdlbnRbM10gPyBwYXJzZUZsb2F0KGFnZW50WzNdKSA6IE5hTjtcbiAgICBfd2Via2l0ICA9IGFnZW50WzRdID8gcGFyc2VGbG9hdChhZ2VudFs0XSkgOiBOYU47XG4gICAgaWYgKF93ZWJraXQpIHtcbiAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhlIHJlZ2V4cCB0byB0aGUgYWJvdmUgdGVzdCwgYmVjYXVzZSBpdCB3aWxsIGFsd2F5c1xuICAgICAgLy8gbWF0Y2ggJ3NhZmFyaScgb25seSBzaW5jZSAnQXBwbGVXZWJLaXQnIGFwcGVhcnMgYmVmb3JlICdDaHJvbWUnIGluXG4gICAgICAvLyB0aGUgdXNlckFnZW50IHN0cmluZy5cbiAgICAgIGFnZW50ID0gLyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgICBfY2hyb21lID0gYWdlbnQgJiYgYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IE5hTjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2Nocm9tZSA9IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX2llID0gX2ZpcmVmb3ggPSBfb3BlcmEgPSBfY2hyb21lID0gX3dlYmtpdCA9IE5hTjtcbiAgfVxuXG4gIGlmIChvcykge1xuICAgIGlmIChvc1sxXSkge1xuICAgICAgLy8gRGV0ZWN0IE9TIFggdmVyc2lvbi4gIElmIG5vIHZlcnNpb24gbnVtYmVyIG1hdGNoZXMsIHNldCBfb3N4IHRvIHRydWUuXG4gICAgICAvLyBWZXJzaW9uIGV4YW1wbGVzOiAgMTAsIDEwXzZfMSwgMTAuN1xuICAgICAgLy8gUGFyc2VzIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXQsIHRha2luZyBvbmx5IGZpcnN0IHR3byBzZXRzIG9mXG4gICAgICAvLyBkaWdpdHMuICBJZiBvbmx5IG9uZSBzZXQgb2YgZGlnaXRzIGlzIGZvdW5kLCByZXR1cm5zIGp1c3QgdGhlIG1ham9yXG4gICAgICAvLyB2ZXJzaW9uIG51bWJlci5cbiAgICAgIHZhciB2ZXIgPSAvKD86TWFjIE9TIFggKFxcZCsoPzpbLl9dXFxkKyk/KSkvLmV4ZWModWFzKTtcblxuICAgICAgX29zeCA9IHZlciA/IHBhcnNlRmxvYXQodmVyWzFdLnJlcGxhY2UoJ18nLCAnLicpKSA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vc3ggPSBmYWxzZTtcbiAgICB9XG4gICAgX3dpbmRvd3MgPSAhIW9zWzJdO1xuICAgIF9saW51eCAgID0gISFvc1szXTtcbiAgfSBlbHNlIHtcbiAgICBfb3N4ID0gX3dpbmRvd3MgPSBfbGludXggPSBmYWxzZTtcbiAgfVxufVxuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSB7XG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGllOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2llO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB3ZSdyZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBjb21wYXRpYmlsaXR5IG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGluIGNvbXBhdGliaWxpdHkgbW9kZSwgZmFsc2UgaWZcbiAgICogbm90IGNvbXBhdGliaWxpdHkgbW9kZSBvciBub3QgaWVcbiAgICovXG4gIGllQ29tcGF0aWJpbGl0eU1vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2llX3JlYWxfdmVyc2lvbiA+IF9pZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyA2NC1iaXQgSUUuICBSZWFsbHksIHRoaXMgaXMga2luZCBvZiB3ZWFrIHNhdWNlOyAgd2VcbiAgICogb25seSBuZWVkIHRoaXMgYmVjYXVzZSBTa3lwZSBjYW4ndCBoYW5kbGUgNjQtYml0IElFIHlldC4gIFdlIG5lZWQgdG8gcmVtb3ZlXG4gICAqIHRoaXMgd2hlbiB3ZSBkb24ndCBuZWVkIGl0IC0tIHRyYWNrZWQgYnkgIzYwMTk1Ny5cbiAgICovXG4gIGllNjQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpICYmIF93aW42NDtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBGaXJlZm94LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBmaXJlZm94OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2ZpcmVmb3g7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBPcGVyYS5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgb3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3BlcmE7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBXZWJLaXQuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIHdlYmtpdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93ZWJraXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBGb3IgUHVzaFxuICAgKiAgV0lMTCBCRSBSRU1PVkVEIFZFUlkgU09PTi4gVXNlIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdFxuICAgKi9cbiAgc2FmYXJpOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgYSBDaHJvbWUgYnJvd3Nlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgY2hyb21lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9jaHJvbWU7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgV2luZG93cy5cbiAgICpcbiAgICogIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBXaW5kb3dzLlxuICAgKi9cbiAgd2luZG93czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93aW5kb3dzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIE1hYyBPUyBYLlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxib29sICAgUmV0dXJucyBhIGZsb2F0IGlmIGEgdmVyc2lvbiBudW1iZXIgaXMgZGV0ZWN0ZWQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdHJ1ZS9mYWxzZS5cbiAgICovXG4gIG9zeDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vc3g7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTGludXguXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBzb21lIGZsYXZvciBvZiBMaW51eC5cbiAgICovXG4gIGxpbnV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2xpbnV4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHBsYXRmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgc29tZSBmbGF2b3Igb2YgdGhlXG4gICAqICAgIGlQaG9uZSBPUy5cbiAgICovXG4gIGlwaG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGhvbmU7XG4gIH0sXG5cbiAgbW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pcGhvbmUgfHwgX2lwYWQgfHwgX2FuZHJvaWQgfHwgX21vYmlsZSk7XG4gIH0sXG5cbiAgbmF0aXZlQXBwOiBmdW5jdGlvbigpIHtcbiAgICAvLyB3ZWJ2aWV3cyBpbnNpZGUgb2YgdGhlIG5hdGl2ZSBhcHBzXG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9uYXRpdmU7XG4gIH0sXG5cbiAgYW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9hbmRyb2lkO1xuICB9LFxuXG4gIGlwYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBhZDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQWdlbnRfREVQUkVDQVRFRDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG5vcm1hbGl6ZVdoZWVsXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRfREVQUkVDQVRFRCcpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG5cbi8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbnZhciBQSVhFTF9TVEVQICA9IDEwO1xudmFyIExJTkVfSEVJR0hUID0gNDA7XG52YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbi8qKlxuICogTW91c2Ugd2hlZWwgKGFuZCAyLWZpbmdlciB0cmFja3BhZCkgc3VwcG9ydCBvbiB0aGUgd2ViIHN1Y2tzLiAgSXQgaXNcbiAqIGNvbXBsaWNhdGVkLCB0aHVzIHRoaXMgZG9jIGlzIGxvbmcgYW5kIChob3BlZnVsbHkpIGRldGFpbGVkIGVub3VnaCB0byBhbnN3ZXJcbiAqIHlvdXIgcXVlc3Rpb25zLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIHJlYWN0IHRvIHRoZSBtb3VzZSB3aGVlbCBpbiBhIHByZWRpY3RhYmxlIHdheSwgdGhpcyBjb2RlIGlzXG4gKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gKlxuICogQXMgb2YgdG9kYXksIHRoZXJlIGFyZSA0IERPTSBldmVudCB0eXBlcyB5b3UgY2FuIGxpc3RlbiB0bzpcbiAqXG4gKiAgICd3aGVlbCcgICAgICAgICAgICAgICAgLS0gQ2hyb21lKDMxKyksIEZGKDE3KyksIElFKDkrKVxuICogICAnbW91c2V3aGVlbCcgICAgICAgICAgIC0tIENocm9tZSwgSUUoNispLCBPcGVyYSwgU2FmYXJpXG4gKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gKiAgICdET01Nb3VzZVNjcm9sbCcgICAgICAgLS0gRkYoMC45LjcrKSBzaW5jZSAyMDAzXG4gKlxuICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAqXG4gKiAgIG5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSgpO1xuICpcbiAqIEluIHlvdXIgZXZlbnQgY2FsbGJhY2ssIHVzZSB0aGlzIGNvZGUgdG8gZ2V0IHNhbmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlXG4gKiBkZWx0YXMuICBUaGlzIGNvZGUgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczpcbiAqXG4gKiAgIHNwaW5YICAgLS0gbm9ybWFsaXplZCBzcGluIHNwZWVkICh1c2UgZm9yIHpvb20pIC0geCBwbGFuZVxuICogICBzcGluWSAgIC0tIFwiIC0geSBwbGFuZVxuICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gKiAgIHBpeGVsWSAgLS0gXCIgLSB5IHBsYW5lXG4gKlxuICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICogc2Nyb2xsIGEgd2ViIHBhZ2UgYnkgYSBudW1iZXIgb2YgbGluZXMgb3IgcGl4ZWxzIChvciBwYWdlcykuICBWYWx1ZXMgY2FuIHZhcnlcbiAqIHNpZ25pZmljYW50bHkgb24gZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgYnJvd3NlcnMsIGZvcmdldHRpbmcgdGhhdCB5b3UgY2FuXG4gKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAqIGF0IHNtYWxsZXIgaW5jcmVtZW50cyB3aXRoIGZpbmUgZ3JhbnVsYXJpdHksIGFuZCBzb21lIGVtaXQgbWFzc2l2ZSBqdW1wcyB3aXRoXG4gKiBsaW5lYXIgc3BlZWQgb3IgYWNjZWxlcmF0aW9uLlxuICpcbiAqIFRoaXMgY29kZSBkb2VzIGl0cyBiZXN0IHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGFzIGZvciB5b3U6XG4gKlxuICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAqICAgICBkcmFnZ2VkKS4gIFRoaXMgaXMgc3VwZXIgdXNlZnVsIGZvciB6b29tIHN1cHBvcnQgd2hlcmUgeW91IHdhbnQgdG9cbiAqICAgICB0aHJvdyBhd2F5IHRoZSBjaHVua3kgc2Nyb2xsIHN0ZXBzIG9uIHRoZSBQQyBhbmQgbWFrZSB0aG9zZSBlcXVhbCB0b1xuICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gKiAgICAgcmVzb2x2ZSBhIHNpbmdsZSBzbG93IHN0ZXAgb24gYSB3aGVlbCB0byAxLlxuICpcbiAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAqICAgICBnZXQgdGhlIGNyYXp5IGRpZmZlcmVuY2VzIGJldHdlZW4gYnJvd3NlcnMsIGJ1dCBhdCBsZWFzdCBpdCdsbCBiZSBpblxuICogICAgIHBpeGVscyFcbiAqXG4gKiAgIC0gcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHNjcm9sbGluZyBET1dOL1JJR0hULCBuZWdhdGl2ZSBVUC9MRUZULiAgVGhpc1xuICogICAgIHNob3VsZCB0cmFuc2xhdGUgdG8gcG9zaXRpdmUgdmFsdWUgem9vbWluZyBJTiwgbmVnYXRpdmUgem9vbWluZyBPVVQuXG4gKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICpcbiAqIFdoeSBhcmUgdGhlcmUgc3BpblgsIHNwaW5ZIChvciBwaXhlbHMpP1xuICpcbiAqICAgLSBzcGluWCBpcyBhIDItZmluZ2VyIHNpZGUgZHJhZyBvbiB0aGUgdHJhY2twYWQsIGFuZCBhIHNoaWZ0ICsgd2hlZWwgdHVyblxuICogICAgIHdpdGggYSBtb3VzZS4gIEl0IHJlc3VsdHMgaW4gc2lkZS1zY3JvbGxpbmcgaW4gdGhlIGJyb3dzZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiAgIC0gc3BpblkgaXMgd2hhdCB5b3UgZXhwZWN0IC0tIGl0J3MgdGhlIGNsYXNzaWMgYXhpcyBvZiBhIG1vdXNlIHdoZWVsLlxuICpcbiAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICogICAgIHByb2JhYmx5IGlzIGJ5IGJyb3dzZXJzIGluIGNvbmp1bmN0aW9uIHdpdGggZmFuY3kgM0QgY29udHJvbGxlcnMgLi4gYnV0XG4gKiAgICAgeW91IGtub3cuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaW5mbzpcbiAqXG4gKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gKiBhdmVyYWdlIG1vdXNlOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIE9TIFggKyBTYWZhcmkgIChtb3VzZSkgICAgIC0gIE4vQSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgLTEyKVxuICogICBPUyBYICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDAuMSBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIFdpbjggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMyAgIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICpcbiAqIE9uIHRoZSB0cmFja3BhZDpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgICh0cmFja3BhZCkgIC0gICAgMiAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgIC02KVxuICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqXG4gKiBPbiBvdGhlci9vbGRlciBicm93c2Vycy4uIGl0J3MgbW9yZSBjb21wbGljYXRlZCBhcyB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgYW5kXG4gKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICpcbiAqIFRoZSAnd2hlZWwnIGV2ZW50IGlzIG1vcmUgc3RhbmRhcmQ6XG4gKlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtd2hlZWxldmVudHNcbiAqXG4gKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gKiBkZWx0YVgsIGRlbHRhWSBhbmQgZGVsdGFaLiAgU29tZSBicm93c2VycyBwcm92aWRlIG90aGVyIHZhbHVlcyB0byBtYWludGFpblxuICogYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGV2ZW50cy4gIFRob3NlIG90aGVyIHZhbHVlcyBoZWxwIHVzXG4gKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgZXZlbnQud2hlZWxEZWx0YSB8IGV2ZW50LmRldGFpbFxuICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgIFNhZmFyaSB2NS9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICBTYWZhcmkgdjUvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICAgICAgICBJRTkvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICB1bmRlZmluZWRcbiAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvV2luNyAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgM1xuICpcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2hlZWwoLypvYmplY3QqLyBldmVudCkgLypvYmplY3QqLyB7XG4gIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBwWCA9IDAsIHBZID0gMDsgICAgICAgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAvLyBMZWdhY3lcbiAgaWYgKCdkZXRhaWwnICAgICAgaW4gZXZlbnQpIHsgc1kgPSBldmVudC5kZXRhaWw7IH1cbiAgaWYgKCd3aGVlbERlbHRhJyAgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBldmVudCkgeyBzWCA9IC1ldmVudC53aGVlbERlbHRhWCAvIDEyMDsgfVxuXG4gIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgaWYgKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgIHNYID0gc1k7XG4gICAgc1kgPSAwO1xuICB9XG5cbiAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gIGlmICgnZGVsdGFZJyBpbiBldmVudCkgeyBwWSA9IGV2ZW50LmRlbHRhWTsgfVxuICBpZiAoJ2RlbHRhWCcgaW4gZXZlbnQpIHsgcFggPSBldmVudC5kZWx0YVg7IH1cblxuICBpZiAoKHBYIHx8IHBZKSAmJiBldmVudC5kZWx0YU1vZGUpIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IDEpIHsgICAgICAgICAgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICBpZiAocFggJiYgIXNYKSB7IHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7IH1cbiAgaWYgKHBZICYmICFzWSkgeyBzWSA9IChwWSA8IDEpID8gLTEgOiAxOyB9XG5cbiAgcmV0dXJuIHsgc3BpblggIDogc1gsXG4gICAgICAgICAgIHNwaW5ZICA6IHNZLFxuICAgICAgICAgICBwaXhlbFggOiBwWCxcbiAgICAgICAgICAgcGl4ZWxZIDogcFkgfTtcbn1cblxuXG4vKipcbiAqIFRoZSBiZXN0IGNvbWJpbmF0aW9uIGlmIHlvdSBwcmVmZXIgc3BpblggKyBzcGluWSBub3JtYWxpemF0aW9uLiAgSXQgZmF2b3JzXG4gKiB0aGUgb2xkZXIgRE9NTW91c2VTY3JvbGwgZm9yIEZpcmVmb3gsIGFzIEZGIGRvZXMgbm90IGluY2x1ZGUgd2hlZWxEZWx0YSB3aXRoXG4gKiAnd2hlZWwnIGV2ZW50LCBtYWtpbmcgc3BpbiBzcGVlZCBkZXRlcm1pbmF0aW9uIGltcG9zc2libGUuXG4gKi9cbm5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uKCkgLypzdHJpbmcqLyB7XG4gIHJldHVybiAoVXNlckFnZW50X0RFUFJFQ0FURUQuZmlyZWZveCgpKVxuICAgICAgICAgICA/ICdET01Nb3VzZVNjcm9sbCdcbiAgICAgICAgICAgOiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSlcbiAgICAgICAgICAgICAgID8gJ3doZWVsJ1xuICAgICAgICAgICAgICAgOiAnbW91c2V3aGVlbCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVdoZWVsO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG5cbnZhciBXZWJTb2NrZXRDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgZnVuY3Rpb24gV2ViU29ja2V0Q2xpZW50KHVybCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJTb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7XG5cbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2xvc2UgPSBmO1xuICAgIH0gLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZihlLmRhdGEpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2ViU29ja2V0Q2xpZW50O1xufSgpO1xuXG5leHBvcnQgeyBXZWJTb2NrZXRDbGllbnQgYXMgZGVmYXVsdCB9OyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIExvZ1R5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgZXJyb3I6XG4gIC8qKiBAdHlwZSB7XCJlcnJvclwifSAqL1xuICBcImVycm9yXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46XG4gIC8qKiBAdHlwZSB7XCJ3YXJuXCJ9ICovXG4gIFwid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOlxuICAvKiogQHR5cGUge1wiaW5mb1wifSAqL1xuICBcImluZm9cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgbG9nOlxuICAvKiogQHR5cGUge1wibG9nXCJ9ICovXG4gIFwibG9nXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGRlYnVnOlxuICAvKiogQHR5cGUge1wiZGVidWdcIn0gKi9cbiAgXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB0cmFjZTpcbiAgLyoqIEB0eXBlIHtcInRyYWNlXCJ9ICovXG4gIFwidHJhY2VcIixcbiAgLy8gbm8gYXJndW1lbnRzXG4gIGdyb3VwOlxuICAvKiogQHR5cGUge1wiZ3JvdXBcIn0gKi9cbiAgXCJncm91cFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwQ29sbGFwc2VkOlxuICAvKiogQHR5cGUge1wiZ3JvdXBDb2xsYXBzZWRcIn0gKi9cbiAgXCJncm91cENvbGxhcHNlZFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwRW5kOlxuICAvKiogQHR5cGUge1wiZ3JvdXBFbmRcIn0gKi9cbiAgXCJncm91cEVuZFwiLFxuICAvLyBbbGFiZWxdXG4gIHByb2ZpbGU6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlXCJ9ICovXG4gIFwicHJvZmlsZVwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHByb2ZpbGVFbmQ6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlRW5kXCJ9ICovXG4gIFwicHJvZmlsZUVuZFwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHRpbWU6XG4gIC8qKiBAdHlwZSB7XCJ0aW1lXCJ9ICovXG4gIFwidGltZVwiLFxuICAvLyBuYW1lLCB0aW1lIGFzIFtzZWNvbmRzLCBuYW5vc2Vjb25kc11cbiAgY2xlYXI6XG4gIC8qKiBAdHlwZSB7XCJjbGVhclwifSAqL1xuICBcImNsZWFyXCIsXG4gIC8vIG5vIGFyZ3VtZW50c1xuICBzdGF0dXM6XG4gIC8qKiBAdHlwZSB7XCJzdGF0dXNcIn0gKi9cbiAgXCJzdGF0dXNcIiAvLyBtZXNzYWdlLCBhcmd1bWVudHNcblxufSk7XG5leHBvcnRzLkxvZ1R5cGUgPSBMb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovXG5cbnZhciBMT0dfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciByYXcgbG9nIG1ldGhvZFwiKTtcbnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciB0aW1lc1wiKTtcbnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXNcIik7XG5cbnZhciBXZWJwYWNrTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oTG9nVHlwZUVudW0sIGFueVtdPSk6IHZvaWR9IGxvZyBsb2cgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcgfCBmdW5jdGlvbigpOiBzdHJpbmcpOiBXZWJwYWNrTG9nZ2VyfSBnZXRDaGlsZExvZ2dlciBmdW5jdGlvbiB0byBjcmVhdGUgY2hpbGQgbG9nZ2VyXG4gICAqL1xuICBmdW5jdGlvbiBXZWJwYWNrTG9nZ2VyKGxvZywgZ2V0Q2hpbGRMb2dnZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2VicGFja0xvZ2dlcik7XG5cbiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nO1xuICAgIHRoaXMuZ2V0Q2hpbGRMb2dnZXIgPSBnZXRDaGlsZExvZ2dlcjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXZWJwYWNrTG9nZ2VyLCBbe1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUud2FybiwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5pbmZvLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5kZWJ1ZywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFzc2VydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uKSB7XG4gICAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgW1wiVHJhY2VcIl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuc3RhdHVzLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXAsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cENvbGxhcHNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cENvbGxhcHNlZCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBFbmQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlRW5kKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZUVuZCwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5zZXQobGFiZWwsIHByb2Nlc3MuaHJ0aW1lKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lTG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVMb2cobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lTG9nKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lRW5kKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGUobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lQWdncmVnYXRlKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRpbWVbMV0gKyBjdXJyZW50WzFdID4gMWU5KSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdICsgMTtcbiAgICAgICAgICB0aW1lWzFdID0gdGltZVsxXSAtIDFlOSArIGN1cnJlbnRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdO1xuICAgICAgICAgIHRpbWVbMV0gKz0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7XG4gICAgICBpZiAodGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2VicGFja0xvZ2dlcjtcbn0oKTtcblxuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ1R5cGUgPSBfcmVxdWlyZS5Mb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG5cblxudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG5cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOlxuICAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1xuICBbXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZGVidWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwRW5kOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDtcbiAgICAgICAgICB2YXIgbXNnID0gXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0sIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBMb2dUeXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgU3luY0JhaWxIb29rID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanNcIik7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIiksXG4gICAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3JlYXRlQ29uc29sZUxvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiKTtcbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xuXG5cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyXG4gKi9cblxuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gc3RyaXBBbnNpOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBhbnNpLXJlZ2V4ICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qc1wiKTtcblxuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQodHlwZW9mIHN0cmluZywgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgoMCxhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKSgpLCAnJyk7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBhbnNpUmVnZXg7IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuZnVuY3Rpb24gYW5zaVJlZ2V4KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJG9ubHlGaXJzdCA9IF9yZWYub25seUZpcnN0LFxuICAgICAgb25seUZpcnN0ID0gX3JlZiRvbmx5Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5Rmlyc3Q7XG5cbiAgdmFyIHBhdHRlcm4gPSBbXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsICcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb25seUZpcnN0ID8gdW5kZWZpbmVkIDogJ2cnKTtcbn1cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpcC1hbnNpICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKTtcbn0oKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0cztcbmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTtcbmlmKF9fd2VicGFja19leHBvcnRzX18uX19lc01vZHVsZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gfSkoKVxuOyIsIi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuaW1wb3J0IGFuc2lIVE1MIGZyb20gXCJhbnNpLWh0bWwtY29tbXVuaXR5XCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiaHRtbC1lbnRpdGllc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG4vKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cblxudmFyIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQ7XG4vKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cblxudmFyIGNvbnRhaW5lckVsZW1lbnQ7XG4vKiogQHR5cGUge0FycmF5PChlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZD59ICovXG5cbnZhciBvbkxvYWRRdWV1ZSA9IFtdO1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuaWQgPSBcIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheVwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS50b3AgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3R0b20gPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDB2d1wiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS56SW5kZXggPSA5OTk5OTk5OTk5O1xuXG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQgPVxuICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG5cbiAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiYSgwLCAwLCAwLCAwLjg1KVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNFOEU4RThcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIk1lbmxvLCBDb25zb2xhcywgbW9ub3NwYWNlXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwibGFyZ2VcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjJyZW1cIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEuMlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCJYXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwiMjBweFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPSBcInJpZ2h0XCI7IC8vIEB0cy1pZ25vcmVcblxuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5zdHlsZUZsb2F0ID0gXCJyaWdodFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaGlkZSgpO1xuICAgIH0pO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbkVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cblxuICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJFbGVtZW50KTtcbiAgICBvbkxvYWRRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvbkxvYWQpIHtcbiAgICAgIG9uTG9hZChcbiAgICAgIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovXG4gICAgICBjb250YWluZXJFbGVtZW50KTtcbiAgICB9KTtcbiAgICBvbkxvYWRRdWV1ZSA9IFtdO1xuICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG5cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IG51bGw7XG4gIH07XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbn1cbi8qKlxuICogQHBhcmFtIHsoZWxlbWVudDogSFRNTERpdkVsZW1lbnQpID0+IHZvaWR9IGNhbGxiYWNrXG4gKi9cblxuXG5mdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrKSB7XG4gIGlmIChjb250YWluZXJFbGVtZW50KSB7XG4gICAgLy8gRXZlcnl0aGluZyBpcyByZWFkeSwgY2FsbCB0aGUgY2FsbGJhY2sgcmlnaHQgYXdheS5cbiAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBvbkxvYWRRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcblxuICBpZiAoaWZyYW1lQ29udGFpbmVyRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNyZWF0ZUNvbnRhaW5lcigpO1xufSAvLyBTdWNjZXNzZnVsIGNvbXBpbGF0aW9uLlxuXG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGlmICghaWZyYW1lQ29udGFpbmVyRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG5cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgY29udGFpbmVyRWxlbWVudCA9IG51bGw7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZyAgfCB7IGZpbGU/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9fSBpdGVtXG4gKiBAcmV0dXJucyB7eyBoZWFkZXI6IHN0cmluZywgYm9keTogc3RyaW5nIH19XG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHtcbiAgdmFyIGhlYWRlciA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gXCJXQVJOSU5HXCIgOiBcIkVSUk9SXCI7XG4gIHZhciBib2R5ID0gXCJcIjtcblxuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBib2R5ICs9IGl0ZW07XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpbGUgPSBpdGVtLmZpbGUgfHwgXCJcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG5cbiAgICB2YXIgbW9kdWxlTmFtZSA9IGl0ZW0ubW9kdWxlTmFtZSA/IGl0ZW0ubW9kdWxlTmFtZS5pbmRleE9mKFwiIVwiKSAhPT0gLTEgPyBcIlwiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUucmVwbGFjZSgvXihcXHN8XFxTKSohLywgXCJcIiksIFwiIChcIikuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSwgXCIpXCIpIDogXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lKSA6IFwiXCI7XG4gICAgdmFyIGxvYyA9IGl0ZW0ubG9jO1xuICAgIGhlYWRlciArPSBcIlwiLmNvbmNhdChtb2R1bGVOYW1lIHx8IGZpbGUgPyBcIiBpbiBcIi5jb25jYXQobW9kdWxlTmFtZSA/IFwiXCIuY29uY2F0KG1vZHVsZU5hbWUpLmNvbmNhdChmaWxlID8gXCIgKFwiLmNvbmNhdChmaWxlLCBcIilcIikgOiBcIlwiKSA6IGZpbGUpLmNvbmNhdChsb2MgPyBcIiBcIi5jb25jYXQobG9jKSA6IFwiXCIpIDogXCJcIik7XG4gICAgYm9keSArPSBpdGVtLm1lc3NhZ2UgfHwgXCJcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgYm9keTogYm9keVxuICB9O1xufSAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfT59IG1lc3NhZ2VzXG4gKi9cblxuXG5mdW5jdGlvbiBzaG93KHR5cGUsIG1lc3NhZ2VzKSB7XG4gIGVuc3VyZU92ZXJsYXlFeGlzdHMoZnVuY3Rpb24gKCkge1xuICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHZhciBlbnRyeUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdmFyIHR5cGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbSA9IGZvcm1hdFByb2JsZW0odHlwZSwgbWVzc2FnZSksXG4gICAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0uaGVhZGVyLFxuICAgICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbS5ib2R5O1xuXG4gICAgICB0eXBlRWxlbWVudC5pbm5lclRleHQgPSBoZWFkZXI7XG4gICAgICB0eXBlRWxlbWVudC5zdHlsZS5jb2xvciA9IFwiI1wiLmNvbmNhdChjb2xvcnMucmVkKTsgLy8gTWFrZSBpdCBsb29rIHNpbWlsYXIgdG8gb3VyIHRlcm1pbmFsLlxuXG4gICAgICB2YXIgdGV4dCA9IGFuc2lIVE1MKGVuY29kZShib2R5KSk7XG4gICAgICB2YXIgbWVzc2FnZVRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQobWVzc2FnZVRleHROb2RlKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqL1xuXG4gICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGVudHJ5RWxlbWVudCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBmb3JtYXRQcm9ibGVtLCBzaG93LCBoaWRlIH07IiwiLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovXG5pbXBvcnQgV2ViU29ja2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjsgLy8gdGhpcyBXZWJzb2NrZXRDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgdGhlIGNsaWVudCBpcyBub3QgaW5qZWN0ZWRcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5cbnZhciBDbGllbnQgPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbnR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCA6IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIDogV2ViU29ja2V0Q2xpZW50O1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxudmFyIHJldHJpZXMgPSAwO1xudmFyIG1heFJldHJpZXMgPSAxMDtcbnZhciBjbGllbnQgPSBudWxsO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge3sgW2hhbmRsZXI6IHN0cmluZ106IChkYXRhPzogYW55LCBwYXJhbXM/OiBhbnkpID0+IGFueSB9fSBoYW5kbGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cblxudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KSB7XG4gIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTtcbiAgY2xpZW50Lm9uT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0cmllcyA9IDA7XG5cbiAgICBpZiAodHlwZW9mIHJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbWF4UmV0cmllcyA9IHJlY29ubmVjdDtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHtcbiAgICAgIGhhbmRsZXJzLmNsb3NlKCk7XG4gICAgfSAvLyBUcnkgdG8gcmVjb25uZWN0LlxuXG5cbiAgICBjbGllbnQgPSBudWxsOyAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uXG5cbiAgICBpZiAocmV0cmllcyA8IG1heFJldHJpZXMpIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIGxvZy5pbmZvKFwiVHJ5aW5nIHRvIHJlY29ubmVjdC4uLlwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhXG4gICAqL1xuICBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKSB7XG4gICAgICBoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5wYXJhbXMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzb2NrZXQ7IiwiLyoqXG4gKiBAcGFyYW0ge3sgcHJvdG9jb2w/OiBzdHJpbmcsIGF1dGg/OiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCBwb3J0Pzogc3RyaW5nLCBwYXRobmFtZT86IHN0cmluZywgc2VhcmNoPzogc3RyaW5nLCBoYXNoPzogc3RyaW5nLCBzbGFzaGVzPzogYm9vbGVhbiB9fSBvYmpVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChvYmpVUkwpIHtcbiAgdmFyIHByb3RvY29sID0gb2JqVVJMLnByb3RvY29sIHx8IFwiXCI7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09IFwiOlwiKSB7XG4gICAgcHJvdG9jb2wgKz0gXCI6XCI7XG4gIH1cblxuICB2YXIgYXV0aCA9IG9ialVSTC5hdXRoIHx8IFwiXCI7XG5cbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCBcIjpcIik7XG4gICAgYXV0aCArPSBcIkBcIjtcbiAgfVxuXG4gIHZhciBob3N0ID0gXCJcIjtcblxuICBpZiAob2JqVVJMLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAob2JqVVJMLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpID09PSAtMSA/IG9ialVSTC5ob3N0bmFtZSA6IFwiW1wiLmNvbmNhdChvYmpVUkwuaG9zdG5hbWUsIFwiXVwiKSk7XG5cbiAgICBpZiAob2JqVVJMLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gXCI6XCIuY29uY2F0KG9ialVSTC5wb3J0KTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGF0aG5hbWUgPSBvYmpVUkwucGF0aG5hbWUgfHwgXCJcIjtcblxuICBpZiAob2JqVVJMLnNsYXNoZXMpIHtcbiAgICBob3N0ID0gXCIvL1wiLmNvbmNhdChob3N0IHx8IFwiXCIpO1xuXG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIuY29uY2F0KHBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gXCJcIjtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSBvYmpVUkwuc2VhcmNoIHx8IFwiXCI7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSBcIj9cIikge1xuICAgIHNlYXJjaCA9IFwiP1wiLmNvbmNhdChzZWFyY2gpO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBvYmpVUkwuaGFzaCB8fCBcIlwiO1xuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSBcIiNcIikge1xuICAgIGhhc2ggPSBcIiNcIi5jb25jYXQoaGFzaCk7XG4gIH1cblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZyxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZShcIiNcIiwgXCIlMjNcIik7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGhvc3QpLmNvbmNhdChwYXRobmFtZSkuY29uY2F0KHNlYXJjaCkuY29uY2F0KGhhc2gpO1xufVxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHtcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVVJMLmhvc3RuYW1lOyAvLyBOb2RlLmpzIG1vZHVsZSBwYXJzZXMgaXQgYXMgYDo6YFxuICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMU3RyaW5nXSlgIHBhcnNlcyBpdCBhcyAnWzo6XSdcblxuICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gXCIwLjAuMC4wXCIgfHwgaG9zdG5hbWUgPT09IFwiOjpcIiB8fCBob3N0bmFtZSA9PT0gXCJbOjpdXCI7IC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cbiAgaWYgKGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuXG4gIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sOyAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy5cblxuICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09IFwiYXV0bzpcIiB8fCBob3N0bmFtZSAmJiBpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgc29ja2V0VVJMUHJvdG9jb2wgPSBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG5cbiAgc29ja2V0VVJMUHJvdG9jb2wgPSBzb2NrZXRVUkxQcm90b2NvbC5yZXBsYWNlKC9eKD86aHR0cHwuKy1leHRlbnNpb258ZmlsZSkvaSwgXCJ3c1wiKTtcbiAgdmFyIHNvY2tldFVSTEF1dGggPSBcIlwiOyAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIGRvZXNuJ3QgaGF2ZSBgYXV0aGAgcHJvcGVydHlcbiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW1cblxuICBpZiAocGFyc2VkVVJMLnVzZXJuYW1lKSB7XG4gICAgc29ja2V0VVJMQXV0aCA9IHBhcnNlZFVSTC51c2VybmFtZTsgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSxcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS5cblxuICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHtcbiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+XG4gICAgICBzb2NrZXRVUkxBdXRoID0gc29ja2V0VVJMQXV0aC5jb25jYXQoXCI6XCIsIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICB9IC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW5cbiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLlxuICAvLyBOZWVkIHRvIHJlbW92ZSB0aG9zZSBhcyB1cmwuZm9ybWF0IGJsaW5kbHkgYWRkcyBpdHMgb3duIHNldCBvZiBicmFja2V0c1xuICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmdcbiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdFxuICAvL1xuICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksXG4gIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZFxuXG5cbiAgdmFyIHNvY2tldFVSTEhvc3RuYW1lID0gKGhvc3RuYW1lIHx8IHNlbGYubG9jYXRpb24uaG9zdG5hbWUgfHwgXCJsb2NhbGhvc3RcIikucmVwbGFjZSgvXlxcWyguKilcXF0kLywgXCIkMVwiKTtcbiAgdmFyIHNvY2tldFVSTFBvcnQgPSBwYXJzZWRVUkwucG9ydDtcblxuICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gXCIwXCIpIHtcbiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0O1xuICB9IC8vIElmIHBhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gIC8vIHF1ZXJ5IHBhcmFtIHNvIGl0IGhhcyB0byBiZSBwYXJzZWQgb3V0IG9mIHRoZSBxdWVyeXN0cmluZyBpbiBvcmRlciBmb3IgdGhlXG4gIC8vIGNsaWVudCB0byBvcGVuIHRoZSBzb2NrZXQgdG8gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cblxuICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSBcIi93c1wiO1xuXG4gIGlmIChwYXJzZWRVUkwucGF0aG5hbWUgJiYgIXBhcnNlZFVSTC5mcm9tQ3VycmVudFNjcmlwdCkge1xuICAgIHNvY2tldFVSTFBhdGhuYW1lID0gcGFyc2VkVVJMLnBhdGhuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdCh7XG4gICAgcHJvdG9jb2w6IHNvY2tldFVSTFByb3RvY29sLFxuICAgIGF1dGg6IHNvY2tldFVSTEF1dGgsXG4gICAgaG9zdG5hbWU6IHNvY2tldFVSTEhvc3RuYW1lLFxuICAgIHBvcnQ6IHNvY2tldFVSTFBvcnQsXG4gICAgcGF0aG5hbWU6IHNvY2tldFVSTFBhdGhuYW1lLFxuICAgIHNsYXNoZXM6IHRydWVcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNvY2tldFVSTDsiLCIvKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0gLy8gRmFsbGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBydW5uaW5nIGluIHRoZSBkb2N1bWVudC5cblxuXG4gIHZhciBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnNjcmlwdHMgfHwgW107XG4gIHZhciBzY3JpcHRFbGVtZW50c1dpdGhTcmMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoc2NyaXB0RWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9KTtcblxuICBpZiAoc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzV2l0aFNyY1tzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9IC8vIEZhaWwgYXMgdGhlcmUgd2FzIG5vIHNjcmlwdCB0byB1c2UuXG5cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2U7IiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbW9kdWxlcy9sb2dnZXIvaW5kZXguanNcIjtcbnZhciBuYW1lID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXJcIjsgLy8gZGVmYXVsdCBsZXZlbCBpcyBzZXQgb24gdGhlIGNsaWVudCBzaWRlLCBzbyBpdCBkb2VzIG5vdCBuZWVkXG4vLyB0byBiZSBzZXQgYnkgdGhlIENMSSBvciBBUElcblxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiOyAvLyBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG5cbi8qKlxuICogQHBhcmFtIHtmYWxzZSB8IHRydWUgfCBcIm5vbmVcIiB8IFwiZXJyb3JcIiB8IFwid2FyblwiIHwgXCJpbmZvXCIgfCBcImxvZ1wiIHwgXCJ2ZXJib3NlXCJ9IGxldmVsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBsb2dnZXIuY29uZmlndXJlRGVmYXVsdExvZ2dlcih7XG4gICAgbGV2ZWw6IGxldmVsXG4gIH0pO1xufVxuXG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG5leHBvcnQgeyBsb2csIHNldExvZ0xldmVsIH07IiwiaW1wb3J0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgZnJvbSBcIi4vZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qc1wiO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VRdWVyeVxuICogQHJldHVybnMge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgYm9vbGVhbiB9fVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHtcbiAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9fSAqL1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcmVzb3VyY2VRdWVyeSA9PT0gXCJzdHJpbmdcIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSBcIlwiKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc3Vic3RyKDEpLnNwbGl0KFwiJlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHNlYXJjaFBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICBvcHRpb25zW3BhaXJbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFbHNlLCBnZXQgdGhlIHVybCBmcm9tIHRoZSA8c2NyaXB0PiB0aGlzIGZpbGUgd2FzIGNhbGxlZCB3aXRoLlxuICAgIHZhciBzY3JpcHRTb3VyY2UgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gICAgdmFyIHNjcmlwdFNvdXJjZVVSTDtcblxuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikgey8vIFVSTCBwYXJzaW5nIGZhaWxlZCwgZG8gbm90aGluZy5cbiAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvY2VlZCB0byBzZWUgaWYgd2UgY2FuIHJlY292ZXIgdXNpbmcgYHJlc291cmNlUXVlcnlgXG4gICAgfVxuXG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgb3B0aW9ucyA9IHNjcmlwdFNvdXJjZVVSTDtcbiAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZVVSTDsiLCJpbXBvcnQgaG90RW1pdHRlciBmcm9tIFwid2VicGFjay9ob3QvZW1pdHRlci5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vbG9nLmpzXCI7XG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLk9wdGlvbnN9IE9wdGlvbnNcbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vaW5kZXhcIikuU3RhdHVzfSBTdGF0dXNcblxuLyoqXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RhdHVzfSBzdGF0dXNcbiAqL1xuXG5mdW5jdGlvbiByZWxvYWRBcHAoX3JlZiwgc3RhdHVzKSB7XG4gIHZhciBob3QgPSBfcmVmLmhvdCxcbiAgICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG5cbiAgaWYgKHN0YXR1cy5pc1VubG9hZGluZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXJyZW50SGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaCxcbiAgICAgIHByZXZpb3VzSGFzaCA9IHN0YXR1cy5wcmV2aW91c0hhc2g7XG4gIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKFxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgcHJldmlvdXNIYXNoKSA+PSAwO1xuXG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2luZG93fSByb290V2luZG93XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbElkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCkge1xuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgbG9nLmluZm8oXCJBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uXCIpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gc2VsZi5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsbG93VG9Ib3QgPSBzZWFyY2guaW5kZXhPZihcIndlYnBhY2stZGV2LXNlcnZlci1ob3Q9ZmFsc2VcIikgPT09IC0xO1xuICB2YXIgYWxsb3dUb0xpdmVSZWxvYWQgPSBzZWFyY2guaW5kZXhPZihcIndlYnBhY2stZGV2LXNlcnZlci1saXZlLXJlbG9hZD1mYWxzZVwiKSA9PT0gLTE7XG5cbiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7XG4gICAgbG9nLmluZm8oXCJBcHAgaG90IHVwZGF0ZS4uLlwiKTtcbiAgICBob3RFbWl0dGVyLmVtaXQoXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIHN0YXR1cy5jdXJyZW50SGFzaCk7XG5cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi53aW5kb3cpIHtcbiAgICAgIC8vIGJyb2FkY2FzdCB1cGRhdGUgdG8gd2luZG93XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKFwid2VicGFja0hvdFVwZGF0ZVwiLmNvbmNhdChzdGF0dXMuY3VycmVudEhhc2gpLCBcIipcIik7XG4gICAgfVxuICB9IC8vIGFsbG93IHJlZnJlc2hpbmcgdGhlIHBhZ2Ugb25seSBpZiBsaXZlUmVsb2FkIGlzbid0IGRpc2FibGVkXG4gIGVsc2UgaWYgKGxpdmVSZWxvYWQgJiYgYWxsb3dUb0xpdmVSZWxvYWQpIHtcbiAgICB2YXIgcm9vdFdpbmRvdyA9IHNlbGY7IC8vIHVzZSBwYXJlbnQgd2luZG93IGZvciByZWxvYWQgKGluIGNhc2Ugd2UncmUgaW4gYW4gaWZyYW1lIHdpdGggbm8gdmFsaWQgc3JjKVxuXG4gICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyb290V2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSBcImFib3V0OlwiKSB7XG4gICAgICAgIC8vIHJlbG9hZCBpbW1lZGlhdGVseSBpZiBwcm90b2NvbCBpcyB2YWxpZFxuICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RXaW5kb3cgPSByb290V2luZG93LnBhcmVudDtcblxuICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHtcbiAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZWxvYWRBcHA7IiwiLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSAqL1xuLy8gU2VuZCBtZXNzYWdlcyB0byB0aGUgb3V0c2lkZSwgc28gcGx1Z2lucyBjYW4gY29uc3VtZSBpdC5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHthbnl9IFtkYXRhXVxuICovXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09IFwidW5kZWZpbmVkXCIgfHwgIShzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpKSkge1xuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJ3ZWJwYWNrXCIuY29uY2F0KHR5cGUpLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0sIFwiKlwiKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCJ2YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcblx0dmFyIHNob3VsZExvZyA9XG5cdFx0KGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucyAqL1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxubW9kdWxlLmV4cG9ydHMuZm9ybWF0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdHZhciBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cdHZhciBzdGFjayA9IGVyci5zdGFjaztcblx0aWYgKCFzdGFjaykge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKHN0YWNrLmluZGV4T2YobWVzc2FnZSkgPCAwKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2s7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZWExYTM1ZWEwNzI3MjQzZjZiZjFcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSwgX193ZWJwYWNrX2hhc2hfXyAqL1xuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ3ZWJwYWNrL21vZHVsZVwiIC8+XG5pbXBvcnQgd2VicGFja0hvdExvZyBmcm9tIFwid2VicGFjay9ob3QvbG9nLmpzXCI7XG5pbXBvcnQgc3RyaXBBbnNpIGZyb20gXCIuL21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiO1xuaW1wb3J0IHBhcnNlVVJMIGZyb20gXCIuL3V0aWxzL3BhcnNlVVJMLmpzXCI7XG5pbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UHJvYmxlbSwgc2hvdywgaGlkZSB9IGZyb20gXCIuL292ZXJsYXkuanNcIjtcbmltcG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjtcbmltcG9ydCBzZW5kTWVzc2FnZSBmcm9tIFwiLi91dGlscy9zZW5kTWVzc2FnZS5qc1wiO1xuaW1wb3J0IHJlbG9hZEFwcCBmcm9tIFwiLi91dGlscy9yZWxvYWRBcHAuanNcIjtcbmltcG9ydCBjcmVhdGVTb2NrZXRVUkwgZnJvbSBcIi4vdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzXCI7XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaG90XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxpdmVSZWxvYWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcHJvZ3Jlc3NcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IHsgd2FybmluZ3M/OiBib29sZWFuLCBlcnJvcnM/OiBib29sZWFuIH19IG92ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9nZ2luZ11cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhdHVzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVW5sb2FkaW5nXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVudEhhc2hcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJldmlvdXNIYXNoXVxuICovXG5cbi8qKlxuICogQHR5cGUge1N0YXR1c31cbiAqL1xuXG52YXIgc3RhdHVzID0ge1xuICBpc1VubG9hZGluZzogZmFsc2UsXG4gIC8vIFRPRE8gV29ya2Fyb3VuZCBmb3Igd2VicGFjayB2NCwgYF9fd2VicGFja19oYXNoX19gIGlzIG5vdCByZXBsYWNlZCB3aXRob3V0IEhvdE1vZHVsZVJlcGxhY2VtZW50XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgY3VycmVudEhhc2g6IHR5cGVvZiBfX3dlYnBhY2tfaGFzaF9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX2hhc2hfXyA6IFwiXCJcbn07XG4vKiogQHR5cGUge09wdGlvbnN9ICovXG5cbnZhciBvcHRpb25zID0ge1xuICBob3Q6IGZhbHNlLFxuICBsaXZlUmVsb2FkOiBmYWxzZSxcbiAgcHJvZ3Jlc3M6IGZhbHNlLFxuICBvdmVybGF5OiBmYWxzZVxufTtcbnZhciBwYXJzZWRSZXNvdXJjZVF1ZXJ5ID0gcGFyc2VVUkwoX19yZXNvdXJjZVF1ZXJ5KTtcblxuaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSBcInRydWVcIikge1xuICBvcHRpb25zLmhvdCA9IHRydWU7XG4gIGxvZy5pbmZvKFwiSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLlwiKTtcbn1cblxuaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbXCJsaXZlLXJlbG9hZFwiXSA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgbG9nLmluZm8oXCJMaXZlIFJlbG9hZGluZyBlbmFibGVkLlwiKTtcbn1cblxuaWYgKHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZykge1xuICBvcHRpb25zLmxvZ2dpbmcgPSBwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmc7XG59XG5cbmlmICh0eXBlb2YgcGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgb3B0aW9ucy5yZWNvbm5lY3QgPSBOdW1iZXIocGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxcbiAqL1xuXG5cbmZ1bmN0aW9uIHNldEFsbExvZ0xldmVsKGxldmVsKSB7XG4gIC8vIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIEhNUiBsb2dnZXIgb3BlcmF0ZSBzZXBhcmF0ZWx5IGZyb20gZGV2IHNlcnZlciBsb2dnZXJcbiAgd2VicGFja0hvdExvZy5zZXRMb2dMZXZlbChsZXZlbCA9PT0gXCJ2ZXJib3NlXCIgfHwgbGV2ZWwgPT09IFwibG9nXCIgPyBcImluZm9cIiA6IGxldmVsKTtcbiAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xufVxuXG5pZiAob3B0aW9ucy5sb2dnaW5nKSB7XG4gIHNldEFsbExvZ0xldmVsKG9wdGlvbnMubG9nZ2luZyk7XG59XG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICAgIGxvZy5pbmZvKFwiSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLlwiKTtcbiAgfSxcbiAgbGl2ZVJlbG9hZDogZnVuY3Rpb24gbGl2ZVJlbG9hZCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlO1xuICAgIGxvZy5pbmZvKFwiTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZC5cIik7XG4gIH0sXG4gIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7XG4gICAgbG9nLmluZm8oXCJBcHAgdXBkYXRlZC4gUmVjb21waWxpbmcuLi5cIik7IC8vIEZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLlxuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiSW52YWxpZFwiKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHtcbiAgICBzdGF0dXMucHJldmlvdXNIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoO1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICBsb2dnaW5nOiBzZXRBbGxMb2dMZXZlbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgb3ZlcmxheTogZnVuY3Rpb24gb3ZlcmxheSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLm92ZXJsYXkgPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqL1xuICByZWNvbm5lY3Q6IGZ1bmN0aW9uIHJlY29ubmVjdCh2YWx1ZSkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5yZWNvbm5lY3QgPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlKSB7XG4gICAgb3B0aW9ucy5wcm9ncmVzcyA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3sgcGx1Z2luTmFtZT86IHN0cmluZywgcGVyY2VudDogbnVtYmVyLCBtc2c6IHN0cmluZyB9fSBkYXRhXG4gICAqL1xuICBcInByb2dyZXNzLXVwZGF0ZVwiOiBmdW5jdGlvbiBwcm9ncmVzc1VwZGF0ZShkYXRhKSB7XG4gICAgaWYgKG9wdGlvbnMucHJvZ3Jlc3MpIHtcbiAgICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSA/IFwiW1wiLmNvbmNhdChkYXRhLnBsdWdpbk5hbWUsIFwiXSBcIikgOiBcIlwiKS5jb25jYXQoZGF0YS5wZXJjZW50LCBcIiUgLSBcIikuY29uY2F0KGRhdGEubXNnLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiUHJvZ3Jlc3NcIiwgZGF0YSk7XG4gIH0sXG4gIFwic3RpbGwtb2tcIjogZnVuY3Rpb24gc3RpbGxPaygpIHtcbiAgICBsb2cuaW5mbyhcIk5vdGhpbmcgY2hhbmdlZC5cIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJTdGlsbE9rXCIpO1xuICB9LFxuICBvazogZnVuY3Rpb24gb2soKSB7XG4gICAgc2VuZE1lc3NhZ2UoXCJPa1wiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgLy8gVE9ETzogcmVtb3ZlIGluIHY1IGluIGZhdm9yIG9mICdzdGF0aWMtY2hhbmdlZCdcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVcbiAgICovXG4gIFwiY29udGVudC1jaGFuZ2VkXCI6IGZ1bmN0aW9uIGNvbnRlbnRDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVcbiAgICovXG4gIFwic3RhdGljLWNoYW5nZWRcIjogZnVuY3Rpb24gc3RhdGljQ2hhbmdlZChmaWxlKSB7XG4gICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZmlsZSA/IFwiXFxcIlwiLmNvbmNhdChmaWxlLCBcIlxcXCJcIikgOiBcIkNvbnRlbnRcIiwgXCIgZnJvbSBzdGF0aWMgZGlyZWN0b3J5IHdhcyBjaGFuZ2VkLiBSZWxvYWRpbmcuLi5cIikpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gd2FybmluZ3NcbiAgICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICAgKi9cbiAgd2FybmluZ3M6IGZ1bmN0aW9uIHdhcm5pbmdzKF93YXJuaW5ncywgcGFyYW1zKSB7XG4gICAgbG9nLndhcm4oXCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuXCIpO1xuXG4gICAgdmFyIHByaW50YWJsZVdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbSA9IGZvcm1hdFByb2JsZW0oXCJ3YXJuaW5nXCIsIGVycm9yKSxcbiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbS5oZWFkZXIsXG4gICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXIsIFwiXFxuXCIpLmNvbmNhdChzdHJpcEFuc2koYm9keSkpO1xuICAgIH0pO1xuXG4gICAgc2VuZE1lc3NhZ2UoXCJXYXJuaW5nc1wiLCBwcmludGFibGVXYXJuaW5ncyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZVdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihwcmludGFibGVXYXJuaW5nc1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzO1xuXG4gICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzKSB7XG4gICAgICBzaG93KFwid2FybmluZ1wiLCBfd2FybmluZ3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnByZXZlbnRSZWxvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcltdfSBlcnJvcnNcbiAgICovXG4gIGVycm9yczogZnVuY3Rpb24gZXJyb3JzKF9lcnJvcnMpIHtcbiAgICBsb2cuZXJyb3IoXCJFcnJvcnMgd2hpbGUgY29tcGlsaW5nLiBSZWxvYWQgcHJldmVudGVkLlwiKTtcblxuICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbTIgPSBmb3JtYXRQcm9ibGVtKFwiZXJyb3JcIiwgZXJyb3IpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtMi5oZWFkZXIsXG4gICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtMi5ib2R5O1xuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKFwiRXJyb3JzXCIsIHByaW50YWJsZUVycm9ycyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZUVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHByaW50YWJsZUVycm9yc1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvckVycm9ycyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7XG5cbiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzKSB7XG4gICAgICBzaG93KFwiZXJyb3JcIiwgX2Vycm9ycyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmluZm8oXCJEaXNjb25uZWN0ZWQhXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiQ2xvc2VcIik7XG4gIH1cbn07XG52YXIgc29ja2V0VVJMID0gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFJlc291cmNlUXVlcnkpO1xuc29ja2V0KHNvY2tldFVSTCwgb25Tb2NrZXRNZXNzYWdlLCBvcHRpb25zLnJlY29ubmVjdCk7IiwiJ3VzZSBzdHJpY3QnXG5pbXBvcnQgSG9tZSBmcm9tICcuL3BhZ2VzL2hvbWUnXG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9wYWdlcy9hYm91dCdcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSAnLi9jb21wb25lbnRzL1ByZWxvYWRlcidcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uJ1xuaW1wb3J0IENhbnZhcyBmcm9tICcuL2FuaW1hdGlvbi9jYW52YXMnXG5pbXBvcnQgUGxheWVyIGZyb20gJy4vY29tcG9uZW50cy93aWRnZXRzL211c2ljLXBsYXllci9wbGF5ZXInXG5pbXBvcnQgRm9ybUhhbmRsZXIgZnJvbSAnLi9jb25maWcvZm9ybXMnXG5pbXBvcnQgU2VydmljZXMgZnJvbSAnLi9jb21wb25lbnRzL1NlcnZpY2VzJ1xuaW1wb3J0IHsgJEFsbCwgJCB9IGZyb20gJy4vdXRpbHMvc2VsZWN0b3JzJ1xuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5pbml0KClcbiAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXG4gICAgdGhpcy5pbml0TmF2aWdhdGlvbigpXG4gICAgdGhpcy5nZXRDb250ZW50KClcbiAgICB0aGlzLmluaXRQYWdlcygpXG4gICAgdGhpcy5jb25maWcoKVxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcigpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoKVxuICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcigpXG4gIH1cblxuICBjcmVhdGVQcmVsb2FkZXIgKCkge1xuICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcigpXG4gICAgdGhpcy5wcmVsb2FkZXIub25jZSgnY29tcGxldGVkJywgKF8pID0+IHRoaXMub25QcmVsb2FkRW5kKCkpXG4gIH1cblxuICBvblByZWxvYWRFbmQgKCkge1xuICAgIHRoaXMucHJlbG9hZGVyLmRlc3Ryb3koKVxuICB9XG5cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKVxuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcbiAgfVxuXG4gIGluaXRQYWdlcyAoKSB7XG4gICAgdGhpcy5wYWdlcyA9IHtcbiAgICAgIGhvbWU6IG5ldyBIb21lKCksXG4gICAgICBhYm91dDogbmV3IEFib3V0KClcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKVxuICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV1cblxuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLmNyZWF0ZSgpKSB7XG4gICAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICB9XG4gIH1cblxuICBpbml0TmF2aWdhdGlvbiAoKSB7XG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKVxuICB9XG5cbiAgY29uZmlnICgpIHtcbiAgICB0aGlzLmZvcm1IYW5kbGVyID0gbmV3IEZvcm1IYW5kbGVyKCdjb25uZWN0JywgJ2Nvbm5lY3QnLCAnUE9TVCcpXG4gICAgdGhpcy5zZXJ2aWNlcyA9IG5ldyBTZXJ2aWNlcygpXG4gIH1cblxuICBhc3luYyBvbkNoYW5nZSAoeyB1cmwgfSkge1xuICAgIGF3YWl0IHRoaXMucGFnZS5oaWRlKClcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHdpbmRvdy5mZXRjaCh1cmwpXG5cbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVzLnRleHQoKVxuXG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwpXG5cbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFxuXG4gICAgICBjb25zdCBkaXZDb250ZW50ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcbiAgICAgIHRoaXMudGVtcGxhdGUgPSBkaXZDb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpXG4gICAgICB0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUxcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKVxuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpXG4gICAgICB0aGlzLnBhZ2Uuc2hvdygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yOiAnICsgcmVzKVxuICAgIH1cbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXIgKCkge1xuICAgIGNvbnN0IGxpbmtzID0gJEFsbCgnW2RhdGEtbGlua3NdJylcbiAgICBsaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgY29uc3QgeyBocmVmIH0gPSBsaW5rXG4gICAgICBjb25zdCBsaW5rRGF0YSA9IGhyZWYuc3BsaXQoJyMnKVxuICAgICAgY29uc3QgW3VybCwgaGFzaF0gPSBsaW5rRGF0YVxuXG4gICAgICBpZiAobGluay5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGlua3MnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIGxpbmsub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgaWYgKHVybCA9PT0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHJldHVyblxuICAgICAgICAgIHRoaXMub25DaGFuZ2UoeyB1cmw6IGhyZWYgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluay5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBpZiAodXJsID09PSB3aW5kb3cubG9jYXRpb24uaHJlZikgcmV0dXJuXG4gICAgICAgICAgdGhpcy5vbkNoYW5nZSh7IHVybCB9KVxuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzY3JvbGxUb0VsZW1lbnQoaGFzaClcbiAgICAgICAgICB9LCAzMDApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG9FbGVtZW50IChjbGFzc05hbWUpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSAkKGAuJHtjbGFzc05hbWV9YClcbiAgICAgIGNvbnN0IHRvcCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oeyB0b3AgfSlcbiAgICB9XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xubmV3IEFwcCgpXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOlsiU2hhcGVzIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsImhlaWdodCIsIndpZHRoIiwiYmx1ciIsImJhY2tncm91bmQiLCJ0b3AiLCJ1bmRlZmluZWQiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ3aW5kb3dXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbml0IiwiY3JlYXRlU2hhcGUiLCJvbldpbmRvd1Jlc2l6ZSIsImV2ZW50cyIsInNoYXBlRnJhbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpZCIsInRlc3RCcmVha3BvaW50Iiwic3R5bGUiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhbmltc2hhcGVzIiwiYW5pbWF0aW9uQXJyIiwiaW5kZXgiLCJhbmltRmxvdyIsInNldEludGVydmFsIiwibGVuZ3RoIiwidG8iLCJmaWx0ZXIiLCJtb3VudFNoYXBlIiwicGFyZW50IiwiYXBwZW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJDb21wb25lbnRzIiwiJCIsIkNhbnZhcyIsImlzTW91bnRlZCIsInNoYXBlR3JhZGllbnQiLCJtb3VudEZyYW1lIiwic2hhcGUxIiwic2hhcGUyIiwiY3JlYXRlRnJhbWUiLCJmcmFtZSIsImlubmVySGVpZ2h0IiwiekluZGV4IiwiYm9keSIsImV2ZW50TGlzdGVuZXIiLCJvblJlc2l6ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIm1vdW50ZWRGcmFtZSIsIkV2ZW50RW1pdHRlciIsIiRBbGwiLCJjb21wb25lbnROYW1lIiwic2VsZWN0b3JzIiwicHJlbG9hZGVyIiwiZWxlbWVudCIsInRleHQiLCJjb250YWluZXIiLCJsb2FkZXIiLCJ3cmFwcGVyIiwibmF2aWdhdGlvbiIsImhlYWRlciIsIm5hdkxpc3QiLCJwcmV2aWV3SW1nIiwiY29udGVudCIsIm9wZW5NZW51IiwiY2xvc2VNZW51IiwicGxheWVyIiwiYnV0dG9uIiwiZXhwYW5kIiwiY2xvc2UiLCJwbGF5IiwibmV4dCIsInByZXYiLCJjb3ZlckNvbnRhaW5lciIsImNvdmVyIiwic2VsZiIsIm1lZGlhIiwiYXJ0aXN0IiwidGl0bGUiLCJ0aW1lciIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJyYW5nZSIsInByb2dyZXNzIiwicHJlbG9hZCIsInZvbHVtZSIsImdyYXBwZXIiLCJzbGlkZXIiLCJmb3JtIiwiY29ubmVjdCIsIm5hbWUiLCJtYWlsIiwibWVzc2FnZSIsIm5hbWVBbGVydCIsImVtYWlsQWxlcnQiLCJtZXNzYWdlQWxlcnQiLCJhbGVydCIsIm1vZGFsIiwiaXRlbXMiLCJzZXJ2aWNlcyIsImJ1dHRvbnMiLCJpbWFnZXMiLCJlbGVtZW50cyIsIlNtb290aHNjcm9sbCIsIkdTQVAiLCJQYWdlcyIsImRldmljZSIsIm1vYmlsZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0YWJsZXQiLCJjcmVhdGUiLCJvdmVyZmxvdyIsInNtb290c2Nyb2xsIiwiZGlyZWN0aW9uIiwic21vb3RoIiwic2hvdyIsImNvbnNvbGUiLCJsb2ciLCJoaWRlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhbmltYXRlT3V0IiwidGltZWxpbmUiLCJhdXRvQWxwaGEiLCJvbkNvbXBsZXRlIiwiQWxlcnQiLCJ0eXBlIiwiZGl2IiwiY2xhc3NMaXN0IiwiYWRkIiwiaWNvbiIsImlubmVyVGV4dCIsImNsb3NlSWNvbiIsImkiLCJvbmNsaWNrIiwiZGVzdHJveSIsInByZXBlbmQiLCJ0YWciLCJzZXRUaW1lb3V0IiwidHJhbnNpdGlvbiIsInJlbW92ZUNoaWxkIiwiTmF2aWdhdGlvbiIsImV2ZW50c0xpc3RlbmVyIiwiZGVmYXVsdFNvdXJjZSIsInNyYyIsIm9uTW91c2VIb3ZlckxpbmtzIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZSIsImZvckVhY2giLCJsaW5rIiwiaW1hZ2VzTG9hZGVkIiwiUHJlbG9hZGVyIiwic3RhcnRJbmRleCIsInNpemUiLCJOdW1iZXIiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRXaWR0aCIsImdhcCIsImNyZWF0ZVByZWxvYWRlciIsImltZ0xvYWQiLCJvbiIsIl8iLCJvblByb2dyZXNzIiwib25Mb2FkIiwiYW5pbVByZWxvYWRlclRleHQiLCJjaGlsZHJlbiIsInBlcmNlbnQiLCJNYXRoIiwicm91bmQiLCJlbWl0IiwicGFyZW50Tm9kZSIsIlNlcnZpY2VzIiwib25DbGljayIsImNsb3NlTW9kYWwiLCJjb250YWlucyIsIlNsaWRlciIsImNoaWxkIiwicGFkZGluZyIsImN1cnJlbnRQb3NpdGlvbiIsInRyZXNob2xkIiwiZHJhZ0ludGVydmFsbCIsInNldENoaWxkV2lkdGgiLCJzZXRQb3NpdGlvbiIsIml0ZW0iLCJmbGV4IiwidHJhbnNmb3JtIiwib25Nb3VzZURvd24iLCJpc0Rvd24iLCJkcmFnU3RhcnQiLCJ4IiwiZHJhZ1N0YXJ0eSIsInkiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsImRhdGEiLCJyZXF1aXJlIiwiTWVkaWFNYW5hZ2VyIiwiVGltZXIiLCJzdGFydHRpbWUiLCJlbmR0aW1lIiwiaXNQbGF5IiwiY3VycmVudFRpbWUiLCJvblBhdXNlIiwiaXNFbmRlZCIsImNiIiwic2V0VGltZSIsImhvdXJzIiwiZmxvb3IiLCJtaW51dGVzIiwic2Vjb25kcyIsImhvdXJzVmFsdWUiLCJtaW51dGVzVmFsdWUiLCJzZWNvbmRzVmFsdWUiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZVByb2dyZXNzIiwidmFsdWUiLCJyYXRpbyIsIm1heCIsInNldEZ1bGxUaW1lIiwiZHVyYXRpb24iLCJvblRpbWVDaGFuZ2UiLCJidWZmZXJlZCIsInN0YXJ0IiwiZW5kIiwibWV0YURhdGFMb2FkZWQiLCJWb2x1bWUiLCJQbGF5ZXIiLCJpc0V4cGFuZCIsInJhbmRvbUlkIiwic291bmQiLCJxdWVyeVNlbGVjdG9yIiwibWVkaWFNYW5hZ2VyIiwicmFuZG9tIiwiY29tcG9uZW50c0hhbmRsZXIiLCJldmVudHNMaXN0ZXJuZXIiLCJzZXRDb21wb25lbnRzIiwidGltZXJIYW5kbGVyIiwiY292ZXJIYW5kbGVyIiwidm9sdW1lSGFuZGxlciIsInNldFNvdW5kRGV0YWlscyIsImFsYnVtIiwiZGF0YXNldCIsInNldEF0dHJpYnV0ZSIsInBhdXNlIiwic3RvcCIsInRpbWUiLCJjb250YWluZXJCb3R0b20iLCJjb250YWluZXJIZWlnaHQiLCJjb250YWluZXJUb3AiLCJvblBvaW50ZXJEb3duIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwicGFnZVkiLCJ2YWxpZEVtYWlsIiwiRm9ybUhhbmRsZXIiLCJ1cmwiLCJtZXRob2QiLCJmb3JtVHlwZSIsImxvY2F0aW9uIiwib3JpZ2luIiwidmFsIiwiZmV0Y2giLCJvcHRpb25zIiwibW9kZSIsInJlcyIsInN0YXR1cyIsImpzb24iLCJ0aGVuIiwicmVzZXQiLCJzZW5kRGF0YSIsInZhbGlkTnVtYmVyIiwidmVyaWZ5RGF0YSIsImVsIiwiZm9ybUVsZW1lbnRzIiwiVVJMU2VhcmNoUGFyYW1zIiwiRm9ybURhdGEiLCJBYm91dCIsIkhvbWUiLCJsZXJwIiwiY2xhbXAiLCJub3JtYWxpemVXaGVlbCIsIm9wdHMiLCJkZWZhdWx0T3B0aW9ucyIsInNtb290aE9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJzY3JvbGwiLCJjdXJyZW50IiwidGFyZ2V0IiwibGltaXQiLCJvZmZzZXRIZWlnaHQiLCJhZGRMaXN0ZW5lciIsInVwZGF0ZSIsIm9uTW91c2VXaGVlbCIsImV2ZW50IiwicGl4ZWxZIiwicGl4ZWxYIiwiY2xpZW50SGVpZ2h0IiwidHJhbnNsYXRlQnlDYXNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW1vdW50IiwibWluIiwidmFsaWRGaWxlVHlwZSIsImZpbGUiLCJkb2N1bWVudHMiLCJVcmxFeGlzdCIsImhlYWRlcnMiLCJyZXNwb25zZSIsImVtYWlsIiwicmVnZXgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiJEF0dHJpYnV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhbnNpSFRNTCIsIl9yZWdBTlNJIiwiX2RlZkNvbG9ycyIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJsaWdodGdyZXkiLCJkYXJrZ3JleSIsIl9zdHlsZXMiLCJfb3BlblRhZ3MiLCJfY2xvc2VUYWdzIiwibiIsImFuc2lDb2RlcyIsInJldCIsInJlcGxhY2UiLCJtYXRjaCIsInNlcSIsIm90IiwiaW5kZXhPZiIsInBvcCIsInB1c2giLCJjdCIsImwiLCJBcnJheSIsImpvaW4iLCJzZXRDb2xvcnMiLCJjb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImtleSIsImhleCIsImhhc093blByb3BlcnR5IiwiaXNBcnJheSIsInNvbWUiLCJoIiwiZGVmSGV4Q29sb3IiLCJzbGljZSIsIl9zZXRUYWdzIiwidGFncyIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwib3BlbiIsImNvZGUiLCJjb2xvciIsIm9yaUNvbG9yIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsImdsb2JhbCIsImZhY3RvcnkiLCJFdkVtaXR0ZXIiLCJwcm90byIsInByb3RvdHlwZSIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsImluY2x1ZGVzIiwib25jZSIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsIm9uY2VMaXN0ZW5lcnMiLCJvZmYiLCJzcGxpY2UiLCJlbWl0RXZlbnQiLCJhcmdzIiwiaXNPbmNlIiwiYXBwbHkiLCJhbGxPZmYiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwiRnVuY3Rpb24iLCJjYWxsIiwiUmVmbGVjdE93bktleXMiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbmNhdCIsIlByb2Nlc3NFbWl0V2FybmluZyIsIndhcm5pbmciLCJ3YXJuIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsIlR5cGVFcnJvciIsImVudW1lcmFibGUiLCJzZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsImdldE1heExpc3RlbmVycyIsImFyZ3VtZW50cyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwiZXJyIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJhcnJheUNsb25lIiwiX2FkZExpc3RlbmVyIiwibSIsImV4aXN0aW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsIlN0cmluZyIsImVtaXR0ZXIiLCJjb3VudCIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0Iiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0Iiwic3BsaWNlT25lIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJhcnIiLCJjb3B5IiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsInJlc29sdmVyIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJmbGFncyIsIndyYXBMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnc2FwIiwiX2dldFByb3BlcnR5IiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsImdldFVuaXQiLCJfaXNTdHJpbmciLCJfaXNVbmRlZmluZWQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIl9yZWxFeHAiLCJfZm9yRWFjaE5hbWUiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfcGx1Z2lucyIsIkdTQ2FjaGUiLCJQcm9wVHdlZW4iLCJfY29uZmlnIiwiX3RpY2tlciIsIl9yb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX2dldFNldHRlciIsIl9nZXRDYWNoZSIsIl9jb2xvckV4cCIsIl9wYXJzZVJlbGF0aXZlIiwiX3NldERlZmF1bHRzIiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfdGVtcERpdlN0eWxlciIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfcmV2ZXJ0aW5nIiwiX3dpbmRvd0V4aXN0cyIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiUEkiLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2JpZ051bSIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJ0IiwicCIsInMiLCJjIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsIl90aGlzIiwidGZtIiwic3BsaXQiLCJhIiwiX2dldCIsInN2ZyIsInByb3BzIiwiX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyIsInRyYW5zbGF0ZSIsInJlbW92ZVByb3BlcnR5IiwiX3JldmVydFN0eWxlIiwidG9Mb3dlckNhc2UiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwicmV2ZXJ0Iiwic2F2ZSIsIl9zdXBwb3J0czNEIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl9pbml0Q29yZSIsImRvY3VtZW50RWxlbWVudCIsImNzc1RleHQiLCJjb3JlIiwicmV2ZXJ0aW5nIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJvd25lclNWR0VsZW1lbnQiLCJvbGRQYXJlbnQiLCJvbGRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJvbGRDU1MiLCJiYm94IiwiYXBwZW5kQ2hpbGQiLCJkaXNwbGF5IiwiZ2V0QkJveCIsIl9nc2FwQkJveCIsImluc2VydEJlZm9yZSIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwicGx1Z2luIiwiYmVnaW5uaW5nIiwib25seVNldEF0RW5kIiwicHQiLCJfcHQiLCJfcHJvcHMiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZ3JpZCIsIl9jb252ZXJ0VG9Vbml0IiwidW5pdCIsImN1clZhbHVlIiwicGFyc2VGbG9hdCIsImN1clVuaXQiLCJ0cmltIiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsInRhZ05hbWUiLCJtZWFzdXJlUHJvcGVydHkiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsInB4IiwiaXNTVkciLCJfcGFyc2VUcmFuc2Zvcm0iLCJfZmlyc3RUd29Pbmx5Iiwiek9yaWdpbiIsIl9zcGVjaWFsUHJvcHMiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwicHJvcCIsIm1hdGNoSW5kZXgiLCJyZXN1bHQiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiZW5kTnVtIiwiY2h1bmsiLCJlbmRVbml0Iiwic3RhcnRVbml0IiwiZW5kVmFsdWVzIiwiZXhlYyIsInN1YnN0cmluZyIsImxhc3RJbmRleCIsInVuaXRzIiwiX25leHQiLCJyIiwiX2tleXdvcmRUb1BlcmNlbnQiLCJjZW50ZXIiLCJfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyIsIl9yZW5kZXJDbGVhclByb3BzIiwidHdlZW4iLCJfdGltZSIsIl9kdXIiLCJjbGVhclRyYW5zZm9ybXMiLCJjbGVhclByb3BzIiwicHIiLCJfaWRlbnRpdHkyRE1hdHJpeCIsIl9yb3RhdGlvbmFsUHJvcGVydGllcyIsIl9pc051bGxUcmFuc2Zvcm0iLCJfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5IiwibWF0cml4U3RyaW5nIiwibWFwIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJtYXRyaXgiLCJ0ZW1wIiwiYWRkZWRUb0RPTSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImQiLCJmIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJ4T3JpZ2luT2xkIiwieE9yaWdpbiIsInlPcmlnaW5PbGQiLCJ5T3JpZ2luIiwieE9mZnNldE9sZCIsInhPZmZzZXQiLCJ5T2Zmc2V0T2xkIiwieU9mZnNldCIsInR4IiwidHkiLCJvcmlnaW5TcGxpdCIsImRldGVybWluYW50IiwiaW52ZXJ0ZWRTY2FsZVgiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImNvcyIsInNpbiIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsInJvdGF0ZSIsInNxcnQiLCJhYnMiLCJmb3JjZUNTUyIsInhQZXJjZW50Iiwib2Zmc2V0V2lkdGgiLCJ5UGVyY2VudCIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZm9yY2UzRCIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsIl9yZWYyIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsImNoYW5nZSIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsInN0YXJ0Q2FjaGUiLCJleGNsdWRlIiwiZW5kQ2FjaGUiLCJzaWRlIiwidmFycyIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInN0YXJ0QXQiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsInJlbmRlciIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJ1dGlscyIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsInBvc2l0aW9uQW5kU2NhbGUiLCJvdGhlcnMiLCJhbGwiLCJyZWdpc3RlclBsdWdpbiIsImRlZmF1bHQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsImF1dG9TbGVlcCIsIm51bGxUYXJnZXRXYXJuIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsIm92ZXJ3cml0ZSIsImRlbGF5IiwiX3N1cHByZXNzT3ZlcndyaXRlcyIsIl9jb250ZXh0IiwiX3RpbnlOdW0iLCJfMlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0IiwiX2NvcyIsIl9zaW4iLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlSW5pdHRlZCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9jb3JlUmVhZHkiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiX3dhcm4iLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJvYmoiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsInRvQXJyYXkiLCJ2IiwibmFtZXMiLCJmdW5jIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJhbmltYXRpb24iLCJmb3JjZSIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsImRlZmF1bHRzIiwiX3NldEtleWZyYW1lRGVmYXVsdHMiLCJleGNsdWRlRHVyYXRpb24iLCJiYXNlIiwidG9NZXJnZSIsIl9tZXJnZURlZXAiLCJfY29weUV4Y2x1ZGluZyIsImV4Y2x1ZGluZyIsIl9pbmhlcml0RGVmYXVsdHMiLCJrZXlmcmFtZXMiLCJpbmhlcml0IiwiX2RwIiwiX2FycmF5c01hdGNoIiwiYTEiLCJhMiIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX3N0YXJ0IiwiX2RpcnR5IiwiX3JlY2FjaGVBbmNlc3RvcnMiLCJ0b3RhbER1cmF0aW9uIiwiX3Jld2luZFN0YXJ0QXQiLCJ0b3RhbFRpbWUiLCJfc3RhcnRBdCIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3REdXIiLCJfc2V0RW5kIiwiX3J0cyIsIl9hbGlnblBsYXloZWFkIiwic21vb3RoQ2hpbGRUaW1pbmciLCJfcG9zdEFkZENoZWNrcyIsIl9pbml0dGVkIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImxhenkiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJwcmV2UmF0aW8iLCJyZXBlYXREZWxheSIsIml0ZXJhdGlvbiIsInByZXZJdGVyYXRpb24iLCJfeW95byIsInJlcGVhdFJlZnJlc2giLCJpbnZhbGlkYXRlIiwiX2Zyb20iLCJfb25VcGRhdGUiLCJfY2FsbGJhY2siLCJfcHJvbSIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJwcmV2VGltZSIsIl9maXJzdCIsIl9sYXN0IiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwicmVwZWF0IiwiZHVyIiwidG90YWxQcm9ncmVzcyIsIl9vblVwZGF0ZVRvdGFsRHVyYXRpb24iLCJUaW1lbGluZSIsIl96ZXJvUG9zaXRpb24iLCJwZXJjZW50QW5pbWF0aW9uIiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwiaXJWYXJzIiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsInNlbGVjdG9yIiwiX3dha2UiLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsInNvcnQiLCJkaXN0cmlidXRlIiwiZWFjaCIsImVhc2UiLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJlZGdlcyIsImRpc3RhbmNlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiaiIsIndyYXBBdCIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImNsb3Nlc3QiLCJkeCIsImR5Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJtYXBSYW5nZSIsIl93cmFwQXJyYXkiLCJ3cmFwIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJtdXRhdGUiLCJtYXN0ZXIiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsImxhYmVsIiwiZXhlY3V0ZUxhenlGaXJzdCIsImNhbGxiYWNrIiwicHJldkNvbnRleHQiLCJfY3R4IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwia2lsbCIsIl9xdWlja1R3ZWVuIiwiX2NyZWF0ZVBsdWdpbiIsImNvbmZpZyIsImlzRnVuYyIsIlBsdWdpbiIsImluc3RhbmNlRGVmYXVsdHMiLCJfa2lsbFByb3BUd2VlbnNPZiIsIm1vZGlmaWVyIiwiX2FkZFBsdWdpbk1vZGlmaWVyIiwicmF3VmFycyIsInN0YXRpY3MiLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJtYXJvb24iLCJ0ZWFsIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwicGluayIsInRyYW5zcGFyZW50IiwiX2h1ZSIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsIl9jb2xvck9yZGVyRGF0YSIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsInNoZWxsIiwiUmVnRXhwIiwiX2hzbEV4cCIsImNvbWJpbmVkIiwiX3RpY2tlckFjdGl2ZSIsIl9nZXRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2lkIiwiX3JlcSIsIl9yYWYiLCJfc2VsZiIsIl9kZWx0YSIsIl9pIiwiX3RpY2siLCJlbGFwc2VkIiwibWFudWFsIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwibGFnU21vb3RoaW5nIiwidGhyZXNob2xkIiwiYWRqdXN0ZWRMYWciLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl92YWx1ZUluUGFyZW50aGVzZXMiLCJuZXN0ZWQiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfQ0UiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJ5b3lvRWFzZSIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwibjEiLCJuMiIsIm4zIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiQW5pbWF0aW9uIiwiSW5maW5pdHkiLCJ5b3lvIiwiX3Byb3RvIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIl9wcyIsInBhdXNlZCIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJyZXZlcnNlZCIsInJldmVyc2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpc0FjdGl2ZSIsImV2ZW50Q2FsbGJhY2siLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfQW5pbWF0aW9uIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsImZyb21UbyIsImZyb21WYXJzIiwidG9WYXJzIiwiZGVsYXllZENhbGwiLCJzdGFnZ2VyVG8iLCJzdGFnZ2VyIiwib25Db21wbGV0ZUFsbCIsIm9uQ29tcGxldGVBbGxQYXJhbXMiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIm9uVXBkYXRlIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJnZXRCeUlkIiwiYW5pbWF0aW9ucyIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwidGwiLCJfdmFycyIsIl9vblN0YXJ0Iiwib25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJpbml0dGVkIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwiY2xlYXIiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiaGFzUmFuZG9tIiwiZnAiLCJvcHRpb25hbCIsImN1cnJlbnRWYWx1ZSIsInBhcnNlZFN0YXJ0IiwiX3NldHRlclBsYWluIiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9mb3JjZUFsbFByb3BUd2VlbnMiLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9wcm9jZXNzVmFycyIsIl9wYXJzZUZ1bmNPclN0cmluZyIsInB0TG9va3VwIiwicHJpb3JpdHkiLCJvblVwZGF0ZVBhcmFtcyIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJfcHRDYWNoZSIsIl9vcCIsIl9vbkluaXQiLCJfdXBkYXRlUHJvcFR3ZWVucyIsInN0YXJ0SXNSZWxhdGl2ZSIsInB0Q2FjaGUiLCJyb290UFQiLCJsb29rdXAiLCJfYWRkQWxpYXNlc1RvVmFycyIsInByb3BlcnR5QWxpYXNlcyIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiX3RoaXMzJHZhcnMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJyZXNldFRvIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsImxhc3QiLCJyZW5kZXJlciIsIl9wcm90bzQiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwiYW55TWF0Y2giLCJ0b2dnbGVkIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwiY29uZCIsIm1xIiwiYWN0aXZlIiwiX2xlbjIiLCJfa2V5MiIsImdldFByb3BlcnR5IiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsImdldENhY2hlIiwidG9BZGQiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJfZ2V0UGx1Z2luUHJvcFR3ZWVuIiwiX2FkZE1vZGlmaWVycyIsIm1vZGlmaWVycyIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZ3NhcFdpdGhDU1MiLCJUd2Vlbk1heFdpdGhDU1MiLCJfX2Fzc2lnbiIsIm5hbWVkX3JlZmVyZW5jZXNfMSIsIm51bWVyaWNfdW5pY29kZV9tYXBfMSIsInN1cnJvZ2F0ZV9wYWlyc18xIiwiYWxsTmFtZWRSZWZlcmVuY2VzIiwibmFtZWRSZWZlcmVuY2VzIiwiaHRtbDUiLCJlbmNvZGVSZWdFeHBzIiwic3BlY2lhbENoYXJzIiwibm9uQXNjaWkiLCJub25Bc2NpaVByaW50YWJsZSIsImV4dGVuc2l2ZSIsImRlZmF1bHRFbmNvZGVPcHRpb25zIiwibGV2ZWwiLCJudW1lcmljIiwiZW5jb2RlIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsImVuY29kZVJlZ0V4cCIsInJlZmVyZW5jZXMiLCJjaGFyYWN0ZXJzIiwiaXNIZXgiLCJyZXN1bHRfMSIsImNvZGVfMSIsImdldENvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJkZWZhdWx0RGVjb2RlT3B0aW9ucyIsInN0cmljdCIsImF0dHJpYnV0ZSIsImJhc2VEZWNvZGVSZWdFeHBzIiwieG1sIiwiYm9keVJlZ0V4cHMiLCJodG1sNCIsImRlY29kZVJlZ0V4cHMiLCJmcm9tQ2hhckNvZGUiLCJvdXRPZkJvdW5kc0NoYXIiLCJkZWZhdWx0RGVjb2RlRW50aXR5T3B0aW9ucyIsImRlY29kZUVudGl0eSIsImVudGl0eSIsImRlY29kZUVudGl0eUxhc3RDaGFyXzEiLCJkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xIiwiZW50aXRpZXMiLCJkZWNvZGVTZWNvbmRDaGFyXzEiLCJkZWNvZGVDb2RlXzEiLCJmcm9tQ29kZVBvaW50IiwibnVtZXJpY1VuaWNvZGVNYXAiLCJkZWNvZGUiLCJkZWNvZGVSZWdFeHAiLCJpc0F0dHJpYnV0ZSIsImlzU3RyaWN0IiwicmVwbGFjZU1hdGNoXzEiLCJyZXBsYWNlUmVzdWx0XzEiLCJyZXBsYWNlTGFzdEluZGV4XzEiLCJyZXBsYWNlSW5wdXRfMSIsImRlY29kZVJlc3VsdF8xIiwiZGVjb2RlRW50aXR5TGFzdENoYXJfMiIsImRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIiLCJkZWNvZGVTZWNvbmRDaGFyXzIiLCJkZWNvZGVDb2RlXzIiLCJmaiIsImFzdHJhbENvZGVQb2ludCIsImNvZGVQb2ludEF0IiwiaW5wdXQiLCJoaWdoU3Vycm9nYXRlRnJvbSIsImhpZ2hTdXJyb2dhdGVUbyIsImpRdWVyeSIsIm1ha2VBcnJheSIsImlzQXJyYXlMaWtlIiwiSW1hZ2VzTG9hZGVkIiwiZWxlbSIsIm9uQWx3YXlzIiwicXVlcnlFbGVtIiwiZ2V0SW1hZ2VzIiwianFEZWZlcnJlZCIsIkRlZmVycmVkIiwiY2hlY2siLCJhZGRFbGVtZW50SW1hZ2VzIiwiZWxlbWVudE5vZGVUeXBlcyIsIm5vZGVOYW1lIiwiYWRkSW1hZ2UiLCJhZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyIsImNoaWxkSW1ncyIsImltZyIsInJlVVJMIiwiYmFja2dyb3VuZEltYWdlIiwiYWRkQmFja2dyb3VuZCIsImxvYWRpbmdJbWFnZSIsIkxvYWRpbmdJbWFnZSIsIkJhY2tncm91bmQiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJjb21wbGV0ZSIsImltYWdlIiwiaXNMb2FkZWQiLCJub3RpZnkiLCJkZWJ1ZyIsImlzQ29tcGxldGUiLCJqcU1ldGhvZCIsImdldElzSW1hZ2VDb21wbGV0ZSIsImNvbmZpcm0iLCJuYXR1cmFsV2lkdGgiLCJwcm94eUltYWdlIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsImN1cnJlbnRTcmMiLCJoYW5kbGVFdmVudCIsIm9ubG9hZCIsInVuYmluZEV2ZW50cyIsIm9uZXJyb3IiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwiZm4iLCJpbnN0YW5jZSIsInByb21pc2UiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImF0dGFjaEV2ZW50IiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiX3BvcHVsYXRlZCIsIl9pZSIsIl9maXJlZm94IiwiX29wZXJhIiwiX3dlYmtpdCIsIl9jaHJvbWUiLCJfaWVfcmVhbF92ZXJzaW9uIiwiX29zeCIsIl93aW5kb3dzIiwiX2xpbnV4IiwiX2FuZHJvaWQiLCJfd2luNjQiLCJfaXBob25lIiwiX2lwYWQiLCJfbmF0aXZlIiwiX21vYmlsZSIsIl9wb3B1bGF0ZSIsInVhcyIsImFnZW50Iiwib3MiLCJOYU4iLCJkb2N1bWVudE1vZGUiLCJ0cmlkZW50IiwidmVyIiwiVXNlckFnZW50X0RFUFJFQ0FURUQiLCJpZSIsImllQ29tcGF0aWJpbGl0eU1vZGUiLCJpZTY0IiwiZmlyZWZveCIsIm9wZXJhIiwid2Via2l0Iiwic2FmYXJpIiwiY2hyb21lIiwid2luZG93cyIsIm9zeCIsImxpbnV4IiwiaXBob25lIiwibmF0aXZlQXBwIiwiYW5kcm9pZCIsImlwYWQiLCJ1c2VIYXNGZWF0dXJlIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiaXNFdmVudFN1cHBvcnRlZCIsImV2ZW50TmFtZVN1ZmZpeCIsImNhcHR1cmUiLCJpc1N1cHBvcnRlZCIsIlBJWEVMX1NURVAiLCJMSU5FX0hFSUdIVCIsIlBBR0VfSEVJR0hUIiwic1giLCJzWSIsInBYIiwicFkiLCJkZXRhaWwiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJnZXRFdmVudFR5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiV2ViU29ja2V0Q2xpZW50IiwiY2xpZW50IiwiV2ViU29ja2V0Iiwib25PcGVuIiwib25vcGVuIiwib25DbG9zZSIsIm9uY2xvc2UiLCJvbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2xpZW50VGFwYWJsZVN5bmNCYWlsSG9vayIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYXJyMiIsIkxvZ1R5cGUiLCJmcmVlemUiLCJpbmZvIiwidHJhY2UiLCJncm91cCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJwcm9maWxlIiwicHJvZmlsZUVuZCIsIkxPR19TWU1CT0wiLCJUSU1FUlNfU1lNQk9MIiwiVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MIiwiV2VicGFja0xvZ2dlciIsImdldENoaWxkTG9nZ2VyIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJfbGVuNSIsIl9rZXk1IiwiYXNzZXJ0IiwiYXNzZXJ0aW9uIiwiX2xlbjYiLCJfa2V5NiIsIl9sZW43IiwiX2tleTciLCJfbGVuOCIsIl9rZXk4IiwiX2xlbjkiLCJfa2V5OSIsIl9sZW4xMCIsIl9rZXkxMCIsIk1hcCIsInByb2Nlc3MiLCJocnRpbWUiLCJ0aW1lTG9nIiwidGltZUVuZCIsImRlbGV0ZSIsInRpbWVBZ2dyZWdhdGUiLCJ0aW1lQWdncmVnYXRlRW5kIiwiTG9nZ2VyIiwiX191bnVzZWRfd2VicGFja19leHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9yZXF1aXJlIiwiZmlsdGVyVG9GdW5jdGlvbiIsInJlZ0V4cCIsImlkZW50IiwiTG9nTGV2ZWwiLCJmYWxzZSIsInRydWUiLCJ2ZXJib3NlIiwiX3JlZiRsZXZlbCIsIl9yZWYkZGVidWciLCJkZWJ1Z0ZpbHRlcnMiLCJsb2dsZXZlbCIsImxvZ2dlciIsImxhYmVsZWRBcmdzIiwibXMiLCJtc2ciLCJsb2dUaW1lIiwiX2V4dGVuZHMiLCJTeW5jQmFpbEhvb2siLCJjcmVhdGVDb25zb2xlTG9nZ2VyIiwiY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zIiwiY3VycmVudERlZmF1bHRMb2dnZXIiLCJnZXRMb2dnZXIiLCJob29rcyIsImNoaWxkTmFtZSIsImNvbmZpZ3VyZURlZmF1bHRMb2dnZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImRlZmluaXRpb24iLCJ0b1N0cmluZ1RhZyIsIl9fd2VicGFja19leHBvcnRzX18iLCJ3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9fd2VicGFja19leHBvcnRfdGFyZ2V0X18iLCJfX2VzTW9kdWxlIiwiX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18iLCJzdHJpcEFuc2kiLCJhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJzdHJpbmciLCJhbnNpUmVnZXgiLCJfcmVmJG9ubHlGaXJzdCIsIm9ubHlGaXJzdCIsInBhdHRlcm4iLCJzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJpZnJhbWVDb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyRWxlbWVudCIsIm9uTG9hZFF1ZXVlIiwiY3JlYXRlQ29udGFpbmVyIiwiYm9yZGVyIiwiY29udGVudERvY3VtZW50IiwiYm94U2l6aW5nIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwid2hpdGVTcGFjZSIsImhlYWRlckVsZW1lbnQiLCJjbG9zZUJ1dHRvbkVsZW1lbnQiLCJmb250V2VpZ2h0IiwiY3Vyc29yIiwiY3NzRmxvYXQiLCJzdHlsZUZsb2F0IiwiZW5zdXJlT3ZlcmxheUV4aXN0cyIsImZvcm1hdFByb2JsZW0iLCJtb2R1bGVOYW1lIiwibG9jIiwibWVzc2FnZXMiLCJlbnRyeUVsZW1lbnQiLCJ0eXBlRWxlbWVudCIsIl9mb3JtYXRQcm9ibGVtIiwibWVzc2FnZVRleHROb2RlIiwiaW5uZXJIVE1MIiwiQ2xpZW50IiwiX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18iLCJyZXRyaWVzIiwibWF4UmV0cmllcyIsInNvY2tldCIsImluaXRTb2NrZXQiLCJoYW5kbGVycyIsInJlY29ubmVjdCIsInJldHJ5SW5NcyIsIkpTT04iLCJwYXJzZSIsIm9ialVSTCIsInByb3RvY29sIiwiYXV0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInNsYXNoZXMiLCJzZWFyY2giLCJoYXNoIiwiY3JlYXRlU29ja2V0VVJMIiwicGFyc2VkVVJMIiwiaXNJbkFkZHJBbnkiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0Iiwic29ja2V0VVJMUGF0aG5hbWUiLCJmcm9tQ3VycmVudFNjcmlwdCIsImdldEN1cnJlbnRTY3JpcHRTb3VyY2UiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0RWxlbWVudHMiLCJzY3JpcHRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwiZGVmYXVsdExldmVsIiwic2V0TG9nTGV2ZWwiLCJwYXJzZVVSTCIsInJlc291cmNlUXVlcnkiLCJzZWFyY2hQYXJhbXMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2NyaXB0U291cmNlIiwic2NyaXB0U291cmNlVVJMIiwiVVJMIiwiaHJlZiIsImhvdEVtaXR0ZXIiLCJyZWxvYWRBcHAiLCJob3QiLCJsaXZlUmVsb2FkIiwiaXNVbmxvYWRpbmciLCJjdXJyZW50SGFzaCIsInByZXZpb3VzSGFzaCIsImlzSW5pdGlhbCIsImFwcGx5UmVsb2FkIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJjbGVhckludGVydmFsIiwicmVsb2FkIiwiYWxsb3dUb0hvdCIsImFsbG93VG9MaXZlUmVsb2FkIiwicG9zdE1lc3NhZ2UiLCJzZW5kTXNnIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJsb2dMZXZlbCIsImR1bW15Iiwic2hvdWxkTG9nIiwibG9nR3JvdXAiLCJsb2dGbiIsImZvcm1hdEVycm9yIiwic3RhY2siLCJ3ZWJwYWNrSG90TG9nIiwic2VuZE1lc3NhZ2UiLCJfX3dlYnBhY2tfaGFzaF9fIiwib3ZlcmxheSIsInBhcnNlZFJlc291cmNlUXVlcnkiLCJfX3Jlc291cmNlUXVlcnkiLCJsb2dnaW5nIiwic2V0QWxsTG9nTGV2ZWwiLCJvblNvY2tldE1lc3NhZ2UiLCJpbnZhbGlkIiwiX2hhc2giLCJwcm9ncmVzc1VwZGF0ZSIsInN0aWxsT2siLCJvayIsImNvbnRlbnRDaGFuZ2VkIiwic3RhdGljQ2hhbmdlZCIsIndhcm5pbmdzIiwiX3dhcm5pbmdzIiwicHJpbnRhYmxlV2FybmluZ3MiLCJuZWVkU2hvd092ZXJsYXlGb3JXYXJuaW5ncyIsInByZXZlbnRSZWxvYWRpbmciLCJlcnJvcnMiLCJfZXJyb3JzIiwicHJpbnRhYmxlRXJyb3JzIiwiX2Zvcm1hdFByb2JsZW0yIiwibmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzIiwiX2Vycm9yIiwic29ja2V0VVJMIiwiQXBwIiwiaW5pdE5hdmlnYXRpb24iLCJnZXRDb250ZW50IiwiaW5pdFBhZ2VzIiwiY2FudmFzIiwib25QcmVsb2FkRW5kIiwidGVtcGxhdGUiLCJwYWdlcyIsImhvbWUiLCJhYm91dCIsInBhZ2UiLCJmb3JtSGFuZGxlciIsIm9uQ2hhbmdlIiwiaHRtbCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkaXZDb250ZW50Iiwic2Nyb2xsVG8iLCJsaW5rcyIsImxpbmtEYXRhIiwic2Nyb2xsVG9FbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==